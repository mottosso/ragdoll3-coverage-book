(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __esm = (fn3, res) => function __init() {
    return fn3 && (res = (0, fn3[__getOwnPropNames(fn3)[0]])(fn3 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../../../node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "../../../node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: self.console,
        WebSocket: self.WebSocket
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "../../../node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "../../../node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => (/* @__PURE__ */ new Date()).getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        // Private
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // ../../../node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "../../../node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "../../../node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${protocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        // Private
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              return this.subscriptions.notify(identifier, "connected");
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // ../../../node_modules/@rails/actioncable/src/subscription.js
  var extend, Subscription;
  var init_subscription = __esm({
    "../../../node_modules/@rails/actioncable/src/subscription.js"() {
      extend = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }
        // Perform a channel action with the optional data passed as an attribute
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "../../../node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s) => s !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // ../../../node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "../../../node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        // Private
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s) => s !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s) => s.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a = document.createElement("a");
      a.href = url;
      a.href = a.href;
      a.protocol = a.protocol.replace("http", "ws");
      return a.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "../../../node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
      };
    }
  });

  // ../../../node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "../../../node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // ../../../node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../../../node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal;
    }
  });

  // ../../../node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../../../node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module2.exports = root;
    }
  });

  // ../../../node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../../../node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module2.exports = Symbol2;
    }
  });

  // ../../../node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "../../../node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      module2.exports = arrayMap;
    }
  });

  // ../../../node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "../../../node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray = Array.isArray;
      module2.exports = isArray;
    }
  });

  // ../../../node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../../../node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module2.exports = getRawTag;
    }
  });

  // ../../../node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../../../node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module2.exports = objectToString;
    }
  });

  // ../../../node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../../../node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module2.exports = baseGetTag;
    }
  });

  // ../../../node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../../../node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike;
    }
  });

  // ../../../node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../../../node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module2.exports = isSymbol;
    }
  });

  // ../../../node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "../../../node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module2.exports = baseToString;
    }
  });

  // ../../../node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "../../../node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString = require_baseToString();
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      module2.exports = toString;
    }
  });

  // ../../../node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS({
    "../../../node_modules/lodash/_baseSlice.js"(exports2, module2) {
      function baseSlice(array, start4, end2) {
        var index = -1, length = array.length;
        if (start4 < 0) {
          start4 = -start4 > length ? 0 : length + start4;
        }
        end2 = end2 > length ? length : end2;
        if (end2 < 0) {
          end2 += length;
        }
        length = start4 > end2 ? 0 : end2 - start4 >>> 0;
        start4 >>>= 0;
        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start4];
        }
        return result;
      }
      module2.exports = baseSlice;
    }
  });

  // ../../../node_modules/lodash/_castSlice.js
  var require_castSlice = __commonJS({
    "../../../node_modules/lodash/_castSlice.js"(exports2, module2) {
      var baseSlice = require_baseSlice();
      function castSlice(array, start4, end2) {
        var length = array.length;
        end2 = end2 === void 0 ? length : end2;
        return !start4 && end2 >= length ? array : baseSlice(array, start4, end2);
      }
      module2.exports = castSlice;
    }
  });

  // ../../../node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS({
    "../../../node_modules/lodash/_hasUnicode.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      module2.exports = hasUnicode;
    }
  });

  // ../../../node_modules/lodash/_asciiToArray.js
  var require_asciiToArray = __commonJS({
    "../../../node_modules/lodash/_asciiToArray.js"(exports2, module2) {
      function asciiToArray(string) {
        return string.split("");
      }
      module2.exports = asciiToArray;
    }
  });

  // ../../../node_modules/lodash/_unicodeToArray.js
  var require_unicodeToArray = __commonJS({
    "../../../node_modules/lodash/_unicodeToArray.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      module2.exports = unicodeToArray;
    }
  });

  // ../../../node_modules/lodash/_stringToArray.js
  var require_stringToArray = __commonJS({
    "../../../node_modules/lodash/_stringToArray.js"(exports2, module2) {
      var asciiToArray = require_asciiToArray();
      var hasUnicode = require_hasUnicode();
      var unicodeToArray = require_unicodeToArray();
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      module2.exports = stringToArray;
    }
  });

  // ../../../node_modules/lodash/_createCaseFirst.js
  var require_createCaseFirst = __commonJS({
    "../../../node_modules/lodash/_createCaseFirst.js"(exports2, module2) {
      var castSlice = require_castSlice();
      var hasUnicode = require_hasUnicode();
      var stringToArray = require_stringToArray();
      var toString = require_toString();
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      module2.exports = createCaseFirst;
    }
  });

  // ../../../node_modules/lodash/upperFirst.js
  var require_upperFirst = __commonJS({
    "../../../node_modules/lodash/upperFirst.js"(exports2, module2) {
      var createCaseFirst = require_createCaseFirst();
      var upperFirst2 = createCaseFirst("toUpperCase");
      module2.exports = upperFirst2;
    }
  });

  // ../../../node_modules/lodash/capitalize.js
  var require_capitalize = __commonJS({
    "../../../node_modules/lodash/capitalize.js"(exports2, module2) {
      var toString = require_toString();
      var upperFirst2 = require_upperFirst();
      function capitalize2(string) {
        return upperFirst2(toString(string).toLowerCase());
      }
      module2.exports = capitalize2;
    }
  });

  // ../../../node_modules/lodash/_arrayReduce.js
  var require_arrayReduce = __commonJS({
    "../../../node_modules/lodash/_arrayReduce.js"(exports2, module2) {
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      module2.exports = arrayReduce;
    }
  });

  // ../../../node_modules/lodash/_basePropertyOf.js
  var require_basePropertyOf = __commonJS({
    "../../../node_modules/lodash/_basePropertyOf.js"(exports2, module2) {
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? void 0 : object[key];
        };
      }
      module2.exports = basePropertyOf;
    }
  });

  // ../../../node_modules/lodash/_deburrLetter.js
  var require_deburrLetter = __commonJS({
    "../../../node_modules/lodash/_deburrLetter.js"(exports2, module2) {
      var basePropertyOf = require_basePropertyOf();
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var deburrLetter = basePropertyOf(deburredLetters);
      module2.exports = deburrLetter;
    }
  });

  // ../../../node_modules/lodash/deburr.js
  var require_deburr = __commonJS({
    "../../../node_modules/lodash/deburr.js"(exports2, module2) {
      var deburrLetter = require_deburrLetter();
      var toString = require_toString();
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsCombo = "[" + rsComboRange + "]";
      var reComboMark = RegExp(rsCombo, "g");
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      module2.exports = deburr;
    }
  });

  // ../../../node_modules/lodash/_asciiWords.js
  var require_asciiWords = __commonJS({
    "../../../node_modules/lodash/_asciiWords.js"(exports2, module2) {
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      module2.exports = asciiWords;
    }
  });

  // ../../../node_modules/lodash/_hasUnicodeWord.js
  var require_hasUnicodeWord = __commonJS({
    "../../../node_modules/lodash/_hasUnicodeWord.js"(exports2, module2) {
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      module2.exports = hasUnicodeWord;
    }
  });

  // ../../../node_modules/lodash/_unicodeWords.js
  var require_unicodeWords = __commonJS({
    "../../../node_modules/lodash/_unicodeWords.js"(exports2, module2) {
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f";
      var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
      var rsComboSymbolsRange = "\\u20d0-\\u20ff";
      var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
      var rsDingbatRange = "\\u2700-\\u27bf";
      var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
      var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
      var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
      var rsPunctuationRange = "\\u2000-\\u206f";
      var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
      var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]";
      var rsBreak = "[" + rsBreakRange + "]";
      var rsCombo = "[" + rsComboRange + "]";
      var rsDigits = "\\d+";
      var rsDingbat = "[" + rsDingbatRange + "]";
      var rsLower = "[" + rsLowerRange + "]";
      var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsUpper = "[" + rsUpperRange + "]";
      var rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
      var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
      var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
      var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
      var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      module2.exports = unicodeWords;
    }
  });

  // ../../../node_modules/lodash/words.js
  var require_words = __commonJS({
    "../../../node_modules/lodash/words.js"(exports2, module2) {
      var asciiWords = require_asciiWords();
      var hasUnicodeWord = require_hasUnicodeWord();
      var toString = require_toString();
      var unicodeWords = require_unicodeWords();
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? void 0 : pattern;
        if (pattern === void 0) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      module2.exports = words;
    }
  });

  // ../../../node_modules/lodash/_createCompounder.js
  var require_createCompounder = __commonJS({
    "../../../node_modules/lodash/_createCompounder.js"(exports2, module2) {
      var arrayReduce = require_arrayReduce();
      var deburr = require_deburr();
      var words = require_words();
      var rsApos = "['\u2019]";
      var reApos = RegExp(rsApos, "g");
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      module2.exports = createCompounder;
    }
  });

  // ../../../node_modules/lodash/camelCase.js
  var require_camelCase = __commonJS({
    "../../../node_modules/lodash/camelCase.js"(exports2, module2) {
      var capitalize2 = require_capitalize();
      var createCompounder = require_createCompounder();
      var camelCase2 = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize2(word) : word);
      });
      module2.exports = camelCase2;
    }
  });

  // ../../../node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "../../../node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear;
    }
  });

  // ../../../node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "../../../node_modules/lodash/eq.js"(exports2, module2) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module2.exports = eq;
    }
  });

  // ../../../node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "../../../node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq = require_eq();
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf;
    }
  });

  // ../../../node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "../../../node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete;
    }
  });

  // ../../../node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "../../../node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      module2.exports = listCacheGet;
    }
  });

  // ../../../node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "../../../node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module2.exports = listCacheHas;
    }
  });

  // ../../../node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "../../../node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module2.exports = listCacheSet;
    }
  });

  // ../../../node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "../../../node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module2.exports = ListCache;
    }
  });

  // ../../../node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "../../../node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module2.exports = stackClear;
    }
  });

  // ../../../node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "../../../node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete;
    }
  });

  // ../../../node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "../../../node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module2.exports = stackGet;
    }
  });

  // ../../../node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "../../../node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module2.exports = stackHas;
    }
  });

  // ../../../node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../../../node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module2.exports = isObject;
    }
  });

  // ../../../node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "../../../node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObject = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module2.exports = isFunction;
    }
  });

  // ../../../node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "../../../node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module2.exports = coreJsData;
    }
  });

  // ../../../node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "../../../node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module2.exports = isMasked;
    }
  });

  // ../../../node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "../../../node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      module2.exports = toSource;
    }
  });

  // ../../../node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "../../../node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module2.exports = baseIsNative;
    }
  });

  // ../../../node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "../../../node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      module2.exports = getValue;
    }
  });

  // ../../../node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "../../../node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      module2.exports = getNative;
    }
  });

  // ../../../node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "../../../node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module2.exports = Map2;
    }
  });

  // ../../../node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "../../../node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module2.exports = nativeCreate;
    }
  });

  // ../../../node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "../../../node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear;
    }
  });

  // ../../../node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "../../../node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete;
    }
  });

  // ../../../node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "../../../node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      module2.exports = hashGet;
    }
  });

  // ../../../node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "../../../node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      module2.exports = hashHas;
    }
  });

  // ../../../node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "../../../node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module2.exports = hashSet;
    }
  });

  // ../../../node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "../../../node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module2.exports = Hash;
    }
  });

  // ../../../node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "../../../node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module2.exports = mapCacheClear;
    }
  });

  // ../../../node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "../../../node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module2.exports = isKeyable;
    }
  });

  // ../../../node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "../../../node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData;
    }
  });

  // ../../../node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "../../../node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete;
    }
  });

  // ../../../node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "../../../node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module2.exports = mapCacheGet;
    }
  });

  // ../../../node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "../../../node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module2.exports = mapCacheHas;
    }
  });

  // ../../../node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "../../../node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet;
    }
  });

  // ../../../node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "../../../node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module2.exports = MapCache;
    }
  });

  // ../../../node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "../../../node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet;
    }
  });

  // ../../../node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "../../../node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module2.exports = Stack;
    }
  });

  // ../../../node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "../../../node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module2.exports = setCacheAdd;
    }
  });

  // ../../../node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "../../../node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module2.exports = setCacheHas;
    }
  });

  // ../../../node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "../../../node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module2.exports = SetCache;
    }
  });

  // ../../../node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "../../../node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome;
    }
  });

  // ../../../node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "../../../node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas(cache2, key) {
        return cache2.has(key);
      }
      module2.exports = cacheHas;
    }
  });

  // ../../../node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "../../../node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalArrays;
    }
  });

  // ../../../node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "../../../node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module2.exports = Uint8Array2;
    }
  });

  // ../../../node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "../../../node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      module2.exports = mapToArray;
    }
  });

  // ../../../node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "../../../node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      module2.exports = setToArray;
    }
  });

  // ../../../node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "../../../node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag;
    }
  });

  // ../../../node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "../../../node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset2 = array.length;
        while (++index < length) {
          array[offset2 + index] = values[index];
        }
        return array;
      }
      module2.exports = arrayPush;
    }
  });

  // ../../../node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "../../../node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush = require_arrayPush();
      var isArray = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module2.exports = baseGetAllKeys;
    }
  });

  // ../../../node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "../../../node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module2.exports = arrayFilter;
    }
  });

  // ../../../node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "../../../node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray() {
        return [];
      }
      module2.exports = stubArray;
    }
  });

  // ../../../node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "../../../node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module2.exports = getSymbols;
    }
  });

  // ../../../node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "../../../node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module2.exports = baseTimes;
    }
  });

  // ../../../node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "../../../node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module2.exports = baseIsArguments;
    }
  });

  // ../../../node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "../../../node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module2.exports = isArguments;
    }
  });

  // ../../../node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "../../../node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse() {
        return false;
      }
      module2.exports = stubFalse;
    }
  });

  // ../../../node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "../../../node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module2.exports = isBuffer;
    }
  });

  // ../../../node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "../../../node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      module2.exports = isIndex;
    }
  });

  // ../../../node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "../../../node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module2.exports = isLength;
    }
  });

  // ../../../node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "../../../node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module2.exports = baseIsTypedArray;
    }
  });

  // ../../../node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "../../../node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      module2.exports = baseUnary;
    }
  });

  // ../../../node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "../../../node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil;
    }
  });

  // ../../../node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "../../../node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module2.exports = isTypedArray;
    }
  });

  // ../../../node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "../../../node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys;
    }
  });

  // ../../../node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "../../../node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module2.exports = isPrototype;
    }
  });

  // ../../../node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "../../../node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module2.exports = overArg;
    }
  });

  // ../../../node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "../../../node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module2.exports = nativeKeys;
    }
  });

  // ../../../node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "../../../node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeys;
    }
  });

  // ../../../node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "../../../node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      module2.exports = isArrayLike;
    }
  });

  // ../../../node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "../../../node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module2.exports = keys;
    }
  });

  // ../../../node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "../../../node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module2.exports = getAllKeys;
    }
  });

  // ../../../node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "../../../node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalObjects;
    }
  });

  // ../../../node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "../../../node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView2 = getNative(root, "DataView");
      module2.exports = DataView2;
    }
  });

  // ../../../node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "../../../node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module2.exports = Promise2;
    }
  });

  // ../../../node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "../../../node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module2.exports = Set2;
    }
  });

  // ../../../node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "../../../node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      module2.exports = WeakMap2;
    }
  });

  // ../../../node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "../../../node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView2 = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module2.exports = getTag;
    }
  });

  // ../../../node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "../../../node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep;
    }
  });

  // ../../../node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "../../../node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module2.exports = baseIsEqual;
    }
  });

  // ../../../node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "../../../node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
      var Stack = require_Stack();
      var baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module2.exports = baseIsMatch;
    }
  });

  // ../../../node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "../../../node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
      var isObject = require_isObject();
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      module2.exports = isStrictComparable;
    }
  });

  // ../../../node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "../../../node_modules/lodash/_getMatchData.js"(exports2, module2) {
      var isStrictComparable = require_isStrictComparable();
      var keys = require_keys();
      function getMatchData(object) {
        var result = keys(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      module2.exports = getMatchData;
    }
  });

  // ../../../node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "../../../node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module2.exports = matchesStrictComparable;
    }
  });

  // ../../../node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "../../../node_modules/lodash/_baseMatches.js"(exports2, module2) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      module2.exports = baseMatches;
    }
  });

  // ../../../node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "../../../node_modules/lodash/_isKey.js"(exports2, module2) {
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      module2.exports = isKey;
    }
  });

  // ../../../node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "../../../node_modules/lodash/memoize.js"(exports2, module2) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
          if (cache2.has(key)) {
            return cache2.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache2.set(key, result) || cache2;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      module2.exports = memoize;
    }
  });

  // ../../../node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "../../../node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
      var memoize = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache2.size === MAX_MEMOIZE_SIZE) {
            cache2.clear();
          }
          return key;
        });
        var cache2 = result.cache;
        return result;
      }
      module2.exports = memoizeCapped;
    }
  });

  // ../../../node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "../../../node_modules/lodash/_stringToPath.js"(exports2, module2) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result;
      });
      module2.exports = stringToPath;
    }
  });

  // ../../../node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "../../../node_modules/lodash/_castPath.js"(exports2, module2) {
      var isArray = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString = require_toString();
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      module2.exports = castPath;
    }
  });

  // ../../../node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "../../../node_modules/lodash/_toKey.js"(exports2, module2) {
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module2.exports = toKey;
    }
  });

  // ../../../node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "../../../node_modules/lodash/_baseGet.js"(exports2, module2) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0, length = path.length;
        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return index && index == length ? object : void 0;
      }
      module2.exports = baseGet;
    }
  });

  // ../../../node_modules/lodash/get.js
  var require_get = __commonJS({
    "../../../node_modules/lodash/get.js"(exports2, module2) {
      var baseGet = require_baseGet();
      function get(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module2.exports = get;
    }
  });

  // ../../../node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "../../../node_modules/lodash/_baseHasIn.js"(exports2, module2) {
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      module2.exports = baseHasIn;
    }
  });

  // ../../../node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "../../../node_modules/lodash/_hasPath.js"(exports2, module2) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1, length = path.length, result = false;
        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      module2.exports = hasPath;
    }
  });

  // ../../../node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "../../../node_modules/lodash/hasIn.js"(exports2, module2) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      module2.exports = hasIn;
    }
  });

  // ../../../node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "../../../node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
      var baseIsEqual = require_baseIsEqual();
      var get = require_get();
      var hasIn = require_hasIn();
      var isKey = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      module2.exports = baseMatchesProperty;
    }
  });

  // ../../../node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "../../../node_modules/lodash/identity.js"(exports2, module2) {
      function identity(value) {
        return value;
      }
      module2.exports = identity;
    }
  });

  // ../../../node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "../../../node_modules/lodash/_baseProperty.js"(exports2, module2) {
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module2.exports = baseProperty;
    }
  });

  // ../../../node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "../../../node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
      var baseGet = require_baseGet();
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      module2.exports = basePropertyDeep;
    }
  });

  // ../../../node_modules/lodash/property.js
  var require_property = __commonJS({
    "../../../node_modules/lodash/property.js"(exports2, module2) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey = require_isKey();
      var toKey = require_toKey();
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      module2.exports = property;
    }
  });

  // ../../../node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "../../../node_modules/lodash/_baseIteratee.js"(exports2, module2) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity = require_identity();
      var isArray = require_isArray();
      var property = require_property();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      module2.exports = baseIteratee;
    }
  });

  // ../../../node_modules/lodash/_createFind.js
  var require_createFind = __commonJS({
    "../../../node_modules/lodash/_createFind.js"(exports2, module2) {
      var baseIteratee = require_baseIteratee();
      var isArrayLike = require_isArrayLike();
      var keys = require_keys();
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = baseIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
        };
      }
      module2.exports = createFind;
    }
  });

  // ../../../node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "../../../node_modules/lodash/_baseFindIndex.js"(exports2, module2) {
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      module2.exports = baseFindIndex;
    }
  });

  // ../../../node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "../../../node_modules/lodash/_trimmedEndIndex.js"(exports2, module2) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      module2.exports = trimmedEndIndex;
    }
  });

  // ../../../node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "../../../node_modules/lodash/_baseTrim.js"(exports2, module2) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      module2.exports = baseTrim;
    }
  });

  // ../../../node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "../../../node_modules/lodash/toNumber.js"(exports2, module2) {
      var baseTrim = require_baseTrim();
      var isObject = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module2.exports = toNumber;
    }
  });

  // ../../../node_modules/lodash/toFinite.js
  var require_toFinite = __commonJS({
    "../../../node_modules/lodash/toFinite.js"(exports2, module2) {
      var toNumber = require_toNumber();
      var INFINITY = 1 / 0;
      var MAX_INTEGER = 17976931348623157e292;
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      module2.exports = toFinite;
    }
  });

  // ../../../node_modules/lodash/toInteger.js
  var require_toInteger = __commonJS({
    "../../../node_modules/lodash/toInteger.js"(exports2, module2) {
      var toFinite = require_toFinite();
      function toInteger(value) {
        var result = toFinite(value), remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      module2.exports = toInteger;
    }
  });

  // ../../../node_modules/lodash/findIndex.js
  var require_findIndex = __commonJS({
    "../../../node_modules/lodash/findIndex.js"(exports2, module2) {
      var baseFindIndex = require_baseFindIndex();
      var baseIteratee = require_baseIteratee();
      var toInteger = require_toInteger();
      var nativeMax = Math.max;
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, baseIteratee(predicate, 3), index);
      }
      module2.exports = findIndex;
    }
  });

  // ../../../node_modules/lodash/find.js
  var require_find = __commonJS({
    "../../../node_modules/lodash/find.js"(exports2, module2) {
      var createFind = require_createFind();
      var findIndex = require_findIndex();
      var find2 = createFind(findIndex);
      module2.exports = find2;
    }
  });

  // ../../../node_modules/@mux/videojs-kit/dist/index.js
  var require_dist = __commonJS({
    "../../../node_modules/@mux/videojs-kit/dist/index.js"(exports2, module2) {
      (function(hr, dt) {
        typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = dt() : typeof define == "function" && define.amd ? define([], dt) : typeof exports2 == "object" ? exports2.videojs = dt() : hr.videojs = dt();
      })(exports2, function() {
        return (() => {
          var Ai = { 480: (Ee, Me, Ce) => {
            "use strict";
            var Ae = Ce(697), Pe = function(N, j) {
              return j === void 0 && (j = false), function(R, F, O) {
                if (R) {
                  N(R);
                  return;
                }
                if (F.statusCode >= 400 && F.statusCode <= 599) {
                  var x = O;
                  if (j)
                    if (Ae.TextDecoder) {
                      var k = Z(F.headers && F.headers["content-type"]);
                      try {
                        x = new TextDecoder(k).decode(O);
                      } catch (m2) {
                      }
                    } else
                      x = String.fromCharCode.apply(null, new Uint8Array(O));
                  N({ cause: x });
                  return;
                }
                N(null, O);
              };
            };
            function Z(Y) {
              return Y === void 0 && (Y = ""), Y.toLowerCase().split(";").reduce(function(N, j) {
                var R = j.split("="), F = R[0], O = R[1];
                return F.trim() === "charset" ? O.trim() : N;
              }, "utf-8");
            }
            Ee.exports = Pe;
          }, 424: (Ee, Me, Ce) => {
            "use strict";
            var Ae = Ce(697), Pe = Ce(110), Z = Ce(988);
            F.httpHandler = Ce(480);
            var Y = function(E) {
              var L = {};
              return E && E.trim().split(`
`).forEach(function(M) {
                var y = M.indexOf(":"), I = M.slice(0, y).trim().toLowerCase(), S = M.slice(y + 1).trim();
                typeof L[I] == "undefined" ? L[I] = S : Array.isArray(L[I]) ? L[I].push(S) : L[I] = [L[I], S];
              }), L;
            };
            Ee.exports = F, Ee.exports.default = F, F.XMLHttpRequest = Ae.XMLHttpRequest || k, F.XDomainRequest = "withCredentials" in new F.XMLHttpRequest() ? F.XMLHttpRequest : Ae.XDomainRequest, N(["get", "put", "post", "patch", "head", "delete"], function(m2) {
              F[m2 === "delete" ? "del" : m2] = function(E, L, M) {
                return L = R(E, L, M), L.method = m2.toUpperCase(), O(L);
              };
            });
            function N(m2, E) {
              for (var L = 0; L < m2.length; L++)
                E(m2[L]);
            }
            function j(m2) {
              for (var E in m2)
                if (m2.hasOwnProperty(E))
                  return false;
              return true;
            }
            function R(m2, E, L) {
              var M = m2;
              return Z(E) ? (L = E, typeof m2 == "string" && (M = { uri: m2 })) : M = Pe({}, E, { uri: m2 }), M.callback = L, M;
            }
            function F(m2, E, L) {
              return E = R(m2, E, L), O(E);
            }
            function O(m2) {
              if (typeof m2.callback == "undefined")
                throw new Error("callback argument missing");
              var E = false, L = function(c, s, p) {
                E || (E = true, m2.callback(c, s, p));
              };
              function M() {
                d.readyState === 4 && setTimeout(S, 0);
              }
              function y() {
                var a = void 0;
                if (d.response ? a = d.response : a = d.responseText || x(d), o)
                  try {
                    a = JSON.parse(a);
                  } catch (c) {
                  }
                return a;
              }
              function I(a) {
                return clearTimeout(h), a instanceof Error || (a = new Error("" + (a || "Unknown XMLHttpRequest Error"))), a.statusCode = 0, L(a, b);
              }
              function S() {
                if (!f) {
                  var a;
                  clearTimeout(h), m2.useXDR && d.status === void 0 ? a = 200 : a = d.status === 1223 ? 204 : d.status;
                  var c = b, s = null;
                  return a !== 0 ? (c = { body: y(), statusCode: a, method: _, headers: {}, url: l, rawRequest: d }, d.getAllResponseHeaders && (c.headers = Y(d.getAllResponseHeaders()))) : s = new Error("Internal XMLHttpRequest Error"), L(s, c, c.body);
                }
              }
              var d = m2.xhr || null;
              d || (m2.cors || m2.useXDR ? d = new F.XDomainRequest() : d = new F.XMLHttpRequest());
              var v, f, l = d.url = m2.uri || m2.url, _ = d.method = m2.method || "GET", g = m2.body || m2.data, i = d.headers = m2.headers || {}, n = !!m2.sync, o = false, h, b = { body: void 0, headers: {}, statusCode: 0, method: _, url: l, rawRequest: d };
              if ("json" in m2 && m2.json !== false && (o = true, i.accept || i.Accept || (i.Accept = "application/json"), _ !== "GET" && _ !== "HEAD" && (i["content-type"] || i["Content-Type"] || (i["Content-Type"] = "application/json"), g = JSON.stringify(m2.json === true ? g : m2.json))), d.onreadystatechange = M, d.onload = S, d.onerror = I, d.onprogress = function() {
              }, d.onabort = function() {
                f = true;
              }, d.ontimeout = I, d.open(_, l, !n, m2.username, m2.password), n || (d.withCredentials = !!m2.withCredentials), !n && m2.timeout > 0 && (h = setTimeout(function() {
                if (!f) {
                  f = true, d.abort("timeout");
                  var a = new Error("XMLHttpRequest timeout");
                  a.code = "ETIMEDOUT", I(a);
                }
              }, m2.timeout)), d.setRequestHeader)
                for (v in i)
                  i.hasOwnProperty(v) && d.setRequestHeader(v, i[v]);
              else if (m2.headers && !j(m2.headers))
                throw new Error("Headers cannot be set on an XDomainRequest object");
              return "responseType" in m2 && (d.responseType = m2.responseType), "beforeSend" in m2 && typeof m2.beforeSend == "function" && m2.beforeSend(d), d.send(g || null), d;
            }
            function x(m2) {
              try {
                if (m2.responseType === "document")
                  return m2.responseXML;
                var E = m2.responseXML && m2.responseXML.documentElement.nodeName === "parsererror";
                if (m2.responseType === "" && !E)
                  return m2.responseXML;
              } catch (L) {
              }
              return null;
            }
            function k() {
            }
          }, 675: (Ee, Me, Ce) => {
            var Ae = typeof Ce.g != "undefined" ? Ce.g : typeof window != "undefined" ? window : {}, Pe = Ce(893), Z;
            typeof document != "undefined" ? Z = document : (Z = Ae["__GLOBAL_DOCUMENT_CACHE@4"], Z || (Z = Ae["__GLOBAL_DOCUMENT_CACHE@4"] = Pe)), Ee.exports = Z;
          }, 697: (Ee, Me, Ce) => {
            var Ae;
            typeof window != "undefined" ? Ae = window : typeof Ce.g != "undefined" ? Ae = Ce.g : typeof self != "undefined" ? Ae = self : Ae = {}, Ee.exports = Ae;
          }, 199: function(Ee) {
            typeof window != "undefined" && function(Ce, Ae) {
              Ee.exports = Ae();
            }(this, () => (() => {
              var Me = { "./src/config.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { enableStreamingMode: () => c, hlsDefaultConfig: () => h, mergeConfig: () => a });
                var j = N("./src/controller/abr-controller.ts"), R = N("./src/controller/audio-stream-controller.ts"), F = N("./src/controller/audio-track-controller.ts"), O = N("./src/controller/subtitle-stream-controller.ts"), x = N("./src/controller/subtitle-track-controller.ts"), k = N("./src/controller/buffer-controller.ts"), m2 = N("./src/controller/timeline-controller.ts"), E = N("./src/controller/cap-level-controller.ts"), L = N("./src/controller/fps-controller.ts"), M = N("./src/controller/eme-controller.ts"), y = N("./src/controller/cmcd-controller.ts"), I = N("./src/utils/xhr-loader.ts"), S = N("./src/utils/fetch-loader.ts"), d = N("./src/utils/cues.ts"), v = N("./src/utils/mediakeys-helper.ts"), f = N("./src/utils/logger.ts");
                function l() {
                  return l = Object.assign ? Object.assign.bind() : function(s) {
                    for (var p = 1; p < arguments.length; p++) {
                      var D = arguments[p];
                      for (var A in D)
                        Object.prototype.hasOwnProperty.call(D, A) && (s[A] = D[A]);
                    }
                    return s;
                  }, l.apply(this, arguments);
                }
                function _(s, p) {
                  var D = Object.keys(s);
                  if (Object.getOwnPropertySymbols) {
                    var A = Object.getOwnPropertySymbols(s);
                    p && (A = A.filter(function(w) {
                      return Object.getOwnPropertyDescriptor(s, w).enumerable;
                    })), D.push.apply(D, A);
                  }
                  return D;
                }
                function g(s) {
                  for (var p = 1; p < arguments.length; p++) {
                    var D = arguments[p] != null ? arguments[p] : {};
                    p % 2 ? _(Object(D), true).forEach(function(A) {
                      i(s, A, D[A]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(D)) : _(Object(D)).forEach(function(A) {
                      Object.defineProperty(s, A, Object.getOwnPropertyDescriptor(D, A));
                    });
                  }
                  return s;
                }
                function i(s, p, D) {
                  return p = n(p), p in s ? Object.defineProperty(s, p, { value: D, enumerable: true, configurable: true, writable: true }) : s[p] = D, s;
                }
                function n(s) {
                  var p = o(s, "string");
                  return typeof p == "symbol" ? p : String(p);
                }
                function o(s, p) {
                  if (typeof s != "object" || s === null)
                    return s;
                  var D = s[Symbol.toPrimitive];
                  if (D !== void 0) {
                    var A = D.call(s, p || "default");
                    if (typeof A != "object")
                      return A;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (p === "string" ? String : Number)(s);
                }
                var h = g(g({ autoStartLoad: true, startPosition: -1, defaultAudioCodec: void 0, debug: false, capLevelOnFPSDrop: false, capLevelToPlayerSize: false, ignoreDevicePixelRatio: false, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, maxBufferSize: 60 * 1e3 * 1e3, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: false, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: true, enableSoftwareAES: true, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, startLevel: void 0, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3, startFragPrefetch: false, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: I.default, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: j.default, bufferController: k.default, capLevelController: E.default, fpsController: L.default, stretchShortVideoTrack: false, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: true, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: false, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: false, widevineLicenseUrl: void 0, drmSystems: {}, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: v.requestMediaKeySystemAccess, testBandwidth: true, progressive: false, lowLatencyMode: true, cmcd: void 0, enableDateRangeMetadataCues: true, enableEmsgMetadataCues: true, enableID3MetadataCues: true }, b()), {}, { subtitleStreamController: O.SubtitleStreamController, subtitleTrackController: x.default, timelineController: m2.TimelineController, audioStreamController: R.default, audioTrackController: F.default, emeController: M.default, cmcdController: y.default });
                function b() {
                  return { cueHandler: d.default, enableWebVTT: true, enableIMSC1: true, enableCEA708Captions: true, captionsTextTrack1Label: "English", captionsTextTrack1LanguageCode: "en", captionsTextTrack2Label: "Spanish", captionsTextTrack2LanguageCode: "es", captionsTextTrack3Label: "Unknown CC", captionsTextTrack3LanguageCode: "", captionsTextTrack4Label: "Unknown CC", captionsTextTrack4LanguageCode: "", renderTextTracksNatively: true };
                }
                function a(s, p) {
                  if ((p.liveSyncDurationCount || p.liveMaxLatencyDurationCount) && (p.liveSyncDuration || p.liveMaxLatencyDuration))
                    throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
                  if (p.liveMaxLatencyDurationCount !== void 0 && (p.liveSyncDurationCount === void 0 || p.liveMaxLatencyDurationCount <= p.liveSyncDurationCount))
                    throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
                  if (p.liveMaxLatencyDuration !== void 0 && (p.liveSyncDuration === void 0 || p.liveMaxLatencyDuration <= p.liveSyncDuration))
                    throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
                  return l({}, s, p);
                }
                function c(s) {
                  var p = s.loader;
                  if (p !== S.default && p !== I.default)
                    f.logger.log("[config]: Custom loader detected, cannot enable progressive streaming"), s.progressive = false;
                  else {
                    var D = (0, S.fetchSupported)();
                    D && (s.loader = S.default, s.progressive = true, s.enableSoftwareAES = true, f.logger.log("[config]: Progressive streaming enabled, using FetchLoader"));
                  }
                }
              }, "./src/controller/abr-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => I });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/ewma-bandwidth-estimator.ts"), F = N("./src/events.ts"), O = N("./src/errors.ts"), x = N("./src/types/loader.ts"), k = N("./src/utils/logger.ts");
                function m2(S, d) {
                  for (var v = 0; v < d.length; v++) {
                    var f = d[v];
                    f.enumerable = f.enumerable || false, f.configurable = true, "value" in f && (f.writable = true), Object.defineProperty(S, L(f.key), f);
                  }
                }
                function E(S, d, v) {
                  return d && m2(S.prototype, d), v && m2(S, v), Object.defineProperty(S, "prototype", { writable: false }), S;
                }
                function L(S) {
                  var d = M(S, "string");
                  return typeof d == "symbol" ? d : String(d);
                }
                function M(S, d) {
                  if (typeof S != "object" || S === null)
                    return S;
                  var v = S[Symbol.toPrimitive];
                  if (v !== void 0) {
                    var f = v.call(S, d || "default");
                    if (typeof f != "object")
                      return f;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (d === "string" ? String : Number)(S);
                }
                var y = function() {
                  function S(v) {
                    this.hls = void 0, this.lastLoadedFragLevel = 0, this._nextAutoLevel = -1, this.timer = void 0, this.onCheck = this._abandonRulesCheck.bind(this), this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this.hls = v;
                    var f = v.config;
                    this.bwEstimator = new R.default(f.abrEwmaSlowVoD, f.abrEwmaFastVoD, f.abrEwmaDefaultEstimate), this.registerListeners();
                  }
                  var d = S.prototype;
                  return d.registerListeners = function() {
                    var f = this.hls;
                    f.on(F.Events.FRAG_LOADING, this.onFragLoading, this), f.on(F.Events.FRAG_LOADED, this.onFragLoaded, this), f.on(F.Events.FRAG_BUFFERED, this.onFragBuffered, this), f.on(F.Events.LEVEL_LOADED, this.onLevelLoaded, this), f.on(F.Events.ERROR, this.onError, this);
                  }, d.unregisterListeners = function() {
                    var f = this.hls;
                    f.off(F.Events.FRAG_LOADING, this.onFragLoading, this), f.off(F.Events.FRAG_LOADED, this.onFragLoaded, this), f.off(F.Events.FRAG_BUFFERED, this.onFragBuffered, this), f.off(F.Events.LEVEL_LOADED, this.onLevelLoaded, this), f.off(F.Events.ERROR, this.onError, this);
                  }, d.destroy = function() {
                    this.unregisterListeners(), this.clearTimer(), this.hls = this.onCheck = null, this.fragCurrent = this.partCurrent = null;
                  }, d.onFragLoading = function(f, l) {
                    var _ = l.frag;
                    if (_.type === x.PlaylistLevelType.MAIN && !this.timer) {
                      var g;
                      this.fragCurrent = _, this.partCurrent = (g = l.part) != null ? g : null, this.timer = self.setInterval(this.onCheck, 100);
                    }
                  }, d.onLevelLoaded = function(f, l) {
                    var _ = this.hls.config;
                    l.details.live ? this.bwEstimator.update(_.abrEwmaSlowLive, _.abrEwmaFastLive) : this.bwEstimator.update(_.abrEwmaSlowVoD, _.abrEwmaFastVoD);
                  }, d._abandonRulesCheck = function() {
                    var f = this.fragCurrent, l = this.partCurrent, _ = this.hls, g = _.autoLevelEnabled, i = _.media;
                    if (!(!f || !i)) {
                      var n = l ? l.stats : f.stats, o = l ? l.duration : f.duration;
                      if (n.aborted || n.loaded && n.loaded === n.total || f.level === 0) {
                        this.clearTimer(), this._nextAutoLevel = -1;
                        return;
                      }
                      if (!(!g || i.paused || !i.playbackRate || !i.readyState)) {
                        var h = _.mainForwardBufferInfo;
                        if (h !== null) {
                          var b = performance.now() - n.loading.start, a = Math.abs(i.playbackRate);
                          if (!(b <= 500 * o / a)) {
                            var c = n.loaded && n.loading.first, s = this.bwEstimator.getEstimate(), p = _.levels, D = _.minAutoLevel, A = p[f.level], w = n.total || Math.max(n.loaded, Math.round(o * A.maxBitrate / 8)), B = c ? n.loaded * 1e3 / b : 0, U = B ? (w - n.loaded) / B : w * 8 / s, K = h.len / a;
                            if (!(U <= K)) {
                              var W = Number.POSITIVE_INFINITY, H;
                              for (H = f.level - 1; H > D; H--) {
                                var V = p[H].maxBitrate;
                                if (W = B ? o * V / (8 * 0.8 * B) : o * V / s, W < K)
                                  break;
                              }
                              W >= U || (k.logger.warn("Fragment " + f.sn + (l ? " part " + l.index : "") + " of level " + f.level + " is loading too slowly and will cause an underbuffer; aborting and switching to level " + H + `
      Current BW estimate: ` + ((0, j.isFiniteNumber)(s) ? (s / 1024).toFixed(3) : "Unknown") + ` Kb/s
      Estimated load time for current fragment: ` + U.toFixed(3) + ` s
      Estimated load time for the next fragment: ` + W.toFixed(3) + ` s
      Time to underbuffer: ` + K.toFixed(3) + " s"), _.nextLoadLevel = H, c && this.bwEstimator.sample(b, n.loaded), this.clearTimer(), (f.loader || f.keyLoader) && (this.fragCurrent = this.partCurrent = null, f.abortRequests()), _.trigger(F.Events.FRAG_LOAD_EMERGENCY_ABORTED, { frag: f, part: l, stats: n }));
                            }
                          }
                        }
                      }
                    }
                  }, d.onFragLoaded = function(f, l) {
                    var _ = l.frag, g = l.part;
                    if (_.type === x.PlaylistLevelType.MAIN && (0, j.isFiniteNumber)(_.sn)) {
                      var i = g ? g.stats : _.stats, n = g ? g.duration : _.duration;
                      if (this.clearTimer(), this.lastLoadedFragLevel = _.level, this._nextAutoLevel = -1, this.hls.config.abrMaxWithRealBitrate) {
                        var o = this.hls.levels[_.level], h = (o.loaded ? o.loaded.bytes : 0) + i.loaded, b = (o.loaded ? o.loaded.duration : 0) + n;
                        o.loaded = { bytes: h, duration: b }, o.realBitrate = Math.round(8 * h / b);
                      }
                      if (_.bitrateTest) {
                        var a = { stats: i, frag: _, part: g, id: _.type };
                        this.onFragBuffered(F.Events.FRAG_BUFFERED, a);
                      }
                    }
                  }, d.onFragBuffered = function(f, l) {
                    var _ = l.frag, g = l.part, i = g ? g.stats : _.stats;
                    if (!i.aborted && !(_.type !== x.PlaylistLevelType.MAIN || _.sn === "initSegment")) {
                      var n = i.parsing.end - i.loading.start;
                      this.bwEstimator.sample(n, i.loaded), i.bwEstimate = this.bwEstimator.getEstimate(), _.bitrateTest ? this.bitrateTestDelay = n / 1e3 : this.bitrateTestDelay = 0;
                    }
                  }, d.onError = function(f, l) {
                    var _;
                    if (((_ = l.frag) === null || _ === void 0 ? void 0 : _.type) === x.PlaylistLevelType.MAIN) {
                      if (l.type === O.ErrorTypes.KEY_SYSTEM_ERROR) {
                        this.clearTimer();
                        return;
                      }
                      switch (l.details) {
                        case O.ErrorDetails.FRAG_LOAD_ERROR:
                        case O.ErrorDetails.FRAG_LOAD_TIMEOUT:
                        case O.ErrorDetails.KEY_LOAD_ERROR:
                        case O.ErrorDetails.KEY_LOAD_TIMEOUT:
                          this.clearTimer();
                          break;
                        default:
                          break;
                      }
                    }
                  }, d.clearTimer = function() {
                    self.clearInterval(this.timer), this.timer = void 0;
                  }, d.getNextABRAutoLevel = function() {
                    var f = this.fragCurrent, l = this.partCurrent, _ = this.hls, g = _.maxAutoLevel, i = _.config, n = _.minAutoLevel, o = _.media, h = l ? l.duration : f ? f.duration : 0, b = o && o.playbackRate !== 0 ? Math.abs(o.playbackRate) : 1, a = this.bwEstimator ? this.bwEstimator.getEstimate() : i.abrEwmaDefaultEstimate, c = _.mainForwardBufferInfo, s = (c ? c.len : 0) / b, p = this.findBestLevel(a, n, g, s, i.abrBandWidthFactor, i.abrBandWidthUpFactor);
                    if (p >= 0)
                      return p;
                    k.logger.trace((s ? "rebuffering expected" : "buffer is empty") + ", finding optimal quality level");
                    var D = h ? Math.min(h, i.maxStarvationDelay) : i.maxStarvationDelay, A = i.abrBandWidthFactor, w = i.abrBandWidthUpFactor;
                    if (!s) {
                      var B = this.bitrateTestDelay;
                      if (B) {
                        var U = h ? Math.min(h, i.maxLoadingDelay) : i.maxLoadingDelay;
                        D = U - B, k.logger.trace("bitrate test took " + Math.round(1e3 * B) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * D) + " ms"), A = w = 1;
                      }
                    }
                    return p = this.findBestLevel(a, n, g, s + D, A, w), Math.max(p, 0);
                  }, d.findBestLevel = function(f, l, _, g, i, n) {
                    for (var o, h = this.fragCurrent, b = this.partCurrent, a = this.lastLoadedFragLevel, c = this.hls.levels, s = c[a], p = !!(s != null && (o = s.details) !== null && o !== void 0 && o.live), D = s == null ? void 0 : s.codecSet, A = b ? b.duration : h ? h.duration : 0, w = _; w >= l; w--) {
                      var B = c[w];
                      if (!(!B || D && B.codecSet !== D)) {
                        var U = B.details, K = (b ? U == null ? void 0 : U.partTarget : U == null ? void 0 : U.averagetargetduration) || A, W = void 0;
                        w <= a ? W = i * f : W = n * f;
                        var H = c[w].maxBitrate, V = H * K / W;
                        if (k.logger.trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + w + "/" + Math.round(W) + "/" + H + "/" + K + "/" + g + "/" + V), W > H && (V === 0 || !(0, j.isFiniteNumber)(V) || p && !this.bitrateTestDelay || V < g))
                          return w;
                      }
                    }
                    return -1;
                  }, E(S, [{ key: "nextAutoLevel", get: function() {
                    var f = this._nextAutoLevel, l = this.bwEstimator;
                    if (f !== -1 && !l.canEstimate())
                      return f;
                    var _ = this.getNextABRAutoLevel();
                    return f !== -1 && this.hls.levels[_].loadError ? f : (f !== -1 && (_ = Math.min(f, _)), _);
                  }, set: function(f) {
                    this._nextAutoLevel = f;
                  } }]), S;
                }();
                const I = y;
              }, "./src/controller/audio-stream-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => i });
                var j = N("./src/polyfills/number.ts"), R = N("./src/controller/base-stream-controller.ts"), F = N("./src/events.ts"), O = N("./src/utils/buffer-helper.ts"), x = N("./src/controller/fragment-tracker.ts"), k = N("./src/types/level.ts"), m2 = N("./src/types/loader.ts"), E = N("./src/loader/fragment.ts"), L = N("./src/demux/chunk-cache.ts"), M = N("./src/demux/transmuxer-interface.ts"), y = N("./src/types/transmuxer.ts"), I = N("./src/controller/fragment-finders.ts"), S = N("./src/utils/discontinuities.ts"), d = N("./src/errors.ts");
                function v() {
                  return v = Object.assign ? Object.assign.bind() : function(n) {
                    for (var o = 1; o < arguments.length; o++) {
                      var h = arguments[o];
                      for (var b in h)
                        Object.prototype.hasOwnProperty.call(h, b) && (n[b] = h[b]);
                    }
                    return n;
                  }, v.apply(this, arguments);
                }
                function f(n, o) {
                  n.prototype = Object.create(o.prototype), n.prototype.constructor = n, l(n, o);
                }
                function l(n, o) {
                  return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(b, a) {
                    return b.__proto__ = a, b;
                  }, l(n, o);
                }
                var _ = 100, g = function(n) {
                  f(o, n);
                  function o(b, a, c) {
                    var s;
                    return s = n.call(this, b, a, c, "[audio-stream-controller]") || this, s.videoBuffer = null, s.videoTrackCC = -1, s.waitingVideoCC = -1, s.audioSwitch = false, s.trackId = -1, s.waitingData = null, s.mainDetails = null, s.bufferFlushed = false, s.cachedTrackLoadedData = null, s._registerListeners(), s;
                  }
                  var h = o.prototype;
                  return h.onHandlerDestroying = function() {
                    this._unregisterListeners(), this.mainDetails = null;
                  }, h._registerListeners = function() {
                    var a = this.hls;
                    a.on(F.Events.MEDIA_ATTACHED, this.onMediaAttached, this), a.on(F.Events.MEDIA_DETACHING, this.onMediaDetaching, this), a.on(F.Events.MANIFEST_LOADING, this.onManifestLoading, this), a.on(F.Events.LEVEL_LOADED, this.onLevelLoaded, this), a.on(F.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), a.on(F.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), a.on(F.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), a.on(F.Events.ERROR, this.onError, this), a.on(F.Events.BUFFER_RESET, this.onBufferReset, this), a.on(F.Events.BUFFER_CREATED, this.onBufferCreated, this), a.on(F.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), a.on(F.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), a.on(F.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, h._unregisterListeners = function() {
                    var a = this.hls;
                    a.off(F.Events.MEDIA_ATTACHED, this.onMediaAttached, this), a.off(F.Events.MEDIA_DETACHING, this.onMediaDetaching, this), a.off(F.Events.MANIFEST_LOADING, this.onManifestLoading, this), a.off(F.Events.LEVEL_LOADED, this.onLevelLoaded, this), a.off(F.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), a.off(F.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), a.off(F.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), a.off(F.Events.ERROR, this.onError, this), a.off(F.Events.BUFFER_RESET, this.onBufferReset, this), a.off(F.Events.BUFFER_CREATED, this.onBufferCreated, this), a.off(F.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), a.off(F.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), a.off(F.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, h.onInitPtsFound = function(a, c) {
                    var s = c.frag, p = c.id, D = c.initPTS;
                    if (p === "main") {
                      var A = s.cc;
                      this.initPTS[s.cc] = D, this.log("InitPTS for cc: " + A + " found from main: " + D), this.videoTrackCC = A, this.state === R.State.WAITING_INIT_PTS && this.tick();
                    }
                  }, h.startLoad = function(a) {
                    if (!this.levels) {
                      this.startPosition = a, this.state = R.State.STOPPED;
                      return;
                    }
                    var c = this.lastCurrentTime;
                    this.stopLoad(), this.setInterval(_), this.fragLoadError = 0, c > 0 && a === -1 ? (this.log("Override startPosition with lastCurrentTime @" + c.toFixed(3)), a = c, this.state = R.State.IDLE) : (this.loadedmetadata = false, this.state = R.State.WAITING_TRACK), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = a, this.tick();
                  }, h.doTick = function() {
                    switch (this.state) {
                      case R.State.IDLE:
                        this.doTickIdle();
                        break;
                      case R.State.WAITING_TRACK: {
                        var a, c = this.levels, s = this.trackId, p = c == null || (a = c[s]) === null || a === void 0 ? void 0 : a.details;
                        if (p) {
                          if (this.waitForCdnTuneIn(p))
                            break;
                          this.state = R.State.WAITING_INIT_PTS;
                        }
                        break;
                      }
                      case R.State.FRAG_LOADING_WAITING_RETRY: {
                        var D, A = performance.now(), w = this.retryDate;
                        (!w || A >= w || (D = this.media) !== null && D !== void 0 && D.seeking) && (this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.trackId), this.state = R.State.IDLE);
                        break;
                      }
                      case R.State.WAITING_INIT_PTS: {
                        var B = this.waitingData;
                        if (B) {
                          var U = B.frag, K = B.part, W = B.cache, H = B.complete;
                          if (this.initPTS[U.cc] !== void 0) {
                            this.waitingData = null, this.waitingVideoCC = -1, this.state = R.State.FRAG_LOADING;
                            var V = W.flush(), z = { frag: U, part: K, payload: V, networkDetails: null };
                            this._handleFragmentLoadProgress(z), H && n.prototype._handleFragmentLoadComplete.call(this, z);
                          } else if (this.videoTrackCC !== this.waitingVideoCC)
                            this.log("Waiting fragment cc (" + U.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                          else {
                            var Q = this.getLoadPosition(), q = O.BufferHelper.bufferInfo(this.mediaBuffer, Q, this.config.maxBufferHole), ee = (0, I.fragmentWithinToleranceTest)(q.end, this.config.maxFragLookUpTolerance, U);
                            ee < 0 && (this.log("Waiting fragment cc (" + U.cc + ") @ " + U.start + " cancelled because another fragment at " + q.end + " is needed"), this.clearWaitingFragment());
                          }
                        } else
                          this.state = R.State.IDLE;
                      }
                    }
                    this.onTickEnd();
                  }, h.clearWaitingFragment = function() {
                    var a = this.waitingData;
                    a && (this.fragmentTracker.removeFragment(a.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = R.State.IDLE);
                  }, h.resetLoadingState = function() {
                    this.clearWaitingFragment(), n.prototype.resetLoadingState.call(this);
                  }, h.onTickEnd = function() {
                    var a = this.media;
                    !a || !a.readyState || (this.lastCurrentTime = a.currentTime);
                  }, h.doTickIdle = function() {
                    var a = this.hls, c = this.levels, s = this.media, p = this.trackId, D = a.config;
                    if (!(!c || !c[p]) && !(!s && (this.startFragRequested || !D.startFragPrefetch))) {
                      var A = c[p], w = A.details;
                      if (!w || w.live && this.levelLastLoaded !== p || this.waitForCdnTuneIn(w)) {
                        this.state = R.State.WAITING_TRACK;
                        return;
                      }
                      var B = this.mediaBuffer ? this.mediaBuffer : this.media;
                      this.bufferFlushed && B && (this.bufferFlushed = false, this.afterBufferFlushed(B, E.ElementaryStreamTypes.AUDIO, m2.PlaylistLevelType.AUDIO));
                      var U = this.getFwdBufferInfo(B, m2.PlaylistLevelType.AUDIO);
                      if (U !== null) {
                        var K = this.audioSwitch;
                        if (!K && this._streamEnded(U, w)) {
                          a.trigger(F.Events.BUFFER_EOS, { type: "audio" }), this.state = R.State.ENDED;
                          return;
                        }
                        var W = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, m2.PlaylistLevelType.MAIN), H = U.len, V = this.getMaxBufferLength(W == null ? void 0 : W.len);
                        if (!(H >= V && !K)) {
                          var z = w.fragments, Q = z[0].start, q = U.end;
                          if (K && s) {
                            var ee = this.getLoadPosition();
                            q = ee, w.PTSKnown && ee < Q && (U.end > Q || U.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), s.currentTime = Q + 0.05);
                          }
                          if (!(W && q > W.end + w.targetduration) && !((!W || !W.len) && U.len)) {
                            var ae = this.getNextFragment(q, w);
                            if (!ae) {
                              this.bufferFlushed = true;
                              return;
                            }
                            this.loadFragment(ae, w, q);
                          }
                        }
                      }
                    }
                  }, h.getMaxBufferLength = function(a) {
                    var c = n.prototype.getMaxBufferLength.call(this);
                    return a ? Math.max(c, a) : c;
                  }, h.onMediaDetaching = function() {
                    this.videoBuffer = null, n.prototype.onMediaDetaching.call(this);
                  }, h.onAudioTracksUpdated = function(a, c) {
                    var s = c.audioTracks;
                    this.resetTransmuxer(), this.levels = s.map(function(p) {
                      return new k.Level(p);
                    });
                  }, h.onAudioTrackSwitching = function(a, c) {
                    var s = !!c.url;
                    this.trackId = c.id;
                    var p = this.fragCurrent;
                    p && p.abortRequests(), this.fragCurrent = null, this.clearWaitingFragment(), s ? this.setInterval(_) : this.resetTransmuxer(), s ? (this.audioSwitch = true, this.state = R.State.IDLE) : this.state = R.State.STOPPED, this.tick();
                  }, h.onManifestLoading = function() {
                    this.mainDetails = null, this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = false;
                  }, h.onLevelLoaded = function(a, c) {
                    this.mainDetails = c.details, this.cachedTrackLoadedData !== null && (this.hls.trigger(F.Events.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null);
                  }, h.onAudioTrackLoaded = function(a, c) {
                    var s;
                    if (this.mainDetails == null) {
                      this.cachedTrackLoadedData = c;
                      return;
                    }
                    var p = this.levels, D = c.details, A = c.id;
                    if (!p) {
                      this.warn("Audio tracks were reset while loading level " + A);
                      return;
                    }
                    this.log("Track " + A + " loaded [" + D.startSN + "," + D.endSN + "],duration:" + D.totalduration);
                    var w = p[A], B = 0;
                    if (D.live || (s = w.details) !== null && s !== void 0 && s.live) {
                      var U = this.mainDetails;
                      if (D.fragments[0] || (D.deltaUpdateFailed = true), D.deltaUpdateFailed || !U)
                        return;
                      !w.details && D.hasProgramDateTime && U.hasProgramDateTime ? ((0, S.alignMediaPlaylistByPDT)(D, U), B = D.fragments[0].start) : B = this.alignPlaylists(D, w.details);
                    }
                    w.details = D, this.levelLastLoaded = A, !this.startFragRequested && (this.mainDetails || !D.live) && this.setStartPosition(w.details, B), this.state === R.State.WAITING_TRACK && !this.waitForCdnTuneIn(D) && (this.state = R.State.IDLE), this.tick();
                  }, h._handleFragmentLoadProgress = function(a) {
                    var c, s = a.frag, p = a.part, D = a.payload, A = this.config, w = this.trackId, B = this.levels;
                    if (!B) {
                      this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + s.sn + " of level " + s.level + " will not be buffered");
                      return;
                    }
                    var U = B[w];
                    console.assert(U, "Audio track is defined on fragment load progress");
                    var K = U.details;
                    console.assert(K, "Audio track details are defined on fragment load progress");
                    var W = A.defaultAudioCodec || U.audioCodec || "mp4a.40.2", H = this.transmuxer;
                    H || (H = this.transmuxer = new M.default(this.hls, m2.PlaylistLevelType.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
                    var V = this.initPTS[s.cc], z = (c = s.initSegment) === null || c === void 0 ? void 0 : c.data;
                    if (V !== void 0) {
                      var Q = false, q = p ? p.index : -1, ee = q !== -1, ae = new y.ChunkMetadata(s.level, s.sn, s.stats.chunkCount, D.byteLength, q, ee);
                      H.push(D, z, W, "", s, p, K.totalduration, Q, ae, V);
                    } else {
                      this.log("Unknown video PTS for cc " + s.cc + ", waiting for video PTS before demuxing audio frag " + s.sn + " of [" + K.startSN + " ," + K.endSN + "],track " + w);
                      var ne = this.waitingData = this.waitingData || { frag: s, part: p, cache: new L.default(), complete: false }, ue = ne.cache;
                      ue.push(new Uint8Array(D)), this.waitingVideoCC = this.videoTrackCC, this.state = R.State.WAITING_INIT_PTS;
                    }
                  }, h._handleFragmentLoadComplete = function(a) {
                    if (this.waitingData) {
                      this.waitingData.complete = true;
                      return;
                    }
                    n.prototype._handleFragmentLoadComplete.call(this, a);
                  }, h.onBufferReset = function() {
                    this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = false;
                  }, h.onBufferCreated = function(a, c) {
                    var s = c.tracks.audio;
                    s && (this.mediaBuffer = s.buffer || null), c.tracks.video && (this.videoBuffer = c.tracks.video.buffer || null);
                  }, h.onFragBuffered = function(a, c) {
                    var s = c.frag, p = c.part;
                    if (s.type !== m2.PlaylistLevelType.AUDIO) {
                      if (!this.loadedmetadata && s.type === m2.PlaylistLevelType.MAIN) {
                        var D;
                        (D = this.videoBuffer || this.media) !== null && D !== void 0 && D.buffered.length && (this.loadedmetadata = true);
                      }
                      return;
                    }
                    if (this.fragContextChanged(s)) {
                      this.warn("Fragment " + s.sn + (p ? " p: " + p.index : "") + " of level " + s.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + this.audioSwitch);
                      return;
                    }
                    s.sn !== "initSegment" && (this.fragPrevious = s, this.audioSwitch && (this.audioSwitch = false, this.hls.trigger(F.Events.AUDIO_TRACK_SWITCHED, { id: this.trackId }))), this.fragBufferedComplete(s, p);
                  }, h.onError = function(a, c) {
                    if (c.type === d.ErrorTypes.KEY_SYSTEM_ERROR) {
                      this.onFragmentOrKeyLoadError(m2.PlaylistLevelType.AUDIO, c);
                      return;
                    }
                    switch (c.details) {
                      case d.ErrorDetails.FRAG_LOAD_ERROR:
                      case d.ErrorDetails.FRAG_LOAD_TIMEOUT:
                      case d.ErrorDetails.FRAG_PARSING_ERROR:
                      case d.ErrorDetails.KEY_LOAD_ERROR:
                      case d.ErrorDetails.KEY_LOAD_TIMEOUT:
                        this.onFragmentOrKeyLoadError(m2.PlaylistLevelType.AUDIO, c);
                        break;
                      case d.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                      case d.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                        this.state !== R.State.ERROR && this.state !== R.State.STOPPED && (this.state = c.fatal ? R.State.ERROR : R.State.IDLE, this.warn(c.details + " while loading frag, switching to " + this.state + " state"));
                        break;
                      case d.ErrorDetails.BUFFER_FULL_ERROR:
                        if (c.parent === "audio" && (this.state === R.State.PARSING || this.state === R.State.PARSED)) {
                          var s = true, p = this.getFwdBufferInfo(this.mediaBuffer, m2.PlaylistLevelType.AUDIO);
                          p && p.len > 0.5 && (s = !this.reduceMaxBufferLength(p.len)), s && (this.warn("Buffer full error also media.currentTime is not buffered, flush audio buffer"), this.fragCurrent = null, n.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.resetLoadingState();
                        }
                        break;
                      default:
                        break;
                    }
                  }, h.onBufferFlushed = function(a, c) {
                    var s = c.type;
                    s === E.ElementaryStreamTypes.AUDIO && (this.bufferFlushed = true, this.state === R.State.ENDED && (this.state = R.State.IDLE));
                  }, h._handleTransmuxComplete = function(a) {
                    var c, s = "audio", p = this.hls, D = a.remuxResult, A = a.chunkMeta, w = this.getCurrentContext(A);
                    if (!w) {
                      this.warn("The loading context changed while buffering fragment " + A.sn + " of level " + A.level + ". This chunk will not be buffered."), this.resetStartWhenNotLoaded(A.level);
                      return;
                    }
                    var B = w.frag, U = w.part, K = w.level.details, W = D.audio, H = D.text, V = D.id3, z = D.initSegment;
                    if (!(this.fragContextChanged(B) || !K)) {
                      if (this.state = R.State.PARSING, this.audioSwitch && W && this.completeAudioSwitch(), z != null && z.tracks && (this._bufferInitSegment(z.tracks, B, A), p.trigger(F.Events.FRAG_PARSING_INIT_SEGMENT, { frag: B, id: s, tracks: z.tracks })), W) {
                        var Q = W.startPTS, q = W.endPTS, ee = W.startDTS, ae = W.endDTS;
                        U && (U.elementaryStreams[E.ElementaryStreamTypes.AUDIO] = { startPTS: Q, endPTS: q, startDTS: ee, endDTS: ae }), B.setElementaryStreamInfo(E.ElementaryStreamTypes.AUDIO, Q, q, ee, ae), this.bufferFragmentData(W, B, U, A);
                      }
                      if (V != null && (c = V.samples) !== null && c !== void 0 && c.length) {
                        var ne = v({ id: s, frag: B, details: K }, V);
                        p.trigger(F.Events.FRAG_PARSING_METADATA, ne);
                      }
                      if (H) {
                        var ue = v({ id: s, frag: B, details: K }, H);
                        p.trigger(F.Events.FRAG_PARSING_USERDATA, ue);
                      }
                    }
                  }, h._bufferInitSegment = function(a, c, s) {
                    if (this.state === R.State.PARSING) {
                      a.video && delete a.video;
                      var p = a.audio;
                      if (!!p) {
                        p.levelCodec = p.codec, p.id = "audio", this.log("Init audio buffer, container:" + p.container + ", codecs[parsed]=[" + p.codec + "]"), this.hls.trigger(F.Events.BUFFER_CODECS, a);
                        var D = p.initSegment;
                        if (D != null && D.byteLength) {
                          var A = { type: "audio", frag: c, part: null, chunkMeta: s, parent: c.type, data: D };
                          this.hls.trigger(F.Events.BUFFER_APPENDING, A);
                        }
                        this.tick();
                      }
                    }
                  }, h.loadFragment = function(a, c, s) {
                    var p = this.fragmentTracker.getState(a);
                    this.fragCurrent = a, (this.audioSwitch || p === x.FragmentState.NOT_LOADED || p === x.FragmentState.PARTIAL) && (a.sn === "initSegment" ? this._loadInitSegment(a, c) : c.live && !(0, j.isFiniteNumber)(this.initPTS[a.cc]) ? (this.log("Waiting for video PTS in continuity counter " + a.cc + " of live stream before loading audio fragment " + a.sn + " of level " + this.trackId), this.state = R.State.WAITING_INIT_PTS) : (this.startFragRequested = true, n.prototype.loadFragment.call(this, a, c, s)));
                  }, h.completeAudioSwitch = function() {
                    var a = this.hls, c = this.media, s = this.trackId;
                    c && (this.log("Switching audio track : flushing all audio"), n.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio")), this.audioSwitch = false, a.trigger(F.Events.AUDIO_TRACK_SWITCHED, { id: s });
                  }, o;
                }(R.default);
                const i = g;
              }, "./src/controller/audio-track-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => I });
                var j = N("./src/events.ts"), R = N("./src/errors.ts"), F = N("./src/controller/base-playlist-controller.ts"), O = N("./src/types/loader.ts");
                function x(S, d) {
                  for (var v = 0; v < d.length; v++) {
                    var f = d[v];
                    f.enumerable = f.enumerable || false, f.configurable = true, "value" in f && (f.writable = true), Object.defineProperty(S, m2(f.key), f);
                  }
                }
                function k(S, d, v) {
                  return d && x(S.prototype, d), v && x(S, v), Object.defineProperty(S, "prototype", { writable: false }), S;
                }
                function m2(S) {
                  var d = E(S, "string");
                  return typeof d == "symbol" ? d : String(d);
                }
                function E(S, d) {
                  if (typeof S != "object" || S === null)
                    return S;
                  var v = S[Symbol.toPrimitive];
                  if (v !== void 0) {
                    var f = v.call(S, d || "default");
                    if (typeof f != "object")
                      return f;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (d === "string" ? String : Number)(S);
                }
                function L(S, d) {
                  S.prototype = Object.create(d.prototype), S.prototype.constructor = S, M(S, d);
                }
                function M(S, d) {
                  return M = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(f, l) {
                    return f.__proto__ = l, f;
                  }, M(S, d);
                }
                var y = function(S) {
                  L(d, S);
                  function d(f) {
                    var l;
                    return l = S.call(this, f, "[audio-track-controller]") || this, l.tracks = [], l.groupId = null, l.tracksInGroup = [], l.trackId = -1, l.trackName = "", l.selectDefaultTrack = true, l.registerListeners(), l;
                  }
                  var v = d.prototype;
                  return v.registerListeners = function() {
                    var l = this.hls;
                    l.on(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), l.on(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), l.on(j.Events.LEVEL_LOADING, this.onLevelLoading, this), l.on(j.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), l.on(j.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), l.on(j.Events.ERROR, this.onError, this);
                  }, v.unregisterListeners = function() {
                    var l = this.hls;
                    l.off(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), l.off(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), l.off(j.Events.LEVEL_LOADING, this.onLevelLoading, this), l.off(j.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), l.off(j.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), l.off(j.Events.ERROR, this.onError, this);
                  }, v.destroy = function() {
                    this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, S.prototype.destroy.call(this);
                  }, v.onManifestLoading = function() {
                    this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.trackName = "", this.selectDefaultTrack = true;
                  }, v.onManifestParsed = function(l, _) {
                    this.tracks = _.audioTracks || [];
                  }, v.onAudioTrackLoaded = function(l, _) {
                    var g = _.id, i = _.details, n = this.tracksInGroup[g];
                    if (!n) {
                      this.warn("Invalid audio track id " + g);
                      return;
                    }
                    var o = n.details;
                    n.details = _.details, this.log("audioTrack " + g + " loaded [" + i.startSN + "-" + i.endSN + "]"), g === this.trackId && (this.retryCount = 0, this.playlistLoaded(g, _, o));
                  }, v.onLevelLoading = function(l, _) {
                    this.switchLevel(_.level);
                  }, v.onLevelSwitching = function(l, _) {
                    this.switchLevel(_.level);
                  }, v.switchLevel = function(l) {
                    var _ = this.hls.levels[l];
                    if (!!(_ != null && _.audioGroupIds)) {
                      var g = _.audioGroupIds[_.urlId];
                      if (this.groupId !== g) {
                        this.groupId = g;
                        var i = this.tracks.filter(function(o) {
                          return !g || o.groupId === g;
                        });
                        this.selectDefaultTrack && !i.some(function(o) {
                          return o.default;
                        }) && (this.selectDefaultTrack = false), this.tracksInGroup = i;
                        var n = { audioTracks: i };
                        this.log("Updating audio tracks, " + i.length + ' track(s) found in "' + g + '" group-id'), this.hls.trigger(j.Events.AUDIO_TRACKS_UPDATED, n), this.selectInitialTrack();
                      }
                    }
                  }, v.onError = function(l, _) {
                    S.prototype.onError.call(this, l, _), !(_.fatal || !_.context) && _.context.type === O.PlaylistContextType.AUDIO_TRACK && _.context.id === this.trackId && _.context.groupId === this.groupId && this.retryLoadingOrFail(_);
                  }, v.setAudioTrack = function(l) {
                    var _ = this.tracksInGroup;
                    if (l < 0 || l >= _.length) {
                      this.warn("Invalid id passed to audio-track controller");
                      return;
                    }
                    this.clearTimer();
                    var g = _[this.trackId];
                    this.log("Now switching to audio-track index " + l);
                    var i = _[l], n = i.id, o = i.groupId, h = o === void 0 ? "" : o, b = i.name, a = i.type, c = i.url;
                    if (this.trackId = l, this.trackName = b, this.selectDefaultTrack = false, this.hls.trigger(j.Events.AUDIO_TRACK_SWITCHING, { id: n, groupId: h, name: b, type: a, url: c }), !(i.details && !i.details.live)) {
                      var s = this.switchParams(i.url, g == null ? void 0 : g.details);
                      this.loadPlaylist(s);
                    }
                  }, v.selectInitialTrack = function() {
                    var l = this.tracksInGroup;
                    console.assert(l.length, "Initial audio track should be selected when tracks are known");
                    var _ = this.trackName, g = this.findTrackId(_) || this.findTrackId();
                    g !== -1 ? this.setAudioTrack(g) : (this.warn("No track found for running audio group-ID: " + this.groupId), this.hls.trigger(j.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, fatal: true }));
                  }, v.findTrackId = function(l) {
                    for (var _ = this.tracksInGroup, g = 0; g < _.length; g++) {
                      var i = _[g];
                      if ((!this.selectDefaultTrack || i.default) && (!l || l === i.name))
                        return i.id;
                    }
                    return -1;
                  }, v.loadPlaylist = function(l) {
                    S.prototype.loadPlaylist.call(this);
                    var _ = this.tracksInGroup[this.trackId];
                    if (this.shouldLoadTrack(_)) {
                      var g = _.id, i = _.groupId, n = _.url;
                      if (l)
                        try {
                          n = l.addDirectives(n);
                        } catch (o) {
                          this.warn("Could not construct new URL with HLS Delivery Directives: " + o);
                        }
                      this.log("loading audio-track playlist for id: " + g), this.clearTimer(), this.hls.trigger(j.Events.AUDIO_TRACK_LOADING, { url: n, id: g, groupId: i, deliveryDirectives: l || null });
                    }
                  }, k(d, [{ key: "audioTracks", get: function() {
                    return this.tracksInGroup;
                  } }, { key: "audioTrack", get: function() {
                    return this.trackId;
                  }, set: function(l) {
                    this.selectDefaultTrack = false, this.setAudioTrack(l);
                  } }]), d;
                }(F.default);
                const I = y;
              }, "./src/controller/base-playlist-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => x });
                var j = N("./src/types/level.ts"), R = N("./src/controller/level-helper.ts"), F = N("./src/utils/logger.ts"), O = N("./src/errors.ts"), x = function() {
                  function k(E, L) {
                    this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = false, this.retryCount = 0, this.log = void 0, this.warn = void 0, this.log = F.logger.log.bind(F.logger, L + ":"), this.warn = F.logger.warn.bind(F.logger, L + ":"), this.hls = E;
                  }
                  var m2 = k.prototype;
                  return m2.destroy = function() {
                    this.clearTimer(), this.hls = this.log = this.warn = null;
                  }, m2.onError = function(L, M) {
                    M.fatal && (M.type === O.ErrorTypes.NETWORK_ERROR || M.type === O.ErrorTypes.KEY_SYSTEM_ERROR) && this.stopLoad();
                  }, m2.clearTimer = function() {
                    clearTimeout(this.timer), this.timer = -1;
                  }, m2.startLoad = function() {
                    this.canLoad = true, this.retryCount = 0, this.requestScheduled = -1, this.loadPlaylist();
                  }, m2.stopLoad = function() {
                    this.canLoad = false, this.clearTimer();
                  }, m2.switchParams = function(L, M) {
                    var y = M == null ? void 0 : M.renditionReports;
                    if (y)
                      for (var I = 0; I < y.length; I++) {
                        var S = y[I], d = void 0;
                        try {
                          d = new self.URL(S.URI, M.url).href;
                        } catch (_) {
                          F.logger.warn("Could not construct new URL for Rendition Report: " + _), d = S.URI || "";
                        }
                        if (d === L.slice(-d.length)) {
                          var v = parseInt(S["LAST-MSN"]) || (M == null ? void 0 : M.lastPartSn), f = parseInt(S["LAST-PART"]) || (M == null ? void 0 : M.lastPartIndex);
                          if (this.hls.config.lowLatencyMode) {
                            var l = Math.min(M.age - M.partTarget, M.targetduration);
                            f >= 0 && l > M.partTarget && (f += 1);
                          }
                          return new j.HlsUrlParameters(v, f >= 0 ? f : void 0, j.HlsSkip.No);
                        }
                      }
                  }, m2.loadPlaylist = function(L) {
                    this.requestScheduled === -1 && (this.requestScheduled = self.performance.now());
                  }, m2.shouldLoadTrack = function(L) {
                    return this.canLoad && L && !!L.url && (!L.details || L.details.live);
                  }, m2.playlistLoaded = function(L, M, y) {
                    var I = this, S = M.details, d = M.stats, v = self.performance.now(), f = d.loading.first ? Math.max(0, v - d.loading.first) : 0;
                    if (S.advancedDateTime = Date.now() - f, S.live || y != null && y.live) {
                      if (S.reloaded(y), y && this.log("live playlist " + L + " " + (S.advanced ? "REFRESHED " + S.lastPartSn + "-" + S.lastPartIndex : "MISSED")), y && S.fragments.length > 0 && (0, R.mergeDetails)(y, S), !this.canLoad || !S.live)
                        return;
                      var l, _ = void 0, g = void 0;
                      if (S.canBlockReload && S.endSN && S.advanced) {
                        var i = this.hls.config.lowLatencyMode, n = S.lastPartSn, o = S.endSN, h = S.lastPartIndex, b = h !== -1, a = n === o, c = i ? 0 : h;
                        b ? (_ = a ? o + 1 : n, g = a ? c : h + 1) : _ = o + 1;
                        var s = S.age, p = s + S.ageHeader, D = Math.min(p - S.partTarget, S.targetduration * 1.5);
                        if (D > 0) {
                          if (y && D > y.tuneInGoal)
                            this.warn("CDN Tune-in goal increased from: " + y.tuneInGoal + " to: " + D + " with playlist age: " + S.age), D = 0;
                          else {
                            var A = Math.floor(D / S.targetduration);
                            if (_ += A, g !== void 0) {
                              var w = Math.round(D % S.targetduration / S.partTarget);
                              g += w;
                            }
                            this.log("CDN Tune-in age: " + S.ageHeader + "s last advanced " + s.toFixed(2) + "s goal: " + D + " skip sn " + A + " to part " + g);
                          }
                          S.tuneInGoal = D;
                        }
                        if (l = this.getDeliveryDirectives(S, M.deliveryDirectives, _, g), i || !a) {
                          this.loadPlaylist(l);
                          return;
                        }
                      } else
                        l = this.getDeliveryDirectives(S, M.deliveryDirectives, _, g);
                      var B = this.hls.mainForwardBufferInfo, U = B ? B.end - B.len : 0, K = (S.edge - U) * 1e3, W = (0, R.computeReloadInterval)(S, K);
                      S.updated ? v > this.requestScheduled + W && (this.requestScheduled = d.loading.start) : this.requestScheduled = -1, _ !== void 0 && S.canBlockReload ? this.requestScheduled = d.loading.first + W - (S.partTarget * 1e3 || 1e3) : this.requestScheduled = (this.requestScheduled === -1 ? v : this.requestScheduled) + W;
                      var H = this.requestScheduled - v;
                      H = Math.max(0, H), this.log("reload live playlist " + L + " in " + Math.round(H) + " ms"), this.timer = self.setTimeout(function() {
                        return I.loadPlaylist(l);
                      }, H);
                    } else
                      this.clearTimer();
                  }, m2.getDeliveryDirectives = function(L, M, y, I) {
                    var S = (0, j.getSkipValue)(L, y);
                    return M != null && M.skip && L.deltaUpdateFailed && (y = M.msn, I = M.part, S = j.HlsSkip.No), new j.HlsUrlParameters(y, I, S);
                  }, m2.retryLoadingOrFail = function(L) {
                    var M = this, y = this.hls.config, I = this.retryCount < y.levelLoadingMaxRetry;
                    if (I) {
                      var S;
                      if (this.requestScheduled = -1, this.retryCount++, L.details.indexOf("LoadTimeOut") > -1 && (S = L.context) !== null && S !== void 0 && S.deliveryDirectives)
                        this.warn("retry playlist loading #" + this.retryCount + ' after "' + L.details + '"'), this.loadPlaylist();
                      else {
                        var d = Math.min(Math.pow(2, this.retryCount) * y.levelLoadingRetryDelay, y.levelLoadingMaxRetryTimeout);
                        this.timer = self.setTimeout(function() {
                          return M.loadPlaylist();
                        }, d), this.warn("retry playlist loading #" + this.retryCount + " in " + d + ' ms after "' + L.details + '"');
                      }
                    } else
                      this.warn('cannot recover from error "' + L.details + '"'), this.clearTimer(), L.fatal = true;
                    return I;
                  }, k;
                }();
              }, "./src/controller/base-stream-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { State: () => b, default: () => a });
                var j = N("./src/polyfills/number.ts"), R = N("./src/task-loop.ts"), F = N("./src/controller/fragment-tracker.ts"), O = N("./src/utils/buffer-helper.ts"), x = N("./src/utils/logger.ts"), k = N("./src/events.ts"), m2 = N("./src/errors.ts"), E = N("./src/types/transmuxer.ts"), L = N("./src/utils/mp4-tools.ts"), M = N("./src/utils/discontinuities.ts"), y = N("./src/controller/fragment-finders.ts"), I = N("./src/controller/level-helper.ts"), S = N("./src/loader/fragment-loader.ts"), d = N("./src/crypt/decrypter.ts"), v = N("./src/utils/time-ranges.ts"), f = N("./src/types/loader.ts");
                function l(c, s) {
                  for (var p = 0; p < s.length; p++) {
                    var D = s[p];
                    D.enumerable = D.enumerable || false, D.configurable = true, "value" in D && (D.writable = true), Object.defineProperty(c, g(D.key), D);
                  }
                }
                function _(c, s, p) {
                  return s && l(c.prototype, s), p && l(c, p), Object.defineProperty(c, "prototype", { writable: false }), c;
                }
                function g(c) {
                  var s = i(c, "string");
                  return typeof s == "symbol" ? s : String(s);
                }
                function i(c, s) {
                  if (typeof c != "object" || c === null)
                    return c;
                  var p = c[Symbol.toPrimitive];
                  if (p !== void 0) {
                    var D = p.call(c, s || "default");
                    if (typeof D != "object")
                      return D;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (s === "string" ? String : Number)(c);
                }
                function n(c) {
                  if (c === void 0)
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                  return c;
                }
                function o(c, s) {
                  c.prototype = Object.create(s.prototype), c.prototype.constructor = c, h(c, s);
                }
                function h(c, s) {
                  return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(D, A) {
                    return D.__proto__ = A, D;
                  }, h(c, s);
                }
                var b = { STOPPED: "STOPPED", IDLE: "IDLE", KEY_LOADING: "KEY_LOADING", FRAG_LOADING: "FRAG_LOADING", FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY", WAITING_TRACK: "WAITING_TRACK", PARSING: "PARSING", PARSED: "PARSED", ENDED: "ENDED", ERROR: "ERROR", WAITING_INIT_PTS: "WAITING_INIT_PTS", WAITING_LEVEL: "WAITING_LEVEL" }, a = function(c) {
                  o(s, c);
                  function s(D, A, w, B) {
                    var U;
                    return U = c.call(this) || this, U.hls = void 0, U.fragPrevious = null, U.fragCurrent = null, U.fragmentTracker = void 0, U.transmuxer = null, U._state = b.STOPPED, U.media = null, U.mediaBuffer = null, U.config = void 0, U.bitrateTest = false, U.lastCurrentTime = 0, U.nextLoadPosition = 0, U.startPosition = 0, U.loadedmetadata = false, U.fragLoadError = 0, U.retryDate = 0, U.levels = null, U.fragmentLoader = void 0, U.keyLoader = void 0, U.levelLastLoaded = null, U.startFragRequested = false, U.decrypter = void 0, U.initPTS = [], U.onvseeking = null, U.onvended = null, U.logPrefix = "", U.log = void 0, U.warn = void 0, U.logPrefix = B, U.log = x.logger.log.bind(x.logger, B + ":"), U.warn = x.logger.warn.bind(x.logger, B + ":"), U.hls = D, U.fragmentLoader = new S.default(D.config), U.keyLoader = w, U.fragmentTracker = A, U.config = D.config, U.decrypter = new d.default(D.config), D.on(k.Events.LEVEL_SWITCHING, U.onLevelSwitching, n(U)), U;
                  }
                  var p = s.prototype;
                  return p.doTick = function() {
                    this.onTickEnd();
                  }, p.onTickEnd = function() {
                  }, p.startLoad = function(A) {
                  }, p.stopLoad = function() {
                    this.fragmentLoader.abort(), this.keyLoader.abort();
                    var A = this.fragCurrent;
                    A && (A.abortRequests(), this.fragmentTracker.removeFragment(A)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = b.STOPPED;
                  }, p._streamEnded = function(A, w) {
                    if (w.live || A.nextStart || !A.end || !this.media)
                      return false;
                    var B = w.partList;
                    if (B != null && B.length) {
                      var U = B[B.length - 1], K = O.BufferHelper.isBuffered(this.media, U.start + U.duration / 2);
                      return K;
                    }
                    var W = w.fragments[w.fragments.length - 1].type;
                    return this.fragmentTracker.isEndListAppended(W);
                  }, p.getLevelDetails = function() {
                    if (this.levels && this.levelLastLoaded !== null) {
                      var A;
                      return (A = this.levels[this.levelLastLoaded]) === null || A === void 0 ? void 0 : A.details;
                    }
                  }, p.onMediaAttached = function(A, w) {
                    var B = this.media = this.mediaBuffer = w.media;
                    this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), B.addEventListener("seeking", this.onvseeking), B.addEventListener("ended", this.onvended);
                    var U = this.config;
                    this.levels && U.autoStartLoad && this.state === b.STOPPED && this.startLoad(U.startPosition);
                  }, p.onMediaDetaching = function() {
                    var A = this.media;
                    A != null && A.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), A && this.onvseeking && this.onvended && (A.removeEventListener("seeking", this.onvseeking), A.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = false, this.fragmentTracker.removeAllFragments(), this.stopLoad();
                  }, p.onMediaSeeking = function() {
                    var A = this.config, w = this.fragCurrent, B = this.media, U = this.mediaBuffer, K = this.state, W = B ? B.currentTime : 0, H = O.BufferHelper.bufferInfo(U || B, W, A.maxBufferHole);
                    if (this.log("media seeking to " + ((0, j.isFiniteNumber)(W) ? W.toFixed(3) : W) + ", state: " + K), this.state === b.ENDED)
                      this.resetLoadingState();
                    else if (w) {
                      var V = A.maxFragLookUpTolerance, z = w.start - V, Q = w.start + w.duration + V;
                      if (!H.len || Q < H.start || z > H.end) {
                        var q = W > Q;
                        (W < z || q) && (q && w.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), w.abortRequests()), this.resetLoadingState());
                      }
                    }
                    B && (this.lastCurrentTime = W), !this.loadedmetadata && !H.len && (this.nextLoadPosition = this.startPosition = W), this.tickImmediate();
                  }, p.onMediaEnded = function() {
                    this.startPosition = this.lastCurrentTime = 0;
                  }, p.onLevelSwitching = function(A, w) {
                    this.fragLoadError = 0;
                  }, p.onHandlerDestroying = function() {
                    this.stopLoad(), c.prototype.onHandlerDestroying.call(this);
                  }, p.onHandlerDestroyed = function() {
                    this.state = b.STOPPED, this.hls.off(k.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, c.prototype.onHandlerDestroyed.call(this);
                  }, p.loadFragment = function(A, w, B) {
                    this._loadFragForPlayback(A, w, B);
                  }, p._loadFragForPlayback = function(A, w, B) {
                    var U = this, K = function(H) {
                      if (U.fragContextChanged(A)) {
                        U.warn("Fragment " + A.sn + (H.part ? " p: " + H.part.index : "") + " of level " + A.level + " was dropped during download."), U.fragmentTracker.removeFragment(A);
                        return;
                      }
                      A.stats.chunkCount++, U._handleFragmentLoadProgress(H);
                    };
                    this._doFragLoad(A, w, B, K).then(function(W) {
                      if (!!W) {
                        U.fragLoadError = 0;
                        var H = U.state;
                        if (U.fragContextChanged(A)) {
                          (H === b.FRAG_LOADING || !U.fragCurrent && H === b.PARSING) && (U.fragmentTracker.removeFragment(A), U.state = b.IDLE);
                          return;
                        }
                        "payload" in W && (U.log("Loaded fragment " + A.sn + " of level " + A.level), U.hls.trigger(k.Events.FRAG_LOADED, W)), U._handleFragmentLoadComplete(W);
                      }
                    }).catch(function(W) {
                      U.state === b.STOPPED || U.state === b.ERROR || (U.warn(W), U.resetFragmentLoading(A));
                    });
                  }, p.flushMainBuffer = function(A, w, B) {
                    if (B === void 0 && (B = null), !!(A - w)) {
                      var U = { startOffset: A, endOffset: w, type: B };
                      this.fragLoadError = 0, this.hls.trigger(k.Events.BUFFER_FLUSHING, U);
                    }
                  }, p._loadInitSegment = function(A, w) {
                    var B = this;
                    this._doFragLoad(A, w).then(function(U) {
                      if (!U || B.fragContextChanged(A) || !B.levels)
                        throw new Error("init load aborted");
                      return U;
                    }).then(function(U) {
                      var K = B.hls, W = U.payload, H = A.decryptdata;
                      if (W && W.byteLength > 0 && H && H.key && H.iv && H.method === "AES-128") {
                        var V = self.performance.now();
                        return B.decrypter.decrypt(new Uint8Array(W), H.key.buffer, H.iv.buffer).then(function(z) {
                          var Q = self.performance.now();
                          return K.trigger(k.Events.FRAG_DECRYPTED, { frag: A, payload: z, stats: { tstart: V, tdecrypt: Q } }), U.payload = z, U;
                        });
                      }
                      return U;
                    }).then(function(U) {
                      var K = B.fragCurrent, W = B.hls, H = B.levels;
                      if (!H)
                        throw new Error("init load aborted, missing levels");
                      var V = H[A.level].details;
                      console.assert(V, "Level details are defined when init segment is loaded");
                      var z = A.stats;
                      B.state = b.IDLE, B.fragLoadError = 0, A.data = new Uint8Array(U.payload), z.parsing.start = z.buffering.start = self.performance.now(), z.parsing.end = z.buffering.end = self.performance.now(), U.frag === K && W.trigger(k.Events.FRAG_BUFFERED, { stats: z, frag: K, part: null, id: A.type }), B.tick();
                    }).catch(function(U) {
                      B.state === b.STOPPED || B.state === b.ERROR || (B.warn(U), B.resetFragmentLoading(A));
                    });
                  }, p.fragContextChanged = function(A) {
                    var w = this.fragCurrent;
                    return !A || !w || A.level !== w.level || A.sn !== w.sn || A.urlId !== w.urlId;
                  }, p.fragBufferedComplete = function(A, w) {
                    var B, U, K = this.mediaBuffer ? this.mediaBuffer : this.media;
                    this.log("Buffered " + A.type + " sn: " + A.sn + (w ? " part: " + w.index : "") + " of " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + " " + A.level + " " + (K ? v.default.toString(O.BufferHelper.getBuffered(K)) : "(detached)")), this.state = b.IDLE, !!K && (!this.loadedmetadata && A.type == f.PlaylistLevelType.MAIN && K.buffered.length && ((B = this.fragCurrent) === null || B === void 0 ? void 0 : B.sn) === ((U = this.fragPrevious) === null || U === void 0 ? void 0 : U.sn) && (this.loadedmetadata = true, this.seekToStartPos()), this.tick());
                  }, p.seekToStartPos = function() {
                  }, p._handleFragmentLoadComplete = function(A) {
                    var w = this.transmuxer;
                    if (!!w) {
                      var B = A.frag, U = A.part, K = A.partsLoaded, W = !K || K.length === 0 || K.some(function(V) {
                        return !V;
                      }), H = new E.ChunkMetadata(B.level, B.sn, B.stats.chunkCount + 1, 0, U ? U.index : -1, !W);
                      w.flush(H);
                    }
                  }, p._handleFragmentLoadProgress = function(A) {
                  }, p._doFragLoad = function(A, w, B, U) {
                    var K, W = this;
                    if (B === void 0 && (B = null), !this.levels)
                      throw new Error("frag load aborted, missing levels");
                    var H = null;
                    if (A.encrypted && !((K = A.decryptdata) !== null && K !== void 0 && K.key) ? (this.log("Loading key for " + A.sn + " of [" + w.startSN + "-" + w.endSN + "], " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + " " + A.level), this.state = b.KEY_LOADING, this.fragCurrent = A, H = this.keyLoader.load(A).then(function(ee) {
                      if (!W.fragContextChanged(ee.frag))
                        return W.hls.trigger(k.Events.KEY_LOADED, ee), ee;
                    }), this.hls.trigger(k.Events.KEY_LOADING, { frag: A }), this.throwIfFragContextChanged("KEY_LOADING")) : !A.encrypted && w.encryptedFragments.length && this.keyLoader.loadClear(A, w.encryptedFragments), B = Math.max(A.start, B || 0), this.config.lowLatencyMode && w) {
                      var V = w.partList;
                      if (V && U) {
                        B > A.end && w.fragmentHint && (A = w.fragmentHint);
                        var z = this.getNextPart(V, A, B);
                        if (z > -1) {
                          var Q = V[z];
                          return this.log("Loading part sn: " + A.sn + " p: " + Q.index + " cc: " + A.cc + " of playlist [" + w.startSN + "-" + w.endSN + "] parts [0-" + z + "-" + (V.length - 1) + "] " + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + A.level + ", target: " + parseFloat(B.toFixed(3))), this.nextLoadPosition = Q.start + Q.duration, this.state = b.FRAG_LOADING, this.hls.trigger(k.Events.FRAG_LOADING, { frag: A, part: V[z], targetBufferTime: B }), this.throwIfFragContextChanged("FRAG_LOADING parts"), H ? H.then(function(ee) {
                            return !ee || W.fragContextChanged(ee.frag) ? null : W.doFragPartsLoad(A, V, z, U);
                          }).catch(function(ee) {
                            return W.handleFragLoadError(ee);
                          }) : this.doFragPartsLoad(A, V, z, U).catch(function(ee) {
                            return W.handleFragLoadError(ee);
                          });
                        } else if (!A.url || this.loadedEndOfParts(V, B))
                          return Promise.resolve(null);
                      }
                    }
                    this.log("Loading fragment " + A.sn + " cc: " + A.cc + " " + (w ? "of [" + w.startSN + "-" + w.endSN + "] " : "") + (this.logPrefix === "[stream-controller]" ? "level" : "track") + ": " + A.level + ", target: " + parseFloat(B.toFixed(3))), (0, j.isFiniteNumber)(A.sn) && !this.bitrateTest && (this.nextLoadPosition = A.start + A.duration), this.state = b.FRAG_LOADING, this.hls.trigger(k.Events.FRAG_LOADING, { frag: A, targetBufferTime: B }), this.throwIfFragContextChanged("FRAG_LOADING");
                    var q = this.config.progressive;
                    return q && H ? H.then(function(ee) {
                      return !ee || W.fragContextChanged(ee == null ? void 0 : ee.frag) ? null : W.fragmentLoader.load(A, U);
                    }).catch(function(ee) {
                      return W.handleFragLoadError(ee);
                    }) : Promise.all([this.fragmentLoader.load(A, q ? U : void 0), H]).then(function(ee) {
                      var ae = ee[0];
                      return !q && ae && U && U(ae), ae;
                    }).catch(function(ee) {
                      return W.handleFragLoadError(ee);
                    });
                  }, p.throwIfFragContextChanged = function(A) {
                    if (this.fragCurrent === null)
                      throw new Error("frag load aborted, context changed in " + A);
                  }, p.doFragPartsLoad = function(A, w, B, U) {
                    var K = this;
                    return new Promise(function(W, H) {
                      var V = [], z = function Q(q) {
                        var ee = w[q];
                        K.fragmentLoader.loadPart(A, ee, U).then(function(ae) {
                          V[ee.index] = ae;
                          var ne = ae.part;
                          K.hls.trigger(k.Events.FRAG_LOADED, ae);
                          var ue = w[q + 1];
                          if (ue && ue.fragment === A)
                            Q(q + 1);
                          else
                            return W({ frag: A, part: ne, partsLoaded: V });
                        }).catch(H);
                      };
                      z(B);
                    });
                  }, p.handleFragLoadError = function(A) {
                    if ("data" in A) {
                      var w = A.data;
                      A.data && w.details === m2.ErrorDetails.INTERNAL_ABORTED ? this.handleFragLoadAborted(w.frag, w.part) : this.hls.trigger(k.Events.ERROR, w);
                    } else
                      this.hls.trigger(k.Events.ERROR, { type: m2.ErrorTypes.OTHER_ERROR, details: m2.ErrorDetails.INTERNAL_EXCEPTION, err: A, fatal: true });
                    return null;
                  }, p._handleTransmuxerFlush = function(A) {
                    var w = this.getCurrentContext(A);
                    if (!w || this.state !== b.PARSING) {
                      !this.fragCurrent && this.state !== b.STOPPED && this.state !== b.ERROR && (this.state = b.IDLE);
                      return;
                    }
                    var B = w.frag, U = w.part, K = w.level, W = self.performance.now();
                    B.stats.parsing.end = W, U && (U.stats.parsing.end = W), this.updateLevelTiming(B, U, K, A.partial);
                  }, p.getCurrentContext = function(A) {
                    var w = this.levels, B = A.level, U = A.sn, K = A.part;
                    if (!w || !w[B])
                      return this.warn("Levels object was unset while buffering fragment " + U + " of level " + B + ". The current chunk will not be buffered."), null;
                    var W = w[B], H = K > -1 ? (0, I.getPartWith)(W, U, K) : null, V = H ? H.fragment : (0, I.getFragmentWithSN)(W, U, this.fragCurrent);
                    return V ? { frag: V, part: H, level: W } : null;
                  }, p.bufferFragmentData = function(A, w, B, U) {
                    if (!(!A || this.state !== b.PARSING)) {
                      var K = A.data1, W = A.data2, H = K;
                      if (K && W && (H = (0, L.appendUint8Array)(K, W)), !(!H || !H.length)) {
                        var V = { type: A.type, frag: w, part: B, chunkMeta: U, parent: w.type, data: H };
                        this.hls.trigger(k.Events.BUFFER_APPENDING, V), A.dropped && A.independent && !B && this.flushBufferGap(w);
                      }
                    }
                  }, p.flushBufferGap = function(A) {
                    var w = this.media;
                    if (!!w) {
                      if (!O.BufferHelper.isBuffered(w, w.currentTime)) {
                        this.flushMainBuffer(0, A.start);
                        return;
                      }
                      var B = w.currentTime, U = O.BufferHelper.bufferInfo(w, B, 0), K = A.duration, W = Math.min(this.config.maxFragLookUpTolerance * 2, K * 0.25), H = Math.max(Math.min(A.start - W, U.end - W), B + W);
                      A.start - H > W && this.flushMainBuffer(H, A.start);
                    }
                  }, p.getFwdBufferInfo = function(A, w) {
                    var B = this.config, U = this.getLoadPosition();
                    if (!(0, j.isFiniteNumber)(U))
                      return null;
                    var K = O.BufferHelper.bufferInfo(A, U, B.maxBufferHole);
                    if (K.len === 0 && K.nextStart !== void 0) {
                      var W = this.fragmentTracker.getBufferedFrag(U, w);
                      if (W && K.nextStart < W.end)
                        return O.BufferHelper.bufferInfo(A, U, Math.max(K.nextStart, B.maxBufferHole));
                    }
                    return K;
                  }, p.getMaxBufferLength = function(A) {
                    var w = this.config, B;
                    return A ? B = Math.max(8 * w.maxBufferSize / A, w.maxBufferLength) : B = w.maxBufferLength, Math.min(B, w.maxMaxBufferLength);
                  }, p.reduceMaxBufferLength = function(A) {
                    var w = this.config, B = A || w.maxBufferLength;
                    return w.maxMaxBufferLength >= B ? (w.maxMaxBufferLength /= 2, this.warn("Reduce max buffer length to " + w.maxMaxBufferLength + "s"), true) : false;
                  }, p.getNextFragment = function(A, w) {
                    var B = w.fragments, U = B.length;
                    if (!U)
                      return null;
                    var K = this.config, W = B[0].start, H;
                    if (w.live) {
                      var V = K.initialLiveManifestSize;
                      if (U < V)
                        return this.warn("Not enough fragments to start playback (have: " + U + ", need: " + V + ")"), null;
                      !w.PTSKnown && !this.startFragRequested && this.startPosition === -1 && (H = this.getInitialLiveFragment(w, B), this.startPosition = H ? this.hls.liveSyncPosition || H.start : A);
                    } else
                      A <= W && (H = B[0]);
                    if (!H) {
                      var z = K.lowLatencyMode ? w.partEnd : w.fragmentEnd;
                      H = this.getFragmentAtPosition(A, z, w);
                    }
                    return this.mapToInitFragWhenRequired(H);
                  }, p.mapToInitFragWhenRequired = function(A) {
                    return A != null && A.initSegment && !(A != null && A.initSegment.data) && !this.bitrateTest ? A.initSegment : A;
                  }, p.getNextPart = function(A, w, B) {
                    for (var U = -1, K = false, W = true, H = 0, V = A.length; H < V; H++) {
                      var z = A[H];
                      if (W = W && !z.independent, U > -1 && B < z.start)
                        break;
                      var Q = z.loaded;
                      Q ? U = -1 : (K || z.independent || W) && z.fragment === w && (U = H), K = Q;
                    }
                    return U;
                  }, p.loadedEndOfParts = function(A, w) {
                    var B = A[A.length - 1];
                    return B && w > B.start && B.loaded;
                  }, p.getInitialLiveFragment = function(A, w) {
                    var B = this.fragPrevious, U = null;
                    if (B) {
                      if (A.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + B.programDateTime), U = (0, y.findFragmentByPDT)(w, B.endProgramDateTime, this.config.maxFragLookUpTolerance)), !U) {
                        var K = B.sn + 1;
                        if (K >= A.startSN && K <= A.endSN) {
                          var W = w[K - A.startSN];
                          B.cc === W.cc && (U = W, this.log("Live playlist, switching playlist, load frag with next SN: " + U.sn));
                        }
                        U || (U = (0, y.findFragWithCC)(w, B.cc), U && this.log("Live playlist, switching playlist, load frag with same CC: " + U.sn));
                      }
                    } else {
                      var H = this.hls.liveSyncPosition;
                      H !== null && (U = this.getFragmentAtPosition(H, this.bitrateTest ? A.fragmentEnd : A.edge, A));
                    }
                    return U;
                  }, p.getFragmentAtPosition = function(A, w, B) {
                    var U = this.config, K = this.fragPrevious, W = B.fragments, H = B.endSN, V = B.fragmentHint, z = U.maxFragLookUpTolerance, Q = !!(U.lowLatencyMode && B.partList && V);
                    Q && V && !this.bitrateTest && (W = W.concat(V), H = V.sn);
                    var q;
                    if (A < w) {
                      var ee = A > w - z ? 0 : z;
                      q = (0, y.findFragmentByPTS)(K, W, A, ee);
                    } else
                      q = W[W.length - 1];
                    if (q) {
                      var ae = q.sn - B.startSN;
                      if (this.fragmentTracker.getState(q) === F.FragmentState.OK && (K = q), K && q.sn === K.sn && !Q) {
                        var ne = K && q.level === K.level;
                        if (ne) {
                          var ue = W[ae + 1];
                          q.sn < H && this.fragmentTracker.getState(ue) !== F.FragmentState.OK ? (this.log("SN " + q.sn + " just loaded, load next one: " + ue.sn), q = ue) : q = null;
                        }
                      }
                    }
                    return q;
                  }, p.synchronizeToLiveEdge = function(A) {
                    var w = this.config, B = this.media;
                    if (!!B) {
                      var U = this.hls.liveSyncPosition, K = B.currentTime, W = A.fragments[0].start, H = A.edge, V = K >= W - w.maxFragLookUpTolerance && K <= H;
                      if (U !== null && B.duration > U && (K < U || !V)) {
                        var z = w.liveMaxLatencyDuration !== void 0 ? w.liveMaxLatencyDuration : w.liveMaxLatencyDurationCount * A.targetduration;
                        (!V && B.readyState < 4 || K < H - z) && (this.loadedmetadata || (this.nextLoadPosition = U), B.readyState && (this.warn("Playback: " + K.toFixed(3) + " is located too far from the end of live sliding playlist: " + H + ", reset currentTime to : " + U.toFixed(3)), B.currentTime = U));
                      }
                    }
                  }, p.alignPlaylists = function(A, w) {
                    var B = this.levels, U = this.levelLastLoaded, K = this.fragPrevious, W = U !== null ? B[U] : null, H = A.fragments.length;
                    if (!H)
                      return this.warn("No fragments in live playlist"), 0;
                    var V = A.fragments[0].start, z = !w, Q = A.alignedSliding && (0, j.isFiniteNumber)(V);
                    if (z || !Q && !V) {
                      (0, M.alignStream)(K, W, A);
                      var q = A.fragments[0].start;
                      return this.log("Live playlist sliding: " + q.toFixed(2) + " start-sn: " + (w ? w.startSN : "na") + "->" + A.startSN + " prev-sn: " + (K ? K.sn : "na") + " fragments: " + H), q;
                    }
                    return V;
                  }, p.waitForCdnTuneIn = function(A) {
                    var w = 3;
                    return A.live && A.canBlockReload && A.partTarget && A.tuneInGoal > Math.max(A.partHoldBack, A.partTarget * w);
                  }, p.setStartPosition = function(A, w) {
                    var B = this.startPosition;
                    if (B < w && (B = -1), B === -1 || this.lastCurrentTime === -1) {
                      var U = A.startTimeOffset;
                      (0, j.isFiniteNumber)(U) ? (B = w + U, U < 0 && (B += A.totalduration), B = Math.min(Math.max(w, B), w + A.totalduration), this.log("Start time offset " + U + " found in playlist, adjust startPosition to " + B), this.startPosition = B) : A.live ? B = this.hls.liveSyncPosition || w : this.startPosition = B = 0, this.lastCurrentTime = B;
                    }
                    this.nextLoadPosition = B;
                  }, p.getLoadPosition = function() {
                    var A = this.media, w = 0;
                    return this.loadedmetadata && A ? w = A.currentTime : this.nextLoadPosition && (w = this.nextLoadPosition), w;
                  }, p.handleFragLoadAborted = function(A, w) {
                    this.transmuxer && A.sn !== "initSegment" && A.stats.aborted && (this.warn("Fragment " + A.sn + (w ? " part" + w.index : "") + " of level " + A.level + " was aborted"), this.resetFragmentLoading(A));
                  }, p.resetFragmentLoading = function(A) {
                    (!this.fragCurrent || !this.fragContextChanged(A) && this.state !== b.FRAG_LOADING_WAITING_RETRY) && (this.state = b.IDLE);
                  }, p.onFragmentOrKeyLoadError = function(A, w) {
                    if (w.fatal) {
                      this.stopLoad(), this.state = b.ERROR;
                      return;
                    }
                    var B = this.config;
                    if (w.chunkMeta) {
                      var U = this.getCurrentContext(w.chunkMeta);
                      U && (w.frag = U.frag, w.levelRetry = true, this.fragLoadError = B.fragLoadingMaxRetry);
                    }
                    var K = w.frag;
                    if (!(!K || K.type !== A)) {
                      var W = this.fragCurrent;
                      if (console.assert(W && K.sn === W.sn && K.level === W.level && K.urlId === W.urlId, "Frag load error must match current frag to retry"), this.fragLoadError + 1 <= B.fragLoadingMaxRetry) {
                        this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition);
                        var H = Math.min(Math.pow(2, this.fragLoadError) * B.fragLoadingRetryDelay, B.fragLoadingMaxRetryTimeout);
                        this.warn("Fragment " + K.sn + " of " + A + " " + K.level + " failed to load, retrying in " + H + "ms"), this.retryDate = self.performance.now() + H, this.fragLoadError++, this.state = b.FRAG_LOADING_WAITING_RETRY;
                      } else
                        w.levelRetry ? (A === f.PlaylistLevelType.AUDIO && (this.fragCurrent = null), this.fragLoadError = 0, this.state = b.IDLE) : (x.logger.error(w.details + " reaches max retry, redispatch as fatal ..."), w.fatal = true, this.hls.stopLoad(), this.state = b.ERROR);
                    }
                  }, p.afterBufferFlushed = function(A, w, B) {
                    if (!!A) {
                      var U = O.BufferHelper.getBuffered(A);
                      this.fragmentTracker.detectEvictedFragments(w, U, B), this.state === b.ENDED && this.resetLoadingState();
                    }
                  }, p.resetLoadingState = function() {
                    this.log("Reset loading state"), this.fragCurrent = null, this.fragPrevious = null, this.state = b.IDLE;
                  }, p.resetStartWhenNotLoaded = function(A) {
                    if (!this.loadedmetadata) {
                      this.startFragRequested = false;
                      var w = this.levels ? this.levels[A].details : null;
                      w != null && w.live ? (this.startPosition = -1, this.setStartPosition(w, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition;
                    }
                  }, p.updateLevelTiming = function(A, w, B, U) {
                    var K = this, W = B.details;
                    console.assert(!!W, "level.details must be defined");
                    var H = Object.keys(A.elementaryStreams).reduce(function(V, z) {
                      var Q = A.elementaryStreams[z];
                      if (Q) {
                        var q = Q.endPTS - Q.startPTS;
                        if (q <= 0)
                          return K.warn("Could not parse fragment " + A.sn + " " + z + " duration reliably (" + q + ")"), V || false;
                        var ee = U ? 0 : (0, I.updateFragPTSDTS)(W, A, Q.startPTS, Q.endPTS, Q.startDTS, Q.endDTS);
                        return K.hls.trigger(k.Events.LEVEL_PTS_UPDATED, { details: W, level: B, drift: ee, type: z, frag: A, start: Q.startPTS, end: Q.endPTS }), true;
                      }
                      return V;
                    }, false);
                    H || (this.warn("Found no media in fragment " + A.sn + " of level " + B.id + " resetting transmuxer to fallback to playlist timing"), this.resetTransmuxer()), this.state = b.PARSED, this.hls.trigger(k.Events.FRAG_PARSED, { frag: A, part: w });
                  }, p.resetTransmuxer = function() {
                    this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null);
                  }, _(s, [{ key: "state", get: function() {
                    return this._state;
                  }, set: function(A) {
                    var w = this._state;
                    w !== A && (this._state = A, this.log(w + "->" + A));
                  } }]), s;
                }(R.default);
              }, "./src/controller/buffer-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => y });
                var j = N("./src/polyfills/number.ts"), R = N("./src/events.ts"), F = N("./src/utils/logger.ts"), O = N("./src/errors.ts"), x = N("./src/utils/buffer-helper.ts"), k = N("./src/utils/mediasource-helper.ts"), m2 = N("./src/loader/fragment.ts"), E = N("./src/controller/buffer-operation-queue.ts"), L = (0, k.getMediaSource)(), M = /([ha]vc.)(?:\.[^.,]+)+/, y = function() {
                  function I(d) {
                    var v = this;
                    this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendError = 0, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this._onMediaSourceOpen = function() {
                      var f = v.hls, l = v.media, _ = v.mediaSource;
                      F.logger.log("[buffer-controller]: Media source opened"), l && (v.updateMediaElementDuration(), f.trigger(R.Events.MEDIA_ATTACHED, { media: l })), _ && _.removeEventListener("sourceopen", v._onMediaSourceOpen), v.checkPendingTracks();
                    }, this._onMediaSourceClose = function() {
                      F.logger.log("[buffer-controller]: Media source closed");
                    }, this._onMediaSourceEnded = function() {
                      F.logger.log("[buffer-controller]: Media source ended");
                    }, this.hls = d, this._initSourceBuffer(), this.registerListeners();
                  }
                  var S = I.prototype;
                  return S.hasSourceTypes = function() {
                    return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
                  }, S.destroy = function() {
                    this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null;
                  }, S.registerListeners = function() {
                    var v = this.hls;
                    v.on(R.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), v.on(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), v.on(R.Events.MANIFEST_PARSED, this.onManifestParsed, this), v.on(R.Events.BUFFER_RESET, this.onBufferReset, this), v.on(R.Events.BUFFER_APPENDING, this.onBufferAppending, this), v.on(R.Events.BUFFER_CODECS, this.onBufferCodecs, this), v.on(R.Events.BUFFER_EOS, this.onBufferEos, this), v.on(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), v.on(R.Events.LEVEL_UPDATED, this.onLevelUpdated, this), v.on(R.Events.FRAG_PARSED, this.onFragParsed, this), v.on(R.Events.FRAG_CHANGED, this.onFragChanged, this);
                  }, S.unregisterListeners = function() {
                    var v = this.hls;
                    v.off(R.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), v.off(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), v.off(R.Events.MANIFEST_PARSED, this.onManifestParsed, this), v.off(R.Events.BUFFER_RESET, this.onBufferReset, this), v.off(R.Events.BUFFER_APPENDING, this.onBufferAppending, this), v.off(R.Events.BUFFER_CODECS, this.onBufferCodecs, this), v.off(R.Events.BUFFER_EOS, this.onBufferEos, this), v.off(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), v.off(R.Events.LEVEL_UPDATED, this.onLevelUpdated, this), v.off(R.Events.FRAG_PARSED, this.onFragParsed, this), v.off(R.Events.FRAG_CHANGED, this.onFragChanged, this);
                  }, S._initSourceBuffer = function() {
                    this.sourceBuffer = {}, this.operationQueue = new E.default(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] }, this.lastMpegAudioChunk = null;
                  }, S.onManifestParsed = function(v, f) {
                    var l = 2;
                    (f.audio && !f.video || !f.altAudio) && (l = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = l, this.details = null, F.logger.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
                  }, S.onMediaAttaching = function(v, f) {
                    var l = this.media = f.media;
                    if (l && L) {
                      var _ = this.mediaSource = new L();
                      _.addEventListener("sourceopen", this._onMediaSourceOpen), _.addEventListener("sourceended", this._onMediaSourceEnded), _.addEventListener("sourceclose", this._onMediaSourceClose), l.src = self.URL.createObjectURL(_), this._objectUrl = l.src;
                    }
                  }, S.onMediaDetaching = function() {
                    var v = this.media, f = this.mediaSource, l = this._objectUrl;
                    if (f) {
                      if (F.logger.log("[buffer-controller]: media source detaching"), f.readyState === "open")
                        try {
                          f.endOfStream();
                        } catch (_) {
                          F.logger.warn("[buffer-controller]: onMediaDetaching: " + _.message + " while calling endOfStream");
                        }
                      this.onBufferReset(), f.removeEventListener("sourceopen", this._onMediaSourceOpen), f.removeEventListener("sourceended", this._onMediaSourceEnded), f.removeEventListener("sourceclose", this._onMediaSourceClose), v && (l && self.URL.revokeObjectURL(l), v.src === l ? (v.removeAttribute("src"), v.load()) : F.logger.warn("[buffer-controller]: media.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {};
                    }
                    this.hls.trigger(R.Events.MEDIA_DETACHED, void 0);
                  }, S.onBufferReset = function() {
                    var v = this;
                    this.getSourceBufferTypes().forEach(function(f) {
                      var l = v.sourceBuffer[f];
                      try {
                        l && (v.removeBufferListeners(f), v.mediaSource && v.mediaSource.removeSourceBuffer(l), v.sourceBuffer[f] = void 0);
                      } catch (_) {
                        F.logger.warn("[buffer-controller]: Failed to reset the " + f + " buffer", _);
                      }
                    }), this._initSourceBuffer();
                  }, S.onBufferCodecs = function(v, f) {
                    var l = this, _ = this.getSourceBufferTypes().length;
                    Object.keys(f).forEach(function(g) {
                      if (_) {
                        var i = l.tracks[g];
                        if (i && typeof i.buffer.changeType == "function") {
                          var n = f[g], o = n.id, h = n.codec, b = n.levelCodec, a = n.container, c = n.metadata, s = (i.levelCodec || i.codec).replace(M, "$1"), p = (b || h).replace(M, "$1");
                          if (s !== p) {
                            var D = a + ";codecs=" + (b || h);
                            l.appendChangeType(g, D), F.logger.log("[buffer-controller]: switching codec " + s + " to " + p), l.tracks[g] = { buffer: i.buffer, codec: h, container: a, levelCodec: b, metadata: c, id: o };
                          }
                        }
                      } else
                        l.pendingTracks[g] = f[g];
                    }), !_ && (this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0), this.mediaSource && this.mediaSource.readyState === "open" && this.checkPendingTracks());
                  }, S.appendChangeType = function(v, f) {
                    var l = this, _ = this.operationQueue, g = { execute: function() {
                      var n = l.sourceBuffer[v];
                      n && (F.logger.log("[buffer-controller]: changing " + v + " sourceBuffer type to " + f), n.changeType(f)), _.shiftAndExecuteNext(v);
                    }, onStart: function() {
                    }, onComplete: function() {
                    }, onError: function(n) {
                      F.logger.warn("[buffer-controller]: Failed to change " + v + " SourceBuffer type", n);
                    } };
                    _.append(g, v);
                  }, S.onBufferAppending = function(v, f) {
                    var l = this, _ = this.hls, g = this.operationQueue, i = this.tracks, n = f.data, o = f.type, h = f.frag, b = f.part, a = f.chunkMeta, c = a.buffering[o], s = self.performance.now();
                    c.start = s;
                    var p = h.stats.buffering, D = b ? b.stats.buffering : null;
                    p.start === 0 && (p.start = s), D && D.start === 0 && (D.start = s);
                    var A = i.audio, w = false;
                    o === "audio" && (A == null ? void 0 : A.container) === "audio/mpeg" && (w = !this.lastMpegAudioChunk || a.id === 1 || this.lastMpegAudioChunk.sn !== a.sn, this.lastMpegAudioChunk = a);
                    var B = h.start, U = { execute: function() {
                      if (c.executeStart = self.performance.now(), w) {
                        var W = l.sourceBuffer[o];
                        if (W) {
                          var H = B - W.timestampOffset;
                          Math.abs(H) >= 0.1 && (F.logger.log("[buffer-controller]: Updating audio SourceBuffer timestampOffset to " + B + " (delta: " + H + ") sn: " + h.sn + ")"), W.timestampOffset = B);
                        }
                      }
                      l.appendExecutor(n, o);
                    }, onStart: function() {
                    }, onComplete: function() {
                      var W = self.performance.now();
                      c.executeEnd = c.end = W, p.first === 0 && (p.first = W), D && D.first === 0 && (D.first = W);
                      var H = l.sourceBuffer, V = {};
                      for (var z in H)
                        V[z] = x.BufferHelper.getBuffered(H[z]);
                      l.appendError = 0, l.hls.trigger(R.Events.BUFFER_APPENDED, { type: o, frag: h, part: b, chunkMeta: a, parent: h.type, timeRanges: V });
                    }, onError: function(W) {
                      F.logger.error("[buffer-controller]: Error encountered while trying to append to the " + o + " SourceBuffer", W);
                      var H = { type: O.ErrorTypes.MEDIA_ERROR, parent: h.type, details: O.ErrorDetails.BUFFER_APPEND_ERROR, err: W, fatal: false };
                      W.code === DOMException.QUOTA_EXCEEDED_ERR ? H.details = O.ErrorDetails.BUFFER_FULL_ERROR : (l.appendError++, H.details = O.ErrorDetails.BUFFER_APPEND_ERROR, l.appendError > _.config.appendErrorMaxRetry && (F.logger.error("[buffer-controller]: Failed " + _.config.appendErrorMaxRetry + " times to append segment in sourceBuffer"), H.fatal = true, _.stopLoad())), _.trigger(R.Events.ERROR, H);
                    } };
                    g.append(U, o);
                  }, S.onBufferFlushing = function(v, f) {
                    var l = this, _ = this.operationQueue, g = function(n) {
                      return { execute: l.removeExecutor.bind(l, n, f.startOffset, f.endOffset), onStart: function() {
                      }, onComplete: function() {
                        l.hls.trigger(R.Events.BUFFER_FLUSHED, { type: n });
                      }, onError: function(h) {
                        F.logger.warn("[buffer-controller]: Failed to remove from " + n + " SourceBuffer", h);
                      } };
                    };
                    f.type ? _.append(g(f.type), f.type) : this.getSourceBufferTypes().forEach(function(i) {
                      _.append(g(i), i);
                    });
                  }, S.onFragParsed = function(v, f) {
                    var l = this, _ = f.frag, g = f.part, i = [], n = g ? g.elementaryStreams : _.elementaryStreams;
                    n[m2.ElementaryStreamTypes.AUDIOVIDEO] ? i.push("audiovideo") : (n[m2.ElementaryStreamTypes.AUDIO] && i.push("audio"), n[m2.ElementaryStreamTypes.VIDEO] && i.push("video"));
                    var o = function() {
                      var b = self.performance.now();
                      _.stats.buffering.end = b, g && (g.stats.buffering.end = b);
                      var a = g ? g.stats : _.stats;
                      l.hls.trigger(R.Events.FRAG_BUFFERED, { frag: _, part: g, stats: a, id: _.type });
                    };
                    i.length === 0 && F.logger.warn("Fragments must have at least one ElementaryStreamType set. type: " + _.type + " level: " + _.level + " sn: " + _.sn), this.blockBuffers(o, i);
                  }, S.onFragChanged = function(v, f) {
                    this.flushBackBuffer();
                  }, S.onBufferEos = function(v, f) {
                    var l = this, _ = this.getSourceBufferTypes().reduce(function(g, i) {
                      var n = l.sourceBuffer[i];
                      return n && (!f.type || f.type === i) && (n.ending = true, n.ended || (n.ended = true, F.logger.log("[buffer-controller]: " + i + " sourceBuffer now EOS"))), g && !!(!n || n.ended);
                    }, true);
                    _ && (F.logger.log("[buffer-controller]: Queueing mediaSource.endOfStream()"), this.blockBuffers(function() {
                      l.getSourceBufferTypes().forEach(function(i) {
                        var n = l.sourceBuffer[i];
                        n && (n.ending = false);
                      });
                      var g = l.mediaSource;
                      if (!g || g.readyState !== "open") {
                        g && F.logger.info("[buffer-controller]: Could not call mediaSource.endOfStream(). mediaSource.readyState: " + g.readyState);
                        return;
                      }
                      F.logger.log("[buffer-controller]: Calling mediaSource.endOfStream()"), g.endOfStream();
                    }));
                  }, S.onLevelUpdated = function(v, f) {
                    var l = f.details;
                    !l.fragments.length || (this.details = l, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration());
                  }, S.flushBackBuffer = function() {
                    var v = this.hls, f = this.details, l = this.media, _ = this.sourceBuffer;
                    if (!(!l || f === null)) {
                      var g = this.getSourceBufferTypes();
                      if (!!g.length) {
                        var i = f.live && v.config.liveBackBufferLength !== null ? v.config.liveBackBufferLength : v.config.backBufferLength;
                        if (!(!(0, j.isFiniteNumber)(i) || i < 0)) {
                          var n = l.currentTime, o = f.levelTargetDuration, h = Math.max(i, o), b = Math.floor(n / o) * o - h;
                          g.forEach(function(a) {
                            var c = _[a];
                            if (c) {
                              var s = x.BufferHelper.getBuffered(c);
                              if (s.length > 0 && b > s.start(0)) {
                                if (v.trigger(R.Events.BACK_BUFFER_REACHED, { bufferEnd: b }), f.live)
                                  v.trigger(R.Events.LIVE_BACK_BUFFER_REACHED, { bufferEnd: b });
                                else if (c.ended && s.end(s.length - 1) - n < o * 2) {
                                  F.logger.info("[buffer-controller]: Cannot flush " + a + " back buffer while SourceBuffer is in ended state");
                                  return;
                                }
                                v.trigger(R.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: b, type: a });
                              }
                            }
                          });
                        }
                      }
                    }
                  }, S.updateMediaElementDuration = function() {
                    if (!(!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== "open")) {
                      var v = this.details, f = this.hls, l = this.media, _ = this.mediaSource, g = v.fragments[0].start + v.totalduration, i = l.duration, n = (0, j.isFiniteNumber)(_.duration) ? _.duration : 0;
                      v.live && f.config.liveDurationInfinity ? (F.logger.log("[buffer-controller]: Media Source duration is set to Infinity"), _.duration = 1 / 0, this.updateSeekableRange(v)) : (g > n && g > i || !(0, j.isFiniteNumber)(i)) && (F.logger.log("[buffer-controller]: Updating Media Source duration to " + g.toFixed(3)), _.duration = g);
                    }
                  }, S.updateSeekableRange = function(v) {
                    var f = this.mediaSource, l = v.fragments, _ = l.length;
                    if (_ && v.live && f !== null && f !== void 0 && f.setLiveSeekableRange) {
                      var g = Math.max(0, l[0].start), i = Math.max(g, g + v.totalduration);
                      f.setLiveSeekableRange(g, i);
                    }
                  }, S.checkPendingTracks = function() {
                    var v = this.bufferCodecEventsExpected, f = this.operationQueue, l = this.pendingTracks, _ = Object.keys(l).length;
                    if (_ && !v || _ === 2) {
                      this.createSourceBuffers(l), this.pendingTracks = {};
                      var g = this.getSourceBufferTypes();
                      if (g.length === 0) {
                        this.hls.trigger(R.Events.ERROR, { type: O.ErrorTypes.MEDIA_ERROR, details: O.ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: true, reason: "could not create source buffer for media codec(s)" });
                        return;
                      }
                      g.forEach(function(i) {
                        f.executeNext(i);
                      });
                    }
                  }, S.createSourceBuffers = function(v) {
                    var f = this.sourceBuffer, l = this.mediaSource;
                    if (!l)
                      throw Error("createSourceBuffers called when mediaSource was null");
                    var _ = 0;
                    for (var g in v)
                      if (!f[g]) {
                        var i = v[g];
                        if (!i)
                          throw Error("source buffer exists for track " + g + ", however track does not");
                        var n = i.levelCodec || i.codec, o = i.container + ";codecs=" + n;
                        F.logger.log("[buffer-controller]: creating sourceBuffer(" + o + ")");
                        try {
                          var h = f[g] = l.addSourceBuffer(o), b = g;
                          this.addBufferListener(b, "updatestart", this._onSBUpdateStart), this.addBufferListener(b, "updateend", this._onSBUpdateEnd), this.addBufferListener(b, "error", this._onSBUpdateError), this.tracks[g] = { buffer: h, codec: n, container: i.container, levelCodec: i.levelCodec, metadata: i.metadata, id: i.id }, _++;
                        } catch (a) {
                          F.logger.error("[buffer-controller]: error while trying to add sourceBuffer: " + a.message), this.hls.trigger(R.Events.ERROR, { type: O.ErrorTypes.MEDIA_ERROR, details: O.ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, error: a, mimeType: o });
                        }
                      }
                    _ && this.hls.trigger(R.Events.BUFFER_CREATED, { tracks: this.tracks });
                  }, S._onSBUpdateStart = function(v) {
                    var f = this.operationQueue, l = f.current(v);
                    l.onStart();
                  }, S._onSBUpdateEnd = function(v) {
                    var f = this.operationQueue, l = f.current(v);
                    l.onComplete(), f.shiftAndExecuteNext(v);
                  }, S._onSBUpdateError = function(v, f) {
                    F.logger.error("[buffer-controller]: " + v + " SourceBuffer error", f), this.hls.trigger(R.Events.ERROR, { type: O.ErrorTypes.MEDIA_ERROR, details: O.ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });
                    var l = this.operationQueue.current(v);
                    l && l.onError(f);
                  }, S.removeExecutor = function(v, f, l) {
                    var _ = this.media, g = this.mediaSource, i = this.operationQueue, n = this.sourceBuffer, o = n[v];
                    if (!_ || !g || !o) {
                      F.logger.warn("[buffer-controller]: Attempting to remove from the " + v + " SourceBuffer, but it does not exist"), i.shiftAndExecuteNext(v);
                      return;
                    }
                    var h = (0, j.isFiniteNumber)(_.duration) ? _.duration : 1 / 0, b = (0, j.isFiniteNumber)(g.duration) ? g.duration : 1 / 0, a = Math.max(0, f), c = Math.min(l, h, b);
                    c > a && !o.ending ? (o.ended = false, F.logger.log("[buffer-controller]: Removing [" + a + "," + c + "] from the " + v + " SourceBuffer"), console.assert(!o.updating, v + " sourceBuffer must not be updating"), o.remove(a, c)) : i.shiftAndExecuteNext(v);
                  }, S.appendExecutor = function(v, f) {
                    var l = this.operationQueue, _ = this.sourceBuffer, g = _[f];
                    if (!g) {
                      F.logger.warn("[buffer-controller]: Attempting to append to the " + f + " SourceBuffer, but it does not exist"), l.shiftAndExecuteNext(f);
                      return;
                    }
                    g.ended = false, console.assert(!g.updating, f + " sourceBuffer must not be updating"), g.appendBuffer(v);
                  }, S.blockBuffers = function(v, f) {
                    var l = this;
                    if (f === void 0 && (f = this.getSourceBufferTypes()), !f.length) {
                      F.logger.log("[buffer-controller]: Blocking operation requested, but no SourceBuffers exist"), Promise.resolve().then(v);
                      return;
                    }
                    var _ = this.operationQueue, g = f.map(function(i) {
                      return _.appendBlocker(i);
                    });
                    Promise.all(g).then(function() {
                      v(), f.forEach(function(i) {
                        var n = l.sourceBuffer[i];
                        (!n || !n.updating) && _.shiftAndExecuteNext(i);
                      });
                    });
                  }, S.getSourceBufferTypes = function() {
                    return Object.keys(this.sourceBuffer);
                  }, S.addBufferListener = function(v, f, l) {
                    var _ = this.sourceBuffer[v];
                    if (!!_) {
                      var g = l.bind(this, v);
                      this.listeners[v].push({ event: f, listener: g }), _.addEventListener(f, g);
                    }
                  }, S.removeBufferListeners = function(v) {
                    var f = this.sourceBuffer[v];
                    !f || this.listeners[v].forEach(function(l) {
                      f.removeEventListener(l.event, l.listener);
                    });
                  }, I;
                }();
              }, "./src/controller/buffer-operation-queue.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = N("./src/utils/logger.ts"), R = function() {
                  function F(x) {
                    this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = x;
                  }
                  var O = F.prototype;
                  return O.append = function(k, m2) {
                    var E = this.queues[m2];
                    E.push(k), E.length === 1 && this.buffers[m2] && this.executeNext(m2);
                  }, O.insertAbort = function(k, m2) {
                    var E = this.queues[m2];
                    E.unshift(k), this.executeNext(m2);
                  }, O.appendBlocker = function(k) {
                    var m2, E = new Promise(function(M) {
                      m2 = M;
                    }), L = { execute: m2, onStart: function() {
                    }, onComplete: function() {
                    }, onError: function() {
                    } };
                    return this.append(L, k), E;
                  }, O.executeNext = function(k) {
                    var m2 = this.buffers, E = this.queues, L = m2[k], M = E[k];
                    if (M.length) {
                      var y = M[0];
                      try {
                        y.execute();
                      } catch (I) {
                        j.logger.warn("[buffer-operation-queue]: Unhandled exception executing the current operation"), y.onError(I), (!L || !L.updating) && (M.shift(), this.executeNext(k));
                      }
                    }
                  }, O.shiftAndExecuteNext = function(k) {
                    this.queues[k].shift(), this.executeNext(k);
                  }, O.current = function(k) {
                    return this.queues[k][0];
                  }, F;
                }();
              }, "./src/controller/cap-level-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => m2 });
                var j = N("./src/events.ts");
                function R(E, L) {
                  for (var M = 0; M < L.length; M++) {
                    var y = L[M];
                    y.enumerable = y.enumerable || false, y.configurable = true, "value" in y && (y.writable = true), Object.defineProperty(E, O(y.key), y);
                  }
                }
                function F(E, L, M) {
                  return L && R(E.prototype, L), M && R(E, M), Object.defineProperty(E, "prototype", { writable: false }), E;
                }
                function O(E) {
                  var L = x(E, "string");
                  return typeof L == "symbol" ? L : String(L);
                }
                function x(E, L) {
                  if (typeof E != "object" || E === null)
                    return E;
                  var M = E[Symbol.toPrimitive];
                  if (M !== void 0) {
                    var y = M.call(E, L || "default");
                    if (typeof y != "object")
                      return y;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (L === "string" ? String : Number)(E);
                }
                var k = function() {
                  function E(M) {
                    this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.hls = void 0, this.streamController = void 0, this.clientRect = void 0, this.hls = M, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners();
                  }
                  var L = E.prototype;
                  return L.setStreamController = function(y) {
                    this.streamController = y;
                  }, L.destroy = function() {
                    this.unregisterListener(), this.hls.config.capLevelToPlayerSize && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null;
                  }, L.registerListeners = function() {
                    var y = this.hls;
                    y.on(j.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), y.on(j.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), y.on(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), y.on(j.Events.BUFFER_CODECS, this.onBufferCodecs, this), y.on(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
                  }, L.unregisterListener = function() {
                    var y = this.hls;
                    y.off(j.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), y.off(j.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), y.off(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), y.off(j.Events.BUFFER_CODECS, this.onBufferCodecs, this), y.off(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
                  }, L.onFpsDropLevelCapping = function(y, I) {
                    E.isLevelAllowed(I.droppedLevel, this.restrictedLevels) && this.restrictedLevels.push(I.droppedLevel);
                  }, L.onMediaAttaching = function(y, I) {
                    this.media = I.media instanceof HTMLVideoElement ? I.media : null, this.clientRect = null;
                  }, L.onManifestParsed = function(y, I) {
                    var S = this.hls;
                    this.restrictedLevels = [], this.firstLevel = I.firstLevel, S.config.capLevelToPlayerSize && I.video && this.startCapping();
                  }, L.onBufferCodecs = function(y, I) {
                    var S = this.hls;
                    S.config.capLevelToPlayerSize && I.video && this.startCapping();
                  }, L.onMediaDetaching = function() {
                    this.stopCapping();
                  }, L.detectPlayerSize = function() {
                    if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {
                      var y = this.hls.levels;
                      if (y.length) {
                        var I = this.hls;
                        I.autoLevelCapping = this.getMaxLevel(y.length - 1), I.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = I.autoLevelCapping;
                      }
                    }
                  }, L.getMaxLevel = function(y) {
                    var I = this, S = this.hls.levels;
                    if (!S.length)
                      return -1;
                    var d = S.filter(function(v, f) {
                      return E.isLevelAllowed(f, I.restrictedLevels) && f <= y;
                    });
                    return this.clientRect = null, E.getMaxLevelByMediaSize(d, this.mediaWidth, this.mediaHeight);
                  }, L.startCapping = function() {
                    this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, this.hls.firstLevel = this.getMaxLevel(this.firstLevel), self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize());
                  }, L.stopCapping = function() {
                    this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0);
                  }, L.getDimensions = function() {
                    if (this.clientRect)
                      return this.clientRect;
                    var y = this.media, I = { width: 0, height: 0 };
                    if (y) {
                      var S = y.getBoundingClientRect();
                      I.width = S.width, I.height = S.height, !I.width && !I.height && (I.width = S.right - S.left || y.width || 0, I.height = S.bottom - S.top || y.height || 0);
                    }
                    return this.clientRect = I, I;
                  }, E.isLevelAllowed = function(y, I) {
                    return I === void 0 && (I = []), I.indexOf(y) === -1;
                  }, E.getMaxLevelByMediaSize = function(y, I, S) {
                    if (!y || !y.length)
                      return -1;
                    for (var d = function(g, i) {
                      return i ? g.width !== i.width || g.height !== i.height : true;
                    }, v = y.length - 1, f = 0; f < y.length; f += 1) {
                      var l = y[f];
                      if ((l.width >= I || l.height >= S) && d(l, y[f + 1])) {
                        v = f;
                        break;
                      }
                    }
                    return v;
                  }, F(E, [{ key: "mediaWidth", get: function() {
                    return this.getDimensions().width * this.contentScaleFactor;
                  } }, { key: "mediaHeight", get: function() {
                    return this.getDimensions().height * this.contentScaleFactor;
                  } }, { key: "contentScaleFactor", get: function() {
                    var y = 1;
                    if (!this.hls.config.ignoreDevicePixelRatio)
                      try {
                        y = self.devicePixelRatio;
                      } catch (I) {
                      }
                    return y;
                  } }]), E;
                }();
                const m2 = k;
              }, "./src/controller/cmcd-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => S });
                var j = N("./src/events.ts"), R = N("./src/types/cmcd.ts"), F = N("./src/utils/buffer-helper.ts"), O = N("./src/utils/logger.ts");
                function x(d, v) {
                  for (var f = 0; f < v.length; f++) {
                    var l = v[f];
                    l.enumerable = l.enumerable || false, l.configurable = true, "value" in l && (l.writable = true), Object.defineProperty(d, m2(l.key), l);
                  }
                }
                function k(d, v, f) {
                  return v && x(d.prototype, v), f && x(d, f), Object.defineProperty(d, "prototype", { writable: false }), d;
                }
                function m2(d) {
                  var v = E(d, "string");
                  return typeof v == "symbol" ? v : String(v);
                }
                function E(d, v) {
                  if (typeof d != "object" || d === null)
                    return d;
                  var f = d[Symbol.toPrimitive];
                  if (f !== void 0) {
                    var l = f.call(d, v || "default");
                    if (typeof l != "object")
                      return l;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (v === "string" ? String : Number)(d);
                }
                function L(d, v) {
                  var f = typeof Symbol != "undefined" && d[Symbol.iterator] || d["@@iterator"];
                  if (f)
                    return (f = f.call(d)).next.bind(f);
                  if (Array.isArray(d) || (f = M(d)) || v && d && typeof d.length == "number") {
                    f && (d = f);
                    var l = 0;
                    return function() {
                      return l >= d.length ? { done: true } : { done: false, value: d[l++] };
                    };
                  }
                  throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
                }
                function M(d, v) {
                  if (!!d) {
                    if (typeof d == "string")
                      return y(d, v);
                    var f = Object.prototype.toString.call(d).slice(8, -1);
                    if (f === "Object" && d.constructor && (f = d.constructor.name), f === "Map" || f === "Set")
                      return Array.from(d);
                    if (f === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(f))
                      return y(d, v);
                  }
                }
                function y(d, v) {
                  (v == null || v > d.length) && (v = d.length);
                  for (var f = 0, l = new Array(v); f < v; f++)
                    l[f] = d[f];
                  return l;
                }
                function I() {
                  return I = Object.assign ? Object.assign.bind() : function(d) {
                    for (var v = 1; v < arguments.length; v++) {
                      var f = arguments[v];
                      for (var l in f)
                        Object.prototype.hasOwnProperty.call(f, l) && (d[l] = f[l]);
                    }
                    return d;
                  }, I.apply(this, arguments);
                }
                var S = function() {
                  function d(f) {
                    var l = this;
                    this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = false, this.initialized = false, this.starved = false, this.buffering = true, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
                      l.initialized && (l.starved = true), l.buffering = true;
                    }, this.onPlaying = function() {
                      l.initialized || (l.initialized = true), l.buffering = false;
                    }, this.applyPlaylistData = function(i) {
                      try {
                        l.apply(i, { ot: R.CMCDObjectType.MANIFEST, su: !l.initialized });
                      } catch (n) {
                        O.logger.warn("Could not generate manifest CMCD data.", n);
                      }
                    }, this.applyFragmentData = function(i) {
                      try {
                        var n = i.frag, o = l.hls.levels[n.level], h = l.getObjectType(n), b = { d: n.duration * 1e3, ot: h };
                        (h === R.CMCDObjectType.VIDEO || h === R.CMCDObjectType.AUDIO || h == R.CMCDObjectType.MUXED) && (b.br = o.bitrate / 1e3, b.tb = l.getTopBandwidth(h) / 1e3, b.bl = l.getBufferLength(h)), l.apply(i, b);
                      } catch (a) {
                        O.logger.warn("Could not generate segment CMCD data.", a);
                      }
                    }, this.hls = f;
                    var _ = this.config = f.config, g = _.cmcd;
                    g != null && (_.pLoader = this.createPlaylistLoader(), _.fLoader = this.createFragmentLoader(), this.sid = g.sessionId || d.uuid(), this.cid = g.contentId, this.useHeaders = g.useHeaders === true, this.registerListeners());
                  }
                  var v = d.prototype;
                  return v.registerListeners = function() {
                    var l = this.hls;
                    l.on(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), l.on(j.Events.MEDIA_DETACHED, this.onMediaDetached, this), l.on(j.Events.BUFFER_CREATED, this.onBufferCreated, this);
                  }, v.unregisterListeners = function() {
                    var l = this.hls;
                    l.off(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), l.off(j.Events.MEDIA_DETACHED, this.onMediaDetached, this), l.off(j.Events.BUFFER_CREATED, this.onBufferCreated, this), this.onMediaDetached();
                  }, v.destroy = function() {
                    this.unregisterListeners(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null;
                  }, v.onMediaAttached = function(l, _) {
                    this.media = _.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying);
                  }, v.onMediaDetached = function() {
                    !this.media || (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null);
                  }, v.onBufferCreated = function(l, _) {
                    var g, i;
                    this.audioBuffer = (g = _.tracks.audio) === null || g === void 0 ? void 0 : g.buffer, this.videoBuffer = (i = _.tracks.video) === null || i === void 0 ? void 0 : i.buffer;
                  }, v.createData = function() {
                    var l;
                    return { v: R.CMCDVersion, sf: R.CMCDStreamingFormat.HLS, sid: this.sid, cid: this.cid, pr: (l = this.media) === null || l === void 0 ? void 0 : l.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 };
                  }, v.apply = function(l, _) {
                    _ === void 0 && (_ = {}), I(_, this.createData());
                    var g = _.ot === R.CMCDObjectType.INIT || _.ot === R.CMCDObjectType.VIDEO || _.ot === R.CMCDObjectType.MUXED;
                    if (this.starved && g && (_.bs = true, _.su = true, this.starved = false), _.su == null && (_.su = this.buffering), this.useHeaders) {
                      var i = d.toHeaders(_);
                      if (!Object.keys(i).length)
                        return;
                      l.headers || (l.headers = {}), I(l.headers, i);
                    } else {
                      var n = d.toQuery(_);
                      if (!n)
                        return;
                      l.url = d.appendQueryToUri(l.url, n);
                    }
                  }, v.getObjectType = function(l) {
                    var _ = l.type;
                    if (_ === "subtitle")
                      return R.CMCDObjectType.TIMED_TEXT;
                    if (l.sn === "initSegment")
                      return R.CMCDObjectType.INIT;
                    if (_ === "audio")
                      return R.CMCDObjectType.AUDIO;
                    if (_ === "main")
                      return this.hls.audioTracks.length ? R.CMCDObjectType.VIDEO : R.CMCDObjectType.MUXED;
                  }, v.getTopBandwidth = function(l) {
                    var _ = 0, g, i = this.hls;
                    if (l === R.CMCDObjectType.AUDIO)
                      g = i.audioTracks;
                    else {
                      var n = i.maxAutoLevel, o = n > -1 ? n + 1 : i.levels.length;
                      g = i.levels.slice(0, o);
                    }
                    for (var h = L(g), b; !(b = h()).done; ) {
                      var a = b.value;
                      a.bitrate > _ && (_ = a.bitrate);
                    }
                    return _ > 0 ? _ : NaN;
                  }, v.getBufferLength = function(l) {
                    var _ = this.hls.media, g = l === R.CMCDObjectType.AUDIO ? this.audioBuffer : this.videoBuffer;
                    if (!g || !_)
                      return NaN;
                    var i = F.BufferHelper.bufferInfo(g, _.currentTime, this.config.maxBufferHole);
                    return i.len * 1e3;
                  }, v.createPlaylistLoader = function() {
                    var l = this.config.pLoader, _ = this.applyPlaylistData, g = l || this.config.loader;
                    return function() {
                      function i(o) {
                        this.loader = void 0, this.loader = new g(o);
                      }
                      var n = i.prototype;
                      return n.destroy = function() {
                        this.loader.destroy();
                      }, n.abort = function() {
                        this.loader.abort();
                      }, n.load = function(h, b, a) {
                        _(h), this.loader.load(h, b, a);
                      }, k(i, [{ key: "stats", get: function() {
                        return this.loader.stats;
                      } }, { key: "context", get: function() {
                        return this.loader.context;
                      } }]), i;
                    }();
                  }, v.createFragmentLoader = function() {
                    var l = this.config.fLoader, _ = this.applyFragmentData, g = l || this.config.loader;
                    return function() {
                      function i(o) {
                        this.loader = void 0, this.loader = new g(o);
                      }
                      var n = i.prototype;
                      return n.destroy = function() {
                        this.loader.destroy();
                      }, n.abort = function() {
                        this.loader.abort();
                      }, n.load = function(h, b, a) {
                        _(h), this.loader.load(h, b, a);
                      }, k(i, [{ key: "stats", get: function() {
                        return this.loader.stats;
                      } }, { key: "context", get: function() {
                        return this.loader.context;
                      } }]), i;
                    }();
                  }, d.uuid = function() {
                    var l = URL.createObjectURL(new Blob()), _ = l.toString();
                    return URL.revokeObjectURL(l), _.slice(_.lastIndexOf("/") + 1);
                  }, d.serialize = function(l) {
                    for (var _ = [], g = function(U) {
                      return !Number.isNaN(U) && U != null && U !== "" && U !== false;
                    }, i = function(U) {
                      return Math.round(U);
                    }, n = function(U) {
                      return i(U / 100) * 100;
                    }, o = function(U) {
                      return encodeURIComponent(U);
                    }, h = { br: i, d: i, bl: n, dl: n, mtp: n, nor: o, rtp: n, tb: i }, b = Object.keys(l || {}).sort(), a = L(b), c; !(c = a()).done; ) {
                      var s = c.value, p = l[s];
                      if (!!g(p) && !(s === "v" && p === 1) && !(s == "pr" && p === 1)) {
                        var D = h[s];
                        D && (p = D(p));
                        var A = typeof p, w = void 0;
                        s === "ot" || s === "sf" || s === "st" ? w = s + "=" + p : A === "boolean" ? w = s : A === "number" ? w = s + "=" + p : w = s + "=" + JSON.stringify(p), _.push(w);
                      }
                    }
                    return _.join(",");
                  }, d.toHeaders = function(l) {
                    for (var _ = Object.keys(l), g = {}, i = ["Object", "Request", "Session", "Status"], n = [{}, {}, {}, {}], o = { br: 0, d: 0, ot: 0, tb: 0, bl: 1, dl: 1, mtp: 1, nor: 1, nrr: 1, su: 1, cid: 2, pr: 2, sf: 2, sid: 2, st: 2, v: 2, bs: 3, rtp: 3 }, h = 0, b = _; h < b.length; h++) {
                      var a = b[h], c = o[a] != null ? o[a] : 1;
                      n[c][a] = l[a];
                    }
                    for (var s = 0; s < n.length; s++) {
                      var p = d.serialize(n[s]);
                      p && (g["CMCD-" + i[s]] = p);
                    }
                    return g;
                  }, d.toQuery = function(l) {
                    return "CMCD=" + encodeURIComponent(d.serialize(l));
                  }, d.appendQueryToUri = function(l, _) {
                    if (!_)
                      return l;
                    var g = l.includes("?") ? "&" : "?";
                    return "" + l + g + _;
                  }, d;
                }();
              }, "./src/controller/eme-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => h });
                var j = N("./src/events.ts"), R = N("./src/errors.ts"), F = N("./src/utils/logger.ts"), O = N("./src/utils/mediakeys-helper.ts"), x = N("./src/utils/keysystem-util.ts"), k = N("./src/utils/numeric-encoding-utils.ts"), m2 = N("./src/loader/level-key.ts"), E = N("./src/utils/hex.ts"), L = N("./src/utils/mp4-tools.ts"), M = N("./node_modules/eventemitter3/index.js"), y = N.n(M);
                function I(b, a) {
                  b.prototype = Object.create(a.prototype), b.prototype.constructor = b, l(b, a);
                }
                function S(b) {
                  var a = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
                  return S = function(s) {
                    if (s === null || !f(s))
                      return s;
                    if (typeof s != "function")
                      throw new TypeError("Super expression must either be null or a function");
                    if (typeof a != "undefined") {
                      if (a.has(s))
                        return a.get(s);
                      a.set(s, p);
                    }
                    function p() {
                      return d(s, arguments, _(this).constructor);
                    }
                    return p.prototype = Object.create(s.prototype, { constructor: { value: p, enumerable: false, writable: true, configurable: true } }), l(p, s);
                  }, S(b);
                }
                function d(b, a, c) {
                  return v() ? d = Reflect.construct.bind() : d = function(p, D, A) {
                    var w = [null];
                    w.push.apply(w, D);
                    var B = Function.bind.apply(p, w), U = new B();
                    return A && l(U, A.prototype), U;
                  }, d.apply(null, arguments);
                }
                function v() {
                  if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
                    return false;
                  if (typeof Proxy == "function")
                    return true;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                  } catch (b) {
                    return false;
                  }
                }
                function f(b) {
                  return Function.toString.call(b).indexOf("[native code]") !== -1;
                }
                function l(b, a) {
                  return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(s, p) {
                    return s.__proto__ = p, s;
                  }, l(b, a);
                }
                function _(b) {
                  return _ = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(c) {
                    return c.__proto__ || Object.getPrototypeOf(c);
                  }, _(b);
                }
                var g = 3, i = "[eme]", n = function() {
                  function b(c) {
                    this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = b.CDMCleanupPromise ? [b.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = F.logger.debug.bind(F.logger, i), this.log = F.logger.log.bind(F.logger, i), this.warn = F.logger.warn.bind(F.logger, i), this.error = F.logger.error.bind(F.logger, i), this.hls = c, this.config = c.config, this.registerListeners();
                  }
                  var a = b.prototype;
                  return a.destroy = function() {
                    this.unregisterListeners(), this.onMediaDetached(), this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null;
                  }, a.registerListeners = function() {
                    this.hls.on(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(j.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(j.Events.MANIFEST_LOADED, this.onManifestLoaded, this);
                  }, a.unregisterListeners = function() {
                    this.hls.off(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(j.Events.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(j.Events.MANIFEST_LOADED, this.onManifestLoaded, this);
                  }, a.getLicenseServerUrl = function(s) {
                    var p = this.config, D = p.drmSystems, A = p.widevineLicenseUrl, w = D[s];
                    if (w)
                      return w.licenseUrl;
                    if (s === O.KeySystems.WIDEVINE && A)
                      return A;
                    throw new Error('no license server URL configured for key-system "' + s + '"');
                  }, a.getServerCertificateUrl = function(s) {
                    var p = this.config.drmSystems, D = p[s];
                    if (D)
                      return D.serverCertificateUrl;
                    this.log('No Server Certificate in config.drmSystems["' + s + '"]');
                  }, a.attemptKeySystemAccess = function(s) {
                    var p = this, D = this.hls.levels, A = function(K, W, H) {
                      return !!K && H.indexOf(K) === W;
                    }, w = D.map(function(U) {
                      return U.audioCodec;
                    }).filter(A), B = D.map(function(U) {
                      return U.videoCodec;
                    }).filter(A);
                    return w.length + B.length === 0 && B.push("avc1.42e01e"), new Promise(function(U, K) {
                      var W = function H(V) {
                        var z = V.shift();
                        p.getMediaKeysPromise(z, w, B).then(function(Q) {
                          return U({ keySystem: z, mediaKeys: Q });
                        }).catch(function(Q) {
                          V.length ? H(V) : Q instanceof o ? K(Q) : K(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_NO_ACCESS, error: Q, fatal: true }, Q.message));
                        });
                      };
                      W(s);
                    });
                  }, a.requestMediaKeySystemAccess = function(s, p) {
                    var D = this.config.requestMediaKeySystemAccessFunc;
                    if (typeof D != "function") {
                      var A = "Configured requestMediaKeySystemAccess is not a function " + D;
                      return O.requestMediaKeySystemAccess === null && self.location.protocol === "http:" && (A = "navigator.requestMediaKeySystemAccess is not available over insecure protocol " + location.protocol), Promise.reject(new Error(A));
                    }
                    return D(s, p);
                  }, a.getMediaKeysPromise = function(s, p, D) {
                    var A = this, w = (0, O.getSupportedMediaKeySystemConfigurations)(s, p, D, this.config.drmSystemOptions), B = this.keySystemAccessPromises[s], U = B == null ? void 0 : B.keySystemAccess;
                    if (!U) {
                      this.log('Requesting encrypted media "' + s + '" key-system access with config: ' + JSON.stringify(w)), U = this.requestMediaKeySystemAccess(s, w);
                      var K = this.keySystemAccessPromises[s] = { keySystemAccess: U };
                      return U.catch(function(W) {
                        A.log('Failed to obtain access to key-system "' + s + '": ' + W);
                      }), U.then(function(W) {
                        A.log('Access for key-system "' + W.keySystem + '" obtained');
                        var H = A.fetchServerCertificate(s);
                        return A.log('Create media-keys for "' + s + '"'), K.mediaKeys = W.createMediaKeys().then(function(V) {
                          return A.log('Media-keys created for "' + s + '"'), H.then(function(z) {
                            return z ? A.setMediaKeysServerCertificate(V, s, z) : V;
                          });
                        }), K.mediaKeys.catch(function(V) {
                          A.error('Failed to create media-keys for "' + s + '"}: ' + V);
                        }), K.mediaKeys;
                      });
                    }
                    return U.then(function() {
                      return B.mediaKeys;
                    });
                  }, a.createMediaKeySessionContext = function(s) {
                    var p = s.decryptdata, D = s.keySystem, A = s.mediaKeys;
                    console.assert(!!A, "mediaKeys is defined"), this.log('Creating key-system session "' + D + '" keyId: ' + E.default.hexDump(p.keyId || []));
                    var w = A.createSession(), B = { decryptdata: p, keySystem: D, mediaKeys: A, mediaKeysSession: w, keyStatus: "status-pending" };
                    return this.mediaKeySessions.push(B), B;
                  }, a.renewKeySession = function(s) {
                    var p = s.decryptdata;
                    if (p.pssh) {
                      var D = this.createMediaKeySessionContext(s), A = this.getKeyIdString(p), w = "cenc";
                      this.keyIdToKeySessionPromise[A] = this.generateRequestWithPreferredKeySession(D, w, p.pssh, "expired");
                    } else
                      this.warn("Could not renew expired session. Missing pssh initData.");
                    this.removeSession(s);
                  }, a.getKeyIdString = function(s) {
                    if (!s)
                      throw new Error("Could not read keyId of undefined decryptdata");
                    if (s.keyId === null)
                      throw new Error("keyId is null");
                    return E.default.hexDump(s.keyId);
                  }, a.updateKeySession = function(s, p) {
                    var D, A = s.mediaKeysSession;
                    return this.log('Updating key-session "' + A.sessionId + '" for keyID ' + E.default.hexDump(((D = s.decryptdata) === null || D === void 0 ? void 0 : D.keyId) || []) + `
      } (data length: ` + (p && p.byteLength) + ")"), A.update(p);
                  }, a.selectKeySystemFormat = function(s) {
                    var p = Object.keys(s.levelkeys || {});
                    return this.keyFormatPromise || (this.log("Selecting key-system from fragment (sn: " + s.sn + " " + s.type + ": " + s.level + ") key formats " + p.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(p)), this.keyFormatPromise;
                  }, a.getKeyFormatPromise = function(s) {
                    var p = this;
                    return new Promise(function(D, A) {
                      var w = (0, O.getKeySystemsForConfig)(p.config), B = s.map(O.keySystemFormatToKeySystemDomain).filter(function(U) {
                        return !!U && w.indexOf(U) !== -1;
                      });
                      return p.getKeySystemSelectionPromise(B).then(function(U) {
                        var K = U.keySystem, W = (0, O.keySystemDomainToKeySystemFormat)(K);
                        W ? D(W) : A(new Error('Unable to find format for key-system "' + K + '"'));
                      }).catch(A);
                    });
                  }, a.loadKey = function(s) {
                    var p = this, D = s.keyInfo.decryptdata, A = this.getKeyIdString(D), w = "(keyId: " + A + ' format: "' + D.keyFormat + '" method: ' + D.method + " uri: " + D.uri + ")";
                    this.log("Starting session for key " + w);
                    var B = this.keyIdToKeySessionPromise[A];
                    return B || (B = this.keyIdToKeySessionPromise[A] = this.getKeySystemForKeyPromise(D).then(function(U) {
                      var K = U.keySystem, W = U.mediaKeys;
                      return p.throwIfDestroyed(), p.log("Handle encrypted media sn: " + s.frag.sn + " " + s.frag.type + ": " + s.frag.level + " using key " + w), p.attemptSetMediaKeys(K, W).then(function() {
                        p.throwIfDestroyed();
                        var H = p.createMediaKeySessionContext({ keySystem: K, mediaKeys: W, decryptdata: D }), V = "cenc";
                        return p.generateRequestWithPreferredKeySession(H, V, D.pssh, "playlist-key");
                      });
                    }), B.catch(function(U) {
                      return p.handleError(U);
                    })), B;
                  }, a.throwIfDestroyed = function(s) {
                    if (s === void 0 && (s = "Invalid state"), !this.hls)
                      throw new Error("invalid state");
                  }, a.handleError = function(s) {
                    !this.hls || (this.error(s.message), s instanceof o ? this.hls.trigger(j.Events.ERROR, s.data) : this.hls.trigger(j.Events.ERROR, { type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_NO_KEYS, error: s, fatal: true }));
                  }, a.getKeySystemForKeyPromise = function(s) {
                    var p = this.getKeyIdString(s), D = this.keyIdToKeySessionPromise[p];
                    if (!D) {
                      var A = (0, O.keySystemFormatToKeySystemDomain)(s.keyFormat), w = A ? [A] : (0, O.getKeySystemsForConfig)(this.config);
                      return this.attemptKeySystemAccess(w);
                    }
                    return D;
                  }, a.getKeySystemSelectionPromise = function(s) {
                    if (s.length || (s = (0, O.getKeySystemsForConfig)(this.config)), s.length === 0)
                      throw new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE, fatal: true }, "Missing key-system license configuration options " + JSON.stringify({ drmSystems: this.config.drmSystems }));
                    return this.attemptKeySystemAccess(s);
                  }, a._onMediaEncrypted = function(s) {
                    var p = this, D = s.initDataType, A = s.initData;
                    if (this.debug('"' + s.type + '" event: init data type: "' + D + '"'), A !== null) {
                      var w, B;
                      if (D === "sinf" && this.config.drmSystems[O.KeySystems.FAIRPLAY]) {
                        var U = (0, L.bin2str)(new Uint8Array(A));
                        try {
                          var K = (0, k.base64Decode)(JSON.parse(U).sinf), W = (0, L.parseSinf)(new Uint8Array(K));
                          if (!W)
                            return;
                          w = W.subarray(8, 24), B = O.KeySystems.FAIRPLAY;
                        } catch (ue) {
                          this.warn('Failed to parse sinf "encrypted" event message initData');
                          return;
                        }
                      } else {
                        var H = (0, L.parsePssh)(A);
                        if (H === null)
                          return;
                        H.version === 0 && H.systemId === O.KeySystemIds.WIDEVINE && H.data && (w = H.data.subarray(8, 24)), B = (0, O.keySystemIdToKeySystemDomain)(H.systemId);
                      }
                      if (!(!B || !w)) {
                        for (var V = E.default.hexDump(w), z = this.keyIdToKeySessionPromise, Q = this.mediaKeySessions, q = z[V], ee = function(ye) {
                          var be = Q[ye], me = be.decryptdata;
                          if (me.pssh || !me.keyId)
                            return "continue";
                          var Se = E.default.hexDump(me.keyId);
                          if (V === Se || me.uri.replace(/-/g, "").indexOf(V) !== -1)
                            return q = z[Se], delete z[Se], me.pssh = new Uint8Array(A), me.keyId = w, q = z[V] = q.then(function() {
                              return p.generateRequestWithPreferredKeySession(be, D, A, "encrypted-event-key-match");
                            }), "break";
                        }, ae = 0; ae < Q.length; ae++) {
                          var ne = ee(ae);
                          if (ne !== "continue" && ne === "break")
                            break;
                        }
                        q || (q = z[V] = this.getKeySystemSelectionPromise([B]).then(function(ue) {
                          var ye, be = ue.keySystem, me = ue.mediaKeys;
                          p.throwIfDestroyed();
                          var Se = new m2.LevelKey("ISO-23001-7", V, (ye = (0, O.keySystemDomainToKeySystemFormat)(be)) != null ? ye : "");
                          return Se.pssh = new Uint8Array(A), Se.keyId = w, p.attemptSetMediaKeys(be, me).then(function() {
                            p.throwIfDestroyed();
                            var Te = p.createMediaKeySessionContext({ decryptdata: Se, keySystem: be, mediaKeys: me });
                            return p.generateRequestWithPreferredKeySession(Te, D, A, "encrypted-event-no-match");
                          });
                        })), q.catch(function(ue) {
                          return p.handleError(ue);
                        });
                      }
                    }
                  }, a._onWaitingForKey = function(s) {
                    this.log('"' + s.type + '" event');
                  }, a.attemptSetMediaKeys = function(s, p) {
                    var D = this, A = this.setMediaKeysQueue.slice();
                    this.log('Setting media-keys for "' + s + '"');
                    var w = Promise.all(A).then(function() {
                      if (!D.media)
                        throw new Error("Attempted to set mediaKeys without media element attached");
                      return D.media.setMediaKeys(p);
                    });
                    return this.setMediaKeysQueue.push(w), w.then(function() {
                      D.log('Media-keys set for "' + s + '"'), A.push(w), D.setMediaKeysQueue = D.setMediaKeysQueue.filter(function(B) {
                        return A.indexOf(B) === -1;
                      });
                    });
                  }, a.generateRequestWithPreferredKeySession = function(s, p, D, A) {
                    var w, B, U = this, K = (w = this.config.drmSystems) === null || w === void 0 || (B = w[s.keySystem]) === null || B === void 0 ? void 0 : B.generateRequest;
                    if (K)
                      try {
                        var W = K.call(this.hls, p, D, s);
                        if (!W)
                          throw new Error("Invalid response from configured generateRequest filter");
                        p = W.initDataType, D = s.decryptdata.pssh = W.initData ? new Uint8Array(W.initData) : null;
                      } catch (q) {
                        var H;
                        if (this.warn(q.message), (H = this.hls) !== null && H !== void 0 && H.config.debug)
                          throw q;
                      }
                    if (D === null)
                      return this.log('Skipping key-session request for "' + A + '" (no initData)'), Promise.resolve(s);
                    var V = this.getKeyIdString(s.decryptdata);
                    this.log('Generating key-session request for "' + A + '": ' + V + " (init data type: " + p + " length: " + (D ? D.byteLength : null) + ")");
                    var z = new (y())();
                    s.mediaKeysSession.onmessage = function(q) {
                      var ee = s.mediaKeysSession;
                      if (!ee) {
                        z.emit("error", new Error("invalid state"));
                        return;
                      }
                      var ae = q.messageType, ne = q.message;
                      U.log('"' + ae + '" message event for session "' + ee.sessionId + '" message size: ' + ne.byteLength), ae === "license-request" || ae === "license-renewal" ? U.renewLicense(s, ne).catch(function(ue) {
                        U.handleError(ue), z.emit("error", ue);
                      }) : ae === "license-release" ? s.keySystem === O.KeySystems.FAIRPLAY && (U.updateKeySession(s, (0, x.strToUtf8array)("acknowledged")), U.removeSession(s)) : U.warn('unhandled media key message type "' + ae + '"');
                    }, s.mediaKeysSession.onkeystatuseschange = function(q) {
                      var ee = s.mediaKeysSession;
                      if (!ee) {
                        z.emit("error", new Error("invalid state"));
                        return;
                      }
                      U.onKeyStatusChange(s);
                      var ae = s.keyStatus;
                      z.emit("keyStatus", ae), ae === "expired" && (U.warn(s.keySystem + " expired for key " + V), U.renewKeySession(s));
                    };
                    var Q = new Promise(function(q, ee) {
                      z.on("error", ee), z.on("keyStatus", function(ae) {
                        ae.startsWith("usable") ? q() : ae === "output-restricted" ? ee(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED, fatal: false }, "HDCP level output restricted")) : ae === "internal-error" ? ee(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR, fatal: true }, 'key status changed to "' + ae + '"')) : ae === "expired" ? ee(new Error("key expired while generating request")) : U.warn('unhandled key status change "' + ae + '"');
                      });
                    });
                    return s.mediaKeysSession.generateRequest(p, D).then(function() {
                      var q;
                      U.log('Request generated for key-session "' + ((q = s.mediaKeysSession) === null || q === void 0 ? void 0 : q.sessionId) + '" keyId: ' + V);
                    }).catch(function(q) {
                      throw new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_NO_SESSION, error: q, fatal: false }, "Error generating key-session request: " + q);
                    }).then(function() {
                      return Q;
                    }).catch(function(q) {
                      throw z.removeAllListeners(), U.removeSession(s), q;
                    }).then(function() {
                      return z.removeAllListeners(), s;
                    });
                  }, a.onKeyStatusChange = function(s) {
                    var p = this;
                    s.mediaKeysSession.keyStatuses.forEach(function(D, A) {
                      p.log('key status change "' + D + '" for keyStatuses keyId: ' + E.default.hexDump("buffer" in A ? new Uint8Array(A.buffer, A.byteOffset, A.byteLength) : new Uint8Array(A)) + " session keyId: " + E.default.hexDump(new Uint8Array(s.decryptdata.keyId || [])) + " uri: " + s.decryptdata.uri), s.keyStatus = D;
                    });
                  }, a.fetchServerCertificate = function(s) {
                    var p = this;
                    return new Promise(function(D, A) {
                      var w = p.getServerCertificateUrl(s);
                      if (!w)
                        return D();
                      p.log('Fetching serverCertificate for "' + s + '"');
                      var B = new XMLHttpRequest();
                      B.open("GET", w, true), B.responseType = "arraybuffer", B.onreadystatechange = function() {
                        B.readyState === XMLHttpRequest.DONE && (B.status === 200 ? D(B.response) : A(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: B }, '"' + s + '" certificate request XHR failed (' + w + "). Status: " + B.status + " (" + B.statusText + ")")));
                      }, B.send();
                    });
                  }, a.setMediaKeysServerCertificate = function(s, p, D) {
                    var A = this;
                    return new Promise(function(w, B) {
                      s.setServerCertificate(D).then(function(U) {
                        A.log("setServerCertificate " + (U ? "success" : "not supported by CDM") + " (" + (D == null ? void 0 : D.byteLength) + ') on "' + p + '"'), w(s);
                      }).catch(function(U) {
                        B(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED, error: U, fatal: true }, U.message));
                      });
                    });
                  }, a.renewLicense = function(s, p) {
                    var D = this;
                    return this.requestLicense(s, new Uint8Array(p)).then(function(A) {
                      return D.updateKeySession(s, new Uint8Array(A)).catch(function(w) {
                        throw new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED, error: w, fatal: true }, w.message);
                      });
                    });
                  }, a.setupLicenseXHR = function(s, p, D, A) {
                    var w = this, B = this.config.licenseXhrSetup;
                    return B ? Promise.resolve().then(function() {
                      if (!D.decryptdata)
                        throw new Error("Key removed");
                      return B.call(w.hls, s, p, D, A);
                    }).catch(function(U) {
                      if (!D.decryptdata)
                        throw U;
                      return s.open("POST", p, true), B.call(w.hls, s, p, D, A);
                    }).then(function(U) {
                      s.readyState || s.open("POST", p, true);
                      var K = U || A;
                      return { xhr: s, licenseChallenge: K };
                    }) : (s.open("POST", p, true), Promise.resolve({ xhr: s, licenseChallenge: A }));
                  }, a.requestLicense = function(s, p) {
                    var D = this;
                    return new Promise(function(A, w) {
                      var B = D.getLicenseServerUrl(s.keySystem);
                      D.log("Sending license request to URL: " + B);
                      var U = new XMLHttpRequest();
                      U.responseType = "arraybuffer", U.onreadystatechange = function() {
                        if (!D.hls || !s.mediaKeysSession)
                          return w(new Error("invalid state"));
                        if (U.readyState === 4)
                          if (U.status === 200) {
                            D._requestLicenseFailureCount = 0;
                            var K = U.response;
                            D.log("License received " + (K instanceof ArrayBuffer ? K.byteLength : K));
                            var W = D.config.licenseResponseCallback;
                            if (W)
                              try {
                                K = W.call(D.hls, U, B, s);
                              } catch (V) {
                                D.error(V);
                              }
                            A(K);
                          } else if (D._requestLicenseFailureCount++, D._requestLicenseFailureCount > g || U.status >= 400 && U.status < 500)
                            w(new o({ type: R.ErrorTypes.KEY_SYSTEM_ERROR, details: R.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true, networkDetails: U }, "License Request XHR failed (" + B + "). Status: " + U.status + " (" + U.statusText + ")"));
                          else {
                            var H = g - D._requestLicenseFailureCount + 1;
                            D.warn("Retrying license request, " + H + " attempts left"), D.requestLicense(s, p).then(A, w);
                          }
                      }, s.licenseXhr && s.licenseXhr.readyState !== XMLHttpRequest.DONE && s.licenseXhr.abort(), s.licenseXhr = U, D.setupLicenseXHR(U, B, s, p).then(function(K) {
                        var W = K.xhr, H = K.licenseChallenge;
                        W.send(H);
                      });
                    });
                  }, a.onMediaAttached = function(s, p) {
                    if (!!this.config.emeEnabled) {
                      var D = p.media;
                      this.media = D, D.addEventListener("encrypted", this.onMediaEncrypted), D.addEventListener("waitingforkey", this.onWaitingForKey);
                    }
                  }, a.onMediaDetached = function() {
                    var s = this, p = this.media, D = this.mediaKeySessions;
                    p && (p.removeEventListener("encrypted", this.onMediaEncrypted), p.removeEventListener("waitingforkey", this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, m2.LevelKey.clearKeyUriToKeyIdMap();
                    var A = D.length;
                    b.CDMCleanupPromise = Promise.all(D.map(function(w) {
                      return s.removeSession(w);
                    }).concat(p == null ? void 0 : p.setMediaKeys(null).catch(function(w) {
                      s.log("Could not clear media keys: " + w + ". media.src: " + (p == null ? void 0 : p.src));
                    }))).then(function() {
                      A && (s.log("finished closing key sessions and clearing media keys"), D.length = 0);
                    }).catch(function(w) {
                      s.log("Could not close sessions and clear media keys: " + w + ". media.src: " + (p == null ? void 0 : p.src));
                    });
                  }, a.onManifestLoaded = function(s, p) {
                    var D = p.sessionKeys;
                    if (!(!D || !this.config.emeEnabled) && !this.keyFormatPromise) {
                      var A = D.reduce(function(w, B) {
                        return w.indexOf(B.keyFormat) === -1 && w.push(B.keyFormat), w;
                      }, []);
                      this.log("Selecting key-system from session-keys " + A.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(A);
                    }
                  }, a.removeSession = function(s) {
                    var p = this, D = s.mediaKeysSession, A = s.licenseXhr;
                    if (D) {
                      this.log("Remove licenses and keys and close session " + D.sessionId), D.onmessage = null, D.onkeystatuseschange = null, A && A.readyState !== XMLHttpRequest.DONE && A.abort(), s.mediaKeysSession = s.decryptdata = s.licenseXhr = void 0;
                      var w = this.mediaKeySessions.indexOf(s);
                      return w > -1 && this.mediaKeySessions.splice(w, 1), D.remove().catch(function(B) {
                        p.log("Could not remove session: " + B);
                      }).then(function() {
                        return D.close();
                      }).catch(function(B) {
                        p.log("Could not close session: " + B);
                      });
                    }
                  }, b;
                }();
                n.CDMCleanupPromise = void 0;
                var o = function(b) {
                  I(a, b);
                  function a(c, s) {
                    var p;
                    return p = b.call(this, s) || this, p.data = void 0, p.data = c, c.err = c.error, p;
                  }
                  return a;
                }(S(Error));
                const h = n;
              }, "./src/controller/fps-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => O });
                var j = N("./src/events.ts"), R = N("./src/utils/logger.ts"), F = function() {
                  function x(m2) {
                    this.hls = void 0, this.isVideoPlaybackQualityAvailable = false, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = m2, this.registerListeners();
                  }
                  var k = x.prototype;
                  return k.setStreamController = function(E) {
                    this.streamController = E;
                  }, k.registerListeners = function() {
                    this.hls.on(j.Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
                  }, k.unregisterListeners = function() {
                    this.hls.off(j.Events.MEDIA_ATTACHING, this.onMediaAttaching);
                  }, k.destroy = function() {
                    this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = false, this.media = null;
                  }, k.onMediaAttaching = function(E, L) {
                    var M = this.hls.config;
                    if (M.capLevelOnFPSDrop) {
                      var y = L.media instanceof self.HTMLVideoElement ? L.media : null;
                      this.media = y, y && typeof y.getVideoPlaybackQuality == "function" && (this.isVideoPlaybackQualityAvailable = true), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), M.fpsDroppedMonitoringPeriod);
                    }
                  }, k.checkFPS = function(E, L, M) {
                    var y = performance.now();
                    if (L) {
                      if (this.lastTime) {
                        var I = y - this.lastTime, S = M - this.lastDroppedFrames, d = L - this.lastDecodedFrames, v = 1e3 * S / I, f = this.hls;
                        if (f.trigger(j.Events.FPS_DROP, { currentDropped: S, currentDecoded: d, totalDroppedFrames: M }), v > 0 && S > f.config.fpsDroppedMonitoringThreshold * d) {
                          var l = f.currentLevel;
                          R.logger.warn("drop FPS ratio greater than max allowed value for currentLevel: " + l), l > 0 && (f.autoLevelCapping === -1 || f.autoLevelCapping >= l) && (l = l - 1, f.trigger(j.Events.FPS_DROP_LEVEL_CAPPING, { level: l, droppedLevel: f.currentLevel }), f.autoLevelCapping = l, this.streamController.nextLevelSwitch());
                        }
                      }
                      this.lastTime = y, this.lastDroppedFrames = M, this.lastDecodedFrames = L;
                    }
                  }, k.checkFPSInterval = function() {
                    var E = this.media;
                    if (E)
                      if (this.isVideoPlaybackQualityAvailable) {
                        var L = E.getVideoPlaybackQuality();
                        this.checkFPS(E, L.totalVideoFrames, L.droppedVideoFrames);
                      } else
                        this.checkFPS(E, E.webkitDecodedFrameCount, E.webkitDroppedFrameCount);
                  }, x;
                }();
                const O = F;
              }, "./src/controller/fragment-finders.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { findFragWithCC: () => m2, findFragmentByPDT: () => F, findFragmentByPTS: () => O, fragmentWithinToleranceTest: () => x, pdtWithinToleranceTest: () => k });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/binary-search.ts");
                function F(E, L, M) {
                  if (L === null || !Array.isArray(E) || !E.length || !(0, j.isFiniteNumber)(L))
                    return null;
                  var y = E[0].programDateTime;
                  if (L < (y || 0))
                    return null;
                  var I = E[E.length - 1].endProgramDateTime;
                  if (L >= (I || 0))
                    return null;
                  M = M || 0;
                  for (var S = 0; S < E.length; ++S) {
                    var d = E[S];
                    if (k(L, M, d))
                      return d;
                  }
                  return null;
                }
                function O(E, L, M, y) {
                  M === void 0 && (M = 0), y === void 0 && (y = 0);
                  var I = null;
                  if (E ? I = L[E.sn - L[0].sn + 1] || null : M === 0 && L[0].start === 0 && (I = L[0]), I && x(M, y, I) === 0)
                    return I;
                  var S = R.default.search(L, x.bind(null, M, y));
                  return S && (S !== E || !I) ? S : I;
                }
                function x(E, L, M) {
                  if (E === void 0 && (E = 0), L === void 0 && (L = 0), M.start <= E && M.start + M.duration > E)
                    return 0;
                  var y = Math.min(L, M.duration + (M.deltaPTS ? M.deltaPTS : 0));
                  return M.start + M.duration - y <= E ? 1 : M.start - y > E && M.start ? -1 : 0;
                }
                function k(E, L, M) {
                  var y = Math.min(L, M.duration + (M.deltaPTS ? M.deltaPTS : 0)) * 1e3, I = M.endProgramDateTime || 0;
                  return I - y > E;
                }
                function m2(E, L) {
                  return R.default.search(E, function(M) {
                    return M.cc < L ? 1 : M.cc > L ? -1 : 0;
                  });
                }
              }, "./src/controller/fragment-tracker.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { FragmentState: () => F, FragmentTracker: () => O });
                var j = N("./src/events.ts"), R = N("./src/types/loader.ts"), F;
                (function(m2) {
                  m2.NOT_LOADED = "NOT_LOADED", m2.APPENDING = "APPENDING", m2.PARTIAL = "PARTIAL", m2.OK = "OK";
                })(F || (F = {}));
                var O = function() {
                  function m2(L) {
                    this.activeFragment = null, this.activeParts = null, this.endListFragments = /* @__PURE__ */ Object.create(null), this.fragments = /* @__PURE__ */ Object.create(null), this.timeRanges = /* @__PURE__ */ Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hls = L, this._registerListeners();
                  }
                  var E = m2.prototype;
                  return E._registerListeners = function() {
                    var M = this.hls;
                    M.on(j.Events.BUFFER_APPENDED, this.onBufferAppended, this), M.on(j.Events.FRAG_BUFFERED, this.onFragBuffered, this), M.on(j.Events.FRAG_LOADED, this.onFragLoaded, this);
                  }, E._unregisterListeners = function() {
                    var M = this.hls;
                    M.off(j.Events.BUFFER_APPENDED, this.onBufferAppended, this), M.off(j.Events.FRAG_BUFFERED, this.onFragBuffered, this), M.off(j.Events.FRAG_LOADED, this.onFragLoaded, this);
                  }, E.destroy = function() {
                    this._unregisterListeners(), this.fragments = this.endListFragments = this.timeRanges = this.activeFragment = this.activeParts = null;
                  }, E.getAppendedFrag = function(M, y) {
                    if (y === R.PlaylistLevelType.MAIN) {
                      var I = this.activeFragment, S = this.activeParts;
                      if (!I)
                        return null;
                      if (S)
                        for (var d = S.length; d--; ) {
                          var v = S[d], f = v ? v.end : I.appendedPTS;
                          if (v.start <= M && f !== void 0 && M <= f)
                            return d > 9 && (this.activeParts = S.slice(d - 9)), v;
                        }
                      else if (I.start <= M && I.appendedPTS !== void 0 && M <= I.appendedPTS)
                        return I;
                    }
                    return this.getBufferedFrag(M, y);
                  }, E.getBufferedFrag = function(M, y) {
                    for (var I = this.fragments, S = Object.keys(I), d = S.length; d--; ) {
                      var v = I[S[d]];
                      if ((v == null ? void 0 : v.body.type) === y && v.buffered) {
                        var f = v.body;
                        if (f.start <= M && M <= f.end)
                          return f;
                      }
                    }
                    return null;
                  }, E.detectEvictedFragments = function(M, y, I) {
                    var S = this;
                    this.timeRanges && (this.timeRanges[M] = y), Object.keys(this.fragments).forEach(function(d) {
                      var v = S.fragments[d];
                      if (!!v) {
                        if (!v.buffered && !v.loaded) {
                          v.body.type === I && S.removeFragment(v.body);
                          return;
                        }
                        var f = v.range[M];
                        !f || f.time.some(function(l) {
                          var _ = !S.isTimeBuffered(l.startPTS, l.endPTS, y);
                          return _ && S.removeFragment(v.body), _;
                        });
                      }
                    });
                  }, E.detectPartialFragments = function(M) {
                    var y = this, I = this.timeRanges, S = M.frag, d = M.part;
                    if (!(!I || S.sn === "initSegment")) {
                      var v = k(S), f = this.fragments[v];
                      !f || (Object.keys(I).forEach(function(l) {
                        var _ = S.elementaryStreams[l];
                        if (!!_) {
                          var g = I[l], i = d !== null || _.partial === true;
                          f.range[l] = y.getBufferedTimes(S, d, i, g);
                        }
                      }), f.loaded = null, Object.keys(f.range).length ? (f.buffered = true, f.body.endList && (this.endListFragments[f.body.type] = f)) : this.removeFragment(f.body));
                    }
                  }, E.fragBuffered = function(M) {
                    var y = k(M), I = this.fragments[y];
                    I && (I.loaded = null, I.buffered = true);
                  }, E.getBufferedTimes = function(M, y, I, S) {
                    for (var d = { time: [], partial: I }, v = y ? y.start : M.start, f = y ? y.end : M.end, l = M.minEndPTS || f, _ = M.maxStartPTS || v, g = 0; g < S.length; g++) {
                      var i = S.start(g) - this.bufferPadding, n = S.end(g) + this.bufferPadding;
                      if (_ >= i && l <= n) {
                        d.time.push({ startPTS: Math.max(v, S.start(g)), endPTS: Math.min(f, S.end(g)) });
                        break;
                      } else if (v < n && f > i)
                        d.partial = true, d.time.push({ startPTS: Math.max(v, S.start(g)), endPTS: Math.min(f, S.end(g)) });
                      else if (f <= i)
                        break;
                    }
                    return d;
                  }, E.getPartialFragment = function(M) {
                    var y = null, I, S, d, v = 0, f = this.bufferPadding, l = this.fragments;
                    return Object.keys(l).forEach(function(_) {
                      var g = l[_];
                      !g || x(g) && (S = g.body.start - f, d = g.body.end + f, M >= S && M <= d && (I = Math.min(M - S, d - M), v <= I && (y = g.body, v = I)));
                    }), y;
                  }, E.isEndListAppended = function(M) {
                    var y = this.endListFragments[M];
                    return y !== void 0 && (y.buffered || x(y));
                  }, E.getState = function(M) {
                    var y = k(M), I = this.fragments[y];
                    return I ? I.buffered ? x(I) ? F.PARTIAL : F.OK : F.APPENDING : F.NOT_LOADED;
                  }, E.isTimeBuffered = function(M, y, I) {
                    for (var S, d, v = 0; v < I.length; v++) {
                      if (S = I.start(v) - this.bufferPadding, d = I.end(v) + this.bufferPadding, M >= S && y <= d)
                        return true;
                      if (y <= S)
                        return false;
                    }
                    return false;
                  }, E.onFragLoaded = function(M, y) {
                    var I = y.frag, S = y.part;
                    if (!(I.sn === "initSegment" || I.bitrateTest || S)) {
                      var d = k(I);
                      this.fragments[d] = { body: I, loaded: y, buffered: false, range: /* @__PURE__ */ Object.create(null) };
                    }
                  }, E.onBufferAppended = function(M, y) {
                    var I = this, S = y.frag, d = y.part, v = y.timeRanges;
                    if (S.type === R.PlaylistLevelType.MAIN)
                      if (this.activeFragment !== S && (this.activeFragment = S, S.appendedPTS = void 0), d) {
                        var f = this.activeParts;
                        f || (this.activeParts = f = []), f.push(d);
                      } else
                        this.activeParts = null;
                    this.timeRanges = v, Object.keys(v).forEach(function(l) {
                      var _ = v[l];
                      if (I.detectEvictedFragments(l, _), !d && S.type === R.PlaylistLevelType.MAIN) {
                        var g = S.elementaryStreams[l];
                        if (!g)
                          return;
                        for (var i = 0; i < _.length; i++) {
                          var n = _.end(i);
                          n <= g.endPTS && n > g.startPTS ? S.appendedPTS = Math.max(n, S.appendedPTS || 0) : S.appendedPTS = g.endPTS;
                        }
                      }
                    });
                  }, E.onFragBuffered = function(M, y) {
                    this.detectPartialFragments(y);
                  }, E.hasFragment = function(M) {
                    var y = k(M);
                    return !!this.fragments[y];
                  }, E.removeFragmentsInRange = function(M, y, I) {
                    var S = this;
                    Object.keys(this.fragments).forEach(function(d) {
                      var v = S.fragments[d];
                      if (!!v && v.buffered) {
                        var f = v.body;
                        f.type === I && f.start < y && f.end > M && S.removeFragment(f);
                      }
                    });
                  }, E.removeFragment = function(M) {
                    var y = k(M);
                    M.stats.loaded = 0, M.clearElementaryStreamInfo(), M.appendedPTS = void 0, delete this.fragments[y], M.endList && delete this.endListFragments[M.type];
                  }, E.removeAllFragments = function() {
                    this.fragments = /* @__PURE__ */ Object.create(null), this.endListFragments = /* @__PURE__ */ Object.create(null), this.activeFragment = null, this.activeParts = null;
                  }, m2;
                }();
                function x(m2) {
                  var E, L;
                  return m2.buffered && (((E = m2.range.video) === null || E === void 0 ? void 0 : E.partial) || ((L = m2.range.audio) === null || L === void 0 ? void 0 : L.partial));
                }
                function k(m2) {
                  return m2.type + "_" + m2.level + "_" + m2.urlId + "_" + m2.sn;
                }
              }, "./src/controller/gap-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { MAX_START_GAP_JUMP: () => k, SKIP_BUFFER_HOLE_STEP_SECONDS: () => m2, SKIP_BUFFER_RANGE_START: () => E, STALL_MINIMUM_DURATION_MS: () => x, default: () => L });
                var j = N("./src/utils/buffer-helper.ts"), R = N("./src/errors.ts"), F = N("./src/events.ts"), O = N("./src/utils/logger.ts"), x = 250, k = 2, m2 = 0.1, E = 0.05, L = function() {
                  function M(I, S, d, v) {
                    this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = false, this.stalled = null, this.moved = false, this.seeking = false, this.config = I, this.media = S, this.fragmentTracker = d, this.hls = v;
                  }
                  var y = M.prototype;
                  return y.destroy = function() {
                    this.media = null, this.hls = this.fragmentTracker = null;
                  }, y.poll = function(S, d) {
                    var v = this.config, f = this.media, l = this.stalled;
                    if (f !== null) {
                      var _ = f.currentTime, g = f.seeking, i = this.seeking && !g, n = !this.seeking && g;
                      if (this.seeking = g, _ !== S) {
                        if (this.moved = true, l !== null) {
                          if (this.stallReported) {
                            var o = self.performance.now() - l;
                            O.logger.warn("playback not stuck anymore @" + _ + ", after " + Math.round(o) + "ms"), this.stallReported = false;
                          }
                          this.stalled = null, this.nudgeRetry = 0;
                        }
                        return;
                      }
                      if ((n || i) && (this.stalled = null), !(f.paused && !g || f.ended || f.playbackRate === 0 || !j.BufferHelper.getBuffered(f).length)) {
                        var h = j.BufferHelper.bufferInfo(f, _, 0), b = h.len > 0, a = h.nextStart || 0;
                        if (!(!b && !a)) {
                          if (g) {
                            var c = h.len > k, s = !a || d && d.start <= _ || a - _ > k && !this.fragmentTracker.getPartialFragment(_);
                            if (c || s)
                              return;
                            this.moved = false;
                          }
                          if (!this.moved && this.stalled !== null) {
                            var p, D = Math.max(a, h.start || 0) - _, A = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null, w = A == null || (p = A.details) === null || p === void 0 ? void 0 : p.live, B = w ? A.details.targetduration * 2 : k;
                            if (D > 0 && D <= B) {
                              this._trySkipBufferHole(null);
                              return;
                            }
                          }
                          var U = self.performance.now();
                          if (l === null) {
                            this.stalled = U;
                            return;
                          }
                          var K = U - l;
                          if (!(!g && K >= x && (this._reportStall(h), !this.media))) {
                            var W = j.BufferHelper.bufferInfo(f, _, v.maxBufferHole);
                            this._tryFixBufferStall(W, K);
                          }
                        }
                      }
                    }
                  }, y._tryFixBufferStall = function(S, d) {
                    var v = this.config, f = this.fragmentTracker, l = this.media;
                    if (l !== null) {
                      var _ = l.currentTime, g = f.getPartialFragment(_);
                      if (g) {
                        var i = this._trySkipBufferHole(g);
                        if (i || !this.media)
                          return;
                      }
                      S.len > v.maxBufferHole && d > v.highBufferWatchdogPeriod * 1e3 && (O.logger.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer());
                    }
                  }, y._reportStall = function(S) {
                    var d = this.hls, v = this.media, f = this.stallReported;
                    !f && v && (this.stallReported = true, O.logger.warn("Playback stalling at @" + v.currentTime + " due to low buffer (" + JSON.stringify(S) + ")"), d.trigger(F.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer: S.len }));
                  }, y._trySkipBufferHole = function(S) {
                    var d = this.config, v = this.hls, f = this.media;
                    if (f === null)
                      return 0;
                    for (var l = f.currentTime, _ = 0, g = j.BufferHelper.getBuffered(f), i = 0; i < g.length; i++) {
                      var n = g.start(i);
                      if (l + d.maxBufferHole >= _ && l < n) {
                        var o = Math.max(n + E, f.currentTime + m2);
                        return O.logger.warn("skipping hole, adjusting currentTime from " + l + " to " + o), this.moved = true, this.stalled = null, f.currentTime = o, S && v.trigger(F.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, reason: "fragment loaded with buffer holes, seeking from " + l + " to " + o, frag: S }), o;
                      }
                      _ = g.end(i);
                    }
                    return 0;
                  }, y._tryNudgeBuffer = function() {
                    var S = this.config, d = this.hls, v = this.media, f = this.nudgeRetry;
                    if (v !== null) {
                      var l = v.currentTime;
                      if (this.nudgeRetry++, f < S.nudgeMaxRetry) {
                        var _ = l + (f + 1) * S.nudgeOffset;
                        O.logger.warn("Nudging 'currentTime' from " + l + " to " + _), v.currentTime = _, d.trigger(F.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false });
                      } else
                        O.logger.error("Playhead still not moving while enough data buffered @" + l + " after " + S.nudgeMaxRetry + " nudges"), d.trigger(F.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.BUFFER_STALLED_ERROR, fatal: true });
                    }
                  }, M;
                }();
              }, "./src/controller/id3-track-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => S });
                var j = N("./src/polyfills/number.ts"), R = N("./src/events.ts"), F = N("./src/utils/texttrack-utils.ts"), O = N("./src/demux/id3.ts"), x = N("./src/loader/date-range.ts"), k = N("./src/types/demuxer.ts"), m2 = 0.25;
                function E() {
                  return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
                }
                var L = function() {
                  var d = E();
                  try {
                    new d(0, Number.POSITIVE_INFINITY, "");
                  } catch (v) {
                    return Number.MAX_VALUE;
                  }
                  return Number.POSITIVE_INFINITY;
                }();
                function M(d, v) {
                  return d.getTime() / 1e3 - v;
                }
                function y(d) {
                  return Uint8Array.from(d.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer;
                }
                var I = function() {
                  function d(f) {
                    this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = f, this._registerListeners();
                  }
                  var v = d.prototype;
                  return v.destroy = function() {
                    this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null;
                  }, v._registerListeners = function() {
                    var l = this.hls;
                    l.on(R.Events.MEDIA_ATTACHED, this.onMediaAttached, this), l.on(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), l.on(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), l.on(R.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), l.on(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), l.on(R.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
                  }, v._unregisterListeners = function() {
                    var l = this.hls;
                    l.off(R.Events.MEDIA_ATTACHED, this.onMediaAttached, this), l.off(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), l.off(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), l.off(R.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), l.off(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), l.off(R.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
                  }, v.onMediaAttached = function(l, _) {
                    this.media = _.media;
                  }, v.onMediaDetaching = function() {
                    !this.id3Track || ((0, F.clearCurrentCues)(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {});
                  }, v.onManifestLoading = function() {
                    this.dateRangeCuesAppended = {};
                  }, v.createTrack = function(l) {
                    var _ = this.getID3Track(l.textTracks);
                    return _.mode = "hidden", _;
                  }, v.getID3Track = function(l) {
                    if (!!this.media) {
                      for (var _ = 0; _ < l.length; _++) {
                        var g = l[_];
                        if (g.kind === "metadata" && g.label === "id3")
                          return (0, F.sendAddTrackEvent)(g, this.media), g;
                      }
                      return this.media.addTextTrack("metadata", "id3");
                    }
                  }, v.onFragParsingMetadata = function(l, _) {
                    if (!!this.media) {
                      var g = this.hls.config, i = g.enableEmsgMetadataCues, n = g.enableID3MetadataCues;
                      if (!(!i && !n)) {
                        var o = _.samples;
                        this.id3Track || (this.id3Track = this.createTrack(this.media));
                        for (var h = E(), b = 0; b < o.length; b++) {
                          var a = o[b].type;
                          if (!(a === k.MetadataSchema.emsg && !i || !n)) {
                            var c = O.getID3Frames(o[b].data);
                            if (c) {
                              var s = o[b].pts, p = s + o[b].duration;
                              p > L && (p = L);
                              var D = p - s;
                              D <= 0 && (p = s + m2);
                              for (var A = 0; A < c.length; A++) {
                                var w = c[A];
                                if (!O.isTimeStampFrame(w)) {
                                  this.updateId3CueEnds(s);
                                  var B = new h(s, p, "");
                                  B.value = w, a && (B.type = a), this.id3Track.addCue(B);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }, v.updateId3CueEnds = function(l) {
                    var _, g = (_ = this.id3Track) === null || _ === void 0 ? void 0 : _.cues;
                    if (g)
                      for (var i = g.length; i--; ) {
                        var n = g[i];
                        n.startTime < l && n.endTime === L && (n.endTime = l);
                      }
                  }, v.onBufferFlushing = function(l, _) {
                    var g = _.startOffset, i = _.endOffset, n = _.type, o = this.id3Track, h = this.hls;
                    if (!!h) {
                      var b = h.config, a = b.enableEmsgMetadataCues, c = b.enableID3MetadataCues;
                      if (o && (a || c)) {
                        var s;
                        n === "audio" ? s = function(D) {
                          return D.type === k.MetadataSchema.audioId3 && c;
                        } : n === "video" ? s = function(D) {
                          return D.type === k.MetadataSchema.emsg && a;
                        } : s = function(D) {
                          return D.type === k.MetadataSchema.audioId3 && c || D.type === k.MetadataSchema.emsg && a;
                        }, (0, F.removeCuesInRange)(o, g, i, s);
                      }
                    }
                  }, v.onLevelUpdated = function(l, _) {
                    var g = this, i = _.details;
                    if (!(!this.media || !i.hasProgramDateTime || !this.hls.config.enableDateRangeMetadataCues)) {
                      var n = this.dateRangeCuesAppended, o = this.id3Track, h = i.dateRanges, b = Object.keys(h);
                      if (o)
                        for (var a = Object.keys(n).filter(function(U) {
                          return !b.includes(U);
                        }), c = function(K) {
                          var W = a[K];
                          Object.keys(n[W].cues).forEach(function(H) {
                            o.removeCue(n[W].cues[H]);
                          }), delete n[W];
                        }, s = a.length; s--; )
                          c(s);
                      var p = i.fragments[i.fragments.length - 1];
                      if (!(b.length === 0 || !(0, j.isFiniteNumber)(p == null ? void 0 : p.programDateTime))) {
                        this.id3Track || (this.id3Track = this.createTrack(this.media));
                        for (var D = p.programDateTime / 1e3 - p.start, A = E(), w = function(K) {
                          var W = b[K], H = h[W], V = n[W], z = (V == null ? void 0 : V.cues) || {}, Q = (V == null ? void 0 : V.durationKnown) || false, q = M(H.startDate, D), ee = L, ae = H.endDate;
                          if (ae)
                            ee = M(ae, D), Q = true;
                          else if (H.endOnNext && !Q) {
                            var ne = b.reduce(function(Te, fe) {
                              var ie = h[fe];
                              return ie.class === H.class && ie.id !== fe && ie.startDate > H.startDate && Te.push(ie), Te;
                            }, []).sort(function(Te, fe) {
                              return Te.startDate.getTime() - fe.startDate.getTime();
                            })[0];
                            ne && (ee = M(ne.startDate, D), Q = true);
                          }
                          for (var ue = Object.keys(H.attr), ye = 0; ye < ue.length; ye++) {
                            var be = ue[ye];
                            if (!(be === x.DateRangeAttribute.ID || be === x.DateRangeAttribute.CLASS || be === x.DateRangeAttribute.START_DATE || be === x.DateRangeAttribute.DURATION || be === x.DateRangeAttribute.END_DATE || be === x.DateRangeAttribute.END_ON_NEXT)) {
                              var me = z[be];
                              if (me)
                                Q && !V.durationKnown && (me.endTime = ee);
                              else {
                                var Se = H.attr[be];
                                me = new A(q, ee, ""), (be === x.DateRangeAttribute.SCTE35_OUT || be === x.DateRangeAttribute.SCTE35_IN) && (Se = y(Se)), me.value = { key: be, data: Se }, me.type = k.MetadataSchema.dateRange, g.id3Track.addCue(me), z[be] = me;
                              }
                            }
                          }
                          n[W] = { cues: z, dateRange: H, durationKnown: Q };
                        }, B = 0; B < b.length; B++)
                          w(B);
                      }
                    }
                  }, d;
                }();
                const S = I;
              }, "./src/controller/latency-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => E });
                var j = N("./src/errors.ts"), R = N("./src/events.ts"), F = N("./src/utils/logger.ts");
                function O(L, M) {
                  for (var y = 0; y < M.length; y++) {
                    var I = M[y];
                    I.enumerable = I.enumerable || false, I.configurable = true, "value" in I && (I.writable = true), Object.defineProperty(L, k(I.key), I);
                  }
                }
                function x(L, M, y) {
                  return M && O(L.prototype, M), y && O(L, y), Object.defineProperty(L, "prototype", { writable: false }), L;
                }
                function k(L) {
                  var M = m2(L, "string");
                  return typeof M == "symbol" ? M : String(M);
                }
                function m2(L, M) {
                  if (typeof L != "object" || L === null)
                    return L;
                  var y = L[Symbol.toPrimitive];
                  if (y !== void 0) {
                    var I = y.call(L, M || "default");
                    if (typeof I != "object")
                      return I;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (M === "string" ? String : Number)(L);
                }
                var E = function() {
                  function L(y) {
                    var I = this;
                    this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
                      return I.timeupdate();
                    }, this.hls = y, this.config = y.config, this.registerListeners();
                  }
                  var M = L.prototype;
                  return M.destroy = function() {
                    this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null;
                  }, M.registerListeners = function() {
                    this.hls.on(R.Events.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(R.Events.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(R.Events.ERROR, this.onError, this);
                  }, M.unregisterListeners = function() {
                    this.hls.off(R.Events.MEDIA_ATTACHED, this.onMediaAttached), this.hls.off(R.Events.MEDIA_DETACHING, this.onMediaDetaching), this.hls.off(R.Events.MANIFEST_LOADING, this.onManifestLoading), this.hls.off(R.Events.LEVEL_UPDATED, this.onLevelUpdated), this.hls.off(R.Events.ERROR, this.onError);
                  }, M.onMediaAttached = function(I, S) {
                    this.media = S.media, this.media.addEventListener("timeupdate", this.timeupdateHandler);
                  }, M.onMediaDetaching = function() {
                    this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null);
                  }, M.onManifestLoading = function() {
                    this.levelDetails = null, this._latency = null, this.stallCount = 0;
                  }, M.onLevelUpdated = function(I, S) {
                    var d = S.details;
                    this.levelDetails = d, d.advanced && this.timeupdate(), !d.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler);
                  }, M.onError = function(I, S) {
                    S.details === j.ErrorDetails.BUFFER_STALLED_ERROR && (this.stallCount++, F.logger.warn("[playback-rate-controller]: Stall detected, adjusting target latency"));
                  }, M.timeupdate = function() {
                    var I = this.media, S = this.levelDetails;
                    if (!(!I || !S)) {
                      this.currentTime = I.currentTime;
                      var d = this.computeLatency();
                      if (d !== null) {
                        this._latency = d;
                        var v = this.config, f = v.lowLatencyMode, l = v.maxLiveSyncPlaybackRate;
                        if (!(!f || l === 1)) {
                          var _ = this.targetLatency;
                          if (_ !== null) {
                            var g = d - _, i = Math.min(this.maxLatency, _ + S.targetduration), n = g < i;
                            if (S.live && n && g > 0.05 && this.forwardBufferLength > 1) {
                              var o = Math.min(2, Math.max(1, l)), h = Math.round(2 / (1 + Math.exp(-0.75 * g - this.edgeStalled)) * 20) / 20;
                              I.playbackRate = Math.min(o, Math.max(1, h));
                            } else
                              I.playbackRate !== 1 && I.playbackRate !== 0 && (I.playbackRate = 1);
                          }
                        }
                      }
                    }
                  }, M.estimateLiveEdge = function() {
                    var I = this.levelDetails;
                    return I === null ? null : I.edge + I.age;
                  }, M.computeLatency = function() {
                    var I = this.estimateLiveEdge();
                    return I === null ? null : I - this.currentTime;
                  }, x(L, [{ key: "latency", get: function() {
                    return this._latency || 0;
                  } }, { key: "maxLatency", get: function() {
                    var I = this.config, S = this.levelDetails;
                    return I.liveMaxLatencyDuration !== void 0 ? I.liveMaxLatencyDuration : S ? I.liveMaxLatencyDurationCount * S.targetduration : 0;
                  } }, { key: "targetLatency", get: function() {
                    var I = this.levelDetails;
                    if (I === null)
                      return null;
                    var S = I.holdBack, d = I.partHoldBack, v = I.targetduration, f = this.config, l = f.liveSyncDuration, _ = f.liveSyncDurationCount, g = f.lowLatencyMode, i = this.hls.userConfig, n = g && d || S;
                    (i.liveSyncDuration || i.liveSyncDurationCount || n === 0) && (n = l !== void 0 ? l : _ * v);
                    var o = v, h = 1;
                    return n + Math.min(this.stallCount * h, o);
                  } }, { key: "liveSyncPosition", get: function() {
                    var I = this.estimateLiveEdge(), S = this.targetLatency, d = this.levelDetails;
                    if (I === null || S === null || d === null)
                      return null;
                    var v = d.edge, f = I - S - this.edgeStalled, l = v - d.totalduration, _ = v - (this.config.lowLatencyMode && d.partTarget || d.targetduration);
                    return Math.min(Math.max(l, f), _);
                  } }, { key: "drift", get: function() {
                    var I = this.levelDetails;
                    return I === null ? 1 : I.drift;
                  } }, { key: "edgeStalled", get: function() {
                    var I = this.levelDetails;
                    if (I === null)
                      return 0;
                    var S = (this.config.lowLatencyMode && I.partTarget || I.targetduration) * 3;
                    return Math.max(I.age - S, 0);
                  } }, { key: "forwardBufferLength", get: function() {
                    var I = this.media, S = this.levelDetails;
                    if (!I || !S)
                      return 0;
                    var d = I.buffered.length;
                    return (d ? I.buffered.end(d - 1) : S.edge) - this.currentTime;
                  } }]), L;
                }();
              }, "./src/controller/level-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => f });
                var j = N("./src/types/level.ts"), R = N("./src/events.ts"), F = N("./src/errors.ts"), O = N("./src/utils/codecs.ts"), x = N("./src/controller/level-helper.ts"), k = N("./src/controller/base-playlist-controller.ts"), m2 = N("./src/types/loader.ts");
                function E() {
                  return E = Object.assign ? Object.assign.bind() : function(l) {
                    for (var _ = 1; _ < arguments.length; _++) {
                      var g = arguments[_];
                      for (var i in g)
                        Object.prototype.hasOwnProperty.call(g, i) && (l[i] = g[i]);
                    }
                    return l;
                  }, E.apply(this, arguments);
                }
                function L(l, _) {
                  for (var g = 0; g < _.length; g++) {
                    var i = _[g];
                    i.enumerable = i.enumerable || false, i.configurable = true, "value" in i && (i.writable = true), Object.defineProperty(l, y(i.key), i);
                  }
                }
                function M(l, _, g) {
                  return _ && L(l.prototype, _), g && L(l, g), Object.defineProperty(l, "prototype", { writable: false }), l;
                }
                function y(l) {
                  var _ = I(l, "string");
                  return typeof _ == "symbol" ? _ : String(_);
                }
                function I(l, _) {
                  if (typeof l != "object" || l === null)
                    return l;
                  var g = l[Symbol.toPrimitive];
                  if (g !== void 0) {
                    var i = g.call(l, _ || "default");
                    if (typeof i != "object")
                      return i;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (_ === "string" ? String : Number)(l);
                }
                function S(l, _) {
                  l.prototype = Object.create(_.prototype), l.prototype.constructor = l, d(l, _);
                }
                function d(l, _) {
                  return d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(i, n) {
                    return i.__proto__ = n, i;
                  }, d(l, _);
                }
                var v = /chrome|firefox/.test(navigator.userAgent.toLowerCase()), f = function(l) {
                  S(_, l);
                  function _(i) {
                    var n;
                    return n = l.call(this, i, "[level-controller]") || this, n._levels = [], n._firstLevel = -1, n._startLevel = void 0, n.currentLevelIndex = -1, n.manualLevelIndex = -1, n.onParsedComplete = void 0, n._registerListeners(), n;
                  }
                  var g = _.prototype;
                  return g._registerListeners = function() {
                    var n = this.hls;
                    n.on(R.Events.MANIFEST_LOADED, this.onManifestLoaded, this), n.on(R.Events.LEVEL_LOADED, this.onLevelLoaded, this), n.on(R.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), n.on(R.Events.FRAG_LOADED, this.onFragLoaded, this), n.on(R.Events.ERROR, this.onError, this);
                  }, g._unregisterListeners = function() {
                    var n = this.hls;
                    n.off(R.Events.MANIFEST_LOADED, this.onManifestLoaded, this), n.off(R.Events.LEVEL_LOADED, this.onLevelLoaded, this), n.off(R.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), n.off(R.Events.FRAG_LOADED, this.onFragLoaded, this), n.off(R.Events.ERROR, this.onError, this);
                  }, g.destroy = function() {
                    this._unregisterListeners(), this.manualLevelIndex = -1, this._levels.length = 0, l.prototype.destroy.call(this);
                  }, g.startLoad = function() {
                    var n = this._levels;
                    n.forEach(function(o) {
                      o.loadError = 0;
                    }), l.prototype.startLoad.call(this);
                  }, g.onManifestLoaded = function(n, o) {
                    var h = [], b = [], a = [], c, s = {}, p, D = false, A = false, w = false;
                    if (o.levels.forEach(function(W) {
                      var H = W.attrs;
                      D = D || !!(W.width && W.height), A = A || !!W.videoCodec, w = w || !!W.audioCodec, v && W.audioCodec && W.audioCodec.indexOf("mp4a.40.34") !== -1 && (W.audioCodec = void 0);
                      var V = W.bitrate + "-" + W.attrs.RESOLUTION + "-" + W.attrs.CODECS;
                      p = s[V], p ? p.url.push(W.url) : (p = new j.Level(W), s[V] = p, h.push(p)), H && (H.AUDIO && (0, x.addGroupId)(p, "audio", H.AUDIO), H.SUBTITLES && (0, x.addGroupId)(p, "text", H.SUBTITLES));
                    }), (D || A) && w && (h = h.filter(function(W) {
                      var H = W.videoCodec, V = W.width, z = W.height;
                      return !!H || !!(V && z);
                    })), h = h.filter(function(W) {
                      var H = W.audioCodec, V = W.videoCodec;
                      return (!H || (0, O.isCodecSupportedInMp4)(H, "audio")) && (!V || (0, O.isCodecSupportedInMp4)(V, "video"));
                    }), o.audioTracks && (b = o.audioTracks.filter(function(W) {
                      return !W.audioCodec || (0, O.isCodecSupportedInMp4)(W.audioCodec, "audio");
                    }), (0, x.assignTrackIdsByGroup)(b)), o.subtitles && (a = o.subtitles, (0, x.assignTrackIdsByGroup)(a)), h.length > 0) {
                      c = h[0].bitrate, h.sort(function(W, H) {
                        return W.attrs["HDCP-LEVEL"] !== H.attrs["HDCP-LEVEL"] ? (W.attrs["HDCP-LEVEL"] || "") > (H.attrs["HDCP-LEVEL"] || "") ? 1 : -1 : W.bitrate !== H.bitrate ? W.bitrate - H.bitrate : W.attrs.SCORE !== H.attrs.SCORE ? W.attrs.decimalFloatingPoint("SCORE") - H.attrs.decimalFloatingPoint("SCORE") : D && W.height !== H.height ? W.height - H.height : 0;
                      }), this._levels = h;
                      for (var B = 0; B < h.length; B++)
                        if (h[B].bitrate === c) {
                          this._firstLevel = B, this.log("manifest loaded, " + h.length + " level(s) found, first bitrate: " + c);
                          break;
                        }
                      var U = w && !A, K = { levels: h, audioTracks: b, subtitleTracks: a, sessionData: o.sessionData, sessionKeys: o.sessionKeys, firstLevel: this._firstLevel, stats: o.stats, audio: w, video: A, altAudio: !U && b.some(function(W) {
                        return !!W.url;
                      }) };
                      this.hls.trigger(R.Events.MANIFEST_PARSED, K), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition);
                    } else
                      this.hls.trigger(R.Events.ERROR, { type: F.ErrorTypes.MEDIA_ERROR, details: F.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: o.url, reason: "no level with compatible codecs found in manifest" });
                  }, g.onError = function(n, o) {
                    var h, b;
                    if (l.prototype.onError.call(this, n, o), !o.fatal) {
                      var a = o.context, c = this._levels[this.currentLevelIndex];
                      if (a && (a.type === m2.PlaylistContextType.AUDIO_TRACK && c.audioGroupIds && a.groupId === c.audioGroupIds[c.urlId] || a.type === m2.PlaylistContextType.SUBTITLE_TRACK && c.textGroupIds && a.groupId === c.textGroupIds[c.urlId])) {
                        this.redundantFailover(this.currentLevelIndex);
                        return;
                      }
                      var s = false, p = true, D;
                      switch (o.details) {
                        case F.ErrorDetails.FRAG_LOAD_ERROR:
                        case F.ErrorDetails.FRAG_LOAD_TIMEOUT:
                        case F.ErrorDetails.KEY_LOAD_ERROR:
                        case F.ErrorDetails.KEY_LOAD_TIMEOUT:
                          if (o.frag) {
                            var A = o.frag.type === m2.PlaylistLevelType.MAIN ? o.frag.level : this.currentLevelIndex, w = this._levels[A];
                            w ? (w.fragmentError++, w.fragmentError > this.hls.config.fragLoadingMaxRetry && (D = A)) : D = A;
                          }
                          break;
                        case F.ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED: {
                          var B = c.attrs["HDCP-LEVEL"];
                          B && (this.hls.maxHdcpLevel = j.HdcpLevels[j.HdcpLevels.indexOf(B) - 1], this.warn('Restricting playback to HDCP-LEVEL of "' + this.hls.maxHdcpLevel + '" or lower'));
                        }
                        case F.ErrorDetails.FRAG_PARSING_ERROR:
                        case F.ErrorDetails.KEY_SYSTEM_NO_SESSION:
                          D = ((h = o.frag) === null || h === void 0 ? void 0 : h.type) === m2.PlaylistLevelType.MAIN ? o.frag.level : this.currentLevelIndex, o.levelRetry = false;
                          break;
                        case F.ErrorDetails.LEVEL_LOAD_ERROR:
                        case F.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                          a && (a.deliveryDirectives && (p = false), D = a.level), s = true;
                          break;
                        case F.ErrorDetails.REMUX_ALLOC_ERROR:
                          D = (b = o.level) != null ? b : this.currentLevelIndex, s = true;
                          break;
                      }
                      D !== void 0 && this.recoverLevel(o, D, s, p);
                    }
                  }, g.recoverLevel = function(n, o, h, b) {
                    var a = n.details, c = this._levels[o];
                    if (c.loadError++, h) {
                      var s = this.retryLoadingOrFail(n);
                      if (s)
                        n.levelRetry = true;
                      else {
                        this.currentLevelIndex = -1;
                        return;
                      }
                    }
                    if (b) {
                      var p = c.url.length;
                      if (p > 1 && c.loadError < p)
                        n.levelRetry = true, this.redundantFailover(o);
                      else if (this.manualLevelIndex === -1) {
                        for (var D = -1, A = this._levels, w = A.length; w--; ) {
                          var B = (w + this.currentLevelIndex) % A.length;
                          if (B !== this.currentLevelIndex && A[B].loadError === 0) {
                            D = B;
                            break;
                          }
                        }
                        D > -1 && this.currentLevelIndex !== D ? (this.warn(a + ": switch to " + D), n.levelRetry = true, this.hls.nextAutoLevel = D) : n.levelRetry === false && (n.fatal = true);
                      }
                    }
                  }, g.redundantFailover = function(n) {
                    var o = this._levels[n], h = o.url.length;
                    if (h > 1) {
                      var b = (o.urlId + 1) % h;
                      this.warn("Switching to redundant URL-id " + b), this._levels.forEach(function(a) {
                        a.urlId = b;
                      }), this.level = n;
                    }
                  }, g.onFragLoaded = function(n, o) {
                    var h = o.frag;
                    if (h !== void 0 && h.type === m2.PlaylistLevelType.MAIN) {
                      var b = this._levels[h.level];
                      b !== void 0 && (b.fragmentError = 0, b.loadError = 0);
                    }
                  }, g.onLevelLoaded = function(n, o) {
                    var h, b = o.level, a = o.details, c = this._levels[b];
                    if (!c) {
                      var s;
                      this.warn("Invalid level index " + b), (s = o.deliveryDirectives) !== null && s !== void 0 && s.skip && (a.deltaUpdateFailed = true);
                      return;
                    }
                    b === this.currentLevelIndex ? (c.fragmentError === 0 && (c.loadError = 0, this.retryCount = 0), this.playlistLoaded(b, o, c.details)) : (h = o.deliveryDirectives) !== null && h !== void 0 && h.skip && (a.deltaUpdateFailed = true);
                  }, g.onAudioTrackSwitched = function(n, o) {
                    var h = this.hls.levels[this.currentLevelIndex];
                    if (!!h && h.audioGroupIds) {
                      for (var b = -1, a = this.hls.audioTracks[o.id].groupId, c = 0; c < h.audioGroupIds.length; c++)
                        if (h.audioGroupIds[c] === a) {
                          b = c;
                          break;
                        }
                      b !== h.urlId && (h.urlId = b, this.startLoad());
                    }
                  }, g.loadPlaylist = function(n) {
                    l.prototype.loadPlaylist.call(this);
                    var o = this.currentLevelIndex, h = this._levels[o];
                    if (this.canLoad && h && h.url.length > 0) {
                      var b = h.urlId, a = h.url[b];
                      if (n)
                        try {
                          a = n.addDirectives(a);
                        } catch (c) {
                          this.warn("Could not construct new URL with HLS Delivery Directives: " + c);
                        }
                      this.log("Attempt loading level index " + o + (n ? " at sn " + n.msn + " part " + n.part : "") + " with URL-id " + b + " " + a), this.clearTimer(), this.hls.trigger(R.Events.LEVEL_LOADING, { url: a, level: o, id: b, deliveryDirectives: n || null });
                    }
                  }, g.removeLevel = function(n, o) {
                    var h = function(c, s) {
                      return s !== o;
                    }, b = this._levels.filter(function(a, c) {
                      return c !== n ? true : a.url.length > 1 && o !== void 0 ? (a.url = a.url.filter(h), a.audioGroupIds && (a.audioGroupIds = a.audioGroupIds.filter(h)), a.textGroupIds && (a.textGroupIds = a.textGroupIds.filter(h)), a.urlId = 0, true) : false;
                    }).map(function(a, c) {
                      var s = a.details;
                      return s != null && s.fragments && s.fragments.forEach(function(p) {
                        p.level = c;
                      }), a;
                    });
                    this._levels = b, this.hls.trigger(R.Events.LEVELS_UPDATED, { levels: b });
                  }, M(_, [{ key: "levels", get: function() {
                    return this._levels.length === 0 ? null : this._levels;
                  } }, { key: "level", get: function() {
                    return this.currentLevelIndex;
                  }, set: function(n) {
                    var o, h = this._levels;
                    if (h.length !== 0 && !(this.currentLevelIndex === n && (o = h[n]) !== null && o !== void 0 && o.details)) {
                      if (n < 0 || n >= h.length) {
                        var b = n < 0;
                        if (this.hls.trigger(R.Events.ERROR, { type: F.ErrorTypes.OTHER_ERROR, details: F.ErrorDetails.LEVEL_SWITCH_ERROR, level: n, fatal: b, reason: "invalid level idx" }), b)
                          return;
                        n = Math.min(n, h.length - 1);
                      }
                      this.clearTimer();
                      var a = this.currentLevelIndex, c = h[a], s = h[n];
                      this.log("switching to level " + n + " from " + a), this.currentLevelIndex = n;
                      var p = E({}, s, { level: n, maxBitrate: s.maxBitrate, uri: s.uri, urlId: s.urlId });
                      delete p._urlId, this.hls.trigger(R.Events.LEVEL_SWITCHING, p);
                      var D = s.details;
                      if (!D || D.live) {
                        var A = this.switchParams(s.uri, c == null ? void 0 : c.details);
                        this.loadPlaylist(A);
                      }
                    }
                  } }, { key: "manualLevel", get: function() {
                    return this.manualLevelIndex;
                  }, set: function(n) {
                    this.manualLevelIndex = n, this._startLevel === void 0 && (this._startLevel = n), n !== -1 && (this.level = n);
                  } }, { key: "firstLevel", get: function() {
                    return this._firstLevel;
                  }, set: function(n) {
                    this._firstLevel = n;
                  } }, { key: "startLevel", get: function() {
                    if (this._startLevel === void 0) {
                      var n = this.hls.config.startLevel;
                      return n !== void 0 ? n : this._firstLevel;
                    } else
                      return this._startLevel;
                  }, set: function(n) {
                    this._startLevel = n;
                  } }, { key: "nextLoadLevel", get: function() {
                    return this.manualLevelIndex !== -1 ? this.manualLevelIndex : this.hls.nextAutoLevel;
                  }, set: function(n) {
                    this.level = n, this.manualLevelIndex === -1 && (this.hls.nextAutoLevel = n);
                  } }]), _;
                }(k.default);
              }, "./src/controller/level-helper.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { addGroupId: () => x, addSliding: () => v, adjustSliding: () => d, assignTrackIdsByGroup: () => k, computeReloadInterval: () => f, getFragmentWithSN: () => l, getPartWith: () => _, mapFragmentIntersection: () => S, mapPartIntersection: () => I, mergeDetails: () => M, updateFragPTSDTS: () => L, updatePTS: () => m2 });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/logger.ts"), F = N("./src/loader/date-range.ts");
                function O() {
                  return O = Object.assign ? Object.assign.bind() : function(g) {
                    for (var i = 1; i < arguments.length; i++) {
                      var n = arguments[i];
                      for (var o in n)
                        Object.prototype.hasOwnProperty.call(n, o) && (g[o] = n[o]);
                    }
                    return g;
                  }, O.apply(this, arguments);
                }
                function x(g, i, n) {
                  switch (i) {
                    case "audio":
                      g.audioGroupIds || (g.audioGroupIds = []), g.audioGroupIds.push(n);
                      break;
                    case "text":
                      g.textGroupIds || (g.textGroupIds = []), g.textGroupIds.push(n);
                      break;
                  }
                }
                function k(g) {
                  var i = {};
                  g.forEach(function(n) {
                    var o = n.groupId || "";
                    n.id = i[o] = i[o] || 0, i[o]++;
                  });
                }
                function m2(g, i, n) {
                  var o = g[i], h = g[n];
                  E(o, h);
                }
                function E(g, i) {
                  var n = i.startPTS;
                  if ((0, j.isFiniteNumber)(n)) {
                    var o = 0, h;
                    i.sn > g.sn ? (o = n - g.start, h = g) : (o = g.start - n, h = i), h.duration !== o && (h.duration = o);
                  } else if (i.sn > g.sn) {
                    var b = g.cc === i.cc;
                    b && g.minEndPTS ? i.start = g.start + (g.minEndPTS - g.start) : i.start = g.start + g.duration;
                  } else
                    i.start = Math.max(g.start - i.duration, 0);
                }
                function L(g, i, n, o, h, b) {
                  var a = o - n;
                  a <= 0 && (R.logger.warn("Fragment should have a positive duration", i), o = n + i.duration, b = h + i.duration);
                  var c = n, s = o, p = i.startPTS, D = i.endPTS;
                  if ((0, j.isFiniteNumber)(p)) {
                    var A = Math.abs(p - n);
                    (0, j.isFiniteNumber)(i.deltaPTS) ? i.deltaPTS = Math.max(A, i.deltaPTS) : i.deltaPTS = A, c = Math.max(n, p), n = Math.min(n, p), h = Math.min(h, i.startDTS), s = Math.min(o, D), o = Math.max(o, D), b = Math.max(b, i.endDTS);
                  }
                  i.duration = o - n;
                  var w = n - i.start;
                  i.start = i.startPTS = n, i.maxStartPTS = c, i.startDTS = h, i.endPTS = o, i.minEndPTS = s, i.endDTS = b;
                  var B = i.sn;
                  if (!g || B < g.startSN || B > g.endSN)
                    return 0;
                  var U, K = B - g.startSN, W = g.fragments;
                  for (W[K] = i, U = K; U > 0; U--)
                    E(W[U], W[U - 1]);
                  for (U = K; U < W.length - 1; U++)
                    E(W[U], W[U + 1]);
                  return g.fragmentHint && E(W[W.length - 1], g.fragmentHint), g.PTSKnown = g.alignedSliding = true, w;
                }
                function M(g, i) {
                  for (var n = null, o = g.fragments, h = o.length - 1; h >= 0; h--) {
                    var b = o[h].initSegment;
                    if (b) {
                      n = b;
                      break;
                    }
                  }
                  g.fragmentHint && delete g.fragmentHint.endPTS;
                  var a = 0, c;
                  if (S(g, i, function(U, K) {
                    U.relurl && (a = U.cc - K.cc), (0, j.isFiniteNumber)(U.startPTS) && (0, j.isFiniteNumber)(U.endPTS) && (K.start = K.startPTS = U.startPTS, K.startDTS = U.startDTS, K.appendedPTS = U.appendedPTS, K.maxStartPTS = U.maxStartPTS, K.endPTS = U.endPTS, K.endDTS = U.endDTS, K.minEndPTS = U.minEndPTS, K.duration = U.endPTS - U.startPTS, K.duration && (c = K), i.PTSKnown = i.alignedSliding = true), K.elementaryStreams = U.elementaryStreams, K.loader = U.loader, K.stats = U.stats, K.urlId = U.urlId, U.initSegment && (K.initSegment = U.initSegment, n = U.initSegment);
                  }), n) {
                    var s = i.fragmentHint ? i.fragments.concat(i.fragmentHint) : i.fragments;
                    s.forEach(function(U) {
                      var K;
                      (!U.initSegment || U.initSegment.relurl === ((K = n) === null || K === void 0 ? void 0 : K.relurl)) && (U.initSegment = n);
                    });
                  }
                  if (i.skippedSegments)
                    if (i.deltaUpdateFailed = i.fragments.some(function(U) {
                      return !U;
                    }), i.deltaUpdateFailed) {
                      R.logger.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                      for (var p = i.skippedSegments; p--; )
                        i.fragments.shift();
                      i.startSN = i.fragments[0].sn, i.startCC = i.fragments[0].cc;
                    } else
                      i.canSkipDateRanges && (i.dateRanges = y(g.dateRanges, i.dateRanges, i.recentlyRemovedDateranges));
                  var D = i.fragments;
                  if (a) {
                    R.logger.warn("discontinuity sliding from playlist, take drift into account");
                    for (var A = 0; A < D.length; A++)
                      D[A].cc += a;
                  }
                  i.skippedSegments && (i.startCC = i.fragments[0].cc), I(g.partList, i.partList, function(U, K) {
                    K.elementaryStreams = U.elementaryStreams, K.stats = U.stats;
                  }), c ? L(i, c, c.startPTS, c.endPTS, c.startDTS, c.endDTS) : d(g, i), D.length && (i.totalduration = i.edge - D[0].start), i.driftStartTime = g.driftStartTime, i.driftStart = g.driftStart;
                  var w = i.advancedDateTime;
                  if (i.advanced && w) {
                    var B = i.edge;
                    i.driftStart || (i.driftStartTime = w, i.driftStart = B), i.driftEndTime = w, i.driftEnd = B;
                  } else
                    i.driftEndTime = g.driftEndTime, i.driftEnd = g.driftEnd, i.advancedDateTime = g.advancedDateTime;
                }
                function y(g, i, n) {
                  var o = O({}, g);
                  return n && n.forEach(function(h) {
                    delete o[h];
                  }), Object.keys(i).forEach(function(h) {
                    var b = new F.DateRange(i[h].attr, o[h]);
                    b.isValid ? o[h] = b : R.logger.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(i[h].attr) + '"');
                  }), o;
                }
                function I(g, i, n) {
                  if (g && i)
                    for (var o = 0, h = 0, b = g.length; h <= b; h++) {
                      var a = g[h], c = i[h + o];
                      a && c && a.index === c.index && a.fragment.sn === c.fragment.sn ? n(a, c) : o--;
                    }
                }
                function S(g, i, n) {
                  for (var o = i.skippedSegments, h = Math.max(g.startSN, i.startSN) - i.startSN, b = (g.fragmentHint ? 1 : 0) + (o ? i.endSN : Math.min(g.endSN, i.endSN)) - i.startSN, a = i.startSN - g.startSN, c = i.fragmentHint ? i.fragments.concat(i.fragmentHint) : i.fragments, s = g.fragmentHint ? g.fragments.concat(g.fragmentHint) : g.fragments, p = h; p <= b; p++) {
                    var D = s[a + p], A = c[p];
                    o && !A && p < o && (A = i.fragments[p] = D), D && A && n(D, A);
                  }
                }
                function d(g, i) {
                  var n = i.startSN + i.skippedSegments - g.startSN, o = g.fragments;
                  n < 0 || n >= o.length || v(i, o[n].start);
                }
                function v(g, i) {
                  if (i) {
                    for (var n = g.fragments, o = g.skippedSegments; o < n.length; o++)
                      n[o].start += i;
                    g.fragmentHint && (g.fragmentHint.start += i);
                  }
                }
                function f(g, i) {
                  i === void 0 && (i = 1 / 0);
                  var n = 1e3 * g.targetduration;
                  if (g.updated) {
                    var o = g.fragments, h = 4;
                    if (o.length && n * h > i) {
                      var b = o[o.length - 1].duration * 1e3;
                      b < n && (n = b);
                    }
                  } else
                    n /= 2;
                  return Math.round(n);
                }
                function l(g, i, n) {
                  if (!g || !g.details)
                    return null;
                  var o = g.details, h = o.fragments[i - o.startSN];
                  return h || (h = o.fragmentHint, h && h.sn === i) ? h : i < o.startSN && n && n.sn === i ? n : null;
                }
                function _(g, i, n) {
                  if (!g || !g.details)
                    return null;
                  var o = g.details.partList;
                  if (o)
                    for (var h = o.length; h--; ) {
                      var b = o[h];
                      if (b.index === n && b.fragment.sn === i)
                        return b;
                    }
                  return null;
                }
              }, "./src/controller/stream-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => i });
                var j = N("./src/polyfills/number.ts"), R = N("./src/controller/base-stream-controller.ts"), F = N("./src/is-supported.ts"), O = N("./src/events.ts"), x = N("./src/utils/buffer-helper.ts"), k = N("./src/controller/fragment-tracker.ts"), m2 = N("./src/types/loader.ts"), E = N("./src/loader/fragment.ts"), L = N("./src/demux/transmuxer-interface.ts"), M = N("./src/types/transmuxer.ts"), y = N("./src/controller/gap-controller.ts"), I = N("./src/errors.ts");
                function S(n, o) {
                  for (var h = 0; h < o.length; h++) {
                    var b = o[h];
                    b.enumerable = b.enumerable || false, b.configurable = true, "value" in b && (b.writable = true), Object.defineProperty(n, v(b.key), b);
                  }
                }
                function d(n, o, h) {
                  return o && S(n.prototype, o), h && S(n, h), Object.defineProperty(n, "prototype", { writable: false }), n;
                }
                function v(n) {
                  var o = f(n, "string");
                  return typeof o == "symbol" ? o : String(o);
                }
                function f(n, o) {
                  if (typeof n != "object" || n === null)
                    return n;
                  var h = n[Symbol.toPrimitive];
                  if (h !== void 0) {
                    var b = h.call(n, o || "default");
                    if (typeof b != "object")
                      return b;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (o === "string" ? String : Number)(n);
                }
                function l(n, o) {
                  n.prototype = Object.create(o.prototype), n.prototype.constructor = n, _(n, o);
                }
                function _(n, o) {
                  return _ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(b, a) {
                    return b.__proto__ = a, b;
                  }, _(n, o);
                }
                var g = 100, i = function(n) {
                  l(o, n);
                  function o(b, a, c) {
                    var s;
                    return s = n.call(this, b, a, c, "[stream-controller]") || this, s.audioCodecSwap = false, s.gapController = null, s.level = -1, s._forceStartLoad = false, s.altAudio = false, s.audioOnly = false, s.fragPlaying = null, s.onvplaying = null, s.onvseeked = null, s.fragLastKbps = 0, s.couldBacktrack = false, s.backtrackFragment = null, s.audioCodecSwitch = false, s.videoBuffer = null, s._registerListeners(), s;
                  }
                  var h = o.prototype;
                  return h._registerListeners = function() {
                    var a = this.hls;
                    a.on(O.Events.MEDIA_ATTACHED, this.onMediaAttached, this), a.on(O.Events.MEDIA_DETACHING, this.onMediaDetaching, this), a.on(O.Events.MANIFEST_LOADING, this.onManifestLoading, this), a.on(O.Events.MANIFEST_PARSED, this.onManifestParsed, this), a.on(O.Events.LEVEL_LOADING, this.onLevelLoading, this), a.on(O.Events.LEVEL_LOADED, this.onLevelLoaded, this), a.on(O.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), a.on(O.Events.ERROR, this.onError, this), a.on(O.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), a.on(O.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), a.on(O.Events.BUFFER_CREATED, this.onBufferCreated, this), a.on(O.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), a.on(O.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), a.on(O.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, h._unregisterListeners = function() {
                    var a = this.hls;
                    a.off(O.Events.MEDIA_ATTACHED, this.onMediaAttached, this), a.off(O.Events.MEDIA_DETACHING, this.onMediaDetaching, this), a.off(O.Events.MANIFEST_LOADING, this.onManifestLoading, this), a.off(O.Events.MANIFEST_PARSED, this.onManifestParsed, this), a.off(O.Events.LEVEL_LOADED, this.onLevelLoaded, this), a.off(O.Events.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), a.off(O.Events.ERROR, this.onError, this), a.off(O.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), a.off(O.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), a.off(O.Events.BUFFER_CREATED, this.onBufferCreated, this), a.off(O.Events.BUFFER_FLUSHED, this.onBufferFlushed, this), a.off(O.Events.LEVELS_UPDATED, this.onLevelsUpdated, this), a.off(O.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, h.onHandlerDestroying = function() {
                    this._unregisterListeners(), this.onMediaDetaching();
                  }, h.startLoad = function(a) {
                    if (this.levels) {
                      var c = this.lastCurrentTime, s = this.hls;
                      if (this.stopLoad(), this.setInterval(g), this.level = -1, this.fragLoadError = 0, !this.startFragRequested) {
                        var p = s.startLevel;
                        p === -1 && (s.config.testBandwidth && this.levels.length > 1 ? (p = 0, this.bitrateTest = true) : p = s.nextAutoLevel), this.level = s.nextLoadLevel = p, this.loadedmetadata = false;
                      }
                      c > 0 && a === -1 && (this.log("Override startPosition with lastCurrentTime @" + c.toFixed(3)), a = c), this.state = R.State.IDLE, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = a, this.tick();
                    } else
                      this._forceStartLoad = true, this.state = R.State.STOPPED;
                  }, h.stopLoad = function() {
                    this._forceStartLoad = false, n.prototype.stopLoad.call(this);
                  }, h.doTick = function() {
                    switch (this.state) {
                      case R.State.IDLE:
                        this.doTickIdle();
                        break;
                      case R.State.WAITING_LEVEL: {
                        var a, c = this.levels, s = this.level, p = c == null || (a = c[s]) === null || a === void 0 ? void 0 : a.details;
                        if (p && (!p.live || this.levelLastLoaded === this.level)) {
                          if (this.waitForCdnTuneIn(p))
                            break;
                          this.state = R.State.IDLE;
                          break;
                        }
                        break;
                      }
                      case R.State.FRAG_LOADING_WAITING_RETRY:
                        {
                          var D, A = self.performance.now(), w = this.retryDate;
                          (!w || A >= w || (D = this.media) !== null && D !== void 0 && D.seeking) && (this.log("retryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded(this.level), this.state = R.State.IDLE);
                        }
                        break;
                      default:
                        break;
                    }
                    this.onTickEnd();
                  }, h.onTickEnd = function() {
                    n.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged();
                  }, h.doTickIdle = function() {
                    var a = this.hls, c = this.levelLastLoaded, s = this.levels, p = this.media, D = a.config, A = a.nextLoadLevel;
                    if (!(c === null || !p && (this.startFragRequested || !D.startFragPrefetch)) && !(this.altAudio && this.audioOnly) && !(!s || !s[A])) {
                      var w = s[A], B = this.getMainFwdBufferInfo();
                      if (B !== null) {
                        var U = this.getLevelDetails();
                        if (U && this._streamEnded(B, U)) {
                          var K = {};
                          this.altAudio && (K.type = "video"), this.hls.trigger(O.Events.BUFFER_EOS, K), this.state = R.State.ENDED;
                          return;
                        }
                        this.level = a.nextLoadLevel = A;
                        var W = w.details;
                        if (!W || this.state === R.State.WAITING_LEVEL || W.live && this.levelLastLoaded !== A) {
                          this.level = A, this.state = R.State.WAITING_LEVEL;
                          return;
                        }
                        var H = B.len, V = this.getMaxBufferLength(w.maxBitrate);
                        if (!(H >= V)) {
                          this.backtrackFragment && this.backtrackFragment.start > B.end && (this.backtrackFragment = null);
                          var z = this.backtrackFragment ? this.backtrackFragment.start : B.end, Q = this.getNextFragment(z, W);
                          if (this.couldBacktrack && !this.fragPrevious && Q && Q.sn !== "initSegment" && this.fragmentTracker.getState(Q) !== k.FragmentState.OK) {
                            var q, ee = ((q = this.backtrackFragment) != null ? q : Q).sn, ae = ee - W.startSN, ne = W.fragments[ae - 1];
                            ne && Q.cc === ne.cc && (Q = ne, this.fragmentTracker.removeFragment(ne));
                          } else
                            this.backtrackFragment && B.len && (this.backtrackFragment = null);
                          if (Q && this.fragmentTracker.getState(Q) === k.FragmentState.OK && this.nextLoadPosition > z) {
                            var ue = this.audioOnly && !this.altAudio ? E.ElementaryStreamTypes.AUDIO : E.ElementaryStreamTypes.VIDEO, ye = (ue === E.ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                            ye && this.afterBufferFlushed(ye, ue, m2.PlaylistLevelType.MAIN), Q = this.getNextFragment(this.nextLoadPosition, W);
                          }
                          !Q || (Q.initSegment && !Q.initSegment.data && !this.bitrateTest && (Q = Q.initSegment), this.loadFragment(Q, W, z));
                        }
                      }
                    }
                  }, h.loadFragment = function(a, c, s) {
                    var p, D = this.fragmentTracker.getState(a);
                    this.fragCurrent = a, D === k.FragmentState.NOT_LOADED ? a.sn === "initSegment" ? this._loadInitSegment(a, c) : this.bitrateTest ? (this.log("Fragment " + a.sn + " of level " + a.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(a, c)) : (this.startFragRequested = true, n.prototype.loadFragment.call(this, a, c, s)) : D === k.FragmentState.APPENDING ? this.reduceMaxBufferLength(a.duration) && this.fragmentTracker.removeFragment(a) : ((p = this.media) === null || p === void 0 ? void 0 : p.buffered.length) === 0 && this.fragmentTracker.removeAllFragments();
                  }, h.getAppendedFrag = function(a) {
                    var c = this.fragmentTracker.getAppendedFrag(a, m2.PlaylistLevelType.MAIN);
                    return c && "fragment" in c ? c.fragment : c;
                  }, h.getBufferedFrag = function(a) {
                    return this.fragmentTracker.getBufferedFrag(a, m2.PlaylistLevelType.MAIN);
                  }, h.followingBufferedFrag = function(a) {
                    return a ? this.getBufferedFrag(a.end + 0.5) : null;
                  }, h.immediateLevelSwitch = function() {
                    this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                  }, h.nextLevelSwitch = function() {
                    var a = this.levels, c = this.media;
                    if (c != null && c.readyState) {
                      var s, p = this.getAppendedFrag(c.currentTime);
                      if (p && p.start > 1 && this.flushMainBuffer(0, p.start - 1), !c.paused && a) {
                        var D = this.hls.nextLoadLevel, A = a[D], w = this.fragLastKbps;
                        w && this.fragCurrent ? s = this.fragCurrent.duration * A.maxBitrate / (1e3 * w) + 1 : s = 0;
                      } else
                        s = 0;
                      var B = this.getBufferedFrag(c.currentTime + s);
                      if (B) {
                        var U = this.followingBufferedFrag(B);
                        if (U) {
                          this.abortCurrentFrag();
                          var K = U.maxStartPTS ? U.maxStartPTS : U.start, W = U.duration, H = Math.max(B.end, K + Math.min(Math.max(W - this.config.maxFragLookUpTolerance, W * 0.5), W * 0.75));
                          this.flushMainBuffer(H, Number.POSITIVE_INFINITY);
                        }
                      }
                    }
                  }, h.abortCurrentFrag = function() {
                    var a = this.fragCurrent;
                    switch (this.fragCurrent = null, this.backtrackFragment = null, a && a.abortRequests(), this.state) {
                      case R.State.KEY_LOADING:
                      case R.State.FRAG_LOADING:
                      case R.State.FRAG_LOADING_WAITING_RETRY:
                      case R.State.PARSING:
                      case R.State.PARSED:
                        this.state = R.State.IDLE;
                        break;
                    }
                    this.nextLoadPosition = this.getLoadPosition();
                  }, h.flushMainBuffer = function(a, c) {
                    n.prototype.flushMainBuffer.call(this, a, c, this.altAudio ? "video" : null);
                  }, h.onMediaAttached = function(a, c) {
                    n.prototype.onMediaAttached.call(this, a, c);
                    var s = c.media;
                    this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), s.addEventListener("playing", this.onvplaying), s.addEventListener("seeked", this.onvseeked), this.gapController = new y.default(this.config, s, this.fragmentTracker, this.hls);
                  }, h.onMediaDetaching = function() {
                    var a = this.media;
                    a && this.onvplaying && this.onvseeked && (a.removeEventListener("playing", this.onvplaying), a.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), n.prototype.onMediaDetaching.call(this);
                  }, h.onMediaPlaying = function() {
                    this.tick();
                  }, h.onMediaSeeked = function() {
                    var a = this.media, c = a ? a.currentTime : null;
                    (0, j.isFiniteNumber)(c) && this.log("Media seeked to " + c.toFixed(3)), this.tick();
                  }, h.onManifestLoading = function() {
                    this.log("Trigger BUFFER_RESET"), this.hls.trigger(O.Events.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = false, this.startPosition = this.lastCurrentTime = 0, this.fragPlaying = null, this.backtrackFragment = null;
                  }, h.onManifestParsed = function(a, c) {
                    var s = false, p = false, D;
                    c.levels.forEach(function(A) {
                      D = A.audioCodec, D && (D.indexOf("mp4a.40.2") !== -1 && (s = true), D.indexOf("mp4a.40.5") !== -1 && (p = true));
                    }), this.audioCodecSwitch = s && p && !(0, F.changeTypeSupported)(), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = c.levels, this.startFragRequested = false;
                  }, h.onLevelLoading = function(a, c) {
                    var s = this.levels;
                    if (!(!s || this.state !== R.State.IDLE)) {
                      var p = s[c.level];
                      (!p.details || p.details.live && this.levelLastLoaded !== c.level || this.waitForCdnTuneIn(p.details)) && (this.state = R.State.WAITING_LEVEL);
                    }
                  }, h.onLevelLoaded = function(a, c) {
                    var s, p = this.levels, D = c.level, A = c.details, w = A.totalduration;
                    if (!p) {
                      this.warn("Levels were reset while loading level " + D);
                      return;
                    }
                    this.log("Level " + D + " loaded [" + A.startSN + "," + A.endSN + "], cc [" + A.startCC + ", " + A.endCC + "] duration:" + w);
                    var B = this.fragCurrent;
                    B && (this.state === R.State.FRAG_LOADING || this.state === R.State.FRAG_LOADING_WAITING_RETRY) && B.level !== c.level && B.loader && (this.state = R.State.IDLE, this.backtrackFragment = null, B.abortRequests());
                    var U = p[D], K = 0;
                    if (A.live || (s = U.details) !== null && s !== void 0 && s.live) {
                      if (A.fragments[0] || (A.deltaUpdateFailed = true), A.deltaUpdateFailed)
                        return;
                      K = this.alignPlaylists(A, U.details);
                    }
                    if (U.details = A, this.levelLastLoaded = D, this.hls.trigger(O.Events.LEVEL_UPDATED, { details: A, level: D }), this.state === R.State.WAITING_LEVEL) {
                      if (this.waitForCdnTuneIn(A))
                        return;
                      this.state = R.State.IDLE;
                    }
                    this.startFragRequested ? A.live && this.synchronizeToLiveEdge(A) : this.setStartPosition(A, K), this.tick();
                  }, h._handleFragmentLoadProgress = function(a) {
                    var c, s = a.frag, p = a.part, D = a.payload, A = this.levels;
                    if (!A) {
                      this.warn("Levels were reset while fragment load was in progress. Fragment " + s.sn + " of level " + s.level + " will not be buffered");
                      return;
                    }
                    var w = A[s.level], B = w.details;
                    if (!B) {
                      this.warn("Dropping fragment " + s.sn + " of level " + s.level + " after level details were reset");
                      return;
                    }
                    var U = w.videoCodec, K = B.PTSKnown || !B.live, W = (c = s.initSegment) === null || c === void 0 ? void 0 : c.data, H = this._getAudioCodec(w), V = this.transmuxer = this.transmuxer || new L.default(this.hls, m2.PlaylistLevelType.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)), z = p ? p.index : -1, Q = z !== -1, q = new M.ChunkMetadata(s.level, s.sn, s.stats.chunkCount, D.byteLength, z, Q), ee = this.initPTS[s.cc];
                    V.push(D, W, H, U, s, p, B.totalduration, K, q, ee);
                  }, h.onAudioTrackSwitching = function(a, c) {
                    var s = this.altAudio, p = !!c.url, D = c.id;
                    if (!p) {
                      if (this.mediaBuffer !== this.media) {
                        this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                        var A = this.fragCurrent;
                        A && (this.log("Switching to main audio track, cancel main fragment load"), A.abortRequests()), this.resetTransmuxer(), this.resetLoadingState();
                      } else
                        this.audioOnly && this.resetTransmuxer();
                      var w = this.hls;
                      s && w.trigger(O.Events.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: "audio" }), w.trigger(O.Events.AUDIO_TRACK_SWITCHED, { id: D });
                    }
                  }, h.onAudioTrackSwitched = function(a, c) {
                    var s = c.id, p = !!this.hls.audioTracks[s].url;
                    if (p) {
                      var D = this.videoBuffer;
                      D && this.mediaBuffer !== D && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = D);
                    }
                    this.altAudio = p, this.tick();
                  }, h.onBufferCreated = function(a, c) {
                    var s = c.tracks, p, D, A = false;
                    for (var w in s) {
                      var B = s[w];
                      if (B.id === "main") {
                        if (D = w, p = B, w === "video") {
                          var U = s[w];
                          U && (this.videoBuffer = U.buffer);
                        }
                      } else
                        A = true;
                    }
                    A && p ? (this.log("Alternate track found, use " + D + ".buffered to schedule main fragment loading"), this.mediaBuffer = p.buffer) : this.mediaBuffer = this.media;
                  }, h.onFragBuffered = function(a, c) {
                    var s = c.frag, p = c.part;
                    if (!(s && s.type !== m2.PlaylistLevelType.MAIN)) {
                      if (this.fragContextChanged(s)) {
                        this.warn("Fragment " + s.sn + (p ? " p: " + p.index : "") + " of level " + s.level + " finished buffering, but was aborted. state: " + this.state), this.state === R.State.PARSED && (this.state = R.State.IDLE);
                        return;
                      }
                      var D = p ? p.stats : s.stats;
                      this.fragLastKbps = Math.round(8 * D.total / (D.buffering.end - D.loading.first)), s.sn !== "initSegment" && (this.fragPrevious = s), this.fragBufferedComplete(s, p);
                    }
                  }, h.onError = function(a, c) {
                    if (c.type === I.ErrorTypes.KEY_SYSTEM_ERROR) {
                      this.onFragmentOrKeyLoadError(m2.PlaylistLevelType.MAIN, c);
                      return;
                    }
                    switch (c.details) {
                      case I.ErrorDetails.FRAG_LOAD_ERROR:
                      case I.ErrorDetails.FRAG_LOAD_TIMEOUT:
                      case I.ErrorDetails.FRAG_PARSING_ERROR:
                      case I.ErrorDetails.KEY_LOAD_ERROR:
                      case I.ErrorDetails.KEY_LOAD_TIMEOUT:
                        this.onFragmentOrKeyLoadError(m2.PlaylistLevelType.MAIN, c);
                        break;
                      case I.ErrorDetails.LEVEL_LOAD_ERROR:
                      case I.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                        this.state !== R.State.ERROR && (c.fatal ? (this.warn("" + c.details), this.state = R.State.ERROR) : !c.levelRetry && this.state === R.State.WAITING_LEVEL && (this.state = R.State.IDLE));
                        break;
                      case I.ErrorDetails.BUFFER_FULL_ERROR:
                        if (c.parent === "main" && (this.state === R.State.PARSING || this.state === R.State.PARSED)) {
                          var s = true, p = this.getFwdBufferInfo(this.media, m2.PlaylistLevelType.MAIN);
                          p && p.len > 0.5 && (s = !this.reduceMaxBufferLength(p.len)), s && (this.warn("buffer full error also media.currentTime is not buffered, flush main"), this.immediateLevelSwitch()), this.resetLoadingState();
                        }
                        break;
                      default:
                        break;
                    }
                  }, h.checkBuffer = function() {
                    var a = this.media, c = this.gapController;
                    if (!(!a || !c || !a.readyState)) {
                      if (this.loadedmetadata || !x.BufferHelper.getBuffered(a).length) {
                        var s = this.state !== R.State.IDLE ? this.fragCurrent : null;
                        c.poll(this.lastCurrentTime, s);
                      }
                      this.lastCurrentTime = a.currentTime;
                    }
                  }, h.onFragLoadEmergencyAborted = function() {
                    this.state = R.State.IDLE, this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition), this.tickImmediate();
                  }, h.onBufferFlushed = function(a, c) {
                    var s = c.type;
                    if (s !== E.ElementaryStreamTypes.AUDIO || this.audioOnly && !this.altAudio) {
                      var p = (s === E.ElementaryStreamTypes.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                      this.afterBufferFlushed(p, s, m2.PlaylistLevelType.MAIN);
                    }
                  }, h.onLevelsUpdated = function(a, c) {
                    this.levels = c.levels;
                  }, h.swapAudioCodec = function() {
                    this.audioCodecSwap = !this.audioCodecSwap;
                  }, h.seekToStartPos = function() {
                    var a = this.media;
                    if (!!a) {
                      var c = a.currentTime, s = this.startPosition;
                      if (s >= 0 && c < s) {
                        if (a.seeking) {
                          this.log("could not seek to " + s + ", already seeking at " + c);
                          return;
                        }
                        var p = x.BufferHelper.getBuffered(a), D = p.length ? p.start(0) : 0, A = D - s;
                        A > 0 && (A < this.config.maxBufferHole || A < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + A + " to match buffer start"), s += A, this.startPosition = s), this.log("seek to target start position " + s + " from current time " + c), a.currentTime = s;
                      }
                    }
                  }, h._getAudioCodec = function(a) {
                    var c = this.config.defaultAudioCodec || a.audioCodec;
                    return this.audioCodecSwap && c && (this.log("Swapping audio codec"), c.indexOf("mp4a.40.5") !== -1 ? c = "mp4a.40.2" : c = "mp4a.40.5"), c;
                  }, h._loadBitrateTestFrag = function(a, c) {
                    var s = this;
                    a.bitrateTest = true, this._doFragLoad(a, c).then(function(p) {
                      var D = s.hls;
                      if (!(!p || D.nextLoadLevel || s.fragContextChanged(a))) {
                        s.fragLoadError = 0, s.state = R.State.IDLE, s.startFragRequested = false, s.bitrateTest = false;
                        var A = a.stats;
                        A.parsing.start = A.parsing.end = A.buffering.start = A.buffering.end = self.performance.now(), D.trigger(O.Events.FRAG_LOADED, p), a.bitrateTest = false;
                      }
                    });
                  }, h._handleTransmuxComplete = function(a) {
                    var c, s = "main", p = this.hls, D = a.remuxResult, A = a.chunkMeta, w = this.getCurrentContext(A);
                    if (!w) {
                      this.warn("The loading context changed while buffering fragment " + A.sn + " of level " + A.level + ". This chunk will not be buffered."), this.resetStartWhenNotLoaded(A.level);
                      return;
                    }
                    var B = w.frag, U = w.part, K = w.level, W = D.video, H = D.text, V = D.id3, z = D.initSegment, Q = K.details, q = this.altAudio ? void 0 : D.audio;
                    if (!this.fragContextChanged(B)) {
                      if (this.state = R.State.PARSING, z) {
                        z.tracks && (this._bufferInitSegment(K, z.tracks, B, A), p.trigger(O.Events.FRAG_PARSING_INIT_SEGMENT, { frag: B, id: s, tracks: z.tracks }));
                        var ee = z.initPTS, ae = z.timescale;
                        (0, j.isFiniteNumber)(ee) && (this.initPTS[B.cc] = ee, p.trigger(O.Events.INIT_PTS_FOUND, { frag: B, id: s, initPTS: ee, timescale: ae }));
                      }
                      if (W && D.independent !== false) {
                        if (Q) {
                          var ne = W.startPTS, ue = W.endPTS, ye = W.startDTS, be = W.endDTS;
                          if (U)
                            U.elementaryStreams[W.type] = { startPTS: ne, endPTS: ue, startDTS: ye, endDTS: be };
                          else if (W.firstKeyFrame && W.independent && A.id === 1 && (this.couldBacktrack = true), W.dropped && W.independent) {
                            var me = this.getMainFwdBufferInfo(), Se = (me ? me.end : this.getLoadPosition()) + this.config.maxBufferHole, Te = W.firstKeyFramePTS ? W.firstKeyFramePTS : ne;
                            if (Se < Te - this.config.maxBufferHole) {
                              this.backtrack(B);
                              return;
                            }
                            B.setElementaryStreamInfo(W.type, B.start, ue, B.start, be, true);
                          }
                          B.setElementaryStreamInfo(W.type, ne, ue, ye, be), this.backtrackFragment && (this.backtrackFragment = B), this.bufferFragmentData(W, B, U, A);
                        }
                      } else if (D.independent === false) {
                        this.backtrack(B);
                        return;
                      }
                      if (q) {
                        var fe = q.startPTS, ie = q.endPTS, de = q.startDTS, he = q.endDTS;
                        U && (U.elementaryStreams[E.ElementaryStreamTypes.AUDIO] = { startPTS: fe, endPTS: ie, startDTS: de, endDTS: he }), B.setElementaryStreamInfo(E.ElementaryStreamTypes.AUDIO, fe, ie, de, he), this.bufferFragmentData(q, B, U, A);
                      }
                      if (Q && V !== null && V !== void 0 && (c = V.samples) !== null && c !== void 0 && c.length) {
                        var oe = { id: s, frag: B, details: Q, samples: V.samples };
                        p.trigger(O.Events.FRAG_PARSING_METADATA, oe);
                      }
                      if (Q && H) {
                        var se = { id: s, frag: B, details: Q, samples: H.samples };
                        p.trigger(O.Events.FRAG_PARSING_USERDATA, se);
                      }
                    }
                  }, h._bufferInitSegment = function(a, c, s, p) {
                    var D = this;
                    if (this.state === R.State.PARSING) {
                      this.audioOnly = !!c.audio && !c.video, this.altAudio && !this.audioOnly && delete c.audio;
                      var A = c.audio, w = c.video, B = c.audiovideo;
                      if (A) {
                        var U = a.audioCodec, K = navigator.userAgent.toLowerCase();
                        this.audioCodecSwitch && (U && (U.indexOf("mp4a.40.5") !== -1 ? U = "mp4a.40.2" : U = "mp4a.40.5"), A.metadata.channelCount !== 1 && K.indexOf("firefox") === -1 && (U = "mp4a.40.5")), K.indexOf("android") !== -1 && A.container !== "audio/mpeg" && (U = "mp4a.40.2", this.log("Android: force audio codec to " + U)), a.audioCodec && a.audioCodec !== U && this.log('Swapping manifest audio codec "' + a.audioCodec + '" for "' + U + '"'), A.levelCodec = U, A.id = "main", this.log("Init audio buffer, container:" + A.container + ", codecs[selected/level/parsed]=[" + (U || "") + "/" + (a.audioCodec || "") + "/" + A.codec + "]");
                      }
                      w && (w.levelCodec = a.videoCodec, w.id = "main", this.log("Init video buffer, container:" + w.container + ", codecs[level/parsed]=[" + (a.videoCodec || "") + "/" + w.codec + "]")), B && this.log("Init audiovideo buffer, container:" + B.container + ", codecs[level/parsed]=[" + (a.attrs.CODECS || "") + "/" + B.codec + "]"), this.hls.trigger(O.Events.BUFFER_CODECS, c), Object.keys(c).forEach(function(W) {
                        var H = c[W], V = H.initSegment;
                        V != null && V.byteLength && D.hls.trigger(O.Events.BUFFER_APPENDING, { type: W, data: V, frag: s, part: null, chunkMeta: p, parent: s.type });
                      }), this.tick();
                    }
                  }, h.getMainFwdBufferInfo = function() {
                    return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, m2.PlaylistLevelType.MAIN);
                  }, h.backtrack = function(a) {
                    this.couldBacktrack = true, this.backtrackFragment = a, this.resetTransmuxer(), this.flushBufferGap(a), this.fragmentTracker.removeFragment(a), this.fragPrevious = null, this.nextLoadPosition = a.start, this.state = R.State.IDLE;
                  }, h.checkFragmentChanged = function() {
                    var a = this.media, c = null;
                    if (a && a.readyState > 1 && a.seeking === false) {
                      var s = a.currentTime;
                      if (x.BufferHelper.isBuffered(a, s) ? c = this.getAppendedFrag(s) : x.BufferHelper.isBuffered(a, s + 0.1) && (c = this.getAppendedFrag(s + 0.1)), c) {
                        this.backtrackFragment = null;
                        var p = this.fragPlaying, D = c.level;
                        (!p || c.sn !== p.sn || p.level !== D || c.urlId !== p.urlId) && (this.fragPlaying = c, this.hls.trigger(O.Events.FRAG_CHANGED, { frag: c }), (!p || p.level !== D) && this.hls.trigger(O.Events.LEVEL_SWITCHED, { level: D }));
                      }
                    }
                  }, d(o, [{ key: "nextLevel", get: function() {
                    var a = this.nextBufferedFrag;
                    return a ? a.level : -1;
                  } }, { key: "currentFrag", get: function() {
                    var a = this.media;
                    return a ? this.fragPlaying || this.getAppendedFrag(a.currentTime) : null;
                  } }, { key: "currentProgramDateTime", get: function() {
                    var a = this.media;
                    if (a) {
                      var c = a.currentTime, s = this.currentFrag;
                      if (s && (0, j.isFiniteNumber)(c) && (0, j.isFiniteNumber)(s.programDateTime)) {
                        var p = s.programDateTime + (c - s.start) * 1e3;
                        return new Date(p);
                      }
                    }
                    return null;
                  } }, { key: "currentLevel", get: function() {
                    var a = this.currentFrag;
                    return a ? a.level : -1;
                  } }, { key: "nextBufferedFrag", get: function() {
                    var a = this.currentFrag;
                    return a ? this.followingBufferedFrag(a) : null;
                  } }, { key: "forceStartLoad", get: function() {
                    return this._forceStartLoad;
                  } }]), o;
                }(R.default);
              }, "./src/controller/subtitle-stream-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { SubtitleStreamController: () => l });
                var j = N("./src/events.ts"), R = N("./src/utils/buffer-helper.ts"), F = N("./src/controller/fragment-finders.ts"), O = N("./src/utils/discontinuities.ts"), x = N("./src/controller/level-helper.ts"), k = N("./src/controller/fragment-tracker.ts"), m2 = N("./src/controller/base-stream-controller.ts"), E = N("./src/types/loader.ts"), L = N("./src/types/level.ts");
                function M(g, i) {
                  for (var n = 0; n < i.length; n++) {
                    var o = i[n];
                    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(g, I(o.key), o);
                  }
                }
                function y(g, i, n) {
                  return i && M(g.prototype, i), n && M(g, n), Object.defineProperty(g, "prototype", { writable: false }), g;
                }
                function I(g) {
                  var i = S(g, "string");
                  return typeof i == "symbol" ? i : String(i);
                }
                function S(g, i) {
                  if (typeof g != "object" || g === null)
                    return g;
                  var n = g[Symbol.toPrimitive];
                  if (n !== void 0) {
                    var o = n.call(g, i || "default");
                    if (typeof o != "object")
                      return o;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (i === "string" ? String : Number)(g);
                }
                function d(g, i) {
                  g.prototype = Object.create(i.prototype), g.prototype.constructor = g, v(g, i);
                }
                function v(g, i) {
                  return v = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, h) {
                    return o.__proto__ = h, o;
                  }, v(g, i);
                }
                var f = 500, l = function(g) {
                  d(i, g);
                  function i(o, h, b) {
                    var a;
                    return a = g.call(this, o, h, b, "[subtitle-stream-controller]") || this, a.levels = [], a.currentTrackId = -1, a.tracksBuffered = [], a.mainDetails = null, a._registerListeners(), a;
                  }
                  var n = i.prototype;
                  return n.onHandlerDestroying = function() {
                    this._unregisterListeners(), this.mainDetails = null;
                  }, n._registerListeners = function() {
                    var h = this.hls;
                    h.on(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), h.on(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this), h.on(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), h.on(j.Events.LEVEL_LOADED, this.onLevelLoaded, this), h.on(j.Events.ERROR, this.onError, this), h.on(j.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), h.on(j.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), h.on(j.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), h.on(j.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), h.on(j.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), h.on(j.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, n._unregisterListeners = function() {
                    var h = this.hls;
                    h.off(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), h.off(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this), h.off(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), h.off(j.Events.LEVEL_LOADED, this.onLevelLoaded, this), h.off(j.Events.ERROR, this.onError, this), h.off(j.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), h.off(j.Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), h.off(j.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), h.off(j.Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), h.off(j.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), h.off(j.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }, n.startLoad = function(h) {
                    this.stopLoad(), this.state = m2.State.IDLE, this.setInterval(f), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = h, this.tick();
                  }, n.onManifestLoading = function() {
                    this.mainDetails = null, this.fragmentTracker.removeAllFragments();
                  }, n.onLevelLoaded = function(h, b) {
                    this.mainDetails = b.details;
                  }, n.onSubtitleFragProcessed = function(h, b) {
                    var a = b.frag, c = b.success;
                    if (this.fragPrevious = a, this.state = m2.State.IDLE, !!c) {
                      var s = this.tracksBuffered[this.currentTrackId];
                      if (!!s) {
                        for (var p, D = a.start, A = 0; A < s.length; A++)
                          if (D >= s[A].start && D <= s[A].end) {
                            p = s[A];
                            break;
                          }
                        var w = a.start + a.duration;
                        p ? p.end = w : (p = { start: D, end: w }, s.push(p)), this.fragmentTracker.fragBuffered(a);
                      }
                    }
                  }, n.onBufferFlushing = function(h, b) {
                    var a = b.startOffset, c = b.endOffset;
                    if (a === 0 && c !== Number.POSITIVE_INFINITY) {
                      var s = this.currentTrackId, p = this.levels;
                      if (!p.length || !p[s] || !p[s].details)
                        return;
                      var D = p[s].details, A = D.targetduration, w = c - A;
                      if (w <= 0)
                        return;
                      b.endOffsetSubtitles = Math.max(0, w), this.tracksBuffered.forEach(function(B) {
                        for (var U = 0; U < B.length; ) {
                          if (B[U].end <= w) {
                            B.shift();
                            continue;
                          } else if (B[U].start < w)
                            B[U].start = w;
                          else
                            break;
                          U++;
                        }
                      }), this.fragmentTracker.removeFragmentsInRange(a, w, E.PlaylistLevelType.SUBTITLE);
                    }
                  }, n.onFragBuffered = function(h, b) {
                    if (!this.loadedmetadata && b.frag.type === E.PlaylistLevelType.MAIN) {
                      var a;
                      (a = this.media) !== null && a !== void 0 && a.buffered.length && (this.loadedmetadata = true);
                    }
                  }, n.onError = function(h, b) {
                    var a = b.frag;
                    !a || a.type !== E.PlaylistLevelType.SUBTITLE || (this.fragCurrent && this.fragCurrent.abortRequests(), this.state = m2.State.IDLE);
                  }, n.onSubtitleTracksUpdated = function(h, b) {
                    var a = this, c = b.subtitleTracks;
                    this.tracksBuffered = [], this.levels = c.map(function(s) {
                      return new L.Level(s);
                    }), this.fragmentTracker.removeAllFragments(), this.fragPrevious = null, this.levels.forEach(function(s) {
                      a.tracksBuffered[s.id] = [];
                    }), this.mediaBuffer = null;
                  }, n.onSubtitleTrackSwitch = function(h, b) {
                    if (this.currentTrackId = b.id, !this.levels.length || this.currentTrackId === -1) {
                      this.clearInterval();
                      return;
                    }
                    var a = this.levels[this.currentTrackId];
                    a != null && a.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, a && this.setInterval(f);
                  }, n.onSubtitleTrackLoaded = function(h, b) {
                    var a, c = b.details, s = b.id, p = this.currentTrackId, D = this.levels;
                    if (!!D.length) {
                      var A = D[p];
                      if (!(s >= D.length || s !== p || !A)) {
                        this.mediaBuffer = this.mediaBufferTimeRanges;
                        var w = 0;
                        if (c.live || (a = A.details) !== null && a !== void 0 && a.live) {
                          var B = this.mainDetails;
                          if (c.deltaUpdateFailed || !B)
                            return;
                          var U = B.fragments[0];
                          A.details ? (w = this.alignPlaylists(c, A.details), w === 0 && U && (w = U.start, (0, x.addSliding)(c, w))) : c.hasProgramDateTime && B.hasProgramDateTime ? ((0, O.alignMediaPlaylistByPDT)(c, B), w = c.fragments[0].start) : U && (w = U.start, (0, x.addSliding)(c, w));
                        }
                        if (A.details = c, this.levelLastLoaded = s, !this.startFragRequested && (this.mainDetails || !c.live) && this.setStartPosition(A.details, w), this.tick(), c.live && !this.fragCurrent && this.media && this.state === m2.State.IDLE) {
                          var K = (0, F.findFragmentByPTS)(null, c.fragments, this.media.currentTime, 0);
                          K || (this.warn("Subtitle playlist not aligned with playback"), A.details = void 0);
                        }
                      }
                    }
                  }, n._handleFragmentLoadComplete = function(h) {
                    var b = this, a = h.frag, c = h.payload, s = a.decryptdata, p = this.hls;
                    if (!this.fragContextChanged(a) && c && c.byteLength > 0 && s && s.key && s.iv && s.method === "AES-128") {
                      var D = performance.now();
                      this.decrypter.decrypt(new Uint8Array(c), s.key.buffer, s.iv.buffer).then(function(A) {
                        var w = performance.now();
                        p.trigger(j.Events.FRAG_DECRYPTED, { frag: a, payload: A, stats: { tstart: D, tdecrypt: w } });
                      }).catch(function(A) {
                        b.warn(A.name + ": " + A.message), b.state = m2.State.IDLE;
                      });
                    }
                  }, n.doTick = function() {
                    if (!this.media) {
                      this.state = m2.State.IDLE;
                      return;
                    }
                    if (this.state === m2.State.IDLE) {
                      var h = this.currentTrackId, b = this.levels;
                      if (!b.length || !b[h] || !b[h].details)
                        return;
                      var a = b[h].details, c = a.targetduration, s = this.config, p = this.getLoadPosition(), D = R.BufferHelper.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], p - c, s.maxBufferHole), A = D.end, w = D.len, B = this.getFwdBufferInfo(this.media, E.PlaylistLevelType.MAIN), U = this.getMaxBufferLength(B == null ? void 0 : B.len) + c;
                      if (w > U)
                        return;
                      console.assert(a, "Subtitle track details are defined on idle subtitle stream controller tick");
                      var K = a.fragments, W = K.length, H = a.edge, V = null, z = this.fragPrevious;
                      if (A < H) {
                        var Q = s.maxFragLookUpTolerance;
                        V = (0, F.findFragmentByPTS)(z, K, Math.max(K[0].start, A), Q), !V && z && z.start < K[0].start && (V = K[0]);
                      } else
                        V = K[W - 1];
                      if (!V)
                        return;
                      V = this.mapToInitFragWhenRequired(V), this.fragmentTracker.getState(V) === k.FragmentState.NOT_LOADED && this.loadFragment(V, a, A);
                    }
                  }, n.getMaxBufferLength = function(h) {
                    var b = g.prototype.getMaxBufferLength.call(this);
                    return h ? Math.max(b, h) : b;
                  }, n.loadFragment = function(h, b, a) {
                    this.fragCurrent = h, h.sn === "initSegment" ? this._loadInitSegment(h, b) : (this.startFragRequested = true, g.prototype.loadFragment.call(this, h, b, a));
                  }, y(i, [{ key: "mediaBufferTimeRanges", get: function() {
                    return new _(this.tracksBuffered[this.currentTrackId] || []);
                  } }]), i;
                }(m2.default), _ = function(i) {
                  this.buffered = void 0;
                  var n = function(h, b, a) {
                    if (b = b >>> 0, b > a - 1)
                      throw new DOMException("Failed to execute '" + h + "' on 'TimeRanges': The index provided (" + b + ") is greater than the maximum bound (" + a + ")");
                    return i[b][h];
                  };
                  this.buffered = { get length() {
                    return i.length;
                  }, end: function(h) {
                    return n("end", h, i.length);
                  }, start: function(h) {
                    return n("start", h, i.length);
                  } };
                };
              }, "./src/controller/subtitle-track-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => S });
                var j = N("./src/events.ts"), R = N("./src/utils/texttrack-utils.ts"), F = N("./src/controller/base-playlist-controller.ts"), O = N("./src/types/loader.ts");
                function x(d, v) {
                  for (var f = 0; f < v.length; f++) {
                    var l = v[f];
                    l.enumerable = l.enumerable || false, l.configurable = true, "value" in l && (l.writable = true), Object.defineProperty(d, m2(l.key), l);
                  }
                }
                function k(d, v, f) {
                  return v && x(d.prototype, v), f && x(d, f), Object.defineProperty(d, "prototype", { writable: false }), d;
                }
                function m2(d) {
                  var v = E(d, "string");
                  return typeof v == "symbol" ? v : String(v);
                }
                function E(d, v) {
                  if (typeof d != "object" || d === null)
                    return d;
                  var f = d[Symbol.toPrimitive];
                  if (f !== void 0) {
                    var l = f.call(d, v || "default");
                    if (typeof l != "object")
                      return l;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (v === "string" ? String : Number)(d);
                }
                function L(d, v) {
                  d.prototype = Object.create(v.prototype), d.prototype.constructor = d, M(d, v);
                }
                function M(d, v) {
                  return M = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(l, _) {
                    return l.__proto__ = _, l;
                  }, M(d, v);
                }
                var y = function(d) {
                  L(v, d);
                  function v(l) {
                    var _;
                    return _ = d.call(this, l, "[subtitle-track-controller]") || this, _.media = null, _.tracks = [], _.groupId = null, _.tracksInGroup = [], _.trackId = -1, _.selectDefaultTrack = true, _.queuedDefaultTrack = -1, _.trackChangeListener = function() {
                      return _.onTextTracksChanged();
                    }, _.asyncPollTrackChange = function() {
                      return _.pollTrackChange(0);
                    }, _.useTextTrackPolling = false, _.subtitlePollingInterval = -1, _._subtitleDisplay = true, _.registerListeners(), _;
                  }
                  var f = v.prototype;
                  return f.destroy = function() {
                    this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.trackChangeListener = this.asyncPollTrackChange = null, d.prototype.destroy.call(this);
                  }, f.registerListeners = function() {
                    var _ = this.hls;
                    _.on(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), _.on(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this), _.on(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), _.on(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), _.on(j.Events.LEVEL_LOADING, this.onLevelLoading, this), _.on(j.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), _.on(j.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), _.on(j.Events.ERROR, this.onError, this);
                  }, f.unregisterListeners = function() {
                    var _ = this.hls;
                    _.off(j.Events.MEDIA_ATTACHED, this.onMediaAttached, this), _.off(j.Events.MEDIA_DETACHING, this.onMediaDetaching, this), _.off(j.Events.MANIFEST_LOADING, this.onManifestLoading, this), _.off(j.Events.MANIFEST_PARSED, this.onManifestParsed, this), _.off(j.Events.LEVEL_LOADING, this.onLevelLoading, this), _.off(j.Events.LEVEL_SWITCHING, this.onLevelSwitching, this), _.off(j.Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), _.off(j.Events.ERROR, this.onError, this);
                  }, f.onMediaAttached = function(_, g) {
                    this.media = g.media, !!this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange));
                  }, f.pollTrackChange = function(_) {
                    self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, _);
                  }, f.onMediaDetaching = function() {
                    if (!!this.media) {
                      self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId);
                      var _ = I(this.media.textTracks);
                      _.forEach(function(g) {
                        (0, R.clearCurrentCues)(g);
                      }), this.subtitleTrack = -1, this.media = null;
                    }
                  }, f.onManifestLoading = function() {
                    this.tracks = [], this.groupId = null, this.tracksInGroup = [], this.trackId = -1, this.selectDefaultTrack = true;
                  }, f.onManifestParsed = function(_, g) {
                    this.tracks = g.subtitleTracks;
                  }, f.onSubtitleTrackLoaded = function(_, g) {
                    var i = g.id, n = g.details, o = this.trackId, h = this.tracksInGroup[o];
                    if (!h) {
                      this.warn("Invalid subtitle track id " + i);
                      return;
                    }
                    var b = h.details;
                    h.details = g.details, this.log("subtitle track " + i + " loaded [" + n.startSN + "-" + n.endSN + "]"), i === this.trackId && (this.retryCount = 0, this.playlistLoaded(i, g, b));
                  }, f.onLevelLoading = function(_, g) {
                    this.switchLevel(g.level);
                  }, f.onLevelSwitching = function(_, g) {
                    this.switchLevel(g.level);
                  }, f.switchLevel = function(_) {
                    var g = this.hls.levels[_];
                    if (!!(g != null && g.textGroupIds)) {
                      var i = g.textGroupIds[g.urlId];
                      if (this.groupId !== i) {
                        var n = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0, o = this.tracks.filter(function(a) {
                          return !i || a.groupId === i;
                        });
                        this.tracksInGroup = o;
                        var h = this.findTrackId(n == null ? void 0 : n.name) || this.findTrackId();
                        this.groupId = i;
                        var b = { subtitleTracks: o };
                        this.log("Updating subtitle tracks, " + o.length + ' track(s) found in "' + i + '" group-id'), this.hls.trigger(j.Events.SUBTITLE_TRACKS_UPDATED, b), h !== -1 && this.setSubtitleTrack(h, n);
                      }
                    }
                  }, f.findTrackId = function(_) {
                    for (var g = this.tracksInGroup, i = 0; i < g.length; i++) {
                      var n = g[i];
                      if ((!this.selectDefaultTrack || n.default) && (!_ || _ === n.name))
                        return n.id;
                    }
                    return -1;
                  }, f.onError = function(_, g) {
                    d.prototype.onError.call(this, _, g), !(g.fatal || !g.context) && g.context.type === O.PlaylistContextType.SUBTITLE_TRACK && g.context.id === this.trackId && g.context.groupId === this.groupId && this.retryLoadingOrFail(g);
                  }, f.loadPlaylist = function(_) {
                    d.prototype.loadPlaylist.call(this);
                    var g = this.tracksInGroup[this.trackId];
                    if (this.shouldLoadTrack(g)) {
                      var i = g.id, n = g.groupId, o = g.url;
                      if (_)
                        try {
                          o = _.addDirectives(o);
                        } catch (h) {
                          this.warn("Could not construct new URL with HLS Delivery Directives: " + h);
                        }
                      this.log("Loading subtitle playlist for id " + i), this.hls.trigger(j.Events.SUBTITLE_TRACK_LOADING, { url: o, id: i, groupId: n, deliveryDirectives: _ || null });
                    }
                  }, f.toggleTrackModes = function(_) {
                    var g = this, i = this.media, n = this.trackId;
                    if (!!i) {
                      var o = I(i.textTracks), h = o.filter(function(c) {
                        return c.groupId === g.groupId;
                      });
                      if (_ === -1)
                        [].slice.call(o).forEach(function(c) {
                          c.mode = "disabled";
                        });
                      else {
                        var b = h[n];
                        b && (b.mode = "disabled");
                      }
                      var a = h[_];
                      a && (a.mode = this.subtitleDisplay ? "showing" : "hidden");
                    }
                  }, f.setSubtitleTrack = function(_, g) {
                    var i, n = this.tracksInGroup;
                    if (!this.media) {
                      this.queuedDefaultTrack = _;
                      return;
                    }
                    if (this.trackId !== _ && this.toggleTrackModes(_), !(this.trackId === _ && (_ === -1 || (i = n[_]) !== null && i !== void 0 && i.details) || _ < -1 || _ >= n.length)) {
                      this.clearTimer();
                      var o = n[_];
                      if (this.log("Switching to subtitle track " + _), this.trackId = _, o) {
                        var h = o.id, b = o.groupId, a = b === void 0 ? "" : b, c = o.name, s = o.type, p = o.url;
                        this.hls.trigger(j.Events.SUBTITLE_TRACK_SWITCH, { id: h, groupId: a, name: c, type: s, url: p });
                        var D = this.switchParams(o.url, g == null ? void 0 : g.details);
                        this.loadPlaylist(D);
                      } else
                        this.hls.trigger(j.Events.SUBTITLE_TRACK_SWITCH, { id: _ });
                    }
                  }, f.onTextTracksChanged = function() {
                    if (this.useTextTrackPolling || self.clearInterval(this.subtitlePollingInterval), !(!this.media || !this.hls.config.renderTextTracksNatively)) {
                      for (var _ = -1, g = I(this.media.textTracks), i = 0; i < g.length; i++)
                        if (g[i].mode === "hidden")
                          _ = i;
                        else if (g[i].mode === "showing") {
                          _ = i;
                          break;
                        }
                      this.subtitleTrack !== _ && (this.subtitleTrack = _);
                    }
                  }, k(v, [{ key: "subtitleDisplay", get: function() {
                    return this._subtitleDisplay;
                  }, set: function(_) {
                    this._subtitleDisplay = _, this.trackId > -1 && this.toggleTrackModes(this.trackId);
                  } }, { key: "subtitleTracks", get: function() {
                    return this.tracksInGroup;
                  } }, { key: "subtitleTrack", get: function() {
                    return this.trackId;
                  }, set: function(_) {
                    this.selectDefaultTrack = false;
                    var g = this.tracksInGroup ? this.tracksInGroup[this.trackId] : void 0;
                    this.setSubtitleTrack(_, g);
                  } }]), v;
                }(F.default);
                function I(d) {
                  for (var v = [], f = 0; f < d.length; f++) {
                    var l = d[f];
                    l.kind === "subtitles" && l.label && v.push(d[f]);
                  }
                  return v;
                }
                const S = y;
              }, "./src/controller/timeline-controller.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { TimelineController: () => y });
                var j = N("./src/polyfills/number.ts"), R = N("./src/events.ts"), F = N("./src/utils/cea-608-parser.ts"), O = N("./src/utils/output-filter.ts"), x = N("./src/utils/webvtt-parser.ts"), k = N("./src/utils/texttrack-utils.ts"), m2 = N("./src/utils/imsc1-ttml-parser.ts"), E = N("./src/utils/mp4-tools.ts"), L = N("./src/types/loader.ts"), M = N("./src/utils/logger.ts"), y = function() {
                  function v(l) {
                    if (this.hls = void 0, this.media = null, this.config = void 0, this.enabled = true, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.timescale = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = d(), this.captionsProperties = void 0, this.hls = l, this.config = l.config, this.Cues = l.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, this.config.enableCEA708Captions) {
                      var _ = new O.default(this, "textTrack1"), g = new O.default(this, "textTrack2"), i = new O.default(this, "textTrack3"), n = new O.default(this, "textTrack4");
                      this.cea608Parser1 = new F.default(1, _, g), this.cea608Parser2 = new F.default(3, i, n);
                    }
                    l.on(R.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), l.on(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), l.on(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), l.on(R.Events.MANIFEST_LOADED, this.onManifestLoaded, this), l.on(R.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), l.on(R.Events.FRAG_LOADING, this.onFragLoading, this), l.on(R.Events.FRAG_LOADED, this.onFragLoaded, this), l.on(R.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), l.on(R.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), l.on(R.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), l.on(R.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), l.on(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
                  }
                  var f = v.prototype;
                  return f.destroy = function() {
                    var _ = this.hls;
                    _.off(R.Events.MEDIA_ATTACHING, this.onMediaAttaching, this), _.off(R.Events.MEDIA_DETACHING, this.onMediaDetaching, this), _.off(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), _.off(R.Events.MANIFEST_LOADED, this.onManifestLoaded, this), _.off(R.Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), _.off(R.Events.FRAG_LOADING, this.onFragLoading, this), _.off(R.Events.FRAG_LOADED, this.onFragLoaded, this), _.off(R.Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), _.off(R.Events.FRAG_DECRYPTED, this.onFragDecrypted, this), _.off(R.Events.INIT_PTS_FOUND, this.onInitPtsFound, this), _.off(R.Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), _.off(R.Events.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;
                  }, f.addCues = function(_, g, i, n, o) {
                    for (var h = false, b = o.length; b--; ) {
                      var a = o[b], c = S(a[0], a[1], g, i);
                      if (c >= 0 && (a[0] = Math.min(a[0], g), a[1] = Math.max(a[1], i), h = true, c / (i - g) > 0.5))
                        return;
                    }
                    if (h || o.push([g, i]), this.config.renderTextTracksNatively) {
                      var s = this.captionsTracks[_];
                      this.Cues.newCue(s, g, i, n);
                    } else {
                      var p = this.Cues.newCue(null, g, i, n);
                      this.hls.trigger(R.Events.CUES_PARSED, { type: "captions", cues: p, track: _ });
                    }
                  }, f.onInitPtsFound = function(_, g) {
                    var i = this, n = g.frag, o = g.id, h = g.initPTS, b = g.timescale, a = this.unparsedVttFrags;
                    o === "main" && (this.initPTS[n.cc] = h, this.timescale[n.cc] = b), a.length && (this.unparsedVttFrags = [], a.forEach(function(c) {
                      i.onFragLoaded(R.Events.FRAG_LOADED, c);
                    }));
                  }, f.getExistingTrack = function(_) {
                    var g = this.media;
                    if (g)
                      for (var i = 0; i < g.textTracks.length; i++) {
                        var n = g.textTracks[i];
                        if (n[_])
                          return n;
                      }
                    return null;
                  }, f.createCaptionsTrack = function(_) {
                    this.config.renderTextTracksNatively ? this.createNativeTrack(_) : this.createNonNativeTrack(_);
                  }, f.createNativeTrack = function(_) {
                    if (!this.captionsTracks[_]) {
                      var g = this.captionsProperties, i = this.captionsTracks, n = this.media, o = g[_], h = o.label, b = o.languageCode, a = this.getExistingTrack(_);
                      if (a)
                        i[_] = a, (0, k.clearCurrentCues)(i[_]), (0, k.sendAddTrackEvent)(i[_], n);
                      else {
                        var c = this.createTextTrack("captions", h, b);
                        c && (c[_] = true, i[_] = c);
                      }
                    }
                  }, f.createNonNativeTrack = function(_) {
                    if (!this.nonNativeCaptionsTracks[_]) {
                      var g = this.captionsProperties[_];
                      if (!!g) {
                        var i = g.label, n = { _id: _, label: i, kind: "captions", default: g.media ? !!g.media.default : false, closedCaptions: g.media };
                        this.nonNativeCaptionsTracks[_] = n, this.hls.trigger(R.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [n] });
                      }
                    }
                  }, f.createTextTrack = function(_, g, i) {
                    var n = this.media;
                    if (!!n)
                      return n.addTextTrack(_, g, i);
                  }, f.onMediaAttaching = function(_, g) {
                    this.media = g.media, this._cleanTracks();
                  }, f.onMediaDetaching = function() {
                    var _ = this.captionsTracks;
                    Object.keys(_).forEach(function(g) {
                      (0, k.clearCurrentCues)(_[g]), delete _[g];
                    }), this.nonNativeCaptionsTracks = {};
                  }, f.onManifestLoading = function() {
                    this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = d(), this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = this.unparsedVttFrags || [], this.initPTS = [], this.timescale = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset());
                  }, f._cleanTracks = function() {
                    var _ = this.media;
                    if (!!_) {
                      var g = _.textTracks;
                      if (g)
                        for (var i = 0; i < g.length; i++)
                          (0, k.clearCurrentCues)(g[i]);
                    }
                  }, f.onSubtitleTracksUpdated = function(_, g) {
                    var i = this;
                    this.textTracks = [];
                    var n = g.subtitleTracks || [], o = n.some(function(c) {
                      return c.textCodec === m2.IMSC1_CODEC;
                    });
                    if (this.config.enableWebVTT || o && this.config.enableIMSC1) {
                      var h = this.tracks && n && this.tracks.length === n.length;
                      if (this.tracks = n || [], this.config.renderTextTracksNatively) {
                        var b = this.media ? this.media.textTracks : [];
                        this.tracks.forEach(function(c, s) {
                          var p;
                          if (s < b.length) {
                            for (var D = null, A = 0; A < b.length; A++)
                              if (I(b[A], c)) {
                                D = b[A];
                                break;
                              }
                            D && (p = D);
                          }
                          if (p)
                            (0, k.clearCurrentCues)(p);
                          else {
                            var w = i._captionsOrSubtitlesFromCharacteristics(c);
                            p = i.createTextTrack(w, c.name, c.lang), p && (p.mode = "disabled");
                          }
                          p && (p.groupId = c.groupId, i.textTracks.push(p));
                        });
                      } else if (!h && this.tracks && this.tracks.length) {
                        var a = this.tracks.map(function(c) {
                          return { label: c.name, kind: c.type.toLowerCase(), default: c.default, subtitleTrack: c };
                        });
                        this.hls.trigger(R.Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: a });
                      }
                    }
                  }, f._captionsOrSubtitlesFromCharacteristics = function(_) {
                    var g;
                    if ((g = _.attrs) !== null && g !== void 0 && g.CHARACTERISTICS) {
                      var i = /transcribes-spoken-dialog/gi.test(_.attrs.CHARACTERISTICS), n = /describes-music-and-sound/gi.test(_.attrs.CHARACTERISTICS);
                      if (i && n)
                        return "captions";
                    }
                    return "subtitles";
                  }, f.onManifestLoaded = function(_, g) {
                    var i = this;
                    this.config.enableCEA708Captions && g.captions && g.captions.forEach(function(n) {
                      var o = /(?:CC|SERVICE)([1-4])/.exec(n.instreamId);
                      if (!!o) {
                        var h = "textTrack" + o[1], b = i.captionsProperties[h];
                        !b || (b.label = n.name, n.lang && (b.languageCode = n.lang), b.media = n);
                      }
                    });
                  }, f.closedCaptionsForLevel = function(_) {
                    var g = this.hls.levels[_.level];
                    return g == null ? void 0 : g.attrs["CLOSED-CAPTIONS"];
                  }, f.onFragLoading = function(_, g) {
                    var i = this.cea608Parser1, n = this.cea608Parser2, o = this.lastSn, h = this.lastPartIndex;
                    if (!(!this.enabled || !(i && n)) && g.frag.type === L.PlaylistLevelType.MAIN) {
                      var b, a, c = g.frag.sn, s = (b = g == null || (a = g.part) === null || a === void 0 ? void 0 : a.index) != null ? b : -1;
                      c === o + 1 || c === o && s === h + 1 || (i.reset(), n.reset()), this.lastSn = c, this.lastPartIndex = s;
                    }
                  }, f.onFragLoaded = function(_, g) {
                    var i = g.frag, n = g.payload, o = this.initPTS, h = this.unparsedVttFrags;
                    if (i.type === L.PlaylistLevelType.SUBTITLE)
                      if (n.byteLength) {
                        if (!(0, j.isFiniteNumber)(o[i.cc])) {
                          h.push(g), o.length && this.hls.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: i, error: new Error("Missing initial subtitle PTS") });
                          return;
                        }
                        var b = i.decryptdata, a = "stats" in g;
                        if (b == null || !b.encrypted || a) {
                          var c = this.tracks[i.level], s = this.vttCCs;
                          s[i.cc] || (s[i.cc] = { start: i.start, prevCC: this.prevCC, new: true }, this.prevCC = i.cc), c && c.textCodec === m2.IMSC1_CODEC ? this._parseIMSC1(i, n) : this._parseVTTs(i, n, s);
                        }
                      } else
                        this.hls.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: i, error: new Error("Empty subtitle payload") });
                  }, f._parseIMSC1 = function(_, g) {
                    var i = this, n = this.hls;
                    (0, m2.parseIMSC1)(g, this.initPTS[_.cc], this.timescale[_.cc], function(o) {
                      i._appendCues(o, _.level), n.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: _ });
                    }, function(o) {
                      M.logger.log("Failed to parse IMSC1: " + o), n.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: _, error: o });
                    });
                  }, f._parseVTTs = function(_, g, i) {
                    var n, o = this, h = this.hls, b = (n = _.initSegment) !== null && n !== void 0 && n.data ? (0, E.appendUint8Array)(_.initSegment.data, new Uint8Array(g)) : g;
                    (0, x.parseWebVTT)(b, this.initPTS[_.cc], this.timescale[_.cc], i, _.cc, _.start, function(a) {
                      o._appendCues(a, _.level), h.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: true, frag: _ });
                    }, function(a) {
                      o._fallbackToIMSC1(_, g), M.logger.log("Failed to parse VTT cue: " + a), h.trigger(R.Events.SUBTITLE_FRAG_PROCESSED, { success: false, frag: _, error: a });
                    });
                  }, f._fallbackToIMSC1 = function(_, g) {
                    var i = this, n = this.tracks[_.level];
                    n.textCodec || (0, m2.parseIMSC1)(g, this.initPTS[_.cc], this.timescale[_.cc], function() {
                      n.textCodec = m2.IMSC1_CODEC, i._parseIMSC1(_, g);
                    }, function() {
                      n.textCodec = "wvtt";
                    });
                  }, f._appendCues = function(_, g) {
                    var i = this.hls;
                    if (this.config.renderTextTracksNatively) {
                      var n = this.textTracks[g];
                      if (!n || n.mode === "disabled")
                        return;
                      _.forEach(function(b) {
                        return (0, k.addCueToTrack)(n, b);
                      });
                    } else {
                      var o = this.tracks[g];
                      if (!o)
                        return;
                      var h = o.default ? "default" : "subtitles" + g;
                      i.trigger(R.Events.CUES_PARSED, { type: "subtitles", cues: _, track: h });
                    }
                  }, f.onFragDecrypted = function(_, g) {
                    var i = g.frag;
                    if (i.type === L.PlaylistLevelType.SUBTITLE) {
                      if (!(0, j.isFiniteNumber)(this.initPTS[i.cc])) {
                        this.unparsedVttFrags.push(g);
                        return;
                      }
                      this.onFragLoaded(R.Events.FRAG_LOADED, g);
                    }
                  }, f.onSubtitleTracksCleared = function() {
                    this.tracks = [], this.captionsTracks = {};
                  }, f.onFragParsingUserdata = function(_, g) {
                    var i = this.cea608Parser1, n = this.cea608Parser2;
                    if (!(!this.enabled || !(i && n))) {
                      var o = g.frag, h = g.samples;
                      if (!(o.type === L.PlaylistLevelType.MAIN && this.closedCaptionsForLevel(o) === "NONE"))
                        for (var b = 0; b < h.length; b++) {
                          var a = h[b].bytes;
                          if (a) {
                            var c = this.extractCea608Data(a);
                            i.addData(h[b].pts, c[0]), n.addData(h[b].pts, c[1]);
                          }
                        }
                    }
                  }, f.onBufferFlushing = function(_, g) {
                    var i = g.startOffset, n = g.endOffset, o = g.endOffsetSubtitles, h = g.type, b = this.media;
                    if (!(!b || b.currentTime < n)) {
                      if (!h || h === "video") {
                        var a = this.captionsTracks;
                        Object.keys(a).forEach(function(s) {
                          return (0, k.removeCuesInRange)(a[s], i, n);
                        });
                      }
                      if (this.config.renderTextTracksNatively && i === 0 && o !== void 0) {
                        var c = this.textTracks;
                        Object.keys(c).forEach(function(s) {
                          return (0, k.removeCuesInRange)(c[s], i, o);
                        });
                      }
                    }
                  }, f.extractCea608Data = function(_) {
                    for (var g = [[], []], i = _[0] & 31, n = 2, o = 0; o < i; o++) {
                      var h = _[n++], b = 127 & _[n++], a = 127 & _[n++];
                      if (!(b === 0 && a === 0)) {
                        var c = (4 & h) != 0;
                        if (c) {
                          var s = 3 & h;
                          (s === 0 || s === 1) && (g[s].push(b), g[s].push(a));
                        }
                      }
                    }
                    return g;
                  }, v;
                }();
                function I(v, f) {
                  return v && v.label === f.name && !(v.textTrack1 || v.textTrack2);
                }
                function S(v, f, l, _) {
                  return Math.min(f, _) - Math.max(v, l);
                }
                function d() {
                  return { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } };
                }
              }, "./src/crypt/aes-crypto.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                var j = function() {
                  function R(O, x) {
                    this.subtle = void 0, this.aesIV = void 0, this.subtle = O, this.aesIV = x;
                  }
                  var F = R.prototype;
                  return F.decrypt = function(x, k) {
                    return this.subtle.decrypt({ name: "AES-CBC", iv: this.aesIV }, k, x);
                  }, R;
                }();
              }, "./src/crypt/aes-decryptor.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => F, removePadding: () => R });
                var j = N("./src/utils/typed-array.ts");
                function R(O) {
                  var x = O.byteLength, k = x && new DataView(O.buffer).getUint8(x - 1);
                  return k ? (0, j.sliceUint8)(O, 0, x - k) : O;
                }
                var F = function() {
                  function O() {
                    this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable();
                  }
                  var x = O.prototype;
                  return x.uint8ArrayToUint32Array_ = function(m2) {
                    for (var E = new DataView(m2), L = new Uint32Array(4), M = 0; M < 4; M++)
                      L[M] = E.getUint32(M * 4);
                    return L;
                  }, x.initTable = function() {
                    var m2 = this.sBox, E = this.invSBox, L = this.subMix, M = L[0], y = L[1], I = L[2], S = L[3], d = this.invSubMix, v = d[0], f = d[1], l = d[2], _ = d[3], g = new Uint32Array(256), i = 0, n = 0, o = 0;
                    for (o = 0; o < 256; o++)
                      o < 128 ? g[o] = o << 1 : g[o] = o << 1 ^ 283;
                    for (o = 0; o < 256; o++) {
                      var h = n ^ n << 1 ^ n << 2 ^ n << 3 ^ n << 4;
                      h = h >>> 8 ^ h & 255 ^ 99, m2[i] = h, E[h] = i;
                      var b = g[i], a = g[b], c = g[a], s = g[h] * 257 ^ h * 16843008;
                      M[i] = s << 24 | s >>> 8, y[i] = s << 16 | s >>> 16, I[i] = s << 8 | s >>> 24, S[i] = s, s = c * 16843009 ^ a * 65537 ^ b * 257 ^ i * 16843008, v[h] = s << 24 | s >>> 8, f[h] = s << 16 | s >>> 16, l[h] = s << 8 | s >>> 24, _[h] = s, i ? (i = b ^ g[g[g[c ^ b]]], n ^= g[g[n]]) : i = n = 1;
                    }
                  }, x.expandKey = function(m2) {
                    for (var E = this.uint8ArrayToUint32Array_(m2), L = true, M = 0; M < E.length && L; )
                      L = E[M] === this.key[M], M++;
                    if (!L) {
                      this.key = E;
                      var y = this.keySize = E.length;
                      if (y !== 4 && y !== 6 && y !== 8)
                        throw new Error("Invalid aes key size=" + y);
                      var I = this.ksRows = (y + 6 + 1) * 4, S, d, v = this.keySchedule = new Uint32Array(I), f = this.invKeySchedule = new Uint32Array(I), l = this.sBox, _ = this.rcon, g = this.invSubMix, i = g[0], n = g[1], o = g[2], h = g[3], b, a;
                      for (S = 0; S < I; S++) {
                        if (S < y) {
                          b = v[S] = E[S];
                          continue;
                        }
                        a = b, S % y == 0 ? (a = a << 8 | a >>> 24, a = l[a >>> 24] << 24 | l[a >>> 16 & 255] << 16 | l[a >>> 8 & 255] << 8 | l[a & 255], a ^= _[S / y | 0] << 24) : y > 6 && S % y == 4 && (a = l[a >>> 24] << 24 | l[a >>> 16 & 255] << 16 | l[a >>> 8 & 255] << 8 | l[a & 255]), v[S] = b = (v[S - y] ^ a) >>> 0;
                      }
                      for (d = 0; d < I; d++)
                        S = I - d, d & 3 ? a = v[S] : a = v[S - 4], d < 4 || S <= 4 ? f[d] = a : f[d] = i[l[a >>> 24]] ^ n[l[a >>> 16 & 255]] ^ o[l[a >>> 8 & 255]] ^ h[l[a & 255]], f[d] = f[d] >>> 0;
                    }
                  }, x.networkToHostOrderSwap = function(m2) {
                    return m2 << 24 | (m2 & 65280) << 8 | (m2 & 16711680) >> 8 | m2 >>> 24;
                  }, x.decrypt = function(m2, E, L) {
                    for (var M = this.keySize + 6, y = this.invKeySchedule, I = this.invSBox, S = this.invSubMix, d = S[0], v = S[1], f = S[2], l = S[3], _ = this.uint8ArrayToUint32Array_(L), g = _[0], i = _[1], n = _[2], o = _[3], h = new Int32Array(m2), b = new Int32Array(h.length), a, c, s, p, D, A, w, B, U, K, W, H, V, z, Q = this.networkToHostOrderSwap; E < h.length; ) {
                      for (U = Q(h[E]), K = Q(h[E + 1]), W = Q(h[E + 2]), H = Q(h[E + 3]), D = U ^ y[0], A = H ^ y[1], w = W ^ y[2], B = K ^ y[3], V = 4, z = 1; z < M; z++)
                        a = d[D >>> 24] ^ v[A >> 16 & 255] ^ f[w >> 8 & 255] ^ l[B & 255] ^ y[V], c = d[A >>> 24] ^ v[w >> 16 & 255] ^ f[B >> 8 & 255] ^ l[D & 255] ^ y[V + 1], s = d[w >>> 24] ^ v[B >> 16 & 255] ^ f[D >> 8 & 255] ^ l[A & 255] ^ y[V + 2], p = d[B >>> 24] ^ v[D >> 16 & 255] ^ f[A >> 8 & 255] ^ l[w & 255] ^ y[V + 3], D = a, A = c, w = s, B = p, V = V + 4;
                      a = I[D >>> 24] << 24 ^ I[A >> 16 & 255] << 16 ^ I[w >> 8 & 255] << 8 ^ I[B & 255] ^ y[V], c = I[A >>> 24] << 24 ^ I[w >> 16 & 255] << 16 ^ I[B >> 8 & 255] << 8 ^ I[D & 255] ^ y[V + 1], s = I[w >>> 24] << 24 ^ I[B >> 16 & 255] << 16 ^ I[D >> 8 & 255] << 8 ^ I[A & 255] ^ y[V + 2], p = I[B >>> 24] << 24 ^ I[D >> 16 & 255] << 16 ^ I[A >> 8 & 255] << 8 ^ I[w & 255] ^ y[V + 3], b[E] = Q(a ^ g), b[E + 1] = Q(p ^ i), b[E + 2] = Q(s ^ n), b[E + 3] = Q(c ^ o), g = U, i = K, n = W, o = H, E = E + 4;
                    }
                    return b.buffer;
                  }, O;
                }();
              }, "./src/crypt/decrypter.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => E });
                var j = N("./src/crypt/aes-crypto.ts"), R = N("./src/crypt/fast-aes-key.ts"), F = N("./src/crypt/aes-decryptor.ts"), O = N("./src/utils/logger.ts"), x = N("./src/utils/mp4-tools.ts"), k = N("./src/utils/typed-array.ts"), m2 = 16, E = function() {
                  function L(y, I) {
                    var S = I === void 0 ? {} : I, d = S.removePKCS7Padding, v = d === void 0 ? true : d;
                    if (this.logEnabled = true, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = y.enableSoftwareAES, this.removePKCS7Padding = v, v)
                      try {
                        var f = self.crypto;
                        f && (this.subtle = f.subtle || f.webkitSubtle);
                      } catch (l) {
                      }
                    this.subtle === null && (this.useSoftware = true);
                  }
                  var M = L.prototype;
                  return M.destroy = function() {
                    this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null;
                  }, M.isSync = function() {
                    return this.useSoftware;
                  }, M.flush = function() {
                    var I = this.currentResult, S = this.remainderData;
                    if (!I || S)
                      return O.logger.error("[softwareDecrypt] " + (S ? "overflow bytes: " + S.byteLength : "no result")), this.reset(), null;
                    var d = new Uint8Array(I);
                    return this.reset(), this.removePKCS7Padding ? (0, F.removePadding)(d) : d;
                  }, M.reset = function() {
                    this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null);
                  }, M.decrypt = function(I, S, d) {
                    var v = this;
                    return this.useSoftware ? new Promise(function(f, l) {
                      v.softwareDecrypt(new Uint8Array(I), S, d);
                      var _ = v.flush();
                      _ ? f(_.buffer) : l(new Error("[softwareDecrypt] Failed to decrypt data"));
                    }) : this.webCryptoDecrypt(new Uint8Array(I), S, d);
                  }, M.softwareDecrypt = function(I, S, d) {
                    var v = this.currentIV, f = this.currentResult, l = this.remainderData;
                    this.logOnce("JS AES decrypt"), l && (I = (0, x.appendUint8Array)(l, I), this.remainderData = null);
                    var _ = this.getValidChunk(I);
                    if (!_.length)
                      return null;
                    v && (d = v);
                    var g = this.softwareDecrypter;
                    g || (g = this.softwareDecrypter = new F.default()), g.expandKey(S);
                    var i = f;
                    return this.currentResult = g.decrypt(_.buffer, 0, d), this.currentIV = (0, k.sliceUint8)(_, -16).buffer, i || null;
                  }, M.webCryptoDecrypt = function(I, S, d) {
                    var v = this, f = this.subtle;
                    return (this.key !== S || !this.fastAesKey) && (this.key = S, this.fastAesKey = new R.default(f, S)), this.fastAesKey.expandKey().then(function(l) {
                      if (!f)
                        return Promise.reject(new Error("web crypto not initialized"));
                      v.logOnce("WebCrypto AES decrypt");
                      var _ = new j.default(f, new Uint8Array(d));
                      return _.decrypt(I.buffer, l);
                    }).catch(function(l) {
                      return O.logger.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + l.name + ": " + l.message), v.onWebCryptoError(I, S, d);
                    });
                  }, M.onWebCryptoError = function(I, S, d) {
                    this.useSoftware = true, this.logEnabled = true, this.softwareDecrypt(I, S, d);
                    var v = this.flush();
                    if (v)
                      return v.buffer;
                    throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
                  }, M.getValidChunk = function(I) {
                    var S = I, d = I.length - I.length % m2;
                    return d !== I.length && (S = (0, k.sliceUint8)(I, 0, d), this.remainderData = (0, k.sliceUint8)(I, d)), S;
                  }, M.logOnce = function(I) {
                    !this.logEnabled || (O.logger.log("[decrypter]: " + I), this.logEnabled = false);
                  }, L;
                }();
              }, "./src/crypt/fast-aes-key.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                var j = function() {
                  function R(O, x) {
                    this.subtle = void 0, this.key = void 0, this.subtle = O, this.key = x;
                  }
                  var F = R.prototype;
                  return F.expandKey = function() {
                    return this.subtle.importKey("raw", this.key, { name: "AES-CBC" }, false, ["encrypt", "decrypt"]);
                  }, R;
                }();
              }, "./src/demux/aacdemuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => E });
                var j = N("./src/demux/base-audio-demuxer.ts"), R = N("./src/demux/adts.ts"), F = N("./src/utils/logger.ts"), O = N("./src/demux/id3.ts");
                function x(L, M) {
                  L.prototype = Object.create(M.prototype), L.prototype.constructor = L, k(L, M);
                }
                function k(L, M) {
                  return k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(I, S) {
                    return I.__proto__ = S, I;
                  }, k(L, M);
                }
                var m2 = function(L) {
                  x(M, L);
                  function M(I, S) {
                    var d;
                    return d = L.call(this) || this, d.observer = void 0, d.config = void 0, d.observer = I, d.config = S, d;
                  }
                  var y = M.prototype;
                  return y.resetInitSegment = function(S, d, v, f) {
                    L.prototype.resetInitSegment.call(this, S, d, v, f), this._audioTrack = { container: "audio/adts", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "aac", samples: [], manifestCodec: d, duration: f, inputTimeScale: 9e4, dropped: 0 };
                  }, M.probe = function(S) {
                    if (!S)
                      return false;
                    for (var d = O.getID3Data(S, 0) || [], v = d.length, f = S.length; v < f; v++)
                      if (R.probe(S, v))
                        return F.logger.log("ADTS sync word found !"), true;
                    return false;
                  }, y.canParse = function(S, d) {
                    return R.canParse(S, d);
                  }, y.appendFrame = function(S, d, v) {
                    R.initTrackConfig(S, this.observer, d, v, S.manifestCodec);
                    var f = R.appendFrame(S, d, v, this.basePTS, this.frameIndex);
                    if (f && f.missing === 0)
                      return f;
                  }, M;
                }(j.default);
                const E = m2;
              }, "./src/demux/adts.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { appendFrame: () => v, canGetFrameLength: () => E, canParse: () => M, getAudioConfig: () => O, getFrameDuration: () => S, getFullFrameLength: () => m2, getHeaderLength: () => k, initTrackConfig: () => I, isHeader: () => L, isHeaderPattern: () => x, parseFrameHeader: () => d, probe: () => y });
                var j = N("./src/utils/logger.ts"), R = N("./src/errors.ts"), F = N("./src/events.ts");
                function O(f, l, _, g) {
                  var i, n, o, h, b = navigator.userAgent.toLowerCase(), a = g, c = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                  i = ((l[_ + 2] & 192) >>> 6) + 1;
                  var s = (l[_ + 2] & 60) >>> 2;
                  if (s > c.length - 1) {
                    f.trigger(F.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "invalid ADTS sampling index:" + s });
                    return;
                  }
                  return o = (l[_ + 2] & 1) << 2, o |= (l[_ + 3] & 192) >>> 6, j.logger.log("manifest codec:" + g + ", ADTS type:" + i + ", samplingIndex:" + s), /firefox/i.test(b) ? s >= 6 ? (i = 5, h = new Array(4), n = s - 3) : (i = 2, h = new Array(2), n = s) : b.indexOf("android") !== -1 ? (i = 2, h = new Array(2), n = s) : (i = 5, h = new Array(4), g && (g.indexOf("mp4a.40.29") !== -1 || g.indexOf("mp4a.40.5") !== -1) || !g && s >= 6 ? n = s - 3 : ((g && g.indexOf("mp4a.40.2") !== -1 && (s >= 6 && o === 1 || /vivaldi/i.test(b)) || !g && o === 1) && (i = 2, h = new Array(2)), n = s)), h[0] = i << 3, h[0] |= (s & 14) >> 1, h[1] |= (s & 1) << 7, h[1] |= o << 3, i === 5 && (h[1] |= (n & 14) >> 1, h[2] = (n & 1) << 7, h[2] |= 2 << 2, h[3] = 0), { config: h, samplerate: c[s], channelCount: o, codec: "mp4a.40." + i, manifestCodec: a };
                }
                function x(f, l) {
                  return f[l] === 255 && (f[l + 1] & 246) == 240;
                }
                function k(f, l) {
                  return f[l + 1] & 1 ? 7 : 9;
                }
                function m2(f, l) {
                  return (f[l + 3] & 3) << 11 | f[l + 4] << 3 | (f[l + 5] & 224) >>> 5;
                }
                function E(f, l) {
                  return l + 5 < f.length;
                }
                function L(f, l) {
                  return l + 1 < f.length && x(f, l);
                }
                function M(f, l) {
                  return E(f, l) && x(f, l) && m2(f, l) <= f.length - l;
                }
                function y(f, l) {
                  if (L(f, l)) {
                    var _ = k(f, l);
                    if (l + _ >= f.length)
                      return false;
                    var g = m2(f, l);
                    if (g <= _)
                      return false;
                    var i = l + g;
                    return i === f.length || L(f, i);
                  }
                  return false;
                }
                function I(f, l, _, g, i) {
                  if (!f.samplerate) {
                    var n = O(l, _, g, i);
                    if (!n)
                      return;
                    f.config = n.config, f.samplerate = n.samplerate, f.channelCount = n.channelCount, f.codec = n.codec, f.manifestCodec = n.manifestCodec, j.logger.log("parsed codec:" + f.codec + ", rate:" + n.samplerate + ", channels:" + n.channelCount);
                  }
                }
                function S(f) {
                  return 1024 * 9e4 / f;
                }
                function d(f, l) {
                  var _ = k(f, l);
                  if (l + _ <= f.length) {
                    var g = m2(f, l) - _;
                    if (g > 0)
                      return { headerLength: _, frameLength: g };
                  }
                }
                function v(f, l, _, g, i) {
                  var n = S(f.samplerate), o = g + i * n, h = d(l, _), b;
                  if (h) {
                    var a = h.frameLength, c = h.headerLength, s = c + a, p = Math.max(0, _ + s - l.length);
                    p ? (b = new Uint8Array(s - c), b.set(l.subarray(_ + c, l.length), 0)) : b = l.subarray(_ + c, _ + s);
                    var D = { unit: b, pts: o };
                    return p || f.samples.push(D), { sample: D, length: s, missing: p };
                  }
                  var A = l.length - _;
                  b = new Uint8Array(A), b.set(l.subarray(_, l.length), 0);
                  var w = { unit: b, pts: o };
                  return { sample: w, length: A, missing: -1 };
                }
              }, "./src/demux/base-audio-demuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => L, initPTSFn: () => E });
                var j = N("./src/polyfills/number.ts"), R = N("./src/demux/id3.ts"), F = N("./src/types/demuxer.ts"), O = N("./src/demux/dummy-demuxed-track.ts"), x = N("./src/utils/mp4-tools.ts"), k = N("./src/utils/typed-array.ts"), m2 = function() {
                  function M() {
                    this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null;
                  }
                  var y = M.prototype;
                  return y.resetInitSegment = function(S, d, v, f) {
                    this._id3Track = { type: "id3", id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 };
                  }, y.resetTimeStamp = function(S) {
                    this.initPTS = S, this.resetContiguity();
                  }, y.resetContiguity = function() {
                    this.basePTS = null, this.lastPTS = null, this.frameIndex = 0;
                  }, y.canParse = function(S, d) {
                    return false;
                  }, y.appendFrame = function(S, d, v) {
                  }, y.demux = function(S, d) {
                    this.cachedData && (S = (0, x.appendUint8Array)(this.cachedData, S), this.cachedData = null);
                    var v = R.getID3Data(S, 0), f = v ? v.length : 0, l, _ = this._audioTrack, g = this._id3Track, i = v ? R.getTimeStamp(v) : void 0, n = S.length;
                    for ((this.basePTS === null || this.frameIndex === 0 && (0, j.isFiniteNumber)(i)) && (this.basePTS = E(i, d, this.initPTS), this.lastPTS = this.basePTS), this.lastPTS === null && (this.lastPTS = this.basePTS), v && v.length > 0 && g.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: v, type: F.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }); f < n; ) {
                      if (this.canParse(S, f)) {
                        var o = this.appendFrame(_, S, f);
                        o ? (this.frameIndex++, this.lastPTS = o.sample.pts, f += o.length, l = f) : f = n;
                      } else
                        R.canParse(S, f) ? (v = R.getID3Data(S, f), g.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: v, type: F.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY }), f += v.length, l = f) : f++;
                      if (f === n && l !== n) {
                        var h = (0, k.sliceUint8)(S, l);
                        this.cachedData ? this.cachedData = (0, x.appendUint8Array)(this.cachedData, h) : this.cachedData = h;
                      }
                    }
                    return { audioTrack: _, videoTrack: (0, O.dummyTrack)(), id3Track: g, textTrack: (0, O.dummyTrack)() };
                  }, y.demuxSampleAes = function(S, d, v) {
                    return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
                  }, y.flush = function(S) {
                    var d = this.cachedData;
                    return d && (this.cachedData = null, this.demux(d, 0)), { audioTrack: this._audioTrack, videoTrack: (0, O.dummyTrack)(), id3Track: this._id3Track, textTrack: (0, O.dummyTrack)() };
                  }, y.destroy = function() {
                  }, M;
                }(), E = function(y, I, S) {
                  return (0, j.isFiniteNumber)(y) ? y * 90 : I * 9e4 + (S || 0);
                };
                const L = m2;
              }, "./src/demux/chunk-cache.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                var j = function() {
                  function F() {
                    this.chunks = [], this.dataLength = 0;
                  }
                  var O = F.prototype;
                  return O.push = function(k) {
                    this.chunks.push(k), this.dataLength += k.length;
                  }, O.flush = function() {
                    var k = this.chunks, m2 = this.dataLength, E;
                    if (k.length)
                      k.length === 1 ? E = k[0] : E = R(k, m2);
                    else
                      return new Uint8Array(0);
                    return this.reset(), E;
                  }, O.reset = function() {
                    this.chunks.length = 0, this.dataLength = 0;
                  }, F;
                }();
                function R(F, O) {
                  for (var x = new Uint8Array(O), k = 0, m2 = 0; m2 < F.length; m2++) {
                    var E = F[m2];
                    x.set(E, k), k += E.length;
                  }
                  return x;
                }
              }, "./src/demux/dummy-demuxed-track.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { dummyTrack: () => j });
                function j(R, F) {
                  return R === void 0 && (R = ""), F === void 0 && (F = 9e4), { type: R, id: -1, pid: -1, inputTimeScale: F, sequenceNumber: -1, samples: [], dropped: 0 };
                }
              }, "./src/demux/exp-golomb.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => F });
                var j = N("./src/utils/logger.ts"), R = function() {
                  function O(k) {
                    this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = k, this.bytesAvailable = k.byteLength, this.word = 0, this.bitsAvailable = 0;
                  }
                  var x = O.prototype;
                  return x.loadWord = function() {
                    var m2 = this.data, E = this.bytesAvailable, L = m2.byteLength - E, M = new Uint8Array(4), y = Math.min(4, E);
                    if (y === 0)
                      throw new Error("no bytes available");
                    M.set(m2.subarray(L, L + y)), this.word = new DataView(M.buffer).getUint32(0), this.bitsAvailable = y * 8, this.bytesAvailable -= y;
                  }, x.skipBits = function(m2) {
                    var E;
                    m2 = Math.min(m2, this.bytesAvailable * 8 + this.bitsAvailable), this.bitsAvailable > m2 ? (this.word <<= m2, this.bitsAvailable -= m2) : (m2 -= this.bitsAvailable, E = m2 >> 3, m2 -= E << 3, this.bytesAvailable -= E, this.loadWord(), this.word <<= m2, this.bitsAvailable -= m2);
                  }, x.readBits = function(m2) {
                    var E = Math.min(this.bitsAvailable, m2), L = this.word >>> 32 - E;
                    if (m2 > 32 && j.logger.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= E, this.bitsAvailable > 0)
                      this.word <<= E;
                    else if (this.bytesAvailable > 0)
                      this.loadWord();
                    else
                      throw new Error("no bits available");
                    return E = m2 - E, E > 0 && this.bitsAvailable ? L << E | this.readBits(E) : L;
                  }, x.skipLZ = function() {
                    var m2;
                    for (m2 = 0; m2 < this.bitsAvailable; ++m2)
                      if ((this.word & 2147483648 >>> m2) != 0)
                        return this.word <<= m2, this.bitsAvailable -= m2, m2;
                    return this.loadWord(), m2 + this.skipLZ();
                  }, x.skipUEG = function() {
                    this.skipBits(1 + this.skipLZ());
                  }, x.skipEG = function() {
                    this.skipBits(1 + this.skipLZ());
                  }, x.readUEG = function() {
                    var m2 = this.skipLZ();
                    return this.readBits(m2 + 1) - 1;
                  }, x.readEG = function() {
                    var m2 = this.readUEG();
                    return 1 & m2 ? 1 + m2 >>> 1 : -1 * (m2 >>> 1);
                  }, x.readBoolean = function() {
                    return this.readBits(1) === 1;
                  }, x.readUByte = function() {
                    return this.readBits(8);
                  }, x.readUShort = function() {
                    return this.readBits(16);
                  }, x.readUInt = function() {
                    return this.readBits(32);
                  }, x.skipScalingList = function(m2) {
                    for (var E = 8, L = 8, M, y = 0; y < m2; y++)
                      L !== 0 && (M = this.readEG(), L = (E + M + 256) % 256), E = L === 0 ? E : L;
                  }, x.readSPS = function() {
                    var m2 = 0, E = 0, L = 0, M = 0, y, I, S, d = this.readUByte.bind(this), v = this.readBits.bind(this), f = this.readUEG.bind(this), l = this.readBoolean.bind(this), _ = this.skipBits.bind(this), g = this.skipEG.bind(this), i = this.skipUEG.bind(this), n = this.skipScalingList.bind(this);
                    d();
                    var o = d();
                    if (v(5), _(3), d(), i(), o === 100 || o === 110 || o === 122 || o === 244 || o === 44 || o === 83 || o === 86 || o === 118 || o === 128) {
                      var h = f();
                      if (h === 3 && _(1), i(), i(), _(1), l())
                        for (I = h !== 3 ? 8 : 12, S = 0; S < I; S++)
                          l() && (S < 6 ? n(16) : n(64));
                    }
                    i();
                    var b = f();
                    if (b === 0)
                      f();
                    else if (b === 1)
                      for (_(1), g(), g(), y = f(), S = 0; S < y; S++)
                        g();
                    i(), _(1);
                    var a = f(), c = f(), s = v(1);
                    s === 0 && _(1), _(1), l() && (m2 = f(), E = f(), L = f(), M = f());
                    var p = [1, 1];
                    if (l() && l()) {
                      var D = d();
                      switch (D) {
                        case 1:
                          p = [1, 1];
                          break;
                        case 2:
                          p = [12, 11];
                          break;
                        case 3:
                          p = [10, 11];
                          break;
                        case 4:
                          p = [16, 11];
                          break;
                        case 5:
                          p = [40, 33];
                          break;
                        case 6:
                          p = [24, 11];
                          break;
                        case 7:
                          p = [20, 11];
                          break;
                        case 8:
                          p = [32, 11];
                          break;
                        case 9:
                          p = [80, 33];
                          break;
                        case 10:
                          p = [18, 11];
                          break;
                        case 11:
                          p = [15, 11];
                          break;
                        case 12:
                          p = [64, 33];
                          break;
                        case 13:
                          p = [160, 99];
                          break;
                        case 14:
                          p = [4, 3];
                          break;
                        case 15:
                          p = [3, 2];
                          break;
                        case 16:
                          p = [2, 1];
                          break;
                        case 255: {
                          p = [d() << 8 | d(), d() << 8 | d()];
                          break;
                        }
                      }
                    }
                    return { width: Math.ceil((a + 1) * 16 - m2 * 2 - E * 2), height: (2 - s) * (c + 1) * 16 - (s ? 2 : 4) * (L + M), pixelRatio: p };
                  }, x.readSliceType = function() {
                    return this.readUByte(), this.readUEG(), this.readUEG();
                  }, O;
                }();
                const F = R;
              }, "./src/demux/id3.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { canParse: () => x, decodeFrame: () => M, getID3Data: () => F, getID3Frames: () => L, getTimeStamp: () => k, isFooter: () => R, isHeader: () => j, isTimeStampFrame: () => m2, testables: () => f, utf8ArrayToStr: () => v });
                var j = function(i, n) {
                  return n + 10 <= i.length && i[n] === 73 && i[n + 1] === 68 && i[n + 2] === 51 && i[n + 3] < 255 && i[n + 4] < 255 && i[n + 6] < 128 && i[n + 7] < 128 && i[n + 8] < 128 && i[n + 9] < 128;
                }, R = function(i, n) {
                  return n + 10 <= i.length && i[n] === 51 && i[n + 1] === 68 && i[n + 2] === 73 && i[n + 3] < 255 && i[n + 4] < 255 && i[n + 6] < 128 && i[n + 7] < 128 && i[n + 8] < 128 && i[n + 9] < 128;
                }, F = function(i, n) {
                  for (var o = n, h = 0; j(i, n); ) {
                    h += 10;
                    var b = O(i, n + 6);
                    h += b, R(i, n + 10) && (h += 10), n += h;
                  }
                  if (h > 0)
                    return i.subarray(o, o + h);
                }, O = function(i, n) {
                  var o = 0;
                  return o = (i[n] & 127) << 21, o |= (i[n + 1] & 127) << 14, o |= (i[n + 2] & 127) << 7, o |= i[n + 3] & 127, o;
                }, x = function(i, n) {
                  return j(i, n) && O(i, n + 6) + 10 <= i.length - n;
                }, k = function(i) {
                  for (var n = L(i), o = 0; o < n.length; o++) {
                    var h = n[o];
                    if (m2(h))
                      return d(h);
                  }
                }, m2 = function(i) {
                  return i && i.key === "PRIV" && i.info === "com.apple.streaming.transportStreamTimestamp";
                }, E = function(i) {
                  var n = String.fromCharCode(i[0], i[1], i[2], i[3]), o = O(i, 4), h = 10;
                  return { type: n, size: o, data: i.subarray(h, h + o) };
                }, L = function(i) {
                  for (var n = 0, o = []; j(i, n); ) {
                    var h = O(i, n + 6);
                    n += 10;
                    for (var b = n + h; n + 8 < b; ) {
                      var a = E(i.subarray(n)), c = M(a);
                      c && o.push(c), n += a.size + 10;
                    }
                    R(i, n) && (n += 10);
                  }
                  return o;
                }, M = function(i) {
                  return i.type === "PRIV" ? y(i) : i.type[0] === "W" ? S(i) : I(i);
                }, y = function(i) {
                  if (!(i.size < 2)) {
                    var n = v(i.data, true), o = new Uint8Array(i.data.subarray(n.length + 1));
                    return { key: i.type, info: n, data: o.buffer };
                  }
                }, I = function(i) {
                  if (!(i.size < 2)) {
                    if (i.type === "TXXX") {
                      var n = 1, o = v(i.data.subarray(n), true);
                      n += o.length + 1;
                      var h = v(i.data.subarray(n));
                      return { key: i.type, info: o, data: h };
                    }
                    var b = v(i.data.subarray(1));
                    return { key: i.type, data: b };
                  }
                }, S = function(i) {
                  if (i.type === "WXXX") {
                    if (i.size < 2)
                      return;
                    var n = 1, o = v(i.data.subarray(n), true);
                    n += o.length + 1;
                    var h = v(i.data.subarray(n));
                    return { key: i.type, info: o, data: h };
                  }
                  var b = v(i.data);
                  return { key: i.type, data: b };
                }, d = function(i) {
                  if (i.data.byteLength === 8) {
                    var n = new Uint8Array(i.data), o = n[3] & 1, h = (n[4] << 23) + (n[5] << 15) + (n[6] << 7) + n[7];
                    return h /= 45, o && (h += 4772185884e-2), Math.round(h);
                  }
                }, v = function(i, n) {
                  n === void 0 && (n = false);
                  var o = _();
                  if (o) {
                    var h = o.decode(i);
                    if (n) {
                      var b = h.indexOf("\0");
                      return b !== -1 ? h.substring(0, b) : h;
                    }
                    return h.replace(/\0/g, "");
                  }
                  for (var a = i.length, c, s, p, D = "", A = 0; A < a; ) {
                    if (c = i[A++], c === 0 && n)
                      return D;
                    if (c === 0 || c === 3)
                      continue;
                    switch (c >> 4) {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                        D += String.fromCharCode(c);
                        break;
                      case 12:
                      case 13:
                        s = i[A++], D += String.fromCharCode((c & 31) << 6 | s & 63);
                        break;
                      case 14:
                        s = i[A++], p = i[A++], D += String.fromCharCode((c & 15) << 12 | (s & 63) << 6 | (p & 63) << 0);
                        break;
                      default:
                    }
                  }
                  return D;
                }, f = { decodeTextFrame: I }, l;
                function _() {
                  return !l && typeof self.TextDecoder != "undefined" && (l = new self.TextDecoder("utf-8")), l;
                }
              }, "./src/demux/mp3demuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => E });
                var j = N("./src/demux/base-audio-demuxer.ts"), R = N("./src/demux/id3.ts"), F = N("./src/utils/logger.ts"), O = N("./src/demux/mpegaudio.ts");
                function x(L, M) {
                  L.prototype = Object.create(M.prototype), L.prototype.constructor = L, k(L, M);
                }
                function k(L, M) {
                  return k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(I, S) {
                    return I.__proto__ = S, I;
                  }, k(L, M);
                }
                var m2 = function(L) {
                  x(M, L);
                  function M() {
                    return L.apply(this, arguments) || this;
                  }
                  var y = M.prototype;
                  return y.resetInitSegment = function(S, d, v, f) {
                    L.prototype.resetInitSegment.call(this, S, d, v, f), this._audioTrack = { container: "audio/mpeg", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "mp3", samples: [], manifestCodec: d, duration: f, inputTimeScale: 9e4, dropped: 0 };
                  }, M.probe = function(S) {
                    if (!S)
                      return false;
                    for (var d = R.getID3Data(S, 0) || [], v = d.length, f = S.length; v < f; v++)
                      if (O.probe(S, v))
                        return F.logger.log("MPEG Audio sync word found !"), true;
                    return false;
                  }, y.canParse = function(S, d) {
                    return O.canParse(S, d);
                  }, y.appendFrame = function(S, d, v) {
                    if (this.basePTS !== null)
                      return O.appendFrame(S, d, v, this.basePTS, this.frameIndex);
                  }, M;
                }(j.default);
                const E = m2;
              }, "./src/demux/mp4demuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => m2 });
                var j = N("./src/polyfills/number.ts"), R = N("./src/types/demuxer.ts"), F = N("./src/utils/mp4-tools.ts"), O = N("./src/demux/dummy-demuxed-track.ts"), x = /\/emsg[-/]ID3/i, k = function() {
                  function E(M, y) {
                    this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = y;
                  }
                  var L = E.prototype;
                  return L.resetTimeStamp = function() {
                  }, L.resetInitSegment = function(y, I, S, d) {
                    var v = this.videoTrack = (0, O.dummyTrack)("video", 1), f = this.audioTrack = (0, O.dummyTrack)("audio", 1), l = this.txtTrack = (0, O.dummyTrack)("text", 1);
                    if (this.id3Track = (0, O.dummyTrack)("id3", 1), this.timeOffset = 0, !(!y || !y.byteLength)) {
                      var _ = (0, F.parseInitSegment)(y);
                      if (_.video) {
                        var g = _.video, i = g.id, n = g.timescale, o = g.codec;
                        v.id = i, v.timescale = l.timescale = n, v.codec = o;
                      }
                      if (_.audio) {
                        var h = _.audio, b = h.id, a = h.timescale, c = h.codec;
                        f.id = b, f.timescale = a, f.codec = c;
                      }
                      l.id = F.RemuxerTrackIdConfig.text, v.sampleDuration = 0, v.duration = f.duration = d;
                    }
                  }, L.resetContiguity = function() {
                  }, E.probe = function(y) {
                    return y = y.length > 16384 ? y.subarray(0, 16384) : y, (0, F.findBox)(y, ["moof"]).length > 0;
                  }, L.demux = function(y, I) {
                    this.timeOffset = I;
                    var S = y, d = this.videoTrack, v = this.txtTrack;
                    if (this.config.progressive) {
                      this.remainderData && (S = (0, F.appendUint8Array)(this.remainderData, y));
                      var f = (0, F.segmentValidRange)(S);
                      this.remainderData = f.remainder, d.samples = f.valid || new Uint8Array();
                    } else
                      d.samples = S;
                    var l = this.extractID3Track(d, I);
                    return v.samples = (0, F.parseSamples)(I, d), { videoTrack: d, audioTrack: this.audioTrack, id3Track: l, textTrack: this.txtTrack };
                  }, L.flush = function() {
                    var y = this.timeOffset, I = this.videoTrack, S = this.txtTrack;
                    I.samples = this.remainderData || new Uint8Array(), this.remainderData = null;
                    var d = this.extractID3Track(I, this.timeOffset);
                    return S.samples = (0, F.parseSamples)(y, I), { videoTrack: I, audioTrack: (0, O.dummyTrack)(), id3Track: d, textTrack: (0, O.dummyTrack)() };
                  }, L.extractID3Track = function(y, I) {
                    var S = this.id3Track;
                    if (y.samples.length) {
                      var d = (0, F.findBox)(y.samples, ["emsg"]);
                      d && d.forEach(function(v) {
                        var f = (0, F.parseEmsg)(v);
                        if (x.test(f.schemeIdUri)) {
                          var l = (0, j.isFiniteNumber)(f.presentationTime) ? f.presentationTime / f.timeScale : I + f.presentationTimeDelta / f.timeScale, _ = f.eventDuration === 4294967295 ? Number.POSITIVE_INFINITY : f.eventDuration / f.timeScale;
                          _ <= 1e-3 && (_ = Number.POSITIVE_INFINITY);
                          var g = f.payload;
                          S.samples.push({ data: g, len: g.byteLength, dts: l, pts: l, type: R.MetadataSchema.emsg, duration: _ });
                        }
                      });
                    }
                    return S;
                  }, L.demuxSampleAes = function(y, I, S) {
                    return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
                  }, L.destroy = function() {
                  }, E;
                }();
                const m2 = k;
              }, "./src/demux/mpegaudio.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { appendFrame: () => k, canParse: () => M, isHeader: () => L, isHeaderPattern: () => E, parseHeader: () => m2, probe: () => y });
                var j = null, R = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160], F = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3], O = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]], x = [0, 1, 1, 4];
                function k(I, S, d, v, f) {
                  if (!(d + 24 > S.length)) {
                    var l = m2(S, d);
                    if (l && d + l.frameLength <= S.length) {
                      var _ = l.samplesPerFrame * 9e4 / l.sampleRate, g = v + f * _, i = { unit: S.subarray(d, d + l.frameLength), pts: g, dts: g };
                      return I.config = [], I.channelCount = l.channelCount, I.samplerate = l.sampleRate, I.samples.push(i), { sample: i, length: l.frameLength, missing: 0 };
                    }
                  }
                }
                function m2(I, S) {
                  var d = I[S + 1] >> 3 & 3, v = I[S + 1] >> 1 & 3, f = I[S + 2] >> 4 & 15, l = I[S + 2] >> 2 & 3;
                  if (d !== 1 && f !== 0 && f !== 15 && l !== 3) {
                    var _ = I[S + 2] >> 1 & 1, g = I[S + 3] >> 6, i = d === 3 ? 3 - v : v === 3 ? 3 : 4, n = R[i * 14 + f - 1] * 1e3, o = d === 3 ? 0 : d === 2 ? 1 : 2, h = F[o * 3 + l], b = g === 3 ? 1 : 2, a = O[d][v], c = x[v], s = a * 8 * c, p = Math.floor(a * n / h + _) * c;
                    if (j === null) {
                      var D = navigator.userAgent || "", A = D.match(/Chrome\/(\d+)/i);
                      j = A ? parseInt(A[1]) : 0;
                    }
                    var w = !!j && j <= 87;
                    return w && v === 2 && n >= 224e3 && g === 0 && (I[S + 3] = I[S + 3] | 128), { sampleRate: h, channelCount: b, frameLength: p, samplesPerFrame: s };
                  }
                }
                function E(I, S) {
                  return I[S] === 255 && (I[S + 1] & 224) == 224 && (I[S + 1] & 6) != 0;
                }
                function L(I, S) {
                  return S + 1 < I.length && E(I, S);
                }
                function M(I, S) {
                  var d = 4;
                  return E(I, S) && d <= I.length - S;
                }
                function y(I, S) {
                  if (S + 1 < I.length && E(I, S)) {
                    var d = 4, v = m2(I, S), f = d;
                    v != null && v.frameLength && (f = v.frameLength);
                    var l = S + f;
                    return l === I.length || L(I, l);
                  }
                  return false;
                }
              }, "./src/demux/sample-aes.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => O });
                var j = N("./src/crypt/decrypter.ts"), R = N("./src/utils/mp4-tools.ts"), F = function() {
                  function x(m2, E, L) {
                    this.keyData = void 0, this.decrypter = void 0, this.keyData = L, this.decrypter = new j.default(E, { removePKCS7Padding: false });
                  }
                  var k = x.prototype;
                  return k.decryptBuffer = function(E) {
                    return this.decrypter.decrypt(E, this.keyData.key.buffer, this.keyData.iv.buffer);
                  }, k.decryptAacSample = function(E, L, M) {
                    var y = this, I = E[L].unit;
                    if (!(I.length <= 16)) {
                      var S = I.subarray(16, I.length - I.length % 16), d = S.buffer.slice(S.byteOffset, S.byteOffset + S.length);
                      this.decryptBuffer(d).then(function(v) {
                        var f = new Uint8Array(v);
                        I.set(f, 16), y.decrypter.isSync() || y.decryptAacSamples(E, L + 1, M);
                      });
                    }
                  }, k.decryptAacSamples = function(E, L, M) {
                    for (; ; L++) {
                      if (L >= E.length) {
                        M();
                        return;
                      }
                      if (!(E[L].unit.length < 32) && (this.decryptAacSample(E, L, M), !this.decrypter.isSync()))
                        return;
                    }
                  }, k.getAvcEncryptedData = function(E) {
                    for (var L = Math.floor((E.length - 48) / 160) * 16 + 16, M = new Int8Array(L), y = 0, I = 32; I < E.length - 16; I += 160, y += 16)
                      M.set(E.subarray(I, I + 16), y);
                    return M;
                  }, k.getAvcDecryptedUnit = function(E, L) {
                    for (var M = new Uint8Array(L), y = 0, I = 32; I < E.length - 16; I += 160, y += 16)
                      E.set(M.subarray(y, y + 16), I);
                    return E;
                  }, k.decryptAvcSample = function(E, L, M, y, I) {
                    var S = this, d = (0, R.discardEPB)(I.data), v = this.getAvcEncryptedData(d);
                    this.decryptBuffer(v.buffer).then(function(f) {
                      I.data = S.getAvcDecryptedUnit(d, f), S.decrypter.isSync() || S.decryptAvcSamples(E, L, M + 1, y);
                    });
                  }, k.decryptAvcSamples = function(E, L, M, y) {
                    if (E instanceof Uint8Array)
                      throw new Error("Cannot decrypt samples of type Uint8Array");
                    for (; ; L++, M = 0) {
                      if (L >= E.length) {
                        y();
                        return;
                      }
                      for (var I = E[L].units; !(M >= I.length); M++) {
                        var S = I[M];
                        if (!(S.data.length <= 48 || S.type !== 1 && S.type !== 5) && (this.decryptAvcSample(E, L, M, y, S), !this.decrypter.isSync()))
                          return;
                      }
                    }
                  }, x;
                }();
                const O = F;
              }, "./src/demux/transmuxer-interface.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => M });
                var j = N("./src/demux/webworkify-webpack.js"), R = N("./src/events.ts"), F = N("./src/demux/transmuxer.ts"), O = N("./src/utils/logger.ts"), x = N("./src/errors.ts"), k = N("./src/utils/mediasource-helper.ts"), m2 = N("./node_modules/eventemitter3/index.js"), E = N.n(m2), L = (0, k.getMediaSource)() || { isTypeSupported: function() {
                  return false;
                } }, M = function() {
                  function y(S, d, v, f) {
                    var l = this;
                    this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.worker = void 0, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
                    var _ = S.config;
                    this.hls = S, this.id = d, this.useWorker = !!_.enableWorker, this.onTransmuxComplete = v, this.onFlush = f;
                    var g = function(b, a) {
                      a = a || {}, a.frag = l.frag, a.id = l.id, l.hls.trigger(b, a);
                    };
                    this.observer = new m2.EventEmitter(), this.observer.on(R.Events.FRAG_DECRYPTED, g), this.observer.on(R.Events.ERROR, g);
                    var i = { mp4: L.isTypeSupported("video/mp4"), mpeg: L.isTypeSupported("audio/mpeg"), mp3: L.isTypeSupported('audio/mp4; codecs="mp3"') }, n = navigator.vendor;
                    if (this.useWorker && typeof Worker != "undefined") {
                      O.logger.log("demuxing in webworker");
                      var o;
                      try {
                        o = this.worker = (0, j.default)("./src/demux/transmuxer-worker.ts"), this.onwmsg = this.onWorkerMessage.bind(this), o.addEventListener("message", this.onwmsg), o.onerror = function(h) {
                          l.useWorker = false, O.logger.warn("Exception in webworker, fallback to inline"), l.hls.trigger(R.Events.ERROR, { type: x.ErrorTypes.OTHER_ERROR, details: x.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: "demuxerWorker", error: new Error(h.message + "  (" + h.filename + ":" + h.lineno + ")") });
                        }, o.postMessage({ cmd: "init", typeSupported: i, vendor: n, id: d, config: JSON.stringify(_) });
                      } catch (h) {
                        O.logger.warn("Error in worker:", h), O.logger.error("Error while initializing DemuxerWorker, fallback to inline"), o && self.URL.revokeObjectURL(o.objectURL), this.transmuxer = new F.default(this.observer, i, _, n, d), this.worker = null;
                      }
                    } else
                      this.transmuxer = new F.default(this.observer, i, _, n, d);
                  }
                  var I = y.prototype;
                  return I.destroy = function() {
                    var d = this.worker;
                    if (d)
                      d.removeEventListener("message", this.onwmsg), d.terminate(), this.worker = null, this.onwmsg = void 0;
                    else {
                      var v = this.transmuxer;
                      v && (v.destroy(), this.transmuxer = null);
                    }
                    var f = this.observer;
                    f && f.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null;
                  }, I.push = function(d, v, f, l, _, g, i, n, o, h) {
                    var b, a, c = this;
                    o.transmuxing.start = self.performance.now();
                    var s = this.transmuxer, p = this.worker, D = g ? g.start : _.start, A = _.decryptdata, w = this.frag, B = !(w && _.cc === w.cc), U = !(w && o.level === w.level), K = w ? o.sn - w.sn : -1, W = this.part ? o.part - this.part.index : -1, H = K === 0 && o.id > 1 && o.id === (w == null ? void 0 : w.stats.chunkCount), V = !U && (K === 1 || K === 0 && (W === 1 || H && W <= 0)), z = self.performance.now();
                    (U || K || _.stats.parsing.start === 0) && (_.stats.parsing.start = z), g && (W || !V) && (g.stats.parsing.start = z);
                    var Q = !(w && ((b = _.initSegment) === null || b === void 0 ? void 0 : b.url) === ((a = w.initSegment) === null || a === void 0 ? void 0 : a.url)), q = new F.TransmuxState(B, V, n, U, D, Q);
                    if (!V || B || Q) {
                      O.logger.log("[transmuxer-interface, " + _.type + "]: Starting new transmux session for sn: " + o.sn + " p: " + o.part + " level: " + o.level + " id: " + o.id + `
        discontinuity: ` + B + `
        trackSwitch: ` + U + `
        contiguous: ` + V + `
        accurateTimeOffset: ` + n + `
        timeOffset: ` + D + `
        initSegmentChange: ` + Q);
                      var ee = new F.TransmuxConfig(f, l, v, i, h);
                      this.configureTransmuxer(ee);
                    }
                    if (this.frag = _, this.part = g, p)
                      p.postMessage({ cmd: "demux", data: d, decryptdata: A, chunkMeta: o, state: q }, d instanceof ArrayBuffer ? [d] : []);
                    else if (s) {
                      var ae = s.push(d, A, o, q);
                      (0, F.isPromise)(ae) ? (s.async = true, ae.then(function(ne) {
                        c.handleTransmuxComplete(ne);
                      }).catch(function(ne) {
                        c.transmuxerError(ne, o, "transmuxer-interface push error");
                      })) : (s.async = false, this.handleTransmuxComplete(ae));
                    }
                  }, I.flush = function(d) {
                    var v = this;
                    d.transmuxing.start = self.performance.now();
                    var f = this.transmuxer, l = this.worker;
                    if (l)
                      l.postMessage({ cmd: "flush", chunkMeta: d });
                    else if (f) {
                      var _ = f.flush(d), g = (0, F.isPromise)(_);
                      g || f.async ? ((0, F.isPromise)(_) || (_ = Promise.resolve(_)), _.then(function(i) {
                        v.handleFlushResult(i, d);
                      }).catch(function(i) {
                        v.transmuxerError(i, d, "transmuxer-interface flush error");
                      })) : this.handleFlushResult(_, d);
                    }
                  }, I.transmuxerError = function(d, v, f) {
                    !this.hls || this.hls.trigger(R.Events.ERROR, { type: x.ErrorTypes.MEDIA_ERROR, details: x.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: v, fatal: false, error: d, err: d, reason: f });
                  }, I.handleFlushResult = function(d, v) {
                    var f = this;
                    d.forEach(function(l) {
                      f.handleTransmuxComplete(l);
                    }), this.onFlush(v);
                  }, I.onWorkerMessage = function(d) {
                    var v = d.data, f = this.hls;
                    switch (v.event) {
                      case "init": {
                        self.URL.revokeObjectURL(this.worker.objectURL);
                        break;
                      }
                      case "transmuxComplete": {
                        this.handleTransmuxComplete(v.data);
                        break;
                      }
                      case "flush": {
                        this.onFlush(v.data);
                        break;
                      }
                      case "workerLog":
                        O.logger[v.data.logType] && O.logger[v.data.logType](v.data.message);
                        break;
                      default: {
                        v.data = v.data || {}, v.data.frag = this.frag, v.data.id = this.id, f.trigger(v.event, v.data);
                        break;
                      }
                    }
                  }, I.configureTransmuxer = function(d) {
                    var v = this.worker, f = this.transmuxer;
                    v ? v.postMessage({ cmd: "configure", config: d }) : f && f.configure(d);
                  }, I.handleTransmuxComplete = function(d) {
                    d.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(d);
                  }, y;
                }();
              }, "./src/demux/transmuxer-worker.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => m2 });
                var j = N("./src/demux/transmuxer.ts"), R = N("./src/events.ts"), F = N("./src/utils/logger.ts"), O = N("./node_modules/eventemitter3/index.js"), x = N.n(O), k = N("./src/errors.ts");
                function m2(I) {
                  var S = new O.EventEmitter(), d = function(l, _) {
                    I.postMessage({ event: l, data: _ });
                  };
                  S.on(R.Events.FRAG_DECRYPTED, d), S.on(R.Events.ERROR, d);
                  var v = function() {
                    var l = function(i) {
                      var n = function(h) {
                        d("workerLog", { logType: i, message: h });
                      };
                      F.logger[i] = n;
                    };
                    for (var _ in F.logger)
                      l(_);
                  };
                  I.addEventListener("message", function(f) {
                    var l = f.data;
                    switch (l.cmd) {
                      case "init": {
                        var _ = JSON.parse(l.config);
                        I.transmuxer = new j.default(S, l.typeSupported, _, l.vendor, l.id), (0, F.enableLogs)(_.debug, l.id), v(), d("init", null);
                        break;
                      }
                      case "configure": {
                        I.transmuxer.configure(l.config);
                        break;
                      }
                      case "demux": {
                        var g = I.transmuxer.push(l.data, l.decryptdata, l.chunkMeta, l.state);
                        (0, j.isPromise)(g) ? (I.transmuxer.async = true, g.then(function(h) {
                          E(I, h);
                        }).catch(function(h) {
                          d(R.Events.ERROR, { type: k.ErrorTypes.MEDIA_ERROR, details: k.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: l.chunkMeta, fatal: false, error: h, err: h, reason: "transmuxer-worker push error" });
                        })) : (I.transmuxer.async = false, E(I, g));
                        break;
                      }
                      case "flush": {
                        var i = l.chunkMeta, n = I.transmuxer.flush(i), o = (0, j.isPromise)(n);
                        o || I.transmuxer.async ? ((0, j.isPromise)(n) || (n = Promise.resolve(n)), n.then(function(h) {
                          M(I, h, i);
                        }).catch(function(h) {
                          d(R.Events.ERROR, { type: k.ErrorTypes.MEDIA_ERROR, details: k.ErrorDetails.FRAG_PARSING_ERROR, chunkMeta: l.chunkMeta, fatal: false, error: h, err: h, reason: "transmuxer-worker flush error" });
                        })) : M(I, n, i);
                        break;
                      }
                      default:
                        break;
                    }
                  });
                }
                function E(I, S) {
                  if (y(S.remuxResult))
                    return false;
                  var d = [], v = S.remuxResult, f = v.audio, l = v.video;
                  return f && L(d, f), l && L(d, l), I.postMessage({ event: "transmuxComplete", data: S }, d), true;
                }
                function L(I, S) {
                  S.data1 && I.push(S.data1.buffer), S.data2 && I.push(S.data2.buffer);
                }
                function M(I, S, d) {
                  var v = S.reduce(function(f, l) {
                    return E(I, l) || f;
                  }, false);
                  v || I.postMessage({ event: "transmuxComplete", data: S[0] }), I.postMessage({ event: "flush", data: d });
                }
                function y(I) {
                  return !I.audio && !I.video && !I.text && !I.id3 && !I.initSegment;
                }
              }, "./src/demux/transmuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { TransmuxConfig: () => l, TransmuxState: () => _, default: () => S, isPromise: () => f });
                var j = N("./src/events.ts"), R = N("./src/errors.ts"), F = N("./src/crypt/decrypter.ts"), O = N("./src/demux/aacdemuxer.ts"), x = N("./src/demux/mp4demuxer.ts"), k = N("./src/demux/tsdemuxer.ts"), m2 = N("./src/demux/mp3demuxer.ts"), E = N("./src/remux/mp4-remuxer.ts"), L = N("./src/remux/passthrough-remuxer.ts"), M = N("./src/utils/logger.ts"), y;
                try {
                  y = self.performance.now.bind(self.performance);
                } catch (g) {
                  M.logger.debug("Unable to use Performance API on this environment"), y = self.Date.now;
                }
                var I = [{ demux: x.default, remux: L.default }, { demux: k.default, remux: E.default }, { demux: O.default, remux: E.default }, { demux: m2.default, remux: E.default }], S = function() {
                  function g(n, o, h, b, a) {
                    this.async = false, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = n, this.typeSupported = o, this.config = h, this.vendor = b, this.id = a;
                  }
                  var i = g.prototype;
                  return i.configure = function(o) {
                    this.transmuxConfig = o, this.decrypter && this.decrypter.reset();
                  }, i.push = function(o, h, b, a) {
                    var c = this, s = b.transmuxing;
                    s.executeStart = y();
                    var p = new Uint8Array(o), D = this.currentTransmuxState, A = this.transmuxConfig;
                    a && (this.currentTransmuxState = a);
                    var w = a || D, B = w.contiguous, U = w.discontinuity, K = w.trackSwitch, W = w.accurateTimeOffset, H = w.timeOffset, V = w.initSegmentChange, z = A.audioCodec, Q = A.videoCodec, q = A.defaultInitPts, ee = A.duration, ae = A.initSegmentData, ne = d(p, h);
                    if (ne && ne.method === "AES-128") {
                      var ue = this.getDecrypter();
                      if (ue.isSync()) {
                        var ye = ue.softwareDecrypt(p, ne.key.buffer, ne.iv.buffer);
                        if (!ye)
                          return s.executeEnd = y(), v(b);
                        p = new Uint8Array(ye);
                      } else
                        return this.decryptionPromise = ue.webCryptoDecrypt(p, ne.key.buffer, ne.iv.buffer).then(function(Te) {
                          var fe = c.push(Te, null, b);
                          return c.decryptionPromise = null, fe;
                        }), this.decryptionPromise;
                    }
                    var be = this.needsProbing(U, K);
                    be && this.configureTransmuxer(p), (U || K || V || be) && this.resetInitSegment(ae, z, Q, ee, h), (U || V || be) && this.resetInitialTimestamp(q), B || this.resetContiguity();
                    var me = this.transmux(p, ne, H, W, b), Se = this.currentTransmuxState;
                    return Se.contiguous = true, Se.discontinuity = false, Se.trackSwitch = false, s.executeEnd = y(), me;
                  }, i.flush = function(o) {
                    var h = this, b = o.transmuxing;
                    b.executeStart = y();
                    var a = this.decrypter, c = this.currentTransmuxState, s = this.decryptionPromise;
                    if (s)
                      return s.then(function() {
                        return h.flush(o);
                      });
                    var p = [], D = c.timeOffset;
                    if (a) {
                      var A = a.flush();
                      A && p.push(this.push(A, null, o));
                    }
                    var w = this.demuxer, B = this.remuxer;
                    if (!w || !B)
                      return this.observer.emit(j.Events.ERROR, j.Events.ERROR, { type: R.ErrorTypes.MEDIA_ERROR, details: R.ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: "no demux matching with content found" }), b.executeEnd = y(), [v(o)];
                    var U = w.flush(D);
                    return f(U) ? U.then(function(K) {
                      return h.flushRemux(p, K, o), p;
                    }) : (this.flushRemux(p, U, o), p);
                  }, i.flushRemux = function(o, h, b) {
                    var a = h.audioTrack, c = h.videoTrack, s = h.id3Track, p = h.textTrack, D = this.currentTransmuxState, A = D.accurateTimeOffset, w = D.timeOffset;
                    M.logger.log("[transmuxer.ts]: Flushed fragment " + b.sn + (b.part > -1 ? " p: " + b.part : "") + " of level " + b.level);
                    var B = this.remuxer.remux(a, c, s, p, w, A, true, this.id);
                    o.push({ remuxResult: B, chunkMeta: b }), b.transmuxing.executeEnd = y();
                  }, i.resetInitialTimestamp = function(o) {
                    var h = this.demuxer, b = this.remuxer;
                    !h || !b || (h.resetTimeStamp(o), b.resetTimeStamp(o));
                  }, i.resetContiguity = function() {
                    var o = this.demuxer, h = this.remuxer;
                    !o || !h || (o.resetContiguity(), h.resetNextTimestamp());
                  }, i.resetInitSegment = function(o, h, b, a, c) {
                    var s = this.demuxer, p = this.remuxer;
                    !s || !p || (s.resetInitSegment(o, h, b, a), p.resetInitSegment(o, h, b, c));
                  }, i.destroy = function() {
                    this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0);
                  }, i.transmux = function(o, h, b, a, c) {
                    var s;
                    return h && h.method === "SAMPLE-AES" ? s = this.transmuxSampleAes(o, h, b, a, c) : s = this.transmuxUnencrypted(o, b, a, c), s;
                  }, i.transmuxUnencrypted = function(o, h, b, a) {
                    var c = this.demuxer.demux(o, h, false, !this.config.progressive), s = c.audioTrack, p = c.videoTrack, D = c.id3Track, A = c.textTrack, w = this.remuxer.remux(s, p, D, A, h, b, false, this.id);
                    return { remuxResult: w, chunkMeta: a };
                  }, i.transmuxSampleAes = function(o, h, b, a, c) {
                    var s = this;
                    return this.demuxer.demuxSampleAes(o, h, b).then(function(p) {
                      var D = s.remuxer.remux(p.audioTrack, p.videoTrack, p.id3Track, p.textTrack, b, a, false, s.id);
                      return { remuxResult: D, chunkMeta: c };
                    });
                  }, i.configureTransmuxer = function(o) {
                    for (var h = this.config, b = this.observer, a = this.typeSupported, c = this.vendor, s, p = 0, D = I.length; p < D; p++)
                      if (I[p].demux.probe(o)) {
                        s = I[p];
                        break;
                      }
                    s || (M.logger.warn("Failed to find demuxer by probing frag, treating as mp4 passthrough"), s = { demux: x.default, remux: L.default });
                    var A = this.demuxer, w = this.remuxer, B = s.remux, U = s.demux;
                    (!w || !(w instanceof B)) && (this.remuxer = new B(b, h, a, c)), (!A || !(A instanceof U)) && (this.demuxer = new U(b, h, a), this.probe = U.probe);
                  }, i.needsProbing = function(o, h) {
                    return !this.demuxer || !this.remuxer || o || h;
                  }, i.getDecrypter = function() {
                    var o = this.decrypter;
                    return o || (o = this.decrypter = new F.default(this.config)), o;
                  }, g;
                }();
                function d(g, i) {
                  var n = null;
                  return g.byteLength > 0 && i != null && i.key != null && i.iv !== null && i.method != null && (n = i), n;
                }
                var v = function(i) {
                  return { remuxResult: {}, chunkMeta: i };
                };
                function f(g) {
                  return "then" in g && g.then instanceof Function;
                }
                var l = function(i, n, o, h, b) {
                  this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = i, this.videoCodec = n, this.initSegmentData = o, this.duration = h, this.defaultInitPts = b;
                }, _ = function(i, n, o, h, b, a) {
                  this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = i, this.contiguous = n, this.accurateTimeOffset = o, this.trackSwitch = h, this.timeOffset = b, this.initSegmentChange = a;
                };
              }, "./src/demux/tsdemuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => _ });
                var j = N("./src/demux/adts.ts"), R = N("./src/demux/mpegaudio.ts"), F = N("./src/demux/exp-golomb.ts"), O = N("./src/demux/sample-aes.ts"), x = N("./src/events.ts"), k = N("./src/utils/mp4-tools.ts"), m2 = N("./src/utils/logger.ts"), E = N("./src/errors.ts"), L = N("./src/types/demuxer.ts");
                function M() {
                  return M = Object.assign ? Object.assign.bind() : function(g) {
                    for (var i = 1; i < arguments.length; i++) {
                      var n = arguments[i];
                      for (var o in n)
                        Object.prototype.hasOwnProperty.call(n, o) && (g[o] = n[o]);
                    }
                    return g;
                  }, M.apply(this, arguments);
                }
                var y = 188, I = function() {
                  function g(n, o, h) {
                    this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = false, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._avcTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.observer = n, this.config = o, this.typeSupported = h;
                  }
                  g.probe = function(o) {
                    var h = g.syncOffset(o);
                    return h > 0 && m2.logger.warn("MPEG2-TS detected but first sync word found @ offset " + h), h !== -1;
                  }, g.syncOffset = function(o) {
                    for (var h = Math.min(y * 5, o.length - y * 2) + 1, b = 0; b < h; ) {
                      if (o[b] === 71 && o[b + y] === 71)
                        return b;
                      b++;
                    }
                    return -1;
                  }, g.createTrack = function(o, h) {
                    return { container: o === "video" || o === "audio" ? "video/mp2t" : void 0, type: o, id: k.RemuxerTrackIdConfig[o], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: o === "audio" ? h : void 0 };
                  };
                  var i = g.prototype;
                  return i.resetInitSegment = function(o, h, b, a) {
                    this.pmtParsed = false, this._pmtId = -1, this._avcTrack = g.createTrack("video"), this._audioTrack = g.createTrack("audio", a), this._id3Track = g.createTrack("id3"), this._txtTrack = g.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.avcSample = null, this.remainderData = null, this.audioCodec = h, this.videoCodec = b, this._duration = a;
                  }, i.resetTimeStamp = function() {
                  }, i.resetContiguity = function() {
                    var o = this._audioTrack, h = this._avcTrack, b = this._id3Track;
                    o && (o.pesData = null), h && (h.pesData = null), b && (b.pesData = null), this.aacOverFlow = null, this.avcSample = null, this.remainderData = null;
                  }, i.demux = function(o, h, b, a) {
                    b === void 0 && (b = false), a === void 0 && (a = false), b || (this.sampleAes = null);
                    var c, s = this._avcTrack, p = this._audioTrack, D = this._id3Track, A = this._txtTrack, w = s.pid, B = s.pesData, U = p.pid, K = D.pid, W = p.pesData, H = D.pesData, V = null, z = this.pmtParsed, Q = this._pmtId, q = o.length;
                    if (this.remainderData && (o = (0, k.appendUint8Array)(this.remainderData, o), q = o.length, this.remainderData = null), q < y && !a)
                      return this.remainderData = o, { audioTrack: p, videoTrack: s, id3Track: D, textTrack: A };
                    var ee = Math.max(0, g.syncOffset(o));
                    q -= (q - ee) % y, q < o.byteLength && !a && (this.remainderData = new Uint8Array(o.buffer, q, o.buffer.byteLength - q));
                    for (var ae = 0, ne = ee; ne < q; ne += y)
                      if (o[ne] === 71) {
                        var ue = !!(o[ne + 1] & 64), ye = ((o[ne + 1] & 31) << 8) + o[ne + 2], be = (o[ne + 3] & 48) >> 4, me = void 0;
                        if (be > 1) {
                          if (me = ne + 5 + o[ne + 4], me === ne + y)
                            continue;
                        } else
                          me = ne + 4;
                        switch (ye) {
                          case w:
                            ue && (B && (c = f(B)) && this.parseAVCPES(s, A, c, false), B = { data: [], size: 0 }), B && (B.data.push(o.subarray(me, ne + y)), B.size += ne + y - me);
                            break;
                          case U:
                            if (ue) {
                              if (W && (c = f(W)))
                                switch (p.segmentCodec) {
                                  case "aac":
                                    this.parseAACPES(p, c);
                                    break;
                                  case "mp3":
                                    this.parseMPEGPES(p, c);
                                    break;
                                }
                              W = { data: [], size: 0 };
                            }
                            W && (W.data.push(o.subarray(me, ne + y)), W.size += ne + y - me);
                            break;
                          case K:
                            ue && (H && (c = f(H)) && this.parseID3PES(D, c), H = { data: [], size: 0 }), H && (H.data.push(o.subarray(me, ne + y)), H.size += ne + y - me);
                            break;
                          case 0:
                            ue && (me += o[me] + 1), Q = this._pmtId = d(o, me);
                            break;
                          case Q: {
                            ue && (me += o[me] + 1);
                            var Se = v(o, me, this.typeSupported, b);
                            w = Se.avc, w > 0 && (s.pid = w), U = Se.audio, U > 0 && (p.pid = U, p.segmentCodec = Se.segmentCodec), K = Se.id3, K > 0 && (D.pid = K), V !== null && !z && (m2.logger.log("unknown PID '" + V + "' in TS found"), V = null, ne = ee - 188), z = this.pmtParsed = true;
                            break;
                          }
                          case 17:
                          case 8191:
                            break;
                          default:
                            V = ye;
                            break;
                        }
                      } else
                        ae++;
                    ae > 0 && this.observer.emit(x.Events.ERROR, x.Events.ERROR, { type: E.ErrorTypes.MEDIA_ERROR, details: E.ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: "Found " + ae + " TS packet/s that do not start with 0x47" }), s.pesData = B, p.pesData = W, D.pesData = H;
                    var Te = { audioTrack: p, videoTrack: s, id3Track: D, textTrack: A };
                    return a && this.extractRemainingSamples(Te), Te;
                  }, i.flush = function() {
                    var o = this.remainderData;
                    this.remainderData = null;
                    var h;
                    return o ? h = this.demux(o, -1, false, true) : h = { videoTrack: this._avcTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(h), this.sampleAes ? this.decrypt(h, this.sampleAes) : h;
                  }, i.extractRemainingSamples = function(o) {
                    var h = o.audioTrack, b = o.videoTrack, a = o.id3Track, c = o.textTrack, s = b.pesData, p = h.pesData, D = a.pesData, A;
                    if (s && (A = f(s)) ? (this.parseAVCPES(b, c, A, true), b.pesData = null) : b.pesData = s, p && (A = f(p))) {
                      switch (h.segmentCodec) {
                        case "aac":
                          this.parseAACPES(h, A);
                          break;
                        case "mp3":
                          this.parseMPEGPES(h, A);
                          break;
                      }
                      h.pesData = null;
                    } else
                      p != null && p.size && m2.logger.log("last AAC PES packet truncated,might overlap between fragments"), h.pesData = p;
                    D && (A = f(D)) ? (this.parseID3PES(a, A), a.pesData = null) : a.pesData = D;
                  }, i.demuxSampleAes = function(o, h, b) {
                    var a = this.demux(o, b, true, !this.config.progressive), c = this.sampleAes = new O.default(this.observer, this.config, h);
                    return this.decrypt(a, c);
                  }, i.decrypt = function(o, h) {
                    return new Promise(function(b) {
                      var a = o.audioTrack, c = o.videoTrack;
                      a.samples && a.segmentCodec === "aac" ? h.decryptAacSamples(a.samples, 0, function() {
                        c.samples ? h.decryptAvcSamples(c.samples, 0, 0, function() {
                          b(o);
                        }) : b(o);
                      }) : c.samples && h.decryptAvcSamples(c.samples, 0, 0, function() {
                        b(o);
                      });
                    });
                  }, i.destroy = function() {
                    this._duration = 0;
                  }, i.parseAVCPES = function(o, h, b, a) {
                    var c = this, s = this.parseAVCNALu(o, b.data), p = false, D = this.avcSample, A, w = false;
                    b.data = null, D && s.length && !o.audFound && (l(D, o), D = this.avcSample = S(false, b.pts, b.dts, "")), s.forEach(function(B) {
                      switch (B.type) {
                        case 1: {
                          A = true, D || (D = c.avcSample = S(true, b.pts, b.dts, "")), p && (D.debug += "NDR "), D.frame = true;
                          var U = B.data;
                          if (w && U.length > 4) {
                            var K = new F.default(U).readSliceType();
                            (K === 2 || K === 4 || K === 7 || K === 9) && (D.key = true);
                          }
                          break;
                        }
                        case 5:
                          A = true, D || (D = c.avcSample = S(true, b.pts, b.dts, "")), p && (D.debug += "IDR "), D.key = true, D.frame = true;
                          break;
                        case 6: {
                          A = true, p && D && (D.debug += "SEI "), (0, k.parseSEIMessageFromNALu)(B.data, 1, b.pts, h.samples);
                          break;
                        }
                        case 7:
                          if (A = true, w = true, p && D && (D.debug += "SPS "), !o.sps) {
                            var W = new F.default(B.data), H = W.readSPS();
                            o.width = H.width, o.height = H.height, o.pixelRatio = H.pixelRatio, o.sps = [B.data], o.duration = c._duration;
                            for (var V = B.data.subarray(1, 4), z = "avc1.", Q = 0; Q < 3; Q++) {
                              var q = V[Q].toString(16);
                              q.length < 2 && (q = "0" + q), z += q;
                            }
                            o.codec = z;
                          }
                          break;
                        case 8:
                          A = true, p && D && (D.debug += "PPS "), o.pps || (o.pps = [B.data]);
                          break;
                        case 9:
                          A = false, o.audFound = true, D && l(D, o), D = c.avcSample = S(false, b.pts, b.dts, p ? "AUD " : "");
                          break;
                        case 12:
                          A = true;
                          break;
                        default:
                          A = false, D && (D.debug += "unknown NAL " + B.type + " ");
                          break;
                      }
                      if (D && A) {
                        var ee = D.units;
                        ee.push(B);
                      }
                    }), a && D && (l(D, o), this.avcSample = null);
                  }, i.getLastNalUnit = function(o) {
                    var h, b = this.avcSample, a;
                    if ((!b || b.units.length === 0) && (b = o[o.length - 1]), (h = b) !== null && h !== void 0 && h.units) {
                      var c = b.units;
                      a = c[c.length - 1];
                    }
                    return a;
                  }, i.parseAVCNALu = function(o, h) {
                    var b = h.byteLength, a = o.naluState || 0, c = a, s = [], p = 0, D, A, w, B = -1, U = 0;
                    for (a === -1 && (B = 0, U = h[0] & 31, a = 0, p = 1); p < b; ) {
                      if (D = h[p++], !a) {
                        a = D ? 0 : 1;
                        continue;
                      }
                      if (a === 1) {
                        a = D ? 0 : 2;
                        continue;
                      }
                      if (!D)
                        a = 3;
                      else if (D === 1) {
                        if (B >= 0) {
                          var K = { data: h.subarray(B, p - a - 1), type: U };
                          s.push(K);
                        } else {
                          var W = this.getLastNalUnit(o.samples);
                          if (W && (c && p <= 4 - c && W.state && (W.data = W.data.subarray(0, W.data.byteLength - c)), A = p - a - 1, A > 0)) {
                            var H = new Uint8Array(W.data.byteLength + A);
                            H.set(W.data, 0), H.set(h.subarray(0, A), W.data.byteLength), W.data = H, W.state = 0;
                          }
                        }
                        p < b ? (w = h[p] & 31, B = p, U = w, a = 0) : a = -1;
                      } else
                        a = 0;
                    }
                    if (B >= 0 && a >= 0) {
                      var V = { data: h.subarray(B, b), type: U, state: a };
                      s.push(V);
                    }
                    if (s.length === 0) {
                      var z = this.getLastNalUnit(o.samples);
                      if (z) {
                        var Q = new Uint8Array(z.data.byteLength + h.byteLength);
                        Q.set(z.data, 0), Q.set(h, z.data.byteLength), z.data = Q;
                      }
                    }
                    return o.naluState = a, s;
                  }, i.parseAACPES = function(o, h) {
                    var b = 0, a = this.aacOverFlow, c = h.data;
                    if (a) {
                      this.aacOverFlow = null;
                      var s = a.missing, p = a.sample.unit.byteLength;
                      if (s === -1) {
                        var D = new Uint8Array(p + c.byteLength);
                        D.set(a.sample.unit, 0), D.set(c, p), c = D;
                      } else {
                        var A = p - s;
                        a.sample.unit.set(c.subarray(0, s), A), o.samples.push(a.sample), b = a.missing;
                      }
                    }
                    var w, B;
                    for (w = b, B = c.length; w < B - 1 && !j.isHeader(c, w); w++)
                      ;
                    if (w !== b) {
                      var U, K;
                      if (w < B - 1 ? (U = "AAC PES did not start with ADTS header,offset:" + w, K = false) : (U = "no ADTS header found in AAC PES", K = true), m2.logger.warn("parsing error:" + U), this.observer.emit(x.Events.ERROR, x.Events.ERROR, { type: E.ErrorTypes.MEDIA_ERROR, details: E.ErrorDetails.FRAG_PARSING_ERROR, fatal: K, reason: U }), K)
                        return;
                    }
                    j.initTrackConfig(o, this.observer, c, w, this.audioCodec);
                    var W;
                    if (h.pts !== void 0)
                      W = h.pts;
                    else if (a) {
                      var H = j.getFrameDuration(o.samplerate);
                      W = a.sample.pts + H;
                    } else {
                      m2.logger.warn("[tsdemuxer]: AAC PES unknown PTS");
                      return;
                    }
                    for (var V = 0, z; w < B; )
                      if (z = j.appendFrame(o, c, w, W, V), w += z.length, z.missing) {
                        this.aacOverFlow = z;
                        break;
                      } else
                        for (V++; w < B - 1 && !j.isHeader(c, w); w++)
                          ;
                  }, i.parseMPEGPES = function(o, h) {
                    var b = h.data, a = b.length, c = 0, s = 0, p = h.pts;
                    if (p === void 0) {
                      m2.logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
                      return;
                    }
                    for (; s < a; )
                      if (R.isHeader(b, s)) {
                        var D = R.appendFrame(o, b, s, p, c);
                        if (D)
                          s += D.length, c++;
                        else
                          break;
                      } else
                        s++;
                  }, i.parseID3PES = function(o, h) {
                    if (h.pts === void 0) {
                      m2.logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
                      return;
                    }
                    var b = M({}, h, { type: this._avcTrack ? L.MetadataSchema.emsg : L.MetadataSchema.audioId3, duration: Number.POSITIVE_INFINITY });
                    o.samples.push(b);
                  }, g;
                }();
                function S(g, i, n, o) {
                  return { key: g, frame: false, pts: i, dts: n, units: [], debug: o, length: 0 };
                }
                function d(g, i) {
                  return (g[i + 10] & 31) << 8 | g[i + 11];
                }
                function v(g, i, n, o) {
                  var h = { audio: -1, avc: -1, id3: -1, segmentCodec: "aac" }, b = (g[i + 1] & 15) << 8 | g[i + 2], a = i + 3 + b - 4, c = (g[i + 10] & 15) << 8 | g[i + 11];
                  for (i += 12 + c; i < a; ) {
                    var s = (g[i + 1] & 31) << 8 | g[i + 2];
                    switch (g[i]) {
                      case 207:
                        if (!o) {
                          m2.logger.log("ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream");
                          break;
                        }
                      case 15:
                        h.audio === -1 && (h.audio = s);
                        break;
                      case 21:
                        h.id3 === -1 && (h.id3 = s);
                        break;
                      case 219:
                        if (!o) {
                          m2.logger.log("H.264 with AES-128-CBC slice encryption found in unencrypted stream");
                          break;
                        }
                      case 27:
                        h.avc === -1 && (h.avc = s);
                        break;
                      case 3:
                      case 4:
                        n.mpeg !== true && n.mp3 !== true ? m2.logger.log("MPEG audio found, not supported in this browser") : h.audio === -1 && (h.audio = s, h.segmentCodec = "mp3");
                        break;
                      case 36:
                        m2.logger.warn("Unsupported HEVC stream type found");
                        break;
                      default:
                        break;
                    }
                    i += ((g[i + 3] & 15) << 8 | g[i + 4]) + 5;
                  }
                  return h;
                }
                function f(g) {
                  var i = 0, n, o, h, b, a, c = g.data;
                  if (!g || g.size === 0)
                    return null;
                  for (; c[0].length < 19 && c.length > 1; ) {
                    var s = new Uint8Array(c[0].length + c[1].length);
                    s.set(c[0]), s.set(c[1], c[0].length), c[0] = s, c.splice(1, 1);
                  }
                  n = c[0];
                  var p = (n[0] << 16) + (n[1] << 8) + n[2];
                  if (p === 1) {
                    if (o = (n[4] << 8) + n[5], o && o > g.size - 6)
                      return null;
                    var D = n[7];
                    D & 192 && (b = (n[9] & 14) * 536870912 + (n[10] & 255) * 4194304 + (n[11] & 254) * 16384 + (n[12] & 255) * 128 + (n[13] & 254) / 2, D & 64 ? (a = (n[14] & 14) * 536870912 + (n[15] & 255) * 4194304 + (n[16] & 254) * 16384 + (n[17] & 255) * 128 + (n[18] & 254) / 2, b - a > 60 * 9e4 && (m2.logger.warn(Math.round((b - a) / 9e4) + "s delta between PTS and DTS, align them"), b = a)) : a = b), h = n[8];
                    var A = h + 9;
                    if (g.size <= A)
                      return null;
                    g.size -= A;
                    for (var w = new Uint8Array(g.size), B = 0, U = c.length; B < U; B++) {
                      n = c[B];
                      var K = n.byteLength;
                      if (A)
                        if (A > K) {
                          A -= K;
                          continue;
                        } else
                          n = n.subarray(A), K -= A, A = 0;
                      w.set(n, i), i += K;
                    }
                    return o && (o -= h + 3), { data: w, pts: b, dts: a, len: o };
                  }
                  return null;
                }
                function l(g, i) {
                  if (g.units.length && g.frame) {
                    if (g.pts === void 0) {
                      var n = i.samples, o = n.length;
                      if (o) {
                        var h = n[o - 1];
                        g.pts = h.pts, g.dts = h.dts;
                      } else {
                        i.dropped++;
                        return;
                      }
                    }
                    i.samples.push(g);
                  }
                  g.debug.length && m2.logger.log(g.pts + "/" + g.dts + ":" + g.debug);
                }
                const _ = I;
              }, "./src/demux/webworkify-webpack.js": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => y });
                var j = function() {
                  var S = ENTRY_MODULE, d = {}, v = function l(_) {
                    var g = d[_];
                    if (g !== void 0)
                      return g.exports;
                    var i = d[_] = { exports: {} };
                    return S[_].call(i.exports, i, i.exports, l), i.exports;
                  };
                  v.m = S, function() {
                    v.n = function(l) {
                      var _ = l && l.__esModule ? function() {
                        return l.default;
                      } : function() {
                        return l;
                      };
                      return v.d(_, { a: _ }), _;
                    };
                  }(), function() {
                    v.d = function(l, _) {
                      for (var g in _)
                        v.o(_, g) && !v.o(l, g) && Object.defineProperty(l, g, { enumerable: true, get: _[g] });
                    };
                  }(), function() {
                    v.o = function(l, _) {
                      return Object.prototype.hasOwnProperty.call(l, _);
                    };
                  }(), function() {
                    v.r = function(l) {
                      typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(l, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(l, "__esModule", { value: true });
                    };
                  }();
                  var f = v(ENTRY_MODULE);
                  return f.default || f;
                }, R = j.toString().split("ENTRY_MODULE"), F = "[\\.|\\-|\\+|\\w|/|@]+", O = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?(" + F + ").*?\\)";
                function x(I) {
                  return (I + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
                }
                function k(I) {
                  return !isNaN(1 * I);
                }
                function m2(I, S, d) {
                  var v = {};
                  v[d] = [];
                  var f = S.toString().replace(/^"[^"]+"/, "function"), l = f.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/) || f.match(/^\(\w+,\s*\w+,\s*(\w+)\)\s?\=\s?\>/);
                  if (!l)
                    return v;
                  for (var _ = l[1], g = new RegExp("(\\\\n|\\W)" + x(_) + O, "g"), i; i = g.exec(f); )
                    i[3] !== "dll-reference" && v[d].push(i[3]);
                  for (g = new RegExp("\\(" + x(_) + '\\("(dll-reference\\s(' + F + '))"\\)\\)' + O, "g"); i = g.exec(f); )
                    I[i[2]] || (v[d].push(i[1]), I[i[2]] = N(i[1]).m), v[i[2]] = v[i[2]] || [], v[i[2]].push(i[4]);
                  for (var n = Object.keys(v), o = 0; o < n.length; o++)
                    for (var h = 0; h < v[n[o]].length; h++)
                      k(v[n[o]][h]) && (v[n[o]][h] = 1 * v[n[o]][h]);
                  return v;
                }
                function E(I) {
                  var S = Object.keys(I);
                  return S.reduce(function(d, v) {
                    return d || I[v].length > 0;
                  }, false);
                }
                function L(I, S) {
                  for (var d = { main: [S] }, v = { main: [] }, f = { main: {} }; E(d); )
                    for (var l = Object.keys(d), _ = 0; _ < l.length; _++) {
                      var g = l[_], i = d[g], n = i.pop();
                      if (f[g] = f[g] || {}, !(f[g][n] || !I[g][n])) {
                        f[g][n] = true, v[g] = v[g] || [], v[g].push(n);
                        for (var o = m2(I, I[g][n], g), h = Object.keys(o), b = 0; b < h.length; b++)
                          d[h[b]] = d[h[b]] || [], d[h[b]] = d[h[b]].concat(o[h[b]]);
                      }
                    }
                  return v;
                }
                function M(I, S, d, v) {
                  var f = I[v].map(function(l) {
                    return '"' + l + '": ' + S[v][l].toString().replace(/^"[^"]+"/, "function");
                  }).join(",");
                  return R[0] + "{" + f + "}" + R[1] + '"' + d + '"' + R[2];
                }
                function y(I, S) {
                  S = S || {};
                  var d = { main: N.m }, v = S.all ? { main: Object.keys(d.main) } : L(d, I), f = "";
                  Object.keys(v).filter(function(n) {
                    return n !== "main";
                  }).forEach(function(n) {
                    for (var o = 0; v[n][o]; )
                      o++;
                    v[n].push(o), d[n][o] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })", f = f + ("var " + n + " = (" + M(v, d, o, modules) + `)();
`);
                  }), f = f + ("new ((" + M(v, d, I, "main") + ")())(self);");
                  var l = new window.Blob([f], { type: "text/javascript" }), _ = window.URL || window.webkitURL || window.mozURL || window.msURL, g = _.createObjectURL(l), i = new window.Worker(g);
                  return i.objectURL = g, i;
                }
              }, "./src/errors.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { ErrorDetails: () => R, ErrorTypes: () => j });
                var j;
                (function(F) {
                  F.NETWORK_ERROR = "networkError", F.MEDIA_ERROR = "mediaError", F.KEY_SYSTEM_ERROR = "keySystemError", F.MUX_ERROR = "muxError", F.OTHER_ERROR = "otherError";
                })(j || (j = {}));
                var R;
                (function(F) {
                  F.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", F.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", F.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", F.KEY_SYSTEM_NO_CONFIGURED_LICENSE = "keySystemNoConfiguredLicense", F.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", F.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = "keySystemServerCertificateRequestFailed", F.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = "keySystemServerCertificateUpdateFailed", F.KEY_SYSTEM_SESSION_UPDATE_FAILED = "keySystemSessionUpdateFailed", F.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = "keySystemStatusOutputRestricted", F.KEY_SYSTEM_STATUS_INTERNAL_ERROR = "keySystemStatusInternalError", F.MANIFEST_LOAD_ERROR = "manifestLoadError", F.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", F.MANIFEST_PARSING_ERROR = "manifestParsingError", F.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", F.LEVEL_EMPTY_ERROR = "levelEmptyError", F.LEVEL_LOAD_ERROR = "levelLoadError", F.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", F.LEVEL_SWITCH_ERROR = "levelSwitchError", F.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", F.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", F.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", F.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", F.FRAG_LOAD_ERROR = "fragLoadError", F.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", F.FRAG_DECRYPT_ERROR = "fragDecryptError", F.FRAG_PARSING_ERROR = "fragParsingError", F.REMUX_ALLOC_ERROR = "remuxAllocError", F.KEY_LOAD_ERROR = "keyLoadError", F.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", F.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", F.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", F.BUFFER_APPEND_ERROR = "bufferAppendError", F.BUFFER_APPENDING_ERROR = "bufferAppendingError", F.BUFFER_STALLED_ERROR = "bufferStalledError", F.BUFFER_FULL_ERROR = "bufferFullError", F.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", F.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", F.INTERNAL_EXCEPTION = "internalException", F.INTERNAL_ABORTED = "aborted", F.UNKNOWN = "unknown";
                })(R || (R = {}));
              }, "./src/events.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { Events: () => j });
                var j;
                (function(R) {
                  R.MEDIA_ATTACHING = "hlsMediaAttaching", R.MEDIA_ATTACHED = "hlsMediaAttached", R.MEDIA_DETACHING = "hlsMediaDetaching", R.MEDIA_DETACHED = "hlsMediaDetached", R.BUFFER_RESET = "hlsBufferReset", R.BUFFER_CODECS = "hlsBufferCodecs", R.BUFFER_CREATED = "hlsBufferCreated", R.BUFFER_APPENDING = "hlsBufferAppending", R.BUFFER_APPENDED = "hlsBufferAppended", R.BUFFER_EOS = "hlsBufferEos", R.BUFFER_FLUSHING = "hlsBufferFlushing", R.BUFFER_FLUSHED = "hlsBufferFlushed", R.MANIFEST_LOADING = "hlsManifestLoading", R.MANIFEST_LOADED = "hlsManifestLoaded", R.MANIFEST_PARSED = "hlsManifestParsed", R.LEVEL_SWITCHING = "hlsLevelSwitching", R.LEVEL_SWITCHED = "hlsLevelSwitched", R.LEVEL_LOADING = "hlsLevelLoading", R.LEVEL_LOADED = "hlsLevelLoaded", R.LEVEL_UPDATED = "hlsLevelUpdated", R.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", R.LEVELS_UPDATED = "hlsLevelsUpdated", R.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", R.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", R.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", R.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", R.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", R.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", R.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", R.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", R.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", R.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", R.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", R.CUES_PARSED = "hlsCuesParsed", R.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", R.INIT_PTS_FOUND = "hlsInitPtsFound", R.FRAG_LOADING = "hlsFragLoading", R.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", R.FRAG_LOADED = "hlsFragLoaded", R.FRAG_DECRYPTED = "hlsFragDecrypted", R.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", R.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", R.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", R.FRAG_PARSED = "hlsFragParsed", R.FRAG_BUFFERED = "hlsFragBuffered", R.FRAG_CHANGED = "hlsFragChanged", R.FPS_DROP = "hlsFpsDrop", R.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", R.ERROR = "hlsError", R.DESTROYING = "hlsDestroying", R.KEY_LOADING = "hlsKeyLoading", R.KEY_LOADED = "hlsKeyLoaded", R.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", R.BACK_BUFFER_REACHED = "hlsBackBufferReached";
                })(j || (j = {}));
              }, "./src/hls.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => o });
                var j = N("./node_modules/url-toolkit/src/url-toolkit.js"), R = N.n(j), F = N("./src/loader/playlist-loader.ts"), O = N("./src/controller/id3-track-controller.ts"), x = N("./src/controller/latency-controller.ts"), k = N("./src/controller/level-controller.ts"), m2 = N("./src/controller/fragment-tracker.ts"), E = N("./src/loader/key-loader.ts"), L = N("./src/controller/stream-controller.ts"), M = N("./src/is-supported.ts"), y = N("./src/utils/logger.ts"), I = N("./src/config.ts"), S = N("./node_modules/eventemitter3/index.js"), d = N.n(S), v = N("./src/events.ts"), f = N("./src/errors.ts"), l = N("./src/types/level.ts");
                function _(h, b) {
                  for (var a = 0; a < b.length; a++) {
                    var c = b[a];
                    c.enumerable = c.enumerable || false, c.configurable = true, "value" in c && (c.writable = true), Object.defineProperty(h, i(c.key), c);
                  }
                }
                function g(h, b, a) {
                  return b && _(h.prototype, b), a && _(h, a), Object.defineProperty(h, "prototype", { writable: false }), h;
                }
                function i(h) {
                  var b = n(h, "string");
                  return typeof b == "symbol" ? b : String(b);
                }
                function n(h, b) {
                  if (typeof h != "object" || h === null)
                    return h;
                  var a = h[Symbol.toPrimitive];
                  if (a !== void 0) {
                    var c = a.call(h, b || "default");
                    if (typeof c != "object")
                      return c;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (b === "string" ? String : Number)(h);
                }
                var o = function() {
                  h.isSupported = function() {
                    return (0, M.isSupported)();
                  };
                  function h(a) {
                    a === void 0 && (a = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this._emitter = new S.EventEmitter(), this._autoLevelCapping = void 0, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null;
                    var c = this.config = (0, I.mergeConfig)(h.DefaultConfig, a);
                    this.userConfig = a, (0, y.enableLogs)(c.debug, "Hls instance"), this._autoLevelCapping = -1, c.progressive && (0, I.enableStreamingMode)(c);
                    var s = c.abrController, p = c.bufferController, D = c.capLevelController, A = c.fpsController, w = this.abrController = new s(this), B = this.bufferController = new p(this), U = this.capLevelController = new D(this), K = new A(this), W = new F.default(this), H = new O.default(this), V = this.levelController = new k.default(this), z = new m2.FragmentTracker(this), Q = new E.default(this.config), q = this.streamController = new L.default(this, z, Q);
                    U.setStreamController(q), K.setStreamController(q);
                    var ee = [W, V, q];
                    this.networkControllers = ee;
                    var ae = [w, B, U, K, H, z];
                    this.audioTrackController = this.createController(c.audioTrackController, ee);
                    var ne = c.audioStreamController;
                    ne && ee.push(new ne(this, z, Q)), this.subtitleTrackController = this.createController(c.subtitleTrackController, ee);
                    var ue = c.subtitleStreamController;
                    ue && ee.push(new ue(this, z, Q)), this.createController(c.timelineController, ae), Q.emeController = this.emeController = this.createController(c.emeController, ae), this.cmcdController = this.createController(c.cmcdController, ae), this.latencyController = this.createController(x.default, ae), this.coreComponents = ae;
                  }
                  var b = h.prototype;
                  return b.createController = function(c, s) {
                    if (c) {
                      var p = new c(this);
                      return s && s.push(p), p;
                    }
                    return null;
                  }, b.on = function(c, s, p) {
                    p === void 0 && (p = this), this._emitter.on(c, s, p);
                  }, b.once = function(c, s, p) {
                    p === void 0 && (p = this), this._emitter.once(c, s, p);
                  }, b.removeAllListeners = function(c) {
                    this._emitter.removeAllListeners(c);
                  }, b.off = function(c, s, p, D) {
                    p === void 0 && (p = this), this._emitter.off(c, s, p, D);
                  }, b.listeners = function(c) {
                    return this._emitter.listeners(c);
                  }, b.emit = function(c, s, p) {
                    return this._emitter.emit(c, s, p);
                  }, b.trigger = function(c, s) {
                    if (this.config.debug)
                      return this.emit(c, c, s);
                    try {
                      return this.emit(c, c, s);
                    } catch (p) {
                      y.logger.error("An internal error happened while handling event " + c + '. Error message: "' + p.message + '". Here is a stacktrace:', p), this.trigger(v.Events.ERROR, { type: f.ErrorTypes.OTHER_ERROR, details: f.ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: c, error: p });
                    }
                    return false;
                  }, b.listenerCount = function(c) {
                    return this._emitter.listenerCount(c);
                  }, b.destroy = function() {
                    y.logger.log("destroy"), this.trigger(v.Events.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(c) {
                      return c.destroy();
                    }), this.networkControllers.length = 0, this.coreComponents.forEach(function(c) {
                      return c.destroy();
                    }), this.coreComponents.length = 0;
                  }, b.attachMedia = function(c) {
                    y.logger.log("attachMedia"), this._media = c, this.trigger(v.Events.MEDIA_ATTACHING, { media: c });
                  }, b.detachMedia = function() {
                    y.logger.log("detachMedia"), this.trigger(v.Events.MEDIA_DETACHING, void 0), this._media = null;
                  }, b.loadSource = function(c) {
                    this.stopLoad();
                    var s = this.media, p = this.url, D = this.url = j.buildAbsoluteURL(self.location.href, c, { alwaysNormalize: true });
                    y.logger.log("loadSource:" + D), s && p && p !== D && this.bufferController.hasSourceTypes() && (this.detachMedia(), this.attachMedia(s)), this.trigger(v.Events.MANIFEST_LOADING, { url: c });
                  }, b.startLoad = function(c) {
                    c === void 0 && (c = -1), y.logger.log("startLoad(" + c + ")"), this.networkControllers.forEach(function(s) {
                      s.startLoad(c);
                    });
                  }, b.stopLoad = function() {
                    y.logger.log("stopLoad"), this.networkControllers.forEach(function(c) {
                      c.stopLoad();
                    });
                  }, b.swapAudioCodec = function() {
                    y.logger.log("swapAudioCodec"), this.streamController.swapAudioCodec();
                  }, b.recoverMediaError = function() {
                    y.logger.log("recoverMediaError");
                    var c = this._media;
                    this.detachMedia(), c && this.attachMedia(c);
                  }, b.removeLevel = function(c, s) {
                    s === void 0 && (s = 0), this.levelController.removeLevel(c, s);
                  }, g(h, [{ key: "levels", get: function() {
                    var c = this.levelController.levels;
                    return c || [];
                  } }, { key: "currentLevel", get: function() {
                    return this.streamController.currentLevel;
                  }, set: function(c) {
                    y.logger.log("set currentLevel:" + c), this.loadLevel = c, this.abrController.clearTimer(), this.streamController.immediateLevelSwitch();
                  } }, { key: "nextLevel", get: function() {
                    return this.streamController.nextLevel;
                  }, set: function(c) {
                    y.logger.log("set nextLevel:" + c), this.levelController.manualLevel = c, this.streamController.nextLevelSwitch();
                  } }, { key: "loadLevel", get: function() {
                    return this.levelController.level;
                  }, set: function(c) {
                    y.logger.log("set loadLevel:" + c), this.levelController.manualLevel = c;
                  } }, { key: "nextLoadLevel", get: function() {
                    return this.levelController.nextLoadLevel;
                  }, set: function(c) {
                    this.levelController.nextLoadLevel = c;
                  } }, { key: "firstLevel", get: function() {
                    return Math.max(this.levelController.firstLevel, this.minAutoLevel);
                  }, set: function(c) {
                    y.logger.log("set firstLevel:" + c), this.levelController.firstLevel = c;
                  } }, { key: "startLevel", get: function() {
                    return this.levelController.startLevel;
                  }, set: function(c) {
                    y.logger.log("set startLevel:" + c), c !== -1 && (c = Math.max(c, this.minAutoLevel)), this.levelController.startLevel = c;
                  } }, { key: "capLevelToPlayerSize", get: function() {
                    return this.config.capLevelToPlayerSize;
                  }, set: function(c) {
                    var s = !!c;
                    s !== this.config.capLevelToPlayerSize && (s ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = s);
                  } }, { key: "autoLevelCapping", get: function() {
                    return this._autoLevelCapping;
                  }, set: function(c) {
                    this._autoLevelCapping !== c && (y.logger.log("set autoLevelCapping:" + c), this._autoLevelCapping = c);
                  } }, { key: "bandwidthEstimate", get: function() {
                    var c = this.abrController.bwEstimator;
                    return c ? c.getEstimate() : NaN;
                  } }, { key: "maxHdcpLevel", get: function() {
                    return this._maxHdcpLevel;
                  }, set: function(c) {
                    l.HdcpLevels.indexOf(c) > -1 && (this._maxHdcpLevel = c);
                  } }, { key: "autoLevelEnabled", get: function() {
                    return this.levelController.manualLevel === -1;
                  } }, { key: "manualLevel", get: function() {
                    return this.levelController.manualLevel;
                  } }, { key: "minAutoLevel", get: function() {
                    var c = this.levels, s = this.config.minAutoBitrate;
                    if (!c)
                      return 0;
                    for (var p = c.length, D = 0; D < p; D++)
                      if (c[D].maxBitrate >= s)
                        return D;
                    return 0;
                  } }, { key: "maxAutoLevel", get: function() {
                    var c = this.levels, s = this.autoLevelCapping, p = this.maxHdcpLevel, D;
                    if (s === -1 && c && c.length ? D = c.length - 1 : D = s, p)
                      for (var A = D; A--; ) {
                        var w = c[A].attrs["HDCP-LEVEL"];
                        if (w && w <= p)
                          return A;
                      }
                    return D;
                  } }, { key: "nextAutoLevel", get: function() {
                    return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
                  }, set: function(c) {
                    this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, c);
                  } }, { key: "playingDate", get: function() {
                    return this.streamController.currentProgramDateTime;
                  } }, { key: "mainForwardBufferInfo", get: function() {
                    return this.streamController.getMainFwdBufferInfo();
                  } }, { key: "audioTracks", get: function() {
                    var c = this.audioTrackController;
                    return c ? c.audioTracks : [];
                  } }, { key: "audioTrack", get: function() {
                    var c = this.audioTrackController;
                    return c ? c.audioTrack : -1;
                  }, set: function(c) {
                    var s = this.audioTrackController;
                    s && (s.audioTrack = c);
                  } }, { key: "subtitleTracks", get: function() {
                    var c = this.subtitleTrackController;
                    return c ? c.subtitleTracks : [];
                  } }, { key: "subtitleTrack", get: function() {
                    var c = this.subtitleTrackController;
                    return c ? c.subtitleTrack : -1;
                  }, set: function(c) {
                    var s = this.subtitleTrackController;
                    s && (s.subtitleTrack = c);
                  } }, { key: "media", get: function() {
                    return this._media;
                  } }, { key: "subtitleDisplay", get: function() {
                    var c = this.subtitleTrackController;
                    return c ? c.subtitleDisplay : false;
                  }, set: function(c) {
                    var s = this.subtitleTrackController;
                    s && (s.subtitleDisplay = c);
                  } }, { key: "lowLatencyMode", get: function() {
                    return this.config.lowLatencyMode;
                  }, set: function(c) {
                    this.config.lowLatencyMode = c;
                  } }, { key: "liveSyncPosition", get: function() {
                    return this.latencyController.liveSyncPosition;
                  } }, { key: "latency", get: function() {
                    return this.latencyController.latency;
                  } }, { key: "maxLatency", get: function() {
                    return this.latencyController.maxLatency;
                  } }, { key: "targetLatency", get: function() {
                    return this.latencyController.targetLatency;
                  } }, { key: "drift", get: function() {
                    return this.latencyController.drift;
                  } }, { key: "forceStartLoad", get: function() {
                    return this.streamController.forceStartLoad;
                  } }], [{ key: "version", get: function() {
                    return "1.3.1";
                  } }, { key: "Events", get: function() {
                    return v.Events;
                  } }, { key: "ErrorTypes", get: function() {
                    return f.ErrorTypes;
                  } }, { key: "ErrorDetails", get: function() {
                    return f.ErrorDetails;
                  } }, { key: "DefaultConfig", get: function() {
                    return h.defaultConfig ? h.defaultConfig : I.hlsDefaultConfig;
                  }, set: function(c) {
                    h.defaultConfig = c;
                  } }]), h;
                }();
                o.defaultConfig = void 0;
              }, "./src/is-supported.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { changeTypeSupported: () => O, isSupported: () => F });
                var j = N("./src/utils/mediasource-helper.ts");
                function R() {
                  return self.SourceBuffer || self.WebKitSourceBuffer;
                }
                function F() {
                  var x = (0, j.getMediaSource)();
                  if (!x)
                    return false;
                  var k = R(), m2 = x && typeof x.isTypeSupported == "function" && x.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'), E = !k || k.prototype && typeof k.prototype.appendBuffer == "function" && typeof k.prototype.remove == "function";
                  return !!m2 && !!E;
                }
                function O() {
                  var x, k = R();
                  return typeof (k == null || (x = k.prototype) === null || x === void 0 ? void 0 : x.changeType) == "function";
                }
              }, "./src/loader/date-range.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { DateRange: () => M, DateRangeAttribute: () => L });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/attr-list.ts"), F = N("./src/utils/logger.ts");
                function O() {
                  return O = Object.assign ? Object.assign.bind() : function(y) {
                    for (var I = 1; I < arguments.length; I++) {
                      var S = arguments[I];
                      for (var d in S)
                        Object.prototype.hasOwnProperty.call(S, d) && (y[d] = S[d]);
                    }
                    return y;
                  }, O.apply(this, arguments);
                }
                function x(y, I) {
                  for (var S = 0; S < I.length; S++) {
                    var d = I[S];
                    d.enumerable = d.enumerable || false, d.configurable = true, "value" in d && (d.writable = true), Object.defineProperty(y, m2(d.key), d);
                  }
                }
                function k(y, I, S) {
                  return I && x(y.prototype, I), S && x(y, S), Object.defineProperty(y, "prototype", { writable: false }), y;
                }
                function m2(y) {
                  var I = E(y, "string");
                  return typeof I == "symbol" ? I : String(I);
                }
                function E(y, I) {
                  if (typeof y != "object" || y === null)
                    return y;
                  var S = y[Symbol.toPrimitive];
                  if (S !== void 0) {
                    var d = S.call(y, I || "default");
                    if (typeof d != "object")
                      return d;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (I === "string" ? String : Number)(y);
                }
                var L;
                (function(y) {
                  y.ID = "ID", y.CLASS = "CLASS", y.START_DATE = "START-DATE", y.DURATION = "DURATION", y.END_DATE = "END-DATE", y.END_ON_NEXT = "END-ON-NEXT", y.PLANNED_DURATION = "PLANNED-DURATION", y.SCTE35_OUT = "SCTE35-OUT", y.SCTE35_IN = "SCTE35-IN";
                })(L || (L = {}));
                var M = function() {
                  function y(I, S) {
                    if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, S) {
                      var d = S.attr;
                      for (var v in d)
                        if (Object.prototype.hasOwnProperty.call(I, v) && I[v] !== d[v]) {
                          F.logger.warn('DATERANGE tag attribute: "' + v + '" does not match for tags with ID: "' + I.ID + '"'), this._badValueForSameId = v;
                          break;
                        }
                      I = O(new R.AttrList({}), d, I);
                    }
                    if (this.attr = I, this._startDate = new Date(I[L.START_DATE]), L.END_DATE in this.attr) {
                      var f = new Date(this.attr[L.END_DATE]);
                      (0, j.isFiniteNumber)(f.getTime()) && (this._endDate = f);
                    }
                  }
                  return k(y, [{ key: "id", get: function() {
                    return this.attr.ID;
                  } }, { key: "class", get: function() {
                    return this.attr.CLASS;
                  } }, { key: "startDate", get: function() {
                    return this._startDate;
                  } }, { key: "endDate", get: function() {
                    if (this._endDate)
                      return this._endDate;
                    var S = this.duration;
                    return S !== null ? new Date(this._startDate.getTime() + S * 1e3) : null;
                  } }, { key: "duration", get: function() {
                    if (L.DURATION in this.attr) {
                      var S = this.attr.decimalFloatingPoint(L.DURATION);
                      if ((0, j.isFiniteNumber)(S))
                        return S;
                    } else if (this._endDate)
                      return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
                    return null;
                  } }, { key: "plannedDuration", get: function() {
                    return L.PLANNED_DURATION in this.attr ? this.attr.decimalFloatingPoint(L.PLANNED_DURATION) : null;
                  } }, { key: "endOnNext", get: function() {
                    return this.attr.bool(L.END_ON_NEXT);
                  } }, { key: "isValid", get: function() {
                    return !!this.id && !this._badValueForSameId && (0, j.isFiniteNumber)(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class);
                  } }]), y;
                }();
              }, "./src/loader/fragment-loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { LoadError: () => S, default: () => y });
                var j = N("./src/polyfills/number.ts"), R = N("./src/errors.ts");
                function F(d, v) {
                  d.prototype = Object.create(v.prototype), d.prototype.constructor = d, E(d, v);
                }
                function O(d) {
                  var v = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
                  return O = function(l) {
                    if (l === null || !m2(l))
                      return l;
                    if (typeof l != "function")
                      throw new TypeError("Super expression must either be null or a function");
                    if (typeof v != "undefined") {
                      if (v.has(l))
                        return v.get(l);
                      v.set(l, _);
                    }
                    function _() {
                      return x(l, arguments, L(this).constructor);
                    }
                    return _.prototype = Object.create(l.prototype, { constructor: { value: _, enumerable: false, writable: true, configurable: true } }), E(_, l);
                  }, O(d);
                }
                function x(d, v, f) {
                  return k() ? x = Reflect.construct.bind() : x = function(_, g, i) {
                    var n = [null];
                    n.push.apply(n, g);
                    var o = Function.bind.apply(_, n), h = new o();
                    return i && E(h, i.prototype), h;
                  }, x.apply(null, arguments);
                }
                function k() {
                  if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
                    return false;
                  if (typeof Proxy == "function")
                    return true;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                  } catch (d) {
                    return false;
                  }
                }
                function m2(d) {
                  return Function.toString.call(d).indexOf("[native code]") !== -1;
                }
                function E(d, v) {
                  return E = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(l, _) {
                    return l.__proto__ = _, l;
                  }, E(d, v);
                }
                function L(d) {
                  return L = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(f) {
                    return f.__proto__ || Object.getPrototypeOf(f);
                  }, L(d);
                }
                var M = Math.pow(2, 17), y = function() {
                  function d(f) {
                    this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = f;
                  }
                  var v = d.prototype;
                  return v.destroy = function() {
                    this.loader && (this.loader.destroy(), this.loader = null);
                  }, v.abort = function() {
                    this.loader && this.loader.abort();
                  }, v.load = function(l, _) {
                    var g = this, i = l.url;
                    if (!i)
                      return Promise.reject(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: l, networkDetails: null }, "Fragment does not have a " + (i ? "part list" : "url")));
                    this.abort();
                    var n = this.config, o = n.fLoader, h = n.loader;
                    return new Promise(function(b, a) {
                      g.loader && g.loader.destroy();
                      var c = g.loader = l.loader = o ? new o(n) : new h(n), s = I(l), p = { timeout: n.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n.fragLoadingMaxRetryTimeout, highWaterMark: l.sn === "initSegment" ? 1 / 0 : M };
                      l.stats = c.stats, c.load(s, p, { onSuccess: function(A, w, B, U) {
                        g.resetLoader(l, c);
                        var K = A.data;
                        B.resetIV && l.decryptdata && (l.decryptdata.iv = new Uint8Array(K.slice(0, 16)), K = K.slice(16)), b({ frag: l, part: null, payload: K, networkDetails: U });
                      }, onError: function(A, w, B) {
                        g.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: l, response: A, networkDetails: B }));
                      }, onAbort: function(A, w, B) {
                        g.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: l, networkDetails: B }));
                      }, onTimeout: function(A, w, B) {
                        g.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: l, networkDetails: B }));
                      }, onProgress: function(A, w, B, U) {
                        _ && _({ frag: l, part: null, payload: B, networkDetails: U });
                      } });
                    });
                  }, v.loadPart = function(l, _, g) {
                    var i = this;
                    this.abort();
                    var n = this.config, o = n.fLoader, h = n.loader;
                    return new Promise(function(b, a) {
                      i.loader && i.loader.destroy();
                      var c = i.loader = l.loader = o ? new o(n) : new h(n), s = I(l, _), p = { timeout: n.fragLoadingTimeOut, maxRetry: 0, retryDelay: 0, maxRetryDelay: n.fragLoadingMaxRetryTimeout, highWaterMark: M };
                      _.stats = c.stats, c.load(s, p, { onSuccess: function(A, w, B, U) {
                        i.resetLoader(l, c), i.updateStatsFromPart(l, _);
                        var K = { frag: l, part: _, payload: A.data, networkDetails: U };
                        g(K), b(K);
                      }, onError: function(A, w, B) {
                        i.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: l, part: _, response: A, networkDetails: B }));
                      }, onAbort: function(A, w, B) {
                        l.stats.aborted = _.stats.aborted, i.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.INTERNAL_ABORTED, fatal: false, frag: l, part: _, networkDetails: B }));
                      }, onTimeout: function(A, w, B) {
                        i.resetLoader(l, c), a(new S({ type: R.ErrorTypes.NETWORK_ERROR, details: R.ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: l, part: _, networkDetails: B }));
                      } });
                    });
                  }, v.updateStatsFromPart = function(l, _) {
                    var g = l.stats, i = _.stats, n = i.total;
                    if (g.loaded += i.loaded, n) {
                      var o = Math.round(l.duration / _.duration), h = Math.min(Math.round(g.loaded / n), o), b = o - h, a = b * Math.round(g.loaded / h);
                      g.total = g.loaded + a;
                    } else
                      g.total = Math.max(g.loaded, g.total);
                    var c = g.loading, s = i.loading;
                    c.start ? c.first += s.first - s.start : (c.start = s.start, c.first = s.first), c.end = s.end;
                  }, v.resetLoader = function(l, _) {
                    l.loader = null, this.loader === _ && (self.clearTimeout(this.partLoadTimeout), this.loader = null), _.destroy();
                  }, d;
                }();
                function I(d, v) {
                  v === void 0 && (v = null);
                  var f = v || d, l = { frag: d, part: v, responseType: "arraybuffer", url: f.url, headers: {}, rangeStart: 0, rangeEnd: 0 }, _ = f.byteRangeStartOffset, g = f.byteRangeEndOffset;
                  if ((0, j.isFiniteNumber)(_) && (0, j.isFiniteNumber)(g)) {
                    var i, n = _, o = g;
                    if (d.sn === "initSegment" && ((i = d.decryptdata) === null || i === void 0 ? void 0 : i.method) === "AES-128") {
                      var h = g - _;
                      h % 16 && (o = g + (16 - h % 16)), _ !== 0 && (l.resetIV = true, n = _ - 16);
                    }
                    l.rangeStart = n, l.rangeEnd = o;
                  }
                  return l;
                }
                var S = function(d) {
                  F(v, d);
                  function v(f) {
                    for (var l, _ = arguments.length, g = new Array(_ > 1 ? _ - 1 : 0), i = 1; i < _; i++)
                      g[i - 1] = arguments[i];
                    return l = d.call.apply(d, [this].concat(g)) || this, l.data = void 0, l.data = f, l;
                  }
                  return v;
                }(O(Error));
              }, "./src/loader/fragment.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { BaseSegment: () => I, ElementaryStreamTypes: () => y, Fragment: () => S, Part: () => d });
                var j = N("./src/polyfills/number.ts"), R = N("./node_modules/url-toolkit/src/url-toolkit.js"), F = N.n(R), O = N("./src/loader/load-stats.ts");
                function x(v, f) {
                  v.prototype = Object.create(f.prototype), v.prototype.constructor = v, k(v, f);
                }
                function k(v, f) {
                  return k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(_, g) {
                    return _.__proto__ = g, _;
                  }, k(v, f);
                }
                function m2(v, f) {
                  for (var l = 0; l < f.length; l++) {
                    var _ = f[l];
                    _.enumerable = _.enumerable || false, _.configurable = true, "value" in _ && (_.writable = true), Object.defineProperty(v, L(_.key), _);
                  }
                }
                function E(v, f, l) {
                  return f && m2(v.prototype, f), l && m2(v, l), Object.defineProperty(v, "prototype", { writable: false }), v;
                }
                function L(v) {
                  var f = M(v, "string");
                  return typeof f == "symbol" ? f : String(f);
                }
                function M(v, f) {
                  if (typeof v != "object" || v === null)
                    return v;
                  var l = v[Symbol.toPrimitive];
                  if (l !== void 0) {
                    var _ = l.call(v, f || "default");
                    if (typeof _ != "object")
                      return _;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (f === "string" ? String : Number)(v);
                }
                var y;
                (function(v) {
                  v.AUDIO = "audio", v.VIDEO = "video", v.AUDIOVIDEO = "audiovideo";
                })(y || (y = {}));
                var I = function() {
                  function v(l) {
                    var _;
                    this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = (_ = {}, _[y.AUDIO] = null, _[y.VIDEO] = null, _[y.AUDIOVIDEO] = null, _), this.baseurl = l;
                  }
                  var f = v.prototype;
                  return f.setByteRange = function(_, g) {
                    var i = _.split("@", 2), n = [];
                    i.length === 1 ? n[0] = g ? g.byteRangeEndOffset : 0 : n[0] = parseInt(i[1]), n[1] = parseInt(i[0]) + n[0], this._byteRange = n;
                  }, E(v, [{ key: "byteRange", get: function() {
                    return this._byteRange ? this._byteRange : [];
                  } }, { key: "byteRangeStartOffset", get: function() {
                    return this.byteRange[0];
                  } }, { key: "byteRangeEndOffset", get: function() {
                    return this.byteRange[1];
                  } }, { key: "url", get: function() {
                    return !this._url && this.baseurl && this.relurl && (this._url = (0, R.buildAbsoluteURL)(this.baseurl, this.relurl, { alwaysNormalize: true })), this._url || "";
                  }, set: function(_) {
                    this._url = _;
                  } }]), v;
                }(), S = function(v) {
                  x(f, v);
                  function f(_, g) {
                    var i;
                    return i = v.call(this, g) || this, i._decryptdata = null, i.rawProgramDateTime = null, i.programDateTime = null, i.tagList = [], i.duration = 0, i.sn = 0, i.levelkeys = void 0, i.type = void 0, i.loader = null, i.keyLoader = null, i.level = -1, i.cc = 0, i.startPTS = void 0, i.endPTS = void 0, i.appendedPTS = void 0, i.startDTS = void 0, i.endDTS = void 0, i.start = 0, i.deltaPTS = void 0, i.maxStartPTS = void 0, i.minEndPTS = void 0, i.stats = new O.LoadStats(), i.urlId = 0, i.data = void 0, i.bitrateTest = false, i.title = null, i.initSegment = null, i.endList = void 0, i.type = _, i;
                  }
                  var l = f.prototype;
                  return l.setKeyFormat = function(g) {
                    if (this.levelkeys) {
                      var i = this.levelkeys[g];
                      i && !this._decryptdata && (this._decryptdata = i.getDecryptData(this.sn));
                    }
                  }, l.abortRequests = function() {
                    var g, i;
                    (g = this.loader) === null || g === void 0 || g.abort(), (i = this.keyLoader) === null || i === void 0 || i.abort();
                  }, l.setElementaryStreamInfo = function(g, i, n, o, h, b) {
                    b === void 0 && (b = false);
                    var a = this.elementaryStreams, c = a[g];
                    if (!c) {
                      a[g] = { startPTS: i, endPTS: n, startDTS: o, endDTS: h, partial: b };
                      return;
                    }
                    c.startPTS = Math.min(c.startPTS, i), c.endPTS = Math.max(c.endPTS, n), c.startDTS = Math.min(c.startDTS, o), c.endDTS = Math.max(c.endDTS, h);
                  }, l.clearElementaryStreamInfo = function() {
                    var g = this.elementaryStreams;
                    g[y.AUDIO] = null, g[y.VIDEO] = null, g[y.AUDIOVIDEO] = null;
                  }, E(f, [{ key: "decryptdata", get: function() {
                    var g = this.levelkeys;
                    if (!g && !this._decryptdata)
                      return null;
                    if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
                      var i = this.levelkeys.identity;
                      if (i)
                        this._decryptdata = i.getDecryptData(this.sn);
                      else {
                        var n = Object.keys(this.levelkeys);
                        if (n.length === 1)
                          return this._decryptdata = this.levelkeys[n[0]].getDecryptData(this.sn);
                      }
                    }
                    return this._decryptdata;
                  } }, { key: "end", get: function() {
                    return this.start + this.duration;
                  } }, { key: "endProgramDateTime", get: function() {
                    if (this.programDateTime === null || !(0, j.isFiniteNumber)(this.programDateTime))
                      return null;
                    var g = (0, j.isFiniteNumber)(this.duration) ? this.duration : 0;
                    return this.programDateTime + g * 1e3;
                  } }, { key: "encrypted", get: function() {
                    var g;
                    if ((g = this._decryptdata) !== null && g !== void 0 && g.encrypted)
                      return true;
                    if (this.levelkeys) {
                      var i = Object.keys(this.levelkeys), n = i.length;
                      if (n > 1 || n === 1 && this.levelkeys[i[0]].encrypted)
                        return true;
                    }
                    return false;
                  } }]), f;
                }(I), d = function(v) {
                  x(f, v);
                  function f(l, _, g, i, n) {
                    var o;
                    o = v.call(this, g) || this, o.fragOffset = 0, o.duration = 0, o.gap = false, o.independent = false, o.relurl = void 0, o.fragment = void 0, o.index = void 0, o.stats = new O.LoadStats(), o.duration = l.decimalFloatingPoint("DURATION"), o.gap = l.bool("GAP"), o.independent = l.bool("INDEPENDENT"), o.relurl = l.enumeratedString("URI"), o.fragment = _, o.index = i;
                    var h = l.enumeratedString("BYTERANGE");
                    return h && o.setByteRange(h, n), n && (o.fragOffset = n.fragOffset + n.duration), o;
                  }
                  return E(f, [{ key: "start", get: function() {
                    return this.fragment.start + this.fragOffset;
                  } }, { key: "end", get: function() {
                    return this.start + this.duration;
                  } }, { key: "loaded", get: function() {
                    var _ = this.elementaryStreams;
                    return !!(_.audio || _.video || _.audiovideo);
                  } }]), f;
                }(I);
              }, "./src/loader/key-loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => F });
                var j = N("./src/errors.ts"), R = N("./src/loader/fragment-loader.ts"), F = function() {
                  function O(k) {
                    this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = k;
                  }
                  var x = O.prototype;
                  return x.abort = function() {
                    for (var m2 in this.keyUriToKeyInfo) {
                      var E = this.keyUriToKeyInfo[m2].loader;
                      E && E.abort();
                    }
                  }, x.detach = function() {
                    for (var m2 in this.keyUriToKeyInfo) {
                      var E = this.keyUriToKeyInfo[m2];
                      (E.mediaKeySessionContext || E.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[m2];
                    }
                  }, x.destroy = function() {
                    this.detach();
                    for (var m2 in this.keyUriToKeyInfo) {
                      var E = this.keyUriToKeyInfo[m2].loader;
                      E && E.destroy();
                    }
                    this.keyUriToKeyInfo = {};
                  }, x.createKeyLoadError = function(m2, E, L, M) {
                    return E === void 0 && (E = j.ErrorDetails.KEY_LOAD_ERROR), new R.LoadError({ type: j.ErrorTypes.NETWORK_ERROR, details: E, fatal: false, frag: m2, networkDetails: L });
                  }, x.loadClear = function(m2, E) {
                    var L = this;
                    if (this.emeController && this.config.emeEnabled)
                      for (var M = m2.sn, y = m2.cc, I = function(f) {
                        var l = E[f];
                        if (y <= l.cc && (M === "initSegment" || M < l.sn))
                          return L.emeController.selectKeySystemFormat(l).then(function(_) {
                            l.setKeyFormat(_);
                          }), "break";
                      }, S = 0; S < E.length; S++) {
                        var d = I(S);
                        if (d === "break")
                          break;
                      }
                  }, x.load = function(m2) {
                    var E = this;
                    return !m2.decryptdata && m2.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(m2).then(function(L) {
                      return E.loadInternal(m2, L);
                    }) : this.loadInternal(m2);
                  }, x.loadInternal = function(m2, E) {
                    var L, M;
                    E && m2.setKeyFormat(E);
                    var y = m2.decryptdata;
                    if (!y) {
                      var I = E ? "Expected frag.decryptdata to be defined after setting format " + E : "Missing decryption data on fragment in onKeyLoading";
                      return Promise.reject(this.createKeyLoadError(m2, j.ErrorDetails.KEY_LOAD_ERROR, null, I));
                    }
                    var S = y.uri;
                    if (!S)
                      return Promise.reject(this.createKeyLoadError(m2, j.ErrorDetails.KEY_LOAD_ERROR, null, 'Invalid key URI: "' + S + '"'));
                    var d = this.keyUriToKeyInfo[S];
                    if ((L = d) !== null && L !== void 0 && L.decryptdata.key)
                      return y.key = d.decryptdata.key, Promise.resolve({ frag: m2, keyInfo: d });
                    if ((M = d) !== null && M !== void 0 && M.keyLoadPromise) {
                      var v;
                      switch ((v = d.mediaKeySessionContext) === null || v === void 0 ? void 0 : v.keyStatus) {
                        case void 0:
                        case "status-pending":
                        case "usable":
                        case "usable-in-future":
                          return d.keyLoadPromise;
                      }
                    }
                    switch (d = this.keyUriToKeyInfo[S] = { decryptdata: y, keyLoadPromise: null, loader: null, mediaKeySessionContext: null }, y.method) {
                      case "ISO-23001-7":
                      case "SAMPLE-AES":
                      case "SAMPLE-AES-CENC":
                      case "SAMPLE-AES-CTR":
                        return y.keyFormat === "identity" ? this.loadKeyHTTP(d, m2) : this.loadKeyEME(d, m2);
                      case "AES-128":
                        return this.loadKeyHTTP(d, m2);
                      default:
                        return Promise.reject(this.createKeyLoadError(m2, j.ErrorDetails.KEY_LOAD_ERROR, null, 'Key supplied with unsupported METHOD: "' + y.method + '"'));
                    }
                  }, x.loadKeyEME = function(m2, E) {
                    var L = { frag: E, keyInfo: m2 };
                    if (this.emeController && this.config.emeEnabled) {
                      var M = this.emeController.loadKey(L);
                      if (M)
                        return (m2.keyLoadPromise = M.then(function(y) {
                          return m2.mediaKeySessionContext = y, L;
                        })).catch(function(y) {
                          throw m2.keyLoadPromise = null, y;
                        });
                    }
                    return Promise.resolve(L);
                  }, x.loadKeyHTTP = function(m2, E) {
                    var L = this, M = this.config, y = M.loader, I = new y(M);
                    return E.keyLoader = m2.loader = I, m2.keyLoadPromise = new Promise(function(S, d) {
                      var v = { keyInfo: m2, frag: E, responseType: "arraybuffer", url: m2.decryptdata.uri }, f = { timeout: M.fragLoadingTimeOut, maxRetry: 0, retryDelay: M.fragLoadingRetryDelay, maxRetryDelay: M.fragLoadingMaxRetryTimeout, highWaterMark: 0 }, l = { onSuccess: function(g, i, n, o) {
                        var h = n.frag, b = n.keyInfo, a = n.url;
                        if (!h.decryptdata || b !== L.keyUriToKeyInfo[a])
                          return d(L.createKeyLoadError(h, j.ErrorDetails.KEY_LOAD_ERROR, o, "after key load, decryptdata unset or changed"));
                        b.decryptdata.key = h.decryptdata.key = new Uint8Array(g.data), h.keyLoader = null, b.loader = null, S({ frag: h, keyInfo: b });
                      }, onError: function(g, i, n) {
                        L.resetLoader(i), d(L.createKeyLoadError(E, j.ErrorDetails.KEY_LOAD_ERROR, n));
                      }, onTimeout: function(g, i, n) {
                        L.resetLoader(i), d(L.createKeyLoadError(E, j.ErrorDetails.KEY_LOAD_TIMEOUT, n));
                      }, onAbort: function(g, i, n) {
                        L.resetLoader(i), d(L.createKeyLoadError(E, j.ErrorDetails.INTERNAL_ABORTED, n));
                      } };
                      I.load(v, f, l);
                    });
                  }, x.resetLoader = function(m2) {
                    var E = m2.frag, L = m2.keyInfo, M = m2.url, y = L.loader;
                    E.keyLoader === y && (E.keyLoader = null, L.loader = null), delete this.keyUriToKeyInfo[M], y && y.destroy();
                  }, O;
                }();
              }, "./src/loader/level-details.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { LevelDetails: () => m2 });
                var j = N("./src/polyfills/number.ts");
                function R(E, L) {
                  for (var M = 0; M < L.length; M++) {
                    var y = L[M];
                    y.enumerable = y.enumerable || false, y.configurable = true, "value" in y && (y.writable = true), Object.defineProperty(E, O(y.key), y);
                  }
                }
                function F(E, L, M) {
                  return L && R(E.prototype, L), M && R(E, M), Object.defineProperty(E, "prototype", { writable: false }), E;
                }
                function O(E) {
                  var L = x(E, "string");
                  return typeof L == "symbol" ? L : String(L);
                }
                function x(E, L) {
                  if (typeof E != "object" || E === null)
                    return E;
                  var M = E[Symbol.toPrimitive];
                  if (M !== void 0) {
                    var y = M.call(E, L || "default");
                    if (typeof y != "object")
                      return y;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (L === "string" ? String : Number)(E);
                }
                var k = 10, m2 = function() {
                  function E(M) {
                    this.PTSKnown = false, this.alignedSliding = false, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = true, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = true, this.advanced = true, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = false, this.canSkipUntil = 0, this.canSkipDateRanges = false, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = M;
                  }
                  var L = E.prototype;
                  return L.reloaded = function(y) {
                    if (!y) {
                      this.advanced = true, this.updated = true;
                      return;
                    }
                    var I = this.lastPartSn - y.lastPartSn, S = this.lastPartIndex - y.lastPartIndex;
                    this.updated = this.endSN !== y.endSN || !!S || !!I, this.advanced = this.endSN > y.endSN || I > 0 || I === 0 && S > 0, this.updated || this.advanced ? this.misses = Math.floor(y.misses * 0.6) : this.misses = y.misses + 1, this.availabilityDelay = y.availabilityDelay;
                  }, F(E, [{ key: "hasProgramDateTime", get: function() {
                    return this.fragments.length ? (0, j.isFiniteNumber)(this.fragments[this.fragments.length - 1].programDateTime) : false;
                  } }, { key: "levelTargetDuration", get: function() {
                    return this.averagetargetduration || this.targetduration || k;
                  } }, { key: "drift", get: function() {
                    var y = this.driftEndTime - this.driftStartTime;
                    if (y > 0) {
                      var I = this.driftEnd - this.driftStart;
                      return I * 1e3 / y;
                    }
                    return 1;
                  } }, { key: "edge", get: function() {
                    return this.partEnd || this.fragmentEnd;
                  } }, { key: "partEnd", get: function() {
                    var y;
                    return (y = this.partList) !== null && y !== void 0 && y.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd;
                  } }, { key: "fragmentEnd", get: function() {
                    var y;
                    return (y = this.fragments) !== null && y !== void 0 && y.length ? this.fragments[this.fragments.length - 1].end : 0;
                  } }, { key: "age", get: function() {
                    return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0;
                  } }, { key: "lastPartIndex", get: function() {
                    var y;
                    return (y = this.partList) !== null && y !== void 0 && y.length ? this.partList[this.partList.length - 1].index : -1;
                  } }, { key: "lastPartSn", get: function() {
                    var y;
                    return (y = this.partList) !== null && y !== void 0 && y.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN;
                  } }]), E;
                }();
              }, "./src/loader/level-key.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { LevelKey: () => m2 });
                var j = N("./src/utils/keysystem-util.ts"), R = N("./src/utils/mediakeys-helper.ts"), F = N("./src/utils/mp4-tools.ts"), O = N("./src/utils/logger.ts"), x = N("./src/utils/numeric-encoding-utils.ts"), k = {}, m2 = function() {
                  L.clearKeyUriToKeyIdMap = function() {
                    k = {};
                  };
                  function L(y, I, S, d, v) {
                    d === void 0 && (d = [1]), v === void 0 && (v = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = y, this.uri = I, this.keyFormat = S, this.keyFormatVersions = d, this.iv = v, this.encrypted = y ? y !== "NONE" : false, this.isCommonEncryption = this.encrypted && y !== "AES-128";
                  }
                  var M = L.prototype;
                  return M.isSupported = function() {
                    if (this.method) {
                      if (this.method === "AES-128" || this.method === "NONE")
                        return true;
                      switch (this.keyFormat) {
                        case "identity":
                          return this.method === "SAMPLE-AES";
                        case R.KeySystemFormats.FAIRPLAY:
                        case R.KeySystemFormats.WIDEVINE:
                        case R.KeySystemFormats.PLAYREADY:
                        case R.KeySystemFormats.CLEARKEY:
                          return ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method) !== -1;
                      }
                    }
                    return false;
                  }, M.getDecryptData = function(I) {
                    if (!this.encrypted || !this.uri)
                      return null;
                    if (this.method === "AES-128" && this.uri && !this.iv) {
                      typeof I != "number" && (this.method === "AES-128" && !this.iv && O.logger.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), I = 0);
                      var S = E(I), d = new L(this.method, this.uri, "identity", this.keyFormatVersions, S);
                      return d;
                    }
                    var v = (0, j.convertDataUriToArrayBytes)(this.uri);
                    if (v)
                      switch (this.keyFormat) {
                        case R.KeySystemFormats.WIDEVINE:
                          this.pssh = v, v.length >= 22 && (this.keyId = v.subarray(v.length - 22, v.length - 6));
                          break;
                        case R.KeySystemFormats.PLAYREADY: {
                          var f = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
                          this.pssh = (0, F.mp4pssh)(f, null, v);
                          var l = new Uint16Array(v.buffer, v.byteOffset, v.byteLength / 2), _ = String.fromCharCode.apply(null, Array.from(l)), g = _.substring(_.indexOf("<"), _.length), i = new DOMParser(), n = i.parseFromString(g, "text/xml"), o = n.getElementsByTagName("KID")[0];
                          if (o) {
                            var h = o.childNodes[0] ? o.childNodes[0].nodeValue : o.getAttribute("VALUE");
                            if (h) {
                              var b = (0, x.base64Decode)(h).subarray(0, 16);
                              (0, j.changeEndianness)(b), this.keyId = b;
                            }
                          }
                          break;
                        }
                        default: {
                          var a = v.subarray(0, 16);
                          if (a.length !== 16) {
                            var c = new Uint8Array(16);
                            c.set(a, 16 - a.length), a = c;
                          }
                          this.keyId = a;
                          break;
                        }
                      }
                    if (!this.keyId || this.keyId.byteLength !== 16) {
                      var s = k[this.uri];
                      if (!s) {
                        var p = Object.keys(k).length % Number.MAX_SAFE_INTEGER;
                        s = new Uint8Array(16);
                        var D = new DataView(s.buffer, 12, 4);
                        D.setUint32(0, p), k[this.uri] = s;
                      }
                      this.keyId = s;
                    }
                    return this;
                  }, L;
                }();
                function E(L) {
                  for (var M = new Uint8Array(16), y = 12; y < 16; y++)
                    M[y] = L >> 8 * (15 - y) & 255;
                  return M;
                }
              }, "./src/loader/load-stats.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { LoadStats: () => j });
                var j = function() {
                  this.aborted = false, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 };
                };
              }, "./src/loader/m3u8-parser.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => f });
                var j = N("./src/polyfills/number.ts"), R = N("./node_modules/url-toolkit/src/url-toolkit.js"), F = N.n(R), O = N("./src/loader/date-range.ts"), x = N("./src/loader/fragment.ts"), k = N("./src/loader/level-details.ts"), m2 = N("./src/loader/level-key.ts"), E = N("./src/utils/attr-list.ts"), L = N("./src/utils/logger.ts"), M = N("./src/utils/codecs.ts");
                function y() {
                  return y = Object.assign ? Object.assign.bind() : function(h) {
                    for (var b = 1; b < arguments.length; b++) {
                      var a = arguments[b];
                      for (var c in a)
                        Object.prototype.hasOwnProperty.call(a, c) && (h[c] = a[c]);
                    }
                    return h;
                  }, y.apply(this, arguments);
                }
                var I = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+|#EXT-X-SESSION-KEY:([^\n\r]*)[\r\n]+/g, S = /#EXT-X-MEDIA:(.*)/g, d = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[\S ]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"), v = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")), f = function() {
                  function h() {
                  }
                  return h.findGroup = function(a, c) {
                    for (var s = 0; s < a.length; s++) {
                      var p = a[s];
                      if (p.id === c)
                        return p;
                    }
                  }, h.convertAVC1ToAVCOTI = function(a) {
                    var c = a.split(".");
                    if (c.length > 2) {
                      var s = c.shift() + ".";
                      return s += parseInt(c.shift()).toString(16), s += ("000" + parseInt(c.shift()).toString(16)).slice(-4), s;
                    }
                    return a;
                  }, h.resolve = function(a, c) {
                    return (0, R.buildAbsoluteURL)(c, a, { alwaysNormalize: true });
                  }, h.parseMasterPlaylist = function(a, c) {
                    var s = [], p = [], D = {}, A = [], w = false;
                    I.lastIndex = 0;
                    for (var B; (B = I.exec(a)) != null; )
                      if (B[1]) {
                        var U, K = new E.AttrList(B[1]), W = { attrs: K, bitrate: K.decimalInteger("AVERAGE-BANDWIDTH") || K.decimalInteger("BANDWIDTH"), name: K.NAME, url: h.resolve(B[2], c) }, H = K.decimalResolution("RESOLUTION");
                        H && (W.width = H.width, W.height = H.height), _((K.CODECS || "").split(/[ ,]+/).filter(function(ee) {
                          return ee;
                        }), W), W.videoCodec && W.videoCodec.indexOf("avc1") !== -1 && (W.videoCodec = h.convertAVC1ToAVCOTI(W.videoCodec)), (U = W.unknownCodecs) !== null && U !== void 0 && U.length || p.push(W), s.push(W);
                      } else if (B[3]) {
                        var V = new E.AttrList(B[3]);
                        V["DATA-ID"] && (w = true, D[V["DATA-ID"]] = V);
                      } else if (B[4]) {
                        var z = B[4], Q = l(z, c);
                        Q.encrypted && Q.isSupported() ? A.push(Q) : L.logger.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + z + '"');
                      }
                    var q = p.length > 0 && p.length < s.length;
                    return { levels: q ? p : s, sessionData: w ? D : null, sessionKeys: A.length ? A : null };
                  }, h.parseMasterPlaylistMedia = function(a, c, s, p) {
                    p === void 0 && (p = []);
                    var D, A = [], w = 0;
                    for (S.lastIndex = 0; (D = S.exec(a)) !== null; ) {
                      var B = new E.AttrList(D[1]);
                      if (B.TYPE === s) {
                        var U = { attrs: B, bitrate: 0, id: w++, groupId: B["GROUP-ID"], instreamId: B["INSTREAM-ID"], name: B.NAME || B.LANGUAGE || "", type: s, default: B.bool("DEFAULT"), autoselect: B.bool("AUTOSELECT"), forced: B.bool("FORCED"), lang: B.LANGUAGE, url: B.URI ? h.resolve(B.URI, c) : "" };
                        if (p.length) {
                          var K = h.findGroup(p, U.groupId) || p[0];
                          g(U, K, "audioCodec"), g(U, K, "textCodec");
                        }
                        A.push(U);
                      }
                    }
                    return A;
                  }, h.parseLevelPlaylist = function(a, c, s, p, D) {
                    var A = new k.LevelDetails(c), w = A.fragments, B = null, U = 0, K = 0, W = 0, H = 0, V = null, z = new x.Fragment(p, c), Q, q, ee, ae = -1, ne = false;
                    for (d.lastIndex = 0, A.m3u8 = a; (Q = d.exec(a)) !== null; ) {
                      ne && (ne = false, z = new x.Fragment(p, c), z.start = W, z.sn = U, z.cc = H, z.level = s, B && (z.initSegment = B, z.rawProgramDateTime = B.rawProgramDateTime, B.rawProgramDateTime = null));
                      var ue = Q[1];
                      if (ue) {
                        z.duration = parseFloat(ue);
                        var ye = (" " + Q[2]).slice(1);
                        z.title = ye || null, z.tagList.push(ye ? ["INF", ue, ye] : ["INF", ue]);
                      } else if (Q[3]) {
                        if ((0, j.isFiniteNumber)(z.duration)) {
                          if (z.start = W, ee) {
                            z.levelkeys = ee;
                            var be = A.encryptedFragments;
                            z.levelkeys && Object.keys(z.levelkeys).some(function(we) {
                              return z.levelkeys[we].isCommonEncryption;
                            }) && (!be.length || be[be.length - 1].levelkeys !== ee) && be.push(z);
                          }
                          z.sn = U, z.level = s, z.cc = H, z.urlId = D, w.push(z), z.relurl = (" " + Q[3]).slice(1), n(z, V), V = z, W += z.duration, U++, K = 0, ne = true;
                        }
                      } else if (Q[4]) {
                        var me = (" " + Q[4]).slice(1);
                        V ? z.setByteRange(me, V) : z.setByteRange(me);
                      } else if (Q[5])
                        z.rawProgramDateTime = (" " + Q[5]).slice(1), z.tagList.push(["PROGRAM-DATE-TIME", z.rawProgramDateTime]), ae === -1 && (ae = w.length);
                      else {
                        if (Q = Q[0].match(v), !Q) {
                          L.logger.warn("No matches on slow regex match for level playlist!");
                          continue;
                        }
                        for (q = 1; q < Q.length && typeof Q[q] == "undefined"; q++)
                          ;
                        var Se = (" " + Q[q]).slice(1), Te = (" " + Q[q + 1]).slice(1), fe = Q[q + 2] ? (" " + Q[q + 2]).slice(1) : "";
                        switch (Se) {
                          case "PLAYLIST-TYPE":
                            A.type = Te.toUpperCase();
                            break;
                          case "MEDIA-SEQUENCE":
                            U = A.startSN = parseInt(Te);
                            break;
                          case "SKIP": {
                            var ie = new E.AttrList(Te), de = ie.decimalInteger("SKIPPED-SEGMENTS");
                            if ((0, j.isFiniteNumber)(de)) {
                              A.skippedSegments = de;
                              for (var he = de; he--; )
                                w.unshift(null);
                              U += de;
                            }
                            var oe = ie.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                            oe && (A.recentlyRemovedDateranges = oe.split("	"));
                            break;
                          }
                          case "TARGETDURATION":
                            A.targetduration = parseFloat(Te);
                            break;
                          case "VERSION":
                            A.version = parseInt(Te);
                            break;
                          case "EXTM3U":
                            break;
                          case "ENDLIST":
                            A.live = false;
                            break;
                          case "#":
                            (Te || fe) && z.tagList.push(fe ? [Te, fe] : [Te]);
                            break;
                          case "DISCONTINUITY":
                            H++, z.tagList.push(["DIS"]);
                            break;
                          case "GAP":
                            z.tagList.push([Se]);
                            break;
                          case "BITRATE":
                            z.tagList.push([Se, Te]);
                            break;
                          case "DATERANGE": {
                            var se = new E.AttrList(Te), ve = new O.DateRange(se, A.dateRanges[se.ID]);
                            ve.isValid || A.skippedSegments ? A.dateRanges[ve.id] = ve : L.logger.warn('Ignoring invalid DATERANGE tag: "' + Te + '"'), z.tagList.push(["EXT-X-DATERANGE", Te]);
                            break;
                          }
                          case "DISCONTINUITY-SEQUENCE":
                            H = parseInt(Te);
                            break;
                          case "KEY": {
                            var _e = l(Te, c);
                            if (_e.isSupported()) {
                              if (_e.method === "NONE") {
                                ee = void 0;
                                break;
                              }
                              ee || (ee = {}), ee[_e.keyFormat] && (ee = y({}, ee)), ee[_e.keyFormat] = _e;
                            } else
                              L.logger.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + Te + '"');
                            break;
                          }
                          case "START": {
                            var Re = new E.AttrList(Te), De = Re.decimalFloatingPoint("TIME-OFFSET");
                            (0, j.isFiniteNumber)(De) && (A.startTimeOffset = De);
                            break;
                          }
                          case "MAP": {
                            var ke = new E.AttrList(Te);
                            if (z.duration) {
                              var Ne = new x.Fragment(p, c);
                              o(Ne, ke, s, ee), B = Ne, z.initSegment = B, B.rawProgramDateTime && !z.rawProgramDateTime && (z.rawProgramDateTime = B.rawProgramDateTime);
                            } else
                              o(z, ke, s, ee), B = z, ne = true;
                            break;
                          }
                          case "SERVER-CONTROL": {
                            var Fe = new E.AttrList(Te);
                            A.canBlockReload = Fe.bool("CAN-BLOCK-RELOAD"), A.canSkipUntil = Fe.optionalFloat("CAN-SKIP-UNTIL", 0), A.canSkipDateRanges = A.canSkipUntil > 0 && Fe.bool("CAN-SKIP-DATERANGES"), A.partHoldBack = Fe.optionalFloat("PART-HOLD-BACK", 0), A.holdBack = Fe.optionalFloat("HOLD-BACK", 0);
                            break;
                          }
                          case "PART-INF": {
                            var xe = new E.AttrList(Te);
                            A.partTarget = xe.decimalFloatingPoint("PART-TARGET");
                            break;
                          }
                          case "PART": {
                            var Ue = A.partList;
                            Ue || (Ue = A.partList = []);
                            var qe = K > 0 ? Ue[Ue.length - 1] : void 0, We = K++, tt = new x.Part(new E.AttrList(Te), z, c, We, qe);
                            Ue.push(tt), z.duration += tt.duration;
                            break;
                          }
                          case "PRELOAD-HINT": {
                            var Ye = new E.AttrList(Te);
                            A.preloadHint = Ye;
                            break;
                          }
                          case "RENDITION-REPORT": {
                            var ze = new E.AttrList(Te);
                            A.renditionReports = A.renditionReports || [], A.renditionReports.push(ze);
                            break;
                          }
                          default:
                            L.logger.warn("line parsed but not handled: " + Q);
                            break;
                        }
                      }
                    }
                    V && !V.relurl ? (w.pop(), W -= V.duration, A.partList && (A.fragmentHint = V)) : A.partList && (n(z, V), z.cc = H, A.fragmentHint = z);
                    var Ze = w.length, st = w[0], re = w[Ze - 1];
                    if (W += A.skippedSegments * A.targetduration, W > 0 && Ze && re) {
                      A.averagetargetduration = W / Ze;
                      var ce = re.sn;
                      A.endSN = ce !== "initSegment" ? ce : 0, A.live || (re.endList = true), st && (A.startCC = st.cc);
                    } else
                      A.endSN = 0, A.startCC = 0;
                    return A.fragmentHint && (W += A.fragmentHint.duration), A.totalduration = W, A.endCC = H, ae > 0 && i(w, ae), A;
                  }, h;
                }();
                function l(h, b) {
                  var a, c, s = new E.AttrList(h), p = (a = s.enumeratedString("METHOD")) != null ? a : "", D = s.URI, A = s.hexadecimalInteger("IV"), w = s.enumeratedString("KEYFORMATVERSIONS"), B = (c = s.enumeratedString("KEYFORMAT")) != null ? c : "identity";
                  D && s.IV && !A && L.logger.error("Invalid IV: " + s.IV);
                  var U = D ? f.resolve(D, b) : "", K = (w || "1").split("/").map(Number).filter(Number.isFinite);
                  return new m2.LevelKey(p, U, B, K, A);
                }
                function _(h, b) {
                  ["video", "audio", "text"].forEach(function(a) {
                    var c = h.filter(function(p) {
                      return (0, M.isCodecType)(p, a);
                    });
                    if (c.length) {
                      var s = c.filter(function(p) {
                        return p.lastIndexOf("avc1", 0) === 0 || p.lastIndexOf("mp4a", 0) === 0;
                      });
                      b[a + "Codec"] = s.length > 0 ? s[0] : c[0], h = h.filter(function(p) {
                        return c.indexOf(p) === -1;
                      });
                    }
                  }), b.unknownCodecs = h;
                }
                function g(h, b, a) {
                  var c = b[a];
                  c && (h[a] = c);
                }
                function i(h, b) {
                  for (var a = h[b], c = b; c--; ) {
                    var s = h[c];
                    if (!s)
                      return;
                    s.programDateTime = a.programDateTime - s.duration * 1e3, a = s;
                  }
                }
                function n(h, b) {
                  h.rawProgramDateTime ? h.programDateTime = Date.parse(h.rawProgramDateTime) : b != null && b.programDateTime && (h.programDateTime = b.endProgramDateTime), (0, j.isFiniteNumber)(h.programDateTime) || (h.programDateTime = null, h.rawProgramDateTime = null);
                }
                function o(h, b, a, c) {
                  h.relurl = b.URI, b.BYTERANGE && h.setByteRange(b.BYTERANGE), h.level = a, h.sn = "initSegment", c && (h.levelkeys = c), h.initSegment = null;
                }
              }, "./src/loader/playlist-loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => y });
                var j = N("./src/polyfills/number.ts"), R = N("./src/events.ts"), F = N("./src/errors.ts"), O = N("./src/utils/logger.ts"), x = N("./src/loader/m3u8-parser.ts"), k = N("./src/types/loader.ts"), m2 = N("./src/utils/attr-list.ts");
                function E(I) {
                  var S = I.type;
                  switch (S) {
                    case k.PlaylistContextType.AUDIO_TRACK:
                      return k.PlaylistLevelType.AUDIO;
                    case k.PlaylistContextType.SUBTITLE_TRACK:
                      return k.PlaylistLevelType.SUBTITLE;
                    default:
                      return k.PlaylistLevelType.MAIN;
                  }
                }
                function L(I, S) {
                  var d = I.url;
                  return (d === void 0 || d.indexOf("data:") === 0) && (d = S.url), d;
                }
                var M = function() {
                  function I(d) {
                    this.hls = void 0, this.loaders = /* @__PURE__ */ Object.create(null), this.hls = d, this.registerListeners();
                  }
                  var S = I.prototype;
                  return S.startLoad = function(v) {
                  }, S.stopLoad = function() {
                    this.destroyInternalLoaders();
                  }, S.registerListeners = function() {
                    var v = this.hls;
                    v.on(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), v.on(R.Events.LEVEL_LOADING, this.onLevelLoading, this), v.on(R.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), v.on(R.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
                  }, S.unregisterListeners = function() {
                    var v = this.hls;
                    v.off(R.Events.MANIFEST_LOADING, this.onManifestLoading, this), v.off(R.Events.LEVEL_LOADING, this.onLevelLoading, this), v.off(R.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), v.off(R.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
                  }, S.createInternalLoader = function(v) {
                    var f = this.hls.config, l = f.pLoader, _ = f.loader, g = l || _, i = new g(f);
                    return v.loader = i, this.loaders[v.type] = i, i;
                  }, S.getInternalLoader = function(v) {
                    return this.loaders[v.type];
                  }, S.resetInternalLoader = function(v) {
                    this.loaders[v] && delete this.loaders[v];
                  }, S.destroyInternalLoaders = function() {
                    for (var v in this.loaders) {
                      var f = this.loaders[v];
                      f && f.destroy(), this.resetInternalLoader(v);
                    }
                  }, S.destroy = function() {
                    this.unregisterListeners(), this.destroyInternalLoaders();
                  }, S.onManifestLoading = function(v, f) {
                    var l = f.url;
                    this.load({ id: null, groupId: null, level: 0, responseType: "text", type: k.PlaylistContextType.MANIFEST, url: l, deliveryDirectives: null });
                  }, S.onLevelLoading = function(v, f) {
                    var l = f.id, _ = f.level, g = f.url, i = f.deliveryDirectives;
                    this.load({ id: l, groupId: null, level: _, responseType: "text", type: k.PlaylistContextType.LEVEL, url: g, deliveryDirectives: i });
                  }, S.onAudioTrackLoading = function(v, f) {
                    var l = f.id, _ = f.groupId, g = f.url, i = f.deliveryDirectives;
                    this.load({ id: l, groupId: _, level: null, responseType: "text", type: k.PlaylistContextType.AUDIO_TRACK, url: g, deliveryDirectives: i });
                  }, S.onSubtitleTrackLoading = function(v, f) {
                    var l = f.id, _ = f.groupId, g = f.url, i = f.deliveryDirectives;
                    this.load({ id: l, groupId: _, level: null, responseType: "text", type: k.PlaylistContextType.SUBTITLE_TRACK, url: g, deliveryDirectives: i });
                  }, S.load = function(v) {
                    var f, l = this.hls.config, _ = this.getInternalLoader(v);
                    if (_) {
                      var g = _.context;
                      if (g && g.url === v.url) {
                        O.logger.trace("[playlist-loader]: playlist request ongoing");
                        return;
                      }
                      O.logger.log("[playlist-loader]: aborting previous loader for type: " + v.type), _.abort();
                    }
                    var i, n, o, h;
                    switch (v.type) {
                      case k.PlaylistContextType.MANIFEST:
                        i = l.manifestLoadingMaxRetry, n = l.manifestLoadingTimeOut, o = l.manifestLoadingRetryDelay, h = l.manifestLoadingMaxRetryTimeout;
                        break;
                      case k.PlaylistContextType.LEVEL:
                      case k.PlaylistContextType.AUDIO_TRACK:
                      case k.PlaylistContextType.SUBTITLE_TRACK:
                        i = 0, n = l.levelLoadingTimeOut;
                        break;
                      default:
                        i = l.levelLoadingMaxRetry, n = l.levelLoadingTimeOut, o = l.levelLoadingRetryDelay, h = l.levelLoadingMaxRetryTimeout;
                        break;
                    }
                    if (_ = this.createInternalLoader(v), (f = v.deliveryDirectives) !== null && f !== void 0 && f.part) {
                      var b;
                      if (v.type === k.PlaylistContextType.LEVEL && v.level !== null ? b = this.hls.levels[v.level].details : v.type === k.PlaylistContextType.AUDIO_TRACK && v.id !== null ? b = this.hls.audioTracks[v.id].details : v.type === k.PlaylistContextType.SUBTITLE_TRACK && v.id !== null && (b = this.hls.subtitleTracks[v.id].details), b) {
                        var a = b.partTarget, c = b.targetduration;
                        a && c && (n = Math.min(Math.max(a * 3, c * 0.8) * 1e3, n));
                      }
                    }
                    var s = { timeout: n, maxRetry: i, retryDelay: o, maxRetryDelay: h, highWaterMark: 0 }, p = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };
                    _.load(v, s, p);
                  }, S.loadsuccess = function(v, f, l, _) {
                    _ === void 0 && (_ = null), this.resetInternalLoader(l.type);
                    var g = v.data;
                    if (g.indexOf("#EXTM3U") !== 0) {
                      this.handleManifestParsingError(v, l, "no EXTM3U delimiter", _);
                      return;
                    }
                    f.parsing.start = performance.now(), g.indexOf("#EXTINF:") > 0 || g.indexOf("#EXT-X-TARGETDURATION:") > 0 ? this.handleTrackOrLevelPlaylist(v, f, l, _) : this.handleMasterPlaylist(v, f, l, _);
                  }, S.loaderror = function(v, f, l) {
                    l === void 0 && (l = null), this.handleNetworkError(f, l, false, v);
                  }, S.loadtimeout = function(v, f, l) {
                    l === void 0 && (l = null), this.handleNetworkError(f, l, true);
                  }, S.handleMasterPlaylist = function(v, f, l, _) {
                    var g = this.hls, i = v.data, n = L(v, l), o = x.default.parseMasterPlaylist(i, n), h = o.levels, b = o.sessionData, a = o.sessionKeys;
                    if (!h.length) {
                      this.handleManifestParsingError(v, l, "no level found in manifest", _);
                      return;
                    }
                    var c = h.map(function(B) {
                      return { id: B.attrs.AUDIO, audioCodec: B.audioCodec };
                    }), s = h.map(function(B) {
                      return { id: B.attrs.SUBTITLES, textCodec: B.textCodec };
                    }), p = x.default.parseMasterPlaylistMedia(i, n, "AUDIO", c), D = x.default.parseMasterPlaylistMedia(i, n, "SUBTITLES", s), A = x.default.parseMasterPlaylistMedia(i, n, "CLOSED-CAPTIONS");
                    if (p.length) {
                      var w = p.some(function(B) {
                        return !B.url;
                      });
                      !w && h[0].audioCodec && !h[0].attrs.AUDIO && (O.logger.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), p.unshift({ type: "main", name: "main", default: false, autoselect: false, forced: false, id: -1, attrs: new m2.AttrList({}), bitrate: 0, url: "" }));
                    }
                    g.trigger(R.Events.MANIFEST_LOADED, { levels: h, audioTracks: p, subtitles: D, captions: A, url: n, stats: f, networkDetails: _, sessionData: b, sessionKeys: a });
                  }, S.handleTrackOrLevelPlaylist = function(v, f, l, _) {
                    var g = this.hls, i = l.id, n = l.level, o = l.type, h = L(v, l), b = (0, j.isFiniteNumber)(i) ? i : 0, a = (0, j.isFiniteNumber)(n) ? n : b, c = E(l), s = x.default.parseLevelPlaylist(v.data, h, a, c, b);
                    if (!s.fragments.length) {
                      g.trigger(R.Events.ERROR, { type: F.ErrorTypes.NETWORK_ERROR, details: F.ErrorDetails.LEVEL_EMPTY_ERROR, fatal: false, url: h, reason: "no fragments found in level", level: typeof l.level == "number" ? l.level : void 0 });
                      return;
                    }
                    if (o === k.PlaylistContextType.MANIFEST) {
                      var p = { attrs: new m2.AttrList({}), bitrate: 0, details: s, name: "", url: h };
                      g.trigger(R.Events.MANIFEST_LOADED, { levels: [p], audioTracks: [], url: h, stats: f, networkDetails: _, sessionData: null, sessionKeys: null });
                    }
                    f.parsing.end = performance.now(), l.levelDetails = s, this.handlePlaylistLoaded(v, f, l, _);
                  }, S.handleManifestParsingError = function(v, f, l, _) {
                    this.hls.trigger(R.Events.ERROR, { type: F.ErrorTypes.NETWORK_ERROR, details: F.ErrorDetails.MANIFEST_PARSING_ERROR, fatal: f.type === k.PlaylistContextType.MANIFEST, url: v.url, reason: l, response: v, context: f, networkDetails: _ });
                  }, S.handleNetworkError = function(v, f, l, _) {
                    l === void 0 && (l = false), O.logger.warn("[playlist-loader]: A network " + (l ? "timeout" : "error") + " occurred while loading " + v.type + " level: " + v.level + " id: " + v.id + ' group-id: "' + v.groupId + '"');
                    var g = F.ErrorDetails.UNKNOWN, i = false, n = this.getInternalLoader(v);
                    switch (v.type) {
                      case k.PlaylistContextType.MANIFEST:
                        g = l ? F.ErrorDetails.MANIFEST_LOAD_TIMEOUT : F.ErrorDetails.MANIFEST_LOAD_ERROR, i = true;
                        break;
                      case k.PlaylistContextType.LEVEL:
                        g = l ? F.ErrorDetails.LEVEL_LOAD_TIMEOUT : F.ErrorDetails.LEVEL_LOAD_ERROR, i = false;
                        break;
                      case k.PlaylistContextType.AUDIO_TRACK:
                        g = l ? F.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : F.ErrorDetails.AUDIO_TRACK_LOAD_ERROR, i = false;
                        break;
                      case k.PlaylistContextType.SUBTITLE_TRACK:
                        g = l ? F.ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT : F.ErrorDetails.SUBTITLE_LOAD_ERROR, i = false;
                        break;
                    }
                    n && this.resetInternalLoader(v.type);
                    var o = { type: F.ErrorTypes.NETWORK_ERROR, details: g, fatal: i, url: v.url, loader: n, context: v, networkDetails: f };
                    _ && (o.response = _), this.hls.trigger(R.Events.ERROR, o);
                  }, S.handlePlaylistLoaded = function(v, f, l, _) {
                    var g = l.type, i = l.level, n = l.id, o = l.groupId, h = l.loader, b = l.levelDetails, a = l.deliveryDirectives;
                    if (!(b != null && b.targetduration)) {
                      this.handleManifestParsingError(v, l, "invalid target duration", _);
                      return;
                    }
                    if (!!h)
                      switch (b.live && (h.getCacheAge && (b.ageHeader = h.getCacheAge() || 0), (!h.getCacheAge || isNaN(b.ageHeader)) && (b.ageHeader = 0)), g) {
                        case k.PlaylistContextType.MANIFEST:
                        case k.PlaylistContextType.LEVEL:
                          this.hls.trigger(R.Events.LEVEL_LOADED, { details: b, level: i || 0, id: n || 0, stats: f, networkDetails: _, deliveryDirectives: a });
                          break;
                        case k.PlaylistContextType.AUDIO_TRACK:
                          this.hls.trigger(R.Events.AUDIO_TRACK_LOADED, { details: b, id: n || 0, groupId: o || "", stats: f, networkDetails: _, deliveryDirectives: a });
                          break;
                        case k.PlaylistContextType.SUBTITLE_TRACK:
                          this.hls.trigger(R.Events.SUBTITLE_TRACK_LOADED, { details: b, id: n || 0, groupId: o || "", stats: f, networkDetails: _, deliveryDirectives: a });
                          break;
                      }
                  }, I;
                }();
                const y = M;
              }, "./src/polyfills/number.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { MAX_SAFE_INTEGER: () => R, isFiniteNumber: () => j });
                var j = Number.isFinite || function(F) {
                  return typeof F == "number" && isFinite(F);
                }, R = Number.MAX_SAFE_INTEGER || 9007199254740991;
              }, "./src/remux/aac-helper.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = function() {
                  function F() {
                  }
                  return F.getSilentFrame = function(x, k) {
                    switch (x) {
                      case "mp4a.40.2":
                        if (k === 1)
                          return new Uint8Array([0, 200, 0, 128, 35, 128]);
                        if (k === 2)
                          return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                        if (k === 3)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                        if (k === 4)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                        if (k === 5)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                        if (k === 6)
                          return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
                        break;
                      default:
                        if (k === 1)
                          return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                        if (k === 2)
                          return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                        if (k === 3)
                          return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                        break;
                    }
                  }, F;
                }();
                const R = j;
              }, "./src/remux/mp4-generator.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => F });
                var j = Math.pow(2, 32) - 1, R = function() {
                  function O() {
                  }
                  return O.init = function() {
                    O.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], ".mp3": [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] };
                    var k;
                    for (k in O.types)
                      O.types.hasOwnProperty(k) && (O.types[k] = [k.charCodeAt(0), k.charCodeAt(1), k.charCodeAt(2), k.charCodeAt(3)]);
                    var m2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), E = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                    O.HDLR_TYPES = { video: m2, audio: E };
                    var L = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), M = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                    O.STTS = O.STSC = O.STCO = M, O.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), O.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), O.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), O.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                    var y = new Uint8Array([105, 115, 111, 109]), I = new Uint8Array([97, 118, 99, 49]), S = new Uint8Array([0, 0, 0, 1]);
                    O.FTYP = O.box(O.types.ftyp, y, S, y, I), O.DINF = O.box(O.types.dinf, O.box(O.types.dref, L));
                  }, O.box = function(k) {
                    for (var m2 = 8, E = arguments.length, L = new Array(E > 1 ? E - 1 : 0), M = 1; M < E; M++)
                      L[M - 1] = arguments[M];
                    for (var y = L.length, I = y; y--; )
                      m2 += L[y].byteLength;
                    var S = new Uint8Array(m2);
                    for (S[0] = m2 >> 24 & 255, S[1] = m2 >> 16 & 255, S[2] = m2 >> 8 & 255, S[3] = m2 & 255, S.set(k, 4), y = 0, m2 = 8; y < I; y++)
                      S.set(L[y], m2), m2 += L[y].byteLength;
                    return S;
                  }, O.hdlr = function(k) {
                    return O.box(O.types.hdlr, O.HDLR_TYPES[k]);
                  }, O.mdat = function(k) {
                    return O.box(O.types.mdat, k);
                  }, O.mdhd = function(k, m2) {
                    m2 *= k;
                    var E = Math.floor(m2 / (j + 1)), L = Math.floor(m2 % (j + 1));
                    return O.box(O.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, k >> 24 & 255, k >> 16 & 255, k >> 8 & 255, k & 255, E >> 24, E >> 16 & 255, E >> 8 & 255, E & 255, L >> 24, L >> 16 & 255, L >> 8 & 255, L & 255, 85, 196, 0, 0]));
                  }, O.mdia = function(k) {
                    return O.box(O.types.mdia, O.mdhd(k.timescale, k.duration), O.hdlr(k.type), O.minf(k));
                  }, O.mfhd = function(k) {
                    return O.box(O.types.mfhd, new Uint8Array([0, 0, 0, 0, k >> 24, k >> 16 & 255, k >> 8 & 255, k & 255]));
                  }, O.minf = function(k) {
                    return k.type === "audio" ? O.box(O.types.minf, O.box(O.types.smhd, O.SMHD), O.DINF, O.stbl(k)) : O.box(O.types.minf, O.box(O.types.vmhd, O.VMHD), O.DINF, O.stbl(k));
                  }, O.moof = function(k, m2, E) {
                    return O.box(O.types.moof, O.mfhd(k), O.traf(E, m2));
                  }, O.moov = function(k) {
                    for (var m2 = k.length, E = []; m2--; )
                      E[m2] = O.trak(k[m2]);
                    return O.box.apply(null, [O.types.moov, O.mvhd(k[0].timescale, k[0].duration)].concat(E).concat(O.mvex(k)));
                  }, O.mvex = function(k) {
                    for (var m2 = k.length, E = []; m2--; )
                      E[m2] = O.trex(k[m2]);
                    return O.box.apply(null, [O.types.mvex].concat(E));
                  }, O.mvhd = function(k, m2) {
                    m2 *= k;
                    var E = Math.floor(m2 / (j + 1)), L = Math.floor(m2 % (j + 1)), M = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, k >> 24 & 255, k >> 16 & 255, k >> 8 & 255, k & 255, E >> 24, E >> 16 & 255, E >> 8 & 255, E & 255, L >> 24, L >> 16 & 255, L >> 8 & 255, L & 255, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                    return O.box(O.types.mvhd, M);
                  }, O.sdtp = function(k) {
                    var m2 = k.samples || [], E = new Uint8Array(4 + m2.length), L, M;
                    for (L = 0; L < m2.length; L++)
                      M = m2[L].flags, E[L + 4] = M.dependsOn << 4 | M.isDependedOn << 2 | M.hasRedundancy;
                    return O.box(O.types.sdtp, E);
                  }, O.stbl = function(k) {
                    return O.box(O.types.stbl, O.stsd(k), O.box(O.types.stts, O.STTS), O.box(O.types.stsc, O.STSC), O.box(O.types.stsz, O.STSZ), O.box(O.types.stco, O.STCO));
                  }, O.avc1 = function(k) {
                    var m2 = [], E = [], L, M, y;
                    for (L = 0; L < k.sps.length; L++)
                      M = k.sps[L], y = M.byteLength, m2.push(y >>> 8 & 255), m2.push(y & 255), m2 = m2.concat(Array.prototype.slice.call(M));
                    for (L = 0; L < k.pps.length; L++)
                      M = k.pps[L], y = M.byteLength, E.push(y >>> 8 & 255), E.push(y & 255), E = E.concat(Array.prototype.slice.call(M));
                    var I = O.box(O.types.avcC, new Uint8Array([1, m2[3], m2[4], m2[5], 252 | 3, 224 | k.sps.length].concat(m2).concat([k.pps.length]).concat(E))), S = k.width, d = k.height, v = k.pixelRatio[0], f = k.pixelRatio[1];
                    return O.box(O.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, S >> 8 & 255, S & 255, d >> 8 & 255, d & 255, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), I, O.box(O.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), O.box(O.types.pasp, new Uint8Array([v >> 24, v >> 16 & 255, v >> 8 & 255, v & 255, f >> 24, f >> 16 & 255, f >> 8 & 255, f & 255])));
                  }, O.esds = function(k) {
                    var m2 = k.config.length;
                    return new Uint8Array([0, 0, 0, 0, 3, 23 + m2, 0, 1, 0, 4, 15 + m2, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([m2]).concat(k.config).concat([6, 1, 2]));
                  }, O.mp4a = function(k) {
                    var m2 = k.samplerate;
                    return O.box(O.types.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, k.channelCount, 0, 16, 0, 0, 0, 0, m2 >> 8 & 255, m2 & 255, 0, 0]), O.box(O.types.esds, O.esds(k)));
                  }, O.mp3 = function(k) {
                    var m2 = k.samplerate;
                    return O.box(O.types[".mp3"], new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, k.channelCount, 0, 16, 0, 0, 0, 0, m2 >> 8 & 255, m2 & 255, 0, 0]));
                  }, O.stsd = function(k) {
                    return k.type === "audio" ? k.segmentCodec === "mp3" && k.codec === "mp3" ? O.box(O.types.stsd, O.STSD, O.mp3(k)) : O.box(O.types.stsd, O.STSD, O.mp4a(k)) : O.box(O.types.stsd, O.STSD, O.avc1(k));
                  }, O.tkhd = function(k) {
                    var m2 = k.id, E = k.duration * k.timescale, L = k.width, M = k.height, y = Math.floor(E / (j + 1)), I = Math.floor(E % (j + 1));
                    return O.box(O.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, m2 & 255, 0, 0, 0, 0, y >> 24, y >> 16 & 255, y >> 8 & 255, y & 255, I >> 24, I >> 16 & 255, I >> 8 & 255, I & 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, L >> 8 & 255, L & 255, 0, 0, M >> 8 & 255, M & 255, 0, 0]));
                  }, O.traf = function(k, m2) {
                    var E = O.sdtp(k), L = k.id, M = Math.floor(m2 / (j + 1)), y = Math.floor(m2 % (j + 1));
                    return O.box(O.types.traf, O.box(O.types.tfhd, new Uint8Array([0, 0, 0, 0, L >> 24, L >> 16 & 255, L >> 8 & 255, L & 255])), O.box(O.types.tfdt, new Uint8Array([1, 0, 0, 0, M >> 24, M >> 16 & 255, M >> 8 & 255, M & 255, y >> 24, y >> 16 & 255, y >> 8 & 255, y & 255])), O.trun(k, E.length + 16 + 20 + 8 + 16 + 8 + 8), E);
                  }, O.trak = function(k) {
                    return k.duration = k.duration || 4294967295, O.box(O.types.trak, O.tkhd(k), O.mdia(k));
                  }, O.trex = function(k) {
                    var m2 = k.id;
                    return O.box(O.types.trex, new Uint8Array([0, 0, 0, 0, m2 >> 24, m2 >> 16 & 255, m2 >> 8 & 255, m2 & 255, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
                  }, O.trun = function(k, m2) {
                    var E = k.samples || [], L = E.length, M = 12 + 16 * L, y = new Uint8Array(M), I, S, d, v, f, l;
                    for (m2 += 8 + M, y.set([k.type === "video" ? 1 : 0, 0, 15, 1, L >>> 24 & 255, L >>> 16 & 255, L >>> 8 & 255, L & 255, m2 >>> 24 & 255, m2 >>> 16 & 255, m2 >>> 8 & 255, m2 & 255], 0), I = 0; I < L; I++)
                      S = E[I], d = S.duration, v = S.size, f = S.flags, l = S.cts, y.set([d >>> 24 & 255, d >>> 16 & 255, d >>> 8 & 255, d & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255, f.isLeading << 2 | f.dependsOn, f.isDependedOn << 6 | f.hasRedundancy << 4 | f.paddingValue << 1 | f.isNonSync, f.degradPrio & 240 << 8, f.degradPrio & 15, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, l & 255], 12 + 16 * I);
                    return O.box(O.types.trun, y);
                  }, O.initSegment = function(k) {
                    O.types || O.init();
                    var m2 = O.moov(k), E = new Uint8Array(O.FTYP.byteLength + m2.byteLength);
                    return E.set(O.FTYP), E.set(m2, O.FTYP.byteLength), E;
                  }, O;
                }();
                R.types = void 0, R.HDLR_TYPES = void 0, R.STTS = void 0, R.STSC = void 0, R.STCO = void 0, R.STSZ = void 0, R.VMHD = void 0, R.SMHD = void 0, R.STSD = void 0, R.FTYP = void 0, R.DINF = void 0;
                const F = R;
              }, "./src/remux/mp4-remuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => v, flushTextTrackMetadataCueSamples: () => _, flushTextTrackUserdataCueSamples: () => g, normalizePts: () => f });
                var j = N("./src/polyfills/number.ts"), R = N("./src/remux/aac-helper.ts"), F = N("./src/remux/mp4-generator.ts"), O = N("./src/events.ts"), x = N("./src/errors.ts"), k = N("./src/utils/logger.ts"), m2 = N("./src/types/loader.ts"), E = N("./src/utils/timescale-conversion.ts");
                function L() {
                  return L = Object.assign ? Object.assign.bind() : function(o) {
                    for (var h = 1; h < arguments.length; h++) {
                      var b = arguments[h];
                      for (var a in b)
                        Object.prototype.hasOwnProperty.call(b, a) && (o[a] = b[a]);
                    }
                    return o;
                  }, L.apply(this, arguments);
                }
                var M = 10 * 1e3, y = 1024, I = 1152, S = null, d = null, v = function() {
                  function o(b, a, c, s) {
                    if (s === void 0 && (s = ""), this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = false, this._initPTS = void 0, this._initDTS = void 0, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = false, this.isVideoContiguous = false, this.observer = b, this.config = a, this.typeSupported = c, this.ISGenerated = false, S === null) {
                      var p = navigator.userAgent || "", D = p.match(/Chrome\/(\d+)/i);
                      S = D ? parseInt(D[1]) : 0;
                    }
                    if (d === null) {
                      var A = navigator.userAgent.match(/Safari\/(\d+)/i);
                      d = A ? parseInt(A[1]) : 0;
                    }
                  }
                  var h = o.prototype;
                  return h.destroy = function() {
                  }, h.resetTimeStamp = function(a) {
                    k.logger.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = a;
                  }, h.resetNextTimestamp = function() {
                    k.logger.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = false, this.isAudioContiguous = false;
                  }, h.resetInitSegment = function() {
                    k.logger.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = false;
                  }, h.getVideoStartPts = function(a) {
                    var c = false, s = a.reduce(function(p, D) {
                      var A = D.pts - p;
                      return A < -4294967296 ? (c = true, f(p, D.pts)) : A > 0 ? p : D.pts;
                    }, a[0].pts);
                    return c && k.logger.debug("PTS rollover detected"), s;
                  }, h.remux = function(a, c, s, p, D, A, w, B) {
                    var U, K, W, H, V, z, Q = D, q = D, ee = a.pid > -1, ae = c.pid > -1, ne = c.samples.length, ue = a.samples.length > 0, ye = w && ne > 0 || ne > 1, be = (!ee || ue) && (!ae || ye) || this.ISGenerated || w;
                    if (be) {
                      this.ISGenerated || (W = this.generateIS(a, c, D));
                      var me = this.isVideoContiguous, Se = -1, Te;
                      if (ye && (Se = l(c.samples), !me && this.config.forceKeyFrameOnDiscontinuity))
                        if (z = true, Se > 0) {
                          k.logger.warn("[mp4-remuxer]: Dropped " + Se + " out of " + ne + " video samples due to a missing keyframe");
                          var fe = this.getVideoStartPts(c.samples);
                          c.samples = c.samples.slice(Se), c.dropped += Se, q += (c.samples[0].pts - fe) / c.inputTimeScale, Te = q;
                        } else
                          Se === -1 && (k.logger.warn("[mp4-remuxer]: No keyframe found out of " + ne + " video samples"), z = false);
                      if (this.ISGenerated) {
                        if (ue && ye) {
                          var ie = this.getVideoStartPts(c.samples), de = f(a.samples[0].pts, ie) - ie, he = de / c.inputTimeScale;
                          Q += Math.max(0, he), q += Math.max(0, -he);
                        }
                        if (ue) {
                          if (a.samplerate || (k.logger.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), W = this.generateIS(a, c, D)), K = this.remuxAudio(a, Q, this.isAudioContiguous, A, ae || ye || B === m2.PlaylistLevelType.AUDIO ? q : void 0), ye) {
                            var oe = K ? K.endPTS - K.startPTS : 0;
                            c.inputTimeScale || (k.logger.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), W = this.generateIS(a, c, D)), U = this.remuxVideo(c, q, me, oe);
                          }
                        } else
                          ye && (U = this.remuxVideo(c, q, me, 0));
                        U && (U.firstKeyFrame = Se, U.independent = Se !== -1, U.firstKeyFramePTS = Te);
                      }
                    }
                    return this.ISGenerated && (s.samples.length && (V = _(s, D, this._initPTS, this._initDTS)), p.samples.length && (H = g(p, D, this._initPTS))), { audio: K, video: U, initSegment: W, independent: z, text: H, id3: V };
                  }, h.generateIS = function(a, c, s) {
                    var p = a.samples, D = c.samples, A = this.typeSupported, w = {}, B = !(0, j.isFiniteNumber)(this._initPTS), U = "audio/mp4", K, W, H;
                    if (B && (K = W = 1 / 0), a.config && p.length) {
                      switch (a.timescale = a.samplerate, a.segmentCodec) {
                        case "mp3":
                          A.mpeg ? (U = "audio/mpeg", a.codec = "") : A.mp3 && (a.codec = "mp3");
                          break;
                      }
                      w.audio = { id: "audio", container: U, codec: a.codec, initSegment: a.segmentCodec === "mp3" && A.mpeg ? new Uint8Array(0) : F.default.initSegment([a]), metadata: { channelCount: a.channelCount } }, B && (H = a.inputTimeScale, K = W = p[0].pts - Math.round(H * s));
                    }
                    if (c.sps && c.pps && D.length && (c.timescale = c.inputTimeScale, w.video = { id: "main", container: "video/mp4", codec: c.codec, initSegment: F.default.initSegment([c]), metadata: { width: c.width, height: c.height } }, B)) {
                      H = c.inputTimeScale;
                      var V = this.getVideoStartPts(D), z = Math.round(H * s);
                      W = Math.min(W, f(D[0].dts, V) - z), K = Math.min(K, V - z);
                    }
                    if (Object.keys(w).length)
                      return this.ISGenerated = true, B && (this._initPTS = K, this._initDTS = W), { tracks: w, initPTS: K, timescale: H };
                  }, h.remuxVideo = function(a, c, s, p) {
                    var D = a.inputTimeScale, A = a.samples, w = [], B = A.length, U = this._initPTS, K = this.nextAvcDts, W = 8, H = this.videoSampleDuration, V, z, Q = Number.POSITIVE_INFINITY, q = Number.NEGATIVE_INFINITY, ee = false;
                    if (!s || K === null) {
                      var ae = c * D, ne = A[0].pts - f(A[0].dts, A[0].pts);
                      K = ae - ne;
                    }
                    for (var ue = 0; ue < B; ue++) {
                      var ye = A[ue];
                      ye.pts = f(ye.pts - U, K), ye.dts = f(ye.dts - U, K), ye.dts < A[ue > 0 ? ue - 1 : ue].dts && (ee = true);
                    }
                    ee && A.sort(function(Rt, Tt) {
                      var ft = Rt.dts - Tt.dts, Bt = Rt.pts - Tt.pts;
                      return ft || Bt;
                    }), V = A[0].dts, z = A[A.length - 1].dts;
                    var be = z - V, me = be ? Math.round(be / (B - 1)) : H || a.inputTimeScale / 30;
                    if (s) {
                      var Se = V - K, Te = Se > me, fe = Se < -1;
                      if ((Te || fe) && (Te ? k.logger.warn("AVC: " + (0, E.toMsFromMpegTsClock)(Se, true) + " ms (" + Se + "dts) hole between fragments detected, filling it") : k.logger.warn("AVC: " + (0, E.toMsFromMpegTsClock)(-Se, true) + " ms (" + Se + "dts) overlapping between fragments detected"), !fe || K > A[0].pts)) {
                        V = K;
                        var ie = A[0].pts - Se;
                        A[0].dts = V, A[0].pts = ie, k.logger.log("Video: First PTS/DTS adjusted: " + (0, E.toMsFromMpegTsClock)(ie, true) + "/" + (0, E.toMsFromMpegTsClock)(V, true) + ", delta: " + (0, E.toMsFromMpegTsClock)(Se, true) + " ms");
                      }
                    }
                    V = Math.max(0, V);
                    for (var de = 0, he = 0, oe = 0; oe < B; oe++) {
                      for (var se = A[oe], ve = se.units, _e = ve.length, Re = 0, De = 0; De < _e; De++)
                        Re += ve[De].data.length;
                      he += Re, de += _e, se.length = Re, se.dts = Math.max(se.dts, V), Q = Math.min(se.pts, Q), q = Math.max(se.pts, q);
                    }
                    z = A[B - 1].dts;
                    var ke = he + 4 * de + 8, Ne;
                    try {
                      Ne = new Uint8Array(ke);
                    } catch (Rt) {
                      this.observer.emit(O.Events.ERROR, O.Events.ERROR, { type: x.ErrorTypes.MUX_ERROR, details: x.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: ke, reason: "fail allocating video mdat " + ke });
                      return;
                    }
                    var Fe = new DataView(Ne.buffer);
                    Fe.setUint32(0, ke), Ne.set(F.default.types.mdat, 4);
                    for (var xe = false, Ue = Number.POSITIVE_INFINITY, qe = Number.POSITIVE_INFINITY, We = Number.NEGATIVE_INFINITY, tt = Number.NEGATIVE_INFINITY, Ye = 0; Ye < B; Ye++) {
                      for (var ze = A[Ye], Ze = ze.units, st = 0, re = 0, ce = Ze.length; re < ce; re++) {
                        var we = Ze[re], Ke = we.data, He = we.data.byteLength;
                        Fe.setUint32(W, He), W += 4, Ne.set(Ke, W), W += He, st += 4 + He;
                      }
                      var Ge = void 0;
                      if (Ye < B - 1)
                        H = A[Ye + 1].dts - ze.dts, Ge = A[Ye + 1].pts - ze.pts;
                      else {
                        var Be = this.config, it = Ye > 0 ? ze.dts - A[Ye - 1].dts : me;
                        if (Ge = Ye > 0 ? ze.pts - A[Ye - 1].pts : me, Be.stretchShortVideoTrack && this.nextAudioPts !== null) {
                          var Xe = Math.floor(Be.maxBufferHole * D), ot = (p ? Q + p * D : this.nextAudioPts) - ze.pts;
                          ot > Xe ? (H = ot - it, H < 0 ? H = it : xe = true, k.logger.log("[mp4-remuxer]: It is approximately " + ot / 90 + " ms to the next segment; using duration " + H / 90 + " ms for the last video frame.")) : H = it;
                        } else
                          H = it;
                      }
                      var yt = Math.round(ze.pts - ze.dts);
                      Ue = Math.min(Ue, H), We = Math.max(We, H), qe = Math.min(qe, Ge), tt = Math.max(tt, Ge), w.push(new i(ze.key, H, st, yt));
                    }
                    if (w.length) {
                      if (S) {
                        if (S < 70) {
                          var Ct = w[0].flags;
                          Ct.dependsOn = 2, Ct.isNonSync = 0;
                        }
                      } else if (d && tt - qe < We - Ue && me / We < 0.025 && w[0].cts === 0) {
                        k.logger.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                        for (var ht = V, nt = 0, pt = w.length; nt < pt; nt++) {
                          var _t = ht + w[nt].duration, Et = ht + w[nt].cts;
                          if (nt < pt - 1) {
                            var xt = _t + w[nt + 1].cts;
                            w[nt].duration = xt - Et;
                          } else
                            w[nt].duration = nt ? w[nt - 1].duration : me;
                          w[nt].cts = 0, ht = _t;
                        }
                      }
                    }
                    console.assert(H !== null, "mp4SampleDuration must be computed"), H = xe || !H ? me : H, this.nextAvcDts = K = z + H, this.videoSampleDuration = H, this.isVideoContiguous = true;
                    var At = F.default.moof(a.sequenceNumber++, V, L({}, a, { samples: w })), Ft = "video", Ot = { data1: At, data2: Ne, startPTS: Q / D, endPTS: (q + H) / D, startDTS: V / D, endDTS: K / D, type: Ft, hasAudio: false, hasVideo: true, nb: w.length, dropped: a.dropped };
                    return a.samples = [], a.dropped = 0, console.assert(Ne.length, "MDAT length must not be zero"), Ot;
                  }, h.remuxAudio = function(a, c, s, p, D) {
                    var A = a.inputTimeScale, w = a.samplerate ? a.samplerate : A, B = A / w, U = a.segmentCodec === "aac" ? y : I, K = U * B, W = this._initPTS, H = a.segmentCodec === "mp3" && this.typeSupported.mpeg, V = [], z = D !== void 0, Q = a.samples, q = H ? 0 : 8, ee = this.nextAudioPts || -1, ae = c * A;
                    if (this.isAudioContiguous = s = s || Q.length && ee > 0 && (p && Math.abs(ae - ee) < 9e3 || Math.abs(f(Q[0].pts - W, ae) - ee) < 20 * K), Q.forEach(function(we) {
                      we.pts = f(we.pts - W, ae);
                    }), !s || ee < 0) {
                      if (Q = Q.filter(function(we) {
                        return we.pts >= 0;
                      }), !Q.length)
                        return;
                      D === 0 ? ee = 0 : p && !z ? ee = Math.max(0, ae) : ee = Q[0].pts;
                    }
                    if (a.segmentCodec === "aac")
                      for (var ne = this.config.maxAudioFramesDrift, ue = 0, ye = ee; ue < Q.length; ue++) {
                        var be = Q[ue], me = be.pts, Se = me - ye, Te = Math.abs(1e3 * Se / A);
                        if (Se <= -ne * K && z)
                          ue === 0 && (k.logger.warn("Audio frame @ " + (me / A).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * Se / A) + " ms."), this.nextAudioPts = ee = ye = me);
                        else if (Se >= ne * K && Te < M && z) {
                          var fe = Math.round(Se / K);
                          ye = me - fe * K, ye < 0 && (fe--, ye += K), ue === 0 && (this.nextAudioPts = ee = ye), k.logger.warn("[mp4-remuxer]: Injecting " + fe + " audio frame @ " + (ye / A).toFixed(3) + "s due to " + Math.round(1e3 * Se / A) + " ms gap.");
                          for (var ie = 0; ie < fe; ie++) {
                            var de = Math.max(ye, 0), he = R.default.getSilentFrame(a.manifestCodec || a.codec, a.channelCount);
                            he || (k.logger.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), he = be.unit.subarray()), Q.splice(ue, 0, { unit: he, pts: de }), ye += K, ue++;
                          }
                        }
                        be.pts = ye, ye += K;
                      }
                    for (var oe = null, se = null, ve, _e = 0, Re = Q.length; Re--; )
                      _e += Q[Re].unit.byteLength;
                    for (var De = 0, ke = Q.length; De < ke; De++) {
                      var Ne = Q[De], Fe = Ne.unit, xe = Ne.pts;
                      if (se !== null) {
                        var Ue = V[De - 1];
                        Ue.duration = Math.round((xe - se) / B);
                      } else if (s && a.segmentCodec === "aac" && (xe = ee), oe = xe, _e > 0) {
                        _e += q;
                        try {
                          ve = new Uint8Array(_e);
                        } catch (we) {
                          this.observer.emit(O.Events.ERROR, O.Events.ERROR, { type: x.ErrorTypes.MUX_ERROR, details: x.ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: _e, reason: "fail allocating audio mdat " + _e });
                          return;
                        }
                        if (!H) {
                          var qe = new DataView(ve.buffer);
                          qe.setUint32(0, _e), ve.set(F.default.types.mdat, 4);
                        }
                      } else
                        return;
                      ve.set(Fe, q);
                      var We = Fe.byteLength;
                      q += We, V.push(new i(true, U, We, 0)), se = xe;
                    }
                    var tt = V.length;
                    if (!!tt) {
                      var Ye = V[V.length - 1];
                      this.nextAudioPts = ee = se + B * Ye.duration;
                      var ze = H ? new Uint8Array(0) : F.default.moof(a.sequenceNumber++, oe / B, L({}, a, { samples: V }));
                      a.samples = [];
                      var Ze = oe / A, st = ee / A, re = "audio", ce = { data1: ze, data2: ve, startPTS: Ze, endPTS: st, startDTS: Ze, endDTS: st, type: re, hasAudio: true, hasVideo: false, nb: tt };
                      return this.isAudioContiguous = true, console.assert(ve.length, "MDAT length must not be zero"), ce;
                    }
                  }, h.remuxEmptyAudio = function(a, c, s, p) {
                    var D = a.inputTimeScale, A = a.samplerate ? a.samplerate : D, w = D / A, B = this.nextAudioPts, U = (B !== null ? B : p.startDTS * D) + this._initDTS, K = p.endDTS * D + this._initDTS, W = w * y, H = Math.ceil((K - U) / W), V = R.default.getSilentFrame(a.manifestCodec || a.codec, a.channelCount);
                    if (k.logger.warn("[mp4-remuxer]: remux empty Audio"), !V) {
                      k.logger.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
                      return;
                    }
                    for (var z = [], Q = 0; Q < H; Q++) {
                      var q = U + Q * W;
                      z.push({ unit: V, pts: q, dts: q });
                    }
                    return a.samples = z, this.remuxAudio(a, c, s, false);
                  }, o;
                }();
                function f(o, h) {
                  var b;
                  if (h === null)
                    return o;
                  for (h < o ? b = -8589934592 : b = 8589934592; Math.abs(o - h) > 4294967296; )
                    o += b;
                  return o;
                }
                function l(o) {
                  for (var h = 0; h < o.length; h++)
                    if (o[h].key)
                      return h;
                  return -1;
                }
                function _(o, h, b, a) {
                  var c = o.samples.length;
                  if (!!c) {
                    for (var s = o.inputTimeScale, p = 0; p < c; p++) {
                      var D = o.samples[p];
                      D.pts = f(D.pts - b, h * s) / s, D.dts = f(D.dts - a, h * s) / s;
                    }
                    var A = o.samples;
                    return o.samples = [], { samples: A };
                  }
                }
                function g(o, h, b) {
                  var a = o.samples.length;
                  if (!!a) {
                    for (var c = o.inputTimeScale, s = 0; s < a; s++) {
                      var p = o.samples[s];
                      p.pts = f(p.pts - b, h * c) / c;
                    }
                    o.samples.sort(function(A, w) {
                      return A.pts - w.pts;
                    });
                    var D = o.samples;
                    return o.samples = [], { samples: D };
                  }
                }
                var i = function(h, b, a, c) {
                  this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = b, this.size = a, this.cts = c, this.flags = new n(h);
                }, n = function(h) {
                  this.isLeading = 0, this.isDependedOn = 0, this.hasRedundancy = 0, this.degradPrio = 0, this.dependsOn = 1, this.isNonSync = 1, this.dependsOn = h ? 2 : 1, this.isNonSync = h ? 0 : 1;
                };
              }, "./src/remux/passthrough-remuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => E });
                var j = N("./src/polyfills/number.ts"), R = N("./src/remux/mp4-remuxer.ts"), F = N("./src/utils/mp4-tools.ts"), O = N("./src/loader/fragment.ts"), x = N("./src/utils/logger.ts"), k = function() {
                  function L() {
                    this.emitInitSegment = false, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = void 0, this.initTracks = void 0, this.lastEndTime = null;
                  }
                  var M = L.prototype;
                  return M.destroy = function() {
                  }, M.resetTimeStamp = function(I) {
                    this.initPTS = I, this.lastEndTime = null;
                  }, M.resetNextTimestamp = function() {
                    this.lastEndTime = null;
                  }, M.resetInitSegment = function(I, S, d, v) {
                    this.audioCodec = S, this.videoCodec = d, this.generateInitSegment((0, F.patchEncyptionData)(I, v)), this.emitInitSegment = true;
                  }, M.generateInitSegment = function(I) {
                    var S = this.audioCodec, d = this.videoCodec;
                    if (!I || !I.byteLength) {
                      this.initTracks = void 0, this.initData = void 0;
                      return;
                    }
                    var v = this.initData = (0, F.parseInitSegment)(I);
                    S || (S = m2(v.audio, O.ElementaryStreamTypes.AUDIO)), d || (d = m2(v.video, O.ElementaryStreamTypes.VIDEO));
                    var f = {};
                    v.audio && v.video ? f.audiovideo = { container: "video/mp4", codec: S + "," + d, initSegment: I, id: "main" } : v.audio ? f.audio = { container: "audio/mp4", codec: S, initSegment: I, id: "audio" } : v.video ? f.video = { container: "video/mp4", codec: d, initSegment: I, id: "main" } : x.logger.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = f;
                  }, M.remux = function(I, S, d, v, f) {
                    var l, _ = this.initPTS, g = this.lastEndTime, i = { audio: void 0, video: void 0, text: v, id3: d, initSegment: void 0 };
                    (0, j.isFiniteNumber)(g) || (g = this.lastEndTime = f || 0);
                    var n = S.samples;
                    if (!n || !n.length)
                      return i;
                    var o = { initPTS: void 0, timescale: 1 }, h = this.initData;
                    if ((!h || !h.length) && (this.generateInitSegment(n), h = this.initData), !h || !h.length)
                      return x.logger.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), i;
                    this.emitInitSegment && (o.tracks = this.initTracks, this.emitInitSegment = false);
                    var b = (0, F.getStartDTS)(h, n);
                    (0, j.isFiniteNumber)(_) || (this.initPTS = o.initPTS = _ = b - f);
                    var a = (0, F.getDuration)(n, h), c = I ? b - _ : g, s = c + a;
                    (0, F.offsetStartDTS)(h, n, _), a > 0 ? this.lastEndTime = s : (x.logger.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
                    var p = !!h.audio, D = !!h.video, A = "";
                    p && (A += "audio"), D && (A += "video");
                    var w = { data1: n, startPTS: c, startDTS: c, endPTS: s, endDTS: s, type: A, hasAudio: p, hasVideo: D, nb: 1, dropped: 0 };
                    i.audio = w.type === "audio" ? w : void 0, i.video = w.type !== "audio" ? w : void 0, i.initSegment = o;
                    var B = (l = this.initPTS) != null ? l : 0;
                    return i.id3 = (0, R.flushTextTrackMetadataCueSamples)(d, f, B, B), v.samples.length && (i.text = (0, R.flushTextTrackUserdataCueSamples)(v, f, B)), i;
                  }, L;
                }();
                function m2(L, M) {
                  var y = L == null ? void 0 : L.codec;
                  return y && y.length > 4 ? y : y === "hvc1" || y === "hev1" ? "hvc1.1.c.L120.90" : y === "av01" ? "av01.0.04M.08" : y === "avc1" || M === O.ElementaryStreamTypes.VIDEO ? "avc1.42e01e" : "mp4a.40.5";
                }
                const E = k;
              }, "./src/task-loop.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                var j = function() {
                  function R() {
                    this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this);
                  }
                  var F = R.prototype;
                  return F.destroy = function() {
                    this.onHandlerDestroying(), this.onHandlerDestroyed();
                  }, F.onHandlerDestroying = function() {
                    this.clearNextTick(), this.clearInterval();
                  }, F.onHandlerDestroyed = function() {
                  }, F.hasInterval = function() {
                    return !!this._tickInterval;
                  }, F.hasNextTick = function() {
                    return !!this._tickTimer;
                  }, F.setInterval = function(x) {
                    return this._tickInterval ? false : (this._tickInterval = self.setInterval(this._boundTick, x), true);
                  }, F.clearInterval = function() {
                    return this._tickInterval ? (self.clearInterval(this._tickInterval), this._tickInterval = null, true) : false;
                  }, F.clearNextTick = function() {
                    return this._tickTimer ? (self.clearTimeout(this._tickTimer), this._tickTimer = null, true) : false;
                  }, F.tick = function() {
                    this._tickCallCount++, this._tickCallCount === 1 && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0);
                  }, F.tickImmediate = function() {
                    this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0);
                  }, F.doTick = function() {
                  }, R;
                }();
              }, "./src/types/cmcd.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { CMCDObjectType: () => R, CMCDStreamType: () => O, CMCDStreamingFormat: () => F, CMCDVersion: () => j });
                var j = 1, R;
                (function(x) {
                  x.MANIFEST = "m", x.AUDIO = "a", x.VIDEO = "v", x.MUXED = "av", x.INIT = "i", x.CAPTION = "c", x.TIMED_TEXT = "tt", x.KEY = "k", x.OTHER = "o";
                })(R || (R = {}));
                var F;
                (function(x) {
                  x.DASH = "d", x.HLS = "h", x.SMOOTH = "s", x.OTHER = "o";
                })(F || (F = {}));
                var O;
                (function(x) {
                  x.VOD = "v", x.LIVE = "l";
                })(O || (O = {}));
              }, "./src/types/demuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { MetadataSchema: () => j });
                var j;
                (function(R) {
                  R.audioId3 = "org.id3", R.dateRange = "com.apple.quicktime.HLS", R.emsg = "https://aomedia.org/emsg/ID3";
                })(j || (j = {}));
              }, "./src/types/level.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { HdcpLevels: () => x, HlsSkip: () => k, HlsUrlParameters: () => E, Level: () => L, getSkipValue: () => m2 });
                function j(M, y) {
                  for (var I = 0; I < y.length; I++) {
                    var S = y[I];
                    S.enumerable = S.enumerable || false, S.configurable = true, "value" in S && (S.writable = true), Object.defineProperty(M, F(S.key), S);
                  }
                }
                function R(M, y, I) {
                  return y && j(M.prototype, y), I && j(M, I), Object.defineProperty(M, "prototype", { writable: false }), M;
                }
                function F(M) {
                  var y = O(M, "string");
                  return typeof y == "symbol" ? y : String(y);
                }
                function O(M, y) {
                  if (typeof M != "object" || M === null)
                    return M;
                  var I = M[Symbol.toPrimitive];
                  if (I !== void 0) {
                    var S = I.call(M, y || "default");
                    if (typeof S != "object")
                      return S;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                  }
                  return (y === "string" ? String : Number)(M);
                }
                var x = ["NONE", "TYPE-0", "TYPE-1", "TYPE-2", null], k;
                (function(M) {
                  M.No = "", M.Yes = "YES", M.v2 = "v2";
                })(k || (k = {}));
                function m2(M, y) {
                  var I = M.canSkipUntil, S = M.canSkipDateRanges, d = M.endSN, v = y !== void 0 ? y - d : 0;
                  return I && v < I ? S ? k.v2 : k.Yes : k.No;
                }
                var E = function() {
                  function M(I, S, d) {
                    this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = I, this.part = S, this.skip = d;
                  }
                  var y = M.prototype;
                  return y.addDirectives = function(S) {
                    var d = new self.URL(S);
                    return this.msn !== void 0 && d.searchParams.set("_HLS_msn", this.msn.toString()), this.part !== void 0 && d.searchParams.set("_HLS_part", this.part.toString()), this.skip && d.searchParams.set("_HLS_skip", this.skip), d.href;
                  }, M;
                }(), L = function() {
                  function M(y) {
                    this.attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.unknownCodecs = void 0, this.audioGroupIds = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.textGroupIds = void 0, this.url = void 0, this._urlId = 0, this.url = [y.url], this.attrs = y.attrs, this.bitrate = y.bitrate, y.details && (this.details = y.details), this.id = y.id || 0, this.name = y.name, this.width = y.width || 0, this.height = y.height || 0, this.audioCodec = y.audioCodec, this.videoCodec = y.videoCodec, this.unknownCodecs = y.unknownCodecs, this.codecSet = [y.videoCodec, y.audioCodec].filter(function(I) {
                      return I;
                    }).join(",").replace(/\.[^.,]+/g, "");
                  }
                  return R(M, [{ key: "maxBitrate", get: function() {
                    return Math.max(this.realBitrate, this.bitrate);
                  } }, { key: "uri", get: function() {
                    return this.url[this._urlId] || "";
                  } }, { key: "urlId", get: function() {
                    return this._urlId;
                  }, set: function(I) {
                    var S = I % this.url.length;
                    this._urlId !== S && (this.details = void 0, this._urlId = S);
                  } }]), M;
                }();
              }, "./src/types/loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { PlaylistContextType: () => j, PlaylistLevelType: () => R });
                var j;
                (function(F) {
                  F.MANIFEST = "manifest", F.LEVEL = "level", F.AUDIO_TRACK = "audioTrack", F.SUBTITLE_TRACK = "subtitleTrack";
                })(j || (j = {}));
                var R;
                (function(F) {
                  F.MAIN = "main", F.AUDIO = "audio", F.SUBTITLE = "subtitle";
                })(R || (R = {}));
              }, "./src/types/transmuxer.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { ChunkMetadata: () => j });
                var j = function(O, x, k, m2, E, L) {
                  m2 === void 0 && (m2 = 0), E === void 0 && (E = -1), L === void 0 && (L = false), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = R(), this.buffering = { audio: R(), video: R(), audiovideo: R() }, this.level = O, this.sn = x, this.id = k, this.size = m2, this.part = E, this.partial = L;
                };
                function R() {
                  return { start: 0, executeStart: 0, executeEnd: 0, end: 0 };
                }
              }, "./src/utils/attr-list.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { AttrList: () => F });
                var j = /^(\d+)x(\d+)$/, R = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g, F = function() {
                  function O(k) {
                    typeof k == "string" && (k = O.parseAttrList(k));
                    for (var m2 in k)
                      k.hasOwnProperty(m2) && (this[m2] = k[m2]);
                  }
                  var x = O.prototype;
                  return x.decimalInteger = function(m2) {
                    var E = parseInt(this[m2], 10);
                    return E > Number.MAX_SAFE_INTEGER ? 1 / 0 : E;
                  }, x.hexadecimalInteger = function(m2) {
                    if (this[m2]) {
                      var E = (this[m2] || "0x").slice(2);
                      E = (E.length & 1 ? "0" : "") + E;
                      for (var L = new Uint8Array(E.length / 2), M = 0; M < E.length / 2; M++)
                        L[M] = parseInt(E.slice(M * 2, M * 2 + 2), 16);
                      return L;
                    } else
                      return null;
                  }, x.hexadecimalIntegerAsNumber = function(m2) {
                    var E = parseInt(this[m2], 16);
                    return E > Number.MAX_SAFE_INTEGER ? 1 / 0 : E;
                  }, x.decimalFloatingPoint = function(m2) {
                    return parseFloat(this[m2]);
                  }, x.optionalFloat = function(m2, E) {
                    var L = this[m2];
                    return L ? parseFloat(L) : E;
                  }, x.enumeratedString = function(m2) {
                    return this[m2];
                  }, x.bool = function(m2) {
                    return this[m2] === "YES";
                  }, x.decimalResolution = function(m2) {
                    var E = j.exec(this[m2]);
                    if (E !== null)
                      return { width: parseInt(E[1], 10), height: parseInt(E[2], 10) };
                  }, O.parseAttrList = function(m2) {
                    var E, L = {}, M = '"';
                    for (R.lastIndex = 0; (E = R.exec(m2)) !== null; ) {
                      var y = E[2];
                      y.indexOf(M) === 0 && y.lastIndexOf(M) === y.length - 1 && (y = y.slice(1, -1)), L[E[1]] = y;
                    }
                    return L;
                  }, O;
                }();
              }, "./src/utils/binary-search.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = { search: function(O, x) {
                  for (var k = 0, m2 = O.length - 1, E = null, L = null; k <= m2; ) {
                    E = (k + m2) / 2 | 0, L = O[E];
                    var M = x(L);
                    if (M > 0)
                      k = E + 1;
                    else if (M < 0)
                      m2 = E - 1;
                    else
                      return L;
                  }
                  return null;
                } };
                const R = j;
              }, "./src/utils/buffer-helper.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { BufferHelper: () => F });
                var j = N("./src/utils/logger.ts"), R = { length: 0, start: function() {
                  return 0;
                }, end: function() {
                  return 0;
                } }, F = function() {
                  function O() {
                  }
                  return O.isBuffered = function(k, m2) {
                    try {
                      if (k) {
                        for (var E = O.getBuffered(k), L = 0; L < E.length; L++)
                          if (m2 >= E.start(L) && m2 <= E.end(L))
                            return true;
                      }
                    } catch (M) {
                    }
                    return false;
                  }, O.bufferInfo = function(k, m2, E) {
                    try {
                      if (k) {
                        var L = O.getBuffered(k), M = [], y;
                        for (y = 0; y < L.length; y++)
                          M.push({ start: L.start(y), end: L.end(y) });
                        return this.bufferedInfo(M, m2, E);
                      }
                    } catch (I) {
                    }
                    return { len: 0, start: m2, end: m2, nextStart: void 0 };
                  }, O.bufferedInfo = function(k, m2, E) {
                    m2 = Math.max(0, m2), k.sort(function(i, n) {
                      var o = i.start - n.start;
                      return o || n.end - i.end;
                    });
                    var L = [];
                    if (E)
                      for (var M = 0; M < k.length; M++) {
                        var y = L.length;
                        if (y) {
                          var I = L[y - 1].end;
                          k[M].start - I < E ? k[M].end > I && (L[y - 1].end = k[M].end) : L.push(k[M]);
                        } else
                          L.push(k[M]);
                      }
                    else
                      L = k;
                    for (var S = 0, d, v = m2, f = m2, l = 0; l < L.length; l++) {
                      var _ = L[l].start, g = L[l].end;
                      if (m2 + E >= _ && m2 < g)
                        v = _, f = g, S = f - m2;
                      else if (m2 + E < _) {
                        d = _;
                        break;
                      }
                    }
                    return { len: S, start: v || 0, end: f || 0, nextStart: d };
                  }, O.getBuffered = function(k) {
                    try {
                      return k.buffered;
                    } catch (m2) {
                      return j.logger.log("failed to get media.buffered", m2), R;
                    }
                  }, O;
                }();
              }, "./src/utils/cea-608-parser.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { CaptionScreen: () => l, Row: () => f, default: () => h });
                var j = N("./src/utils/logger.ts"), R = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }, F = function(a) {
                  var c = a;
                  return R.hasOwnProperty(a) && (c = R[a]), String.fromCharCode(c);
                }, O = 15, x = 100, k = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }, m2 = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }, E = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }, L = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }, M = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"], y;
                (function(b) {
                  b[b.ERROR = 0] = "ERROR", b[b.TEXT = 1] = "TEXT", b[b.WARNING = 2] = "WARNING", b[b.INFO = 2] = "INFO", b[b.DEBUG = 3] = "DEBUG", b[b.DATA = 3] = "DATA";
                })(y || (y = {}));
                var I = function() {
                  function b() {
                    this.time = null, this.verboseLevel = y.ERROR;
                  }
                  var a = b.prototype;
                  return a.log = function(s, p) {
                    if (this.verboseLevel >= s) {
                      var D = typeof p == "function" ? p() : p;
                      j.logger.log(this.time + " [" + s + "] " + D);
                    }
                  }, b;
                }(), S = function(a) {
                  for (var c = [], s = 0; s < a.length; s++)
                    c.push(a[s].toString(16));
                  return c;
                }, d = function() {
                  function b(c, s, p, D, A) {
                    this.foreground = void 0, this.underline = void 0, this.italics = void 0, this.background = void 0, this.flash = void 0, this.foreground = c || "white", this.underline = s || false, this.italics = p || false, this.background = D || "black", this.flash = A || false;
                  }
                  var a = b.prototype;
                  return a.reset = function() {
                    this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
                  }, a.setStyles = function(s) {
                    for (var p = ["foreground", "underline", "italics", "background", "flash"], D = 0; D < p.length; D++) {
                      var A = p[D];
                      s.hasOwnProperty(A) && (this[A] = s[A]);
                    }
                  }, a.isDefault = function() {
                    return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;
                  }, a.equals = function(s) {
                    return this.foreground === s.foreground && this.underline === s.underline && this.italics === s.italics && this.background === s.background && this.flash === s.flash;
                  }, a.copy = function(s) {
                    this.foreground = s.foreground, this.underline = s.underline, this.italics = s.italics, this.background = s.background, this.flash = s.flash;
                  }, a.toString = function() {
                    return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
                  }, b;
                }(), v = function() {
                  function b(c, s, p, D, A, w) {
                    this.uchar = void 0, this.penState = void 0, this.uchar = c || " ", this.penState = new d(s, p, D, A, w);
                  }
                  var a = b.prototype;
                  return a.reset = function() {
                    this.uchar = " ", this.penState.reset();
                  }, a.setChar = function(s, p) {
                    this.uchar = s, this.penState.copy(p);
                  }, a.setPenState = function(s) {
                    this.penState.copy(s);
                  }, a.equals = function(s) {
                    return this.uchar === s.uchar && this.penState.equals(s.penState);
                  }, a.copy = function(s) {
                    this.uchar = s.uchar, this.penState.copy(s.penState);
                  }, a.isEmpty = function() {
                    return this.uchar === " " && this.penState.isDefault();
                  }, b;
                }(), f = function() {
                  function b(c) {
                    this.chars = void 0, this.pos = void 0, this.currPenState = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chars = [];
                    for (var s = 0; s < x; s++)
                      this.chars.push(new v());
                    this.logger = c, this.pos = 0, this.currPenState = new d();
                  }
                  var a = b.prototype;
                  return a.equals = function(s) {
                    for (var p = true, D = 0; D < x; D++)
                      if (!this.chars[D].equals(s.chars[D])) {
                        p = false;
                        break;
                      }
                    return p;
                  }, a.copy = function(s) {
                    for (var p = 0; p < x; p++)
                      this.chars[p].copy(s.chars[p]);
                  }, a.isEmpty = function() {
                    for (var s = true, p = 0; p < x; p++)
                      if (!this.chars[p].isEmpty()) {
                        s = false;
                        break;
                      }
                    return s;
                  }, a.setCursor = function(s) {
                    this.pos !== s && (this.pos = s), this.pos < 0 ? (this.logger.log(y.DEBUG, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > x && (this.logger.log(y.DEBUG, "Too large cursor position " + this.pos), this.pos = x);
                  }, a.moveCursor = function(s) {
                    var p = this.pos + s;
                    if (s > 1)
                      for (var D = this.pos + 1; D < p + 1; D++)
                        this.chars[D].setPenState(this.currPenState);
                    this.setCursor(p);
                  }, a.backSpace = function() {
                    this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
                  }, a.insertChar = function(s) {
                    var p = this;
                    s >= 144 && this.backSpace();
                    var D = F(s);
                    if (this.pos >= x) {
                      this.logger.log(y.ERROR, function() {
                        return "Cannot insert " + s.toString(16) + " (" + D + ") at position " + p.pos + ". Skipping it!";
                      });
                      return;
                    }
                    this.chars[this.pos].setChar(D, this.currPenState), this.moveCursor(1);
                  }, a.clearFromPos = function(s) {
                    var p;
                    for (p = s; p < x; p++)
                      this.chars[p].reset();
                  }, a.clear = function() {
                    this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
                  }, a.clearToEndOfRow = function() {
                    this.clearFromPos(this.pos);
                  }, a.getTextString = function() {
                    for (var s = [], p = true, D = 0; D < x; D++) {
                      var A = this.chars[D].uchar;
                      A !== " " && (p = false), s.push(A);
                    }
                    return p ? "" : s.join("");
                  }, a.setPenStyles = function(s) {
                    this.currPenState.setStyles(s);
                    var p = this.chars[this.pos];
                    p.setPenState(this.currPenState);
                  }, b;
                }(), l = function() {
                  function b(c) {
                    this.rows = void 0, this.currRow = void 0, this.nrRollUpRows = void 0, this.lastOutputScreen = void 0, this.logger = void 0, this.rows = [];
                    for (var s = 0; s < O; s++)
                      this.rows.push(new f(c));
                    this.logger = c, this.currRow = O - 1, this.nrRollUpRows = null, this.lastOutputScreen = null, this.reset();
                  }
                  var a = b.prototype;
                  return a.reset = function() {
                    for (var s = 0; s < O; s++)
                      this.rows[s].clear();
                    this.currRow = O - 1;
                  }, a.equals = function(s) {
                    for (var p = true, D = 0; D < O; D++)
                      if (!this.rows[D].equals(s.rows[D])) {
                        p = false;
                        break;
                      }
                    return p;
                  }, a.copy = function(s) {
                    for (var p = 0; p < O; p++)
                      this.rows[p].copy(s.rows[p]);
                  }, a.isEmpty = function() {
                    for (var s = true, p = 0; p < O; p++)
                      if (!this.rows[p].isEmpty()) {
                        s = false;
                        break;
                      }
                    return s;
                  }, a.backSpace = function() {
                    var s = this.rows[this.currRow];
                    s.backSpace();
                  }, a.clearToEndOfRow = function() {
                    var s = this.rows[this.currRow];
                    s.clearToEndOfRow();
                  }, a.insertChar = function(s) {
                    var p = this.rows[this.currRow];
                    p.insertChar(s);
                  }, a.setPen = function(s) {
                    var p = this.rows[this.currRow];
                    p.setPenStyles(s);
                  }, a.moveCursor = function(s) {
                    var p = this.rows[this.currRow];
                    p.moveCursor(s);
                  }, a.setCursor = function(s) {
                    this.logger.log(y.INFO, "setCursor: " + s);
                    var p = this.rows[this.currRow];
                    p.setCursor(s);
                  }, a.setPAC = function(s) {
                    this.logger.log(y.INFO, function() {
                      return "pacData = " + JSON.stringify(s);
                    });
                    var p = s.row - 1;
                    if (this.nrRollUpRows && p < this.nrRollUpRows - 1 && (p = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== p) {
                      for (var D = 0; D < O; D++)
                        this.rows[D].clear();
                      var A = this.currRow + 1 - this.nrRollUpRows, w = this.lastOutputScreen;
                      if (w) {
                        var B = w.rows[A].cueStartTime, U = this.logger.time;
                        if (B && U !== null && B < U)
                          for (var K = 0; K < this.nrRollUpRows; K++)
                            this.rows[p - this.nrRollUpRows + K + 1].copy(w.rows[A + K]);
                      }
                    }
                    this.currRow = p;
                    var W = this.rows[this.currRow];
                    if (s.indent !== null) {
                      var H = s.indent, V = Math.max(H - 1, 0);
                      W.setCursor(s.indent), s.color = W.chars[V].penState.foreground;
                    }
                    var z = { foreground: s.color, underline: s.underline, italics: s.italics, background: "black", flash: false };
                    this.setPen(z);
                  }, a.setBkgData = function(s) {
                    this.logger.log(y.INFO, function() {
                      return "bkgData = " + JSON.stringify(s);
                    }), this.backSpace(), this.setPen(s), this.insertChar(32);
                  }, a.setRollUpRows = function(s) {
                    this.nrRollUpRows = s;
                  }, a.rollUp = function() {
                    var s = this;
                    if (this.nrRollUpRows === null) {
                      this.logger.log(y.DEBUG, "roll_up but nrRollUpRows not set yet");
                      return;
                    }
                    this.logger.log(y.TEXT, function() {
                      return s.getDisplayText();
                    });
                    var p = this.currRow + 1 - this.nrRollUpRows, D = this.rows.splice(p, 1)[0];
                    D.clear(), this.rows.splice(this.currRow, 0, D), this.logger.log(y.INFO, "Rolling up");
                  }, a.getDisplayText = function(s) {
                    s = s || false;
                    for (var p = [], D = "", A = -1, w = 0; w < O; w++) {
                      var B = this.rows[w].getTextString();
                      B && (A = w + 1, s ? p.push("Row " + A + ": '" + B + "'") : p.push(B.trim()));
                    }
                    return p.length > 0 && (s ? D = "[" + p.join(" | ") + "]" : D = p.join(`
`)), D;
                  }, a.getTextAndFormat = function() {
                    return this.rows;
                  }, b;
                }(), _ = function() {
                  function b(c, s, p) {
                    this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = c, this.outputFilter = s, this.mode = null, this.verbose = 0, this.displayedMemory = new l(p), this.nonDisplayedMemory = new l(p), this.lastOutputScreen = new l(p), this.currRollUpRow = this.displayedMemory.rows[O - 1], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = p;
                  }
                  var a = b.prototype;
                  return a.reset = function() {
                    this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[O - 1], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
                  }, a.getHandler = function() {
                    return this.outputFilter;
                  }, a.setHandler = function(s) {
                    this.outputFilter = s;
                  }, a.setPAC = function(s) {
                    this.writeScreen.setPAC(s);
                  }, a.setBkgData = function(s) {
                    this.writeScreen.setBkgData(s);
                  }, a.setMode = function(s) {
                    s !== this.mode && (this.mode = s, this.logger.log(y.INFO, function() {
                      return "MODE=" + s;
                    }), this.mode === "MODE_POP-ON" ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), this.mode !== "MODE_ROLL-UP" && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = s);
                  }, a.insertChars = function(s) {
                    for (var p = this, D = 0; D < s.length; D++)
                      this.writeScreen.insertChar(s[D]);
                    var A = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                    this.logger.log(y.INFO, function() {
                      return A + ": " + p.writeScreen.getDisplayText(true);
                    }), (this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP") && (this.logger.log(y.TEXT, function() {
                      return "DISPLAYED: " + p.displayedMemory.getDisplayText(true);
                    }), this.outputDataUpdate());
                  }, a.ccRCL = function() {
                    this.logger.log(y.INFO, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
                  }, a.ccBS = function() {
                    this.logger.log(y.INFO, "BS - BackSpace"), this.mode !== "MODE_TEXT" && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate());
                  }, a.ccAOF = function() {
                  }, a.ccAON = function() {
                  }, a.ccDER = function() {
                    this.logger.log(y.INFO, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate();
                  }, a.ccRU = function(s) {
                    this.logger.log(y.INFO, "RU(" + s + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(s);
                  }, a.ccFON = function() {
                    this.logger.log(y.INFO, "FON - Flash On"), this.writeScreen.setPen({ flash: true });
                  }, a.ccRDC = function() {
                    this.logger.log(y.INFO, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
                  }, a.ccTR = function() {
                    this.logger.log(y.INFO, "TR"), this.setMode("MODE_TEXT");
                  }, a.ccRTD = function() {
                    this.logger.log(y.INFO, "RTD"), this.setMode("MODE_TEXT");
                  }, a.ccEDM = function() {
                    this.logger.log(y.INFO, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(true);
                  }, a.ccCR = function() {
                    this.logger.log(y.INFO, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(true);
                  }, a.ccENM = function() {
                    this.logger.log(y.INFO, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
                  }, a.ccEOC = function() {
                    var s = this;
                    if (this.logger.log(y.INFO, "EOC - End Of Caption"), this.mode === "MODE_POP-ON") {
                      var p = this.displayedMemory;
                      this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = p, this.writeScreen = this.nonDisplayedMemory, this.logger.log(y.TEXT, function() {
                        return "DISP: " + s.displayedMemory.getDisplayText();
                      });
                    }
                    this.outputDataUpdate(true);
                  }, a.ccTO = function(s) {
                    this.logger.log(y.INFO, "TO(" + s + ") - Tab Offset"), this.writeScreen.moveCursor(s);
                  }, a.ccMIDROW = function(s) {
                    var p = { flash: false };
                    if (p.underline = s % 2 == 1, p.italics = s >= 46, p.italics)
                      p.foreground = "white";
                    else {
                      var D = Math.floor(s / 2) - 16, A = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"];
                      p.foreground = A[D];
                    }
                    this.logger.log(y.INFO, "MIDROW: " + JSON.stringify(p)), this.writeScreen.setPen(p);
                  }, a.outputDataUpdate = function(s) {
                    s === void 0 && (s = false);
                    var p = this.logger.time;
                    p !== null && this.outputFilter && (this.cueStartTime === null && !this.displayedMemory.isEmpty() ? this.cueStartTime = p : this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, p, this.lastOutputScreen), s && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : p), this.lastOutputScreen.copy(this.displayedMemory));
                  }, a.cueSplitAtTime = function(s) {
                    this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, s, this.displayedMemory), this.cueStartTime = s));
                  }, b;
                }(), g = function() {
                  function b(c, s, p) {
                    this.channels = void 0, this.currentChannel = 0, this.cmdHistory = void 0, this.logger = void 0;
                    var D = new I();
                    this.channels = [null, new _(c, s, D), new _(c + 1, p, D)], this.cmdHistory = o(), this.logger = D;
                  }
                  var a = b.prototype;
                  return a.getHandler = function(s) {
                    return this.channels[s].getHandler();
                  }, a.setHandler = function(s, p) {
                    this.channels[s].setHandler(p);
                  }, a.addData = function(s, p) {
                    var D, A, w, B = false;
                    this.logger.time = s;
                    for (var U = 0; U < p.length; U += 2)
                      if (A = p[U] & 127, w = p[U + 1] & 127, !(A === 0 && w === 0)) {
                        if (this.logger.log(y.DATA, "[" + S([p[U], p[U + 1]]) + "] -> (" + S([A, w]) + ")"), D = this.parseCmd(A, w), D || (D = this.parseMidrow(A, w)), D || (D = this.parsePAC(A, w)), D || (D = this.parseBackgroundAttributes(A, w)), !D && (B = this.parseChars(A, w), B)) {
                          var K = this.currentChannel;
                          if (K && K > 0) {
                            var W = this.channels[K];
                            W.insertChars(B);
                          } else
                            this.logger.log(y.WARNING, "No channel found yet. TEXT-MODE?");
                        }
                        !D && !B && this.logger.log(y.WARNING, "Couldn't parse cleaned data " + S([A, w]) + " orig: " + S([p[U], p[U + 1]]));
                      }
                  }, a.parseCmd = function(s, p) {
                    var D = this.cmdHistory, A = (s === 20 || s === 28 || s === 21 || s === 29) && p >= 32 && p <= 47, w = (s === 23 || s === 31) && p >= 33 && p <= 35;
                    if (!(A || w))
                      return false;
                    if (n(s, p, D))
                      return i(null, null, D), this.logger.log(y.DEBUG, "Repeated command (" + S([s, p]) + ") is dropped"), true;
                    var B = s === 20 || s === 21 || s === 23 ? 1 : 2, U = this.channels[B];
                    return s === 20 || s === 21 || s === 28 || s === 29 ? p === 32 ? U.ccRCL() : p === 33 ? U.ccBS() : p === 34 ? U.ccAOF() : p === 35 ? U.ccAON() : p === 36 ? U.ccDER() : p === 37 ? U.ccRU(2) : p === 38 ? U.ccRU(3) : p === 39 ? U.ccRU(4) : p === 40 ? U.ccFON() : p === 41 ? U.ccRDC() : p === 42 ? U.ccTR() : p === 43 ? U.ccRTD() : p === 44 ? U.ccEDM() : p === 45 ? U.ccCR() : p === 46 ? U.ccENM() : p === 47 && U.ccEOC() : U.ccTO(p - 32), i(s, p, D), this.currentChannel = B, true;
                  }, a.parseMidrow = function(s, p) {
                    var D = 0;
                    if ((s === 17 || s === 25) && p >= 32 && p <= 47) {
                      if (s === 17 ? D = 1 : D = 2, D !== this.currentChannel)
                        return this.logger.log(y.ERROR, "Mismatch channel in midrow parsing"), false;
                      var A = this.channels[D];
                      return A ? (A.ccMIDROW(p), this.logger.log(y.DEBUG, "MIDROW (" + S([s, p]) + ")"), true) : false;
                    }
                    return false;
                  }, a.parsePAC = function(s, p) {
                    var D, A = this.cmdHistory, w = (s >= 17 && s <= 23 || s >= 25 && s <= 31) && p >= 64 && p <= 127, B = (s === 16 || s === 24) && p >= 64 && p <= 95;
                    if (!(w || B))
                      return false;
                    if (n(s, p, A))
                      return i(null, null, A), true;
                    var U = s <= 23 ? 1 : 2;
                    p >= 64 && p <= 95 ? D = U === 1 ? k[s] : E[s] : D = U === 1 ? m2[s] : L[s];
                    var K = this.channels[U];
                    return K ? (K.setPAC(this.interpretPAC(D, p)), i(s, p, A), this.currentChannel = U, true) : false;
                  }, a.interpretPAC = function(s, p) {
                    var D, A = { color: null, italics: false, indent: null, underline: false, row: s };
                    return p > 95 ? D = p - 96 : D = p - 64, A.underline = (D & 1) == 1, D <= 13 ? A.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(D / 2)] : D <= 15 ? (A.italics = true, A.color = "white") : A.indent = Math.floor((D - 16) / 2) * 4, A;
                  }, a.parseChars = function(s, p) {
                    var D, A = null, w = null;
                    if (s >= 25 ? (D = 2, w = s - 8) : (D = 1, w = s), w >= 17 && w <= 19) {
                      var B;
                      w === 17 ? B = p + 80 : w === 18 ? B = p + 112 : B = p + 144, this.logger.log(y.INFO, "Special char '" + F(B) + "' in channel " + D), A = [B];
                    } else
                      s >= 32 && s <= 127 && (A = p === 0 ? [s] : [s, p]);
                    if (A) {
                      var U = S(A);
                      this.logger.log(y.DEBUG, "Char codes =  " + U.join(",")), i(s, p, this.cmdHistory);
                    }
                    return A;
                  }, a.parseBackgroundAttributes = function(s, p) {
                    var D = (s === 16 || s === 24) && p >= 32 && p <= 47, A = (s === 23 || s === 31) && p >= 45 && p <= 47;
                    if (!(D || A))
                      return false;
                    var w, B = {};
                    s === 16 || s === 24 ? (w = Math.floor((p - 32) / 2), B.background = M[w], p % 2 == 1 && (B.background = B.background + "_semi")) : p === 45 ? B.background = "transparent" : (B.foreground = "black", p === 47 && (B.underline = true));
                    var U = s <= 23 ? 1 : 2, K = this.channels[U];
                    return K.setBkgData(B), i(s, p, this.cmdHistory), true;
                  }, a.reset = function() {
                    for (var s = 0; s < Object.keys(this.channels).length; s++) {
                      var p = this.channels[s];
                      p && p.reset();
                    }
                    this.cmdHistory = o();
                  }, a.cueSplitAtTime = function(s) {
                    for (var p = 0; p < this.channels.length; p++) {
                      var D = this.channels[p];
                      D && D.cueSplitAtTime(s);
                    }
                  }, b;
                }();
                function i(b, a, c) {
                  c.a = b, c.b = a;
                }
                function n(b, a, c) {
                  return c.a === b && c.b === a;
                }
                function o() {
                  return { a: null, b: null };
                }
                const h = g;
              }, "./src/utils/codecs.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { isCodecSupportedInMp4: () => F, isCodecType: () => R });
                var j = { audio: { a3ds: true, "ac-3": true, "ac-4": true, alac: true, alaw: true, dra1: true, "dts+": true, "dts-": true, dtsc: true, dtse: true, dtsh: true, "ec-3": true, enca: true, g719: true, g726: true, m4ae: true, mha1: true, mha2: true, mhm1: true, mhm2: true, mlpa: true, mp4a: true, "raw ": true, Opus: true, opus: true, samr: true, sawb: true, sawp: true, sevc: true, sqcp: true, ssmv: true, twos: true, ulaw: true }, video: { avc1: true, avc2: true, avc3: true, avc4: true, avcp: true, av01: true, drac: true, dva1: true, dvav: true, dvh1: true, dvhe: true, encv: true, hev1: true, hvc1: true, mjp2: true, mp4v: true, mvc1: true, mvc2: true, mvc3: true, mvc4: true, resv: true, rv60: true, s263: true, svc1: true, svc2: true, "vc-1": true, vp08: true, vp09: true }, text: { stpp: true, wvtt: true } };
                function R(O, x) {
                  var k = j[x];
                  return !!k && k[O.slice(0, 4)] === true;
                }
                function F(O, x) {
                  return MediaSource.isTypeSupported((x || "video") + '/mp4;codecs="' + O + '"');
                }
              }, "./src/utils/cues.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => k });
                var j = N("./src/utils/vttparser.ts"), R = N("./src/utils/webvtt-parser.ts"), F = N("./src/utils/texttrack-utils.ts"), O = /\s/, x = { newCue: function(E, L, M, y) {
                  for (var I = [], S, d, v, f, l, _ = self.VTTCue || self.TextTrackCue, g = 0; g < y.rows.length; g++)
                    if (S = y.rows[g], v = true, f = 0, l = "", !S.isEmpty()) {
                      for (var i = 0; i < S.chars.length; i++)
                        O.test(S.chars[i].uchar) && v ? f++ : (l += S.chars[i].uchar, v = false);
                      S.cueStartTime = L, L === M && (M += 1e-4), f >= 16 ? f-- : f++;
                      var n = (0, j.fixLineBreaks)(l.trim()), o = (0, R.generateCueId)(L, M, n);
                      (!E || !E.cues || !E.cues.getCueById(o)) && (d = new _(L, M, n), d.id = o, d.line = g + 1, d.align = "left", d.position = 10 + Math.min(80, Math.floor(f * 8 / 32) * 10), I.push(d));
                    }
                  return E && I.length && (I.sort(function(h, b) {
                    return h.line === "auto" || b.line === "auto" ? 0 : h.line > 8 && b.line > 8 ? b.line - h.line : h.line - b.line;
                  }), I.forEach(function(h) {
                    return (0, F.addCueToTrack)(E, h);
                  })), I;
                } };
                const k = x;
              }, "./src/utils/discontinuities.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { adjustSlidingStart: () => E, alignMediaPlaylistByPDT: () => I, alignPDT: () => y, alignStream: () => L, findDiscontinuousReferenceFrag: () => k, findFirstFragWithCC: () => O, shouldAlignOnDiscontinuities: () => x });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/logger.ts"), F = N("./src/controller/level-helper.ts");
                function O(S, d) {
                  for (var v = null, f = 0, l = S.length; f < l; f++) {
                    var _ = S[f];
                    if (_ && _.cc === d) {
                      v = _;
                      break;
                    }
                  }
                  return v;
                }
                function x(S, d, v) {
                  return !!(d.details && (v.endCC > v.startCC || S && S.cc < v.startCC));
                }
                function k(S, d, v) {
                  v === void 0 && (v = 0);
                  var f = S.fragments, l = d.fragments;
                  if (!l.length || !f.length) {
                    R.logger.log("No fragments to align");
                    return;
                  }
                  var _ = O(f, l[0].cc);
                  if (!_ || _ && !_.startPTS) {
                    R.logger.log("No frag in previous level to align on");
                    return;
                  }
                  return _;
                }
                function m2(S, d) {
                  if (S) {
                    var v = S.start + d;
                    S.start = S.startPTS = v, S.endPTS = v + S.duration;
                  }
                }
                function E(S, d) {
                  for (var v = d.fragments, f = 0, l = v.length; f < l; f++)
                    m2(v[f], S);
                  d.fragmentHint && m2(d.fragmentHint, S), d.alignedSliding = true;
                }
                function L(S, d, v) {
                  !d || (M(S, v, d), !v.alignedSliding && d.details && y(v, d.details), !v.alignedSliding && d.details && !v.skippedSegments && (0, F.adjustSliding)(d.details, v));
                }
                function M(S, d, v) {
                  if (x(S, v, d)) {
                    var f = k(v.details, d);
                    f && (0, j.isFiniteNumber)(f.start) && (R.logger.log("Adjusting PTS using last level due to CC increase within current level " + d.url), E(f.start, d));
                  }
                }
                function y(S, d) {
                  if (!(!d.fragments.length || !S.hasProgramDateTime || !d.hasProgramDateTime)) {
                    var v = d.fragments[0].programDateTime, f = S.fragments[0].programDateTime, l = (f - v) / 1e3 + d.fragments[0].start;
                    l && (0, j.isFiniteNumber)(l) && (R.logger.log("Adjusting PTS using programDateTime delta " + (f - v) + "ms, sliding:" + l.toFixed(3) + " " + S.url + " "), E(l, S));
                  }
                }
                function I(S, d) {
                  if (!(!S.hasProgramDateTime || !d.hasProgramDateTime)) {
                    var v = S.fragments, f = d.fragments;
                    if (!(!v.length || !f.length)) {
                      var l = Math.round(f.length / 2) - 1, _ = f[l], g = O(v, _.cc) || v[Math.round(v.length / 2) - 1], i = _.programDateTime, n = g.programDateTime;
                      if (!(i === null || n === null)) {
                        var o = (n - i) / 1e3 - (g.start - _.start);
                        E(o, S);
                      }
                    }
                  }
                }
              }, "./src/utils/ewma-bandwidth-estimator.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => F });
                var j = N("./src/utils/ewma.ts"), R = function() {
                  function O(k, m2, E) {
                    this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultEstimate_ = E, this.minWeight_ = 1e-3, this.minDelayMs_ = 50, this.slow_ = new j.default(k), this.fast_ = new j.default(m2);
                  }
                  var x = O.prototype;
                  return x.update = function(m2, E) {
                    var L = this.slow_, M = this.fast_;
                    this.slow_.halfLife !== m2 && (this.slow_ = new j.default(m2, L.getEstimate(), L.getTotalWeight())), this.fast_.halfLife !== E && (this.fast_ = new j.default(E, M.getEstimate(), M.getTotalWeight()));
                  }, x.sample = function(m2, E) {
                    m2 = Math.max(m2, this.minDelayMs_);
                    var L = 8 * E, M = m2 / 1e3, y = L / M;
                    this.fast_.sample(M, y), this.slow_.sample(M, y);
                  }, x.canEstimate = function() {
                    var m2 = this.fast_;
                    return m2 && m2.getTotalWeight() >= this.minWeight_;
                  }, x.getEstimate = function() {
                    return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_;
                  }, x.destroy = function() {
                  }, O;
                }();
                const F = R;
              }, "./src/utils/ewma.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = function() {
                  function F(x, k, m2) {
                    k === void 0 && (k = 0), m2 === void 0 && (m2 = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = x, this.alpha_ = x ? Math.exp(Math.log(0.5) / x) : 0, this.estimate_ = k, this.totalWeight_ = m2;
                  }
                  var O = F.prototype;
                  return O.sample = function(k, m2) {
                    var E = Math.pow(this.alpha_, k);
                    this.estimate_ = m2 * (1 - E) + E * this.estimate_, this.totalWeight_ += k;
                  }, O.getTotalWeight = function() {
                    return this.totalWeight_;
                  }, O.getEstimate = function() {
                    if (this.alpha_) {
                      var k = 1 - Math.pow(this.alpha_, this.totalWeight_);
                      if (k)
                        return this.estimate_ / k;
                    }
                    return this.estimate_;
                  }, F;
                }();
                const R = j;
              }, "./src/utils/fetch-loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => l, fetchSupported: () => I });
                var j = N("./src/polyfills/number.ts"), R = N("./src/loader/load-stats.ts"), F = N("./src/demux/chunk-cache.ts");
                function O(_, g) {
                  _.prototype = Object.create(g.prototype), _.prototype.constructor = _, L(_, g);
                }
                function x(_) {
                  var g = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
                  return x = function(n) {
                    if (n === null || !E(n))
                      return n;
                    if (typeof n != "function")
                      throw new TypeError("Super expression must either be null or a function");
                    if (typeof g != "undefined") {
                      if (g.has(n))
                        return g.get(n);
                      g.set(n, o);
                    }
                    function o() {
                      return k(n, arguments, M(this).constructor);
                    }
                    return o.prototype = Object.create(n.prototype, { constructor: { value: o, enumerable: false, writable: true, configurable: true } }), L(o, n);
                  }, x(_);
                }
                function k(_, g, i) {
                  return m2() ? k = Reflect.construct.bind() : k = function(o, h, b) {
                    var a = [null];
                    a.push.apply(a, h);
                    var c = Function.bind.apply(o, a), s = new c();
                    return b && L(s, b.prototype), s;
                  }, k.apply(null, arguments);
                }
                function m2() {
                  if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
                    return false;
                  if (typeof Proxy == "function")
                    return true;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                    })), true;
                  } catch (_) {
                    return false;
                  }
                }
                function E(_) {
                  return Function.toString.call(_).indexOf("[native code]") !== -1;
                }
                function L(_, g) {
                  return L = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
                    return n.__proto__ = o, n;
                  }, L(_, g);
                }
                function M(_) {
                  return M = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(i) {
                    return i.__proto__ || Object.getPrototypeOf(i);
                  }, M(_);
                }
                function y() {
                  return y = Object.assign ? Object.assign.bind() : function(_) {
                    for (var g = 1; g < arguments.length; g++) {
                      var i = arguments[g];
                      for (var n in i)
                        Object.prototype.hasOwnProperty.call(i, n) && (_[n] = i[n]);
                    }
                    return _;
                  }, y.apply(this, arguments);
                }
                function I() {
                  if (self.fetch && self.AbortController && self.ReadableStream && self.Request)
                    try {
                      return new self.ReadableStream({}), true;
                    } catch (_) {
                    }
                  return false;
                }
                var S = function() {
                  function _(i) {
                    this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = void 0, this.response = void 0, this.controller = void 0, this.context = void 0, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = i.fetchSetup || v, this.controller = new self.AbortController(), this.stats = new R.LoadStats();
                  }
                  var g = _.prototype;
                  return g.destroy = function() {
                    this.loader = this.callbacks = null, this.abortInternal();
                  }, g.abortInternal = function() {
                    var n = this.response;
                    (!n || !n.ok) && (this.stats.aborted = true, this.controller.abort());
                  }, g.abort = function() {
                    var n;
                    this.abortInternal(), (n = this.callbacks) !== null && n !== void 0 && n.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response);
                  }, g.load = function(n, o, h) {
                    var b = this, a = this.stats;
                    if (a.loading.start)
                      throw new Error("Loader can only be used once.");
                    a.loading.start = self.performance.now();
                    var c = d(n, this.controller.signal), s = h.onProgress, p = n.responseType === "arraybuffer", D = p ? "byteLength" : "length";
                    this.context = n, this.config = o, this.callbacks = h, this.request = this.fetchSetup(n, c), self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(function() {
                      b.abortInternal(), h.onTimeout(a, n, b.response);
                    }, o.timeout), self.fetch(this.request).then(function(A) {
                      if (b.response = b.loader = A, !A.ok) {
                        var w = A.status, B = A.statusText;
                        throw new f(B || "fetch, bad network response", w, A);
                      }
                      return a.loading.first = Math.max(self.performance.now(), a.loading.start), a.total = parseInt(A.headers.get("Content-Length") || "0"), s && (0, j.isFiniteNumber)(o.highWaterMark) ? b.loadProgressively(A, a, n, o.highWaterMark, s) : p ? A.arrayBuffer() : A.text();
                    }).then(function(A) {
                      var w = b.response;
                      self.clearTimeout(b.requestTimeout), a.loading.end = Math.max(self.performance.now(), a.loading.first);
                      var B = A[D];
                      B && (a.loaded = a.total = B);
                      var U = { url: w.url, data: A };
                      s && !(0, j.isFiniteNumber)(o.highWaterMark) && s(a, n, A, w), h.onSuccess(U, a, n, w);
                    }).catch(function(A) {
                      if (self.clearTimeout(b.requestTimeout), !a.aborted) {
                        var w = A && A.code || 0, B = A ? A.message : null;
                        h.onError({ code: w, text: B }, n, A ? A.details : null);
                      }
                    });
                  }, g.getCacheAge = function() {
                    var n = null;
                    if (this.response) {
                      var o = this.response.headers.get("age");
                      n = o ? parseFloat(o) : null;
                    }
                    return n;
                  }, g.loadProgressively = function(n, o, h, b, a) {
                    b === void 0 && (b = 0);
                    var c = new F.default(), s = n.body.getReader(), p = function D() {
                      return s.read().then(function(A) {
                        if (A.done)
                          return c.dataLength && a(o, h, c.flush(), n), Promise.resolve(new ArrayBuffer(0));
                        var w = A.value, B = w.length;
                        return o.loaded += B, B < b || c.dataLength ? (c.push(w), c.dataLength >= b && a(o, h, c.flush(), n)) : a(o, h, w, n), D();
                      }).catch(function() {
                        return Promise.reject();
                      });
                    };
                    return p();
                  }, _;
                }();
                function d(_, g) {
                  var i = { method: "GET", mode: "cors", credentials: "same-origin", signal: g, headers: new self.Headers(y({}, _.headers)) };
                  return _.rangeEnd && i.headers.set("Range", "bytes=" + _.rangeStart + "-" + String(_.rangeEnd - 1)), i;
                }
                function v(_, g) {
                  return new self.Request(_.url, g);
                }
                var f = function(_) {
                  O(g, _);
                  function g(i, n, o) {
                    var h;
                    return h = _.call(this, i) || this, h.code = void 0, h.details = void 0, h.code = n, h.details = o, h;
                  }
                  return g;
                }(x(Error));
                const l = S;
              }, "./src/utils/hex.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = { hexDump: function(O) {
                  for (var x = "", k = 0; k < O.length; k++) {
                    var m2 = O[k].toString(16);
                    m2.length < 2 && (m2 = "0" + m2), x += m2;
                  }
                  return x;
                } };
                const R = j;
              }, "./src/utils/imsc1-ttml-parser.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { IMSC1_CODEC: () => E, parseIMSC1: () => I });
                var j = N("./src/utils/mp4-tools.ts"), R = N("./src/utils/vttparser.ts"), F = N("./src/utils/vttcue.ts"), O = N("./src/demux/id3.ts"), x = N("./src/utils/timescale-conversion.ts"), k = N("./src/utils/webvtt-parser.ts");
                function m2() {
                  return m2 = Object.assign ? Object.assign.bind() : function(h) {
                    for (var b = 1; b < arguments.length; b++) {
                      var a = arguments[b];
                      for (var c in a)
                        Object.prototype.hasOwnProperty.call(a, c) && (h[c] = a[c]);
                    }
                    return h;
                  }, m2.apply(this, arguments);
                }
                var E = "stpp.ttml.im1t", L = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, M = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/, y = { left: "start", center: "center", right: "end", start: "start", end: "end" };
                function I(h, b, a, c, s) {
                  var p = (0, j.findBox)(new Uint8Array(h), ["mdat"]);
                  if (p.length === 0) {
                    s(new Error("Could not parse IMSC1 mdat"));
                    return;
                  }
                  var D = p.map(function(w) {
                    return (0, O.utf8ArrayToStr)(w);
                  }), A = (0, x.toTimescaleFromScale)(b, 1, a);
                  try {
                    D.forEach(function(w) {
                      return c(S(w, A));
                    });
                  } catch (w) {
                    s(w);
                  }
                }
                function S(h, b) {
                  var a = new DOMParser(), c = a.parseFromString(h, "text/xml"), s = c.getElementsByTagName("tt")[0];
                  if (!s)
                    throw new Error("Invalid ttml");
                  var p = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }, D = Object.keys(p).reduce(function(K, W) {
                    return K[W] = s.getAttribute("ttp:" + W) || p[W], K;
                  }, {}), A = s.getAttribute("xml:space") !== "preserve", w = v(d(s, "styling", "style")), B = v(d(s, "layout", "region")), U = d(s, "body", "[begin]");
                  return [].map.call(U, function(K) {
                    var W = f(K, A);
                    if (!W || !K.hasAttribute("begin"))
                      return null;
                    var H = i(K.getAttribute("begin"), D), V = i(K.getAttribute("dur"), D), z = i(K.getAttribute("end"), D);
                    if (H === null)
                      throw g(K);
                    if (z === null) {
                      if (V === null)
                        throw g(K);
                      z = H + V;
                    }
                    var Q = new F.default(H - b, z - b, W);
                    Q.id = (0, k.generateCueId)(Q.startTime, Q.endTime, Q.text);
                    var q = B[K.getAttribute("region")], ee = w[K.getAttribute("style")], ae = l(q, ee, w), ne = ae.textAlign;
                    if (ne) {
                      var ue = y[ne];
                      ue && (Q.lineAlign = ue), Q.align = ne;
                    }
                    return m2(Q, ae), Q;
                  }).filter(function(K) {
                    return K !== null;
                  });
                }
                function d(h, b, a) {
                  var c = h.getElementsByTagName(b)[0];
                  return c ? [].slice.call(c.querySelectorAll(a)) : [];
                }
                function v(h) {
                  return h.reduce(function(b, a) {
                    var c = a.getAttribute("xml:id");
                    return c && (b[c] = a), b;
                  }, {});
                }
                function f(h, b) {
                  return [].slice.call(h.childNodes).reduce(function(a, c, s) {
                    var p;
                    return c.nodeName === "br" && s ? a + `
` : (p = c.childNodes) !== null && p !== void 0 && p.length ? f(c, b) : b ? a + c.textContent.trim().replace(/\s+/g, " ") : a + c.textContent;
                  }, "");
                }
                function l(h, b, a) {
                  var c = "http://www.w3.org/ns/ttml#styling", s = null, p = ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"], D = h != null && h.hasAttribute("style") ? h.getAttribute("style") : null;
                  return D && a.hasOwnProperty(D) && (s = a[D]), p.reduce(function(A, w) {
                    var B = _(b, c, w) || _(h, c, w) || _(s, c, w);
                    return B && (A[w] = B), A;
                  }, {});
                }
                function _(h, b, a) {
                  return h && h.hasAttributeNS(b, a) ? h.getAttributeNS(b, a) : null;
                }
                function g(h) {
                  return new Error("Could not parse ttml timestamp " + h);
                }
                function i(h, b) {
                  if (!h)
                    return null;
                  var a = (0, R.parseTimeStamp)(h);
                  return a === null && (L.test(h) ? a = n(h, b) : M.test(h) && (a = o(h, b))), a;
                }
                function n(h, b) {
                  var a = L.exec(h), c = (a[4] | 0) + (a[5] | 0) / b.subFrameRate;
                  return (a[1] | 0) * 3600 + (a[2] | 0) * 60 + (a[3] | 0) + c / b.frameRate;
                }
                function o(h, b) {
                  var a = M.exec(h), c = Number(a[1]), s = a[2];
                  switch (s) {
                    case "h":
                      return c * 3600;
                    case "m":
                      return c * 60;
                    case "ms":
                      return c * 1e3;
                    case "f":
                      return c / b.frameRate;
                    case "t":
                      return c / b.tickRate;
                  }
                  return c;
                }
              }, "./src/utils/keysystem-util.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { changeEndianness: () => F, convertDataUriToArrayBytes: () => O, strToUtf8array: () => x });
                var j = N("./src/utils/numeric-encoding-utils.ts");
                function R(k) {
                  var m2 = x(k).subarray(0, 16), E = new Uint8Array(16);
                  return E.set(m2, 16 - m2.length), E;
                }
                function F(k) {
                  var m2 = function(L, M, y) {
                    var I = L[M];
                    L[M] = L[y], L[y] = I;
                  };
                  m2(k, 0, 3), m2(k, 1, 2), m2(k, 4, 5), m2(k, 6, 7);
                }
                function O(k) {
                  var m2 = k.split(":"), E = null;
                  if (m2[0] === "data" && m2.length === 2) {
                    var L = m2[1].split(";"), M = L[L.length - 1].split(",");
                    if (M.length === 2) {
                      var y = M[0] === "base64", I = M[1];
                      y ? (L.splice(-1, 1), E = (0, j.base64Decode)(I)) : E = R(I);
                    }
                  }
                  return E;
                }
                function x(k) {
                  return Uint8Array.from(unescape(encodeURIComponent(k)), function(m2) {
                    return m2.charCodeAt(0);
                  });
                }
              }, "./src/utils/logger.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { enableLogs: () => k, logger: () => m2 });
                var j = function() {
                }, R = { trace: j, debug: j, log: j, warn: j, info: j, error: j }, F = R;
                function O(E) {
                  var L = self.console[E];
                  return L ? L.bind(self.console, "[" + E + "] >") : j;
                }
                function x(E) {
                  for (var L = arguments.length, M = new Array(L > 1 ? L - 1 : 0), y = 1; y < L; y++)
                    M[y - 1] = arguments[y];
                  M.forEach(function(I) {
                    F[I] = E[I] ? E[I].bind(E) : O(I);
                  });
                }
                function k(E, L) {
                  if (self.console && E === true || typeof E == "object") {
                    x(E, "debug", "log", "info", "warn", "error");
                    try {
                      F.log('Debug logs enabled for "' + L + '"');
                    } catch (M) {
                      F = R;
                    }
                  } else
                    F = R;
                }
                var m2 = F;
              }, "./src/utils/mediakeys-helper.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { KeySystemFormats: () => R, KeySystemIds: () => O, KeySystems: () => j, getKeySystemsForConfig: () => m2, getSupportedMediaKeySystemConfigurations: () => L, keySystemDomainToKeySystemFormat: () => k, keySystemFormatToKeySystemDomain: () => F, keySystemIdToKeySystemDomain: () => x, requestMediaKeySystemAccess: () => E });
                var j;
                (function(y) {
                  y.CLEARKEY = "org.w3.clearkey", y.FAIRPLAY = "com.apple.fps", y.PLAYREADY = "com.microsoft.playready", y.WIDEVINE = "com.widevine.alpha";
                })(j || (j = {}));
                var R;
                (function(y) {
                  y.CLEARKEY = "org.w3.clearkey", y.FAIRPLAY = "com.apple.streamingkeydelivery", y.PLAYREADY = "com.microsoft.playready", y.WIDEVINE = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
                })(R || (R = {}));
                function F(y) {
                  switch (y) {
                    case R.FAIRPLAY:
                      return j.FAIRPLAY;
                    case R.PLAYREADY:
                      return j.PLAYREADY;
                    case R.WIDEVINE:
                      return j.WIDEVINE;
                    case R.CLEARKEY:
                      return j.CLEARKEY;
                  }
                }
                var O;
                (function(y) {
                  y.WIDEVINE = "edef8ba979d64acea3c827dcd51d21ed";
                })(O || (O = {}));
                function x(y) {
                  if (y === O.WIDEVINE)
                    return j.WIDEVINE;
                }
                function k(y) {
                  switch (y) {
                    case j.FAIRPLAY:
                      return R.FAIRPLAY;
                    case j.PLAYREADY:
                      return R.PLAYREADY;
                    case j.WIDEVINE:
                      return R.WIDEVINE;
                    case j.CLEARKEY:
                      return R.CLEARKEY;
                  }
                }
                function m2(y) {
                  var I = y.drmSystems, S = y.widevineLicenseUrl, d = I ? [j.FAIRPLAY, j.WIDEVINE, j.PLAYREADY, j.CLEARKEY].filter(function(v) {
                    return !!I[v];
                  }) : [];
                  return !d[j.WIDEVINE] && S && d.push(j.WIDEVINE), d;
                }
                var E = function() {
                  return typeof self != "undefined" && self.navigator && self.navigator.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null;
                }();
                function L(y, I, S, d) {
                  var v;
                  switch (y) {
                    case j.FAIRPLAY:
                      v = ["cenc", "sinf"];
                      break;
                    case j.WIDEVINE:
                    case j.PLAYREADY:
                      v = ["cenc"];
                      break;
                    case j.CLEARKEY:
                      v = ["cenc", "keyids"];
                      break;
                    default:
                      throw new Error("Unknown key-system: " + y);
                  }
                  return M(v, I, S, d);
                }
                function M(y, I, S, d) {
                  var v = { initDataTypes: y, persistentState: d.persistentState || "not-allowed", distinctiveIdentifier: d.distinctiveIdentifier || "not-allowed", sessionTypes: d.sessionTypes || [d.sessionType || "temporary"], audioCapabilities: I.map(function(f) {
                    return { contentType: 'audio/mp4; codecs="' + f + '"', robustness: d.audioRobustness || "", encryptionScheme: d.audioEncryptionScheme || null };
                  }), videoCapabilities: S.map(function(f) {
                    return { contentType: 'video/mp4; codecs="' + f + '"', robustness: d.videoRobustness || "", encryptionScheme: d.videoEncryptionScheme || null };
                  }) };
                  return [v];
                }
              }, "./src/utils/mediasource-helper.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { getMediaSource: () => j });
                function j() {
                  return self.MediaSource || self.WebKitMediaSource;
                }
              }, "./src/utils/mp4-tools.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { RemuxerTrackIdConfig: () => E, appendUint8Array: () => b, bin2str: () => L, computeRawDurationFromSamples: () => n, discardEPB: () => D, findBox: () => d, getDuration: () => i, getStartDTS: () => g, mp4Box: () => w, mp4pssh: () => B, offsetStartDTS: () => o, parseEmsg: () => A, parseInitSegment: () => f, parsePssh: () => U, parseSEIMessageFromNALu: () => p, parseSamples: () => a, parseSegmentIndex: () => v, parseSinf: () => _, patchEncyptionData: () => l, readSint32: () => I, readUint16: () => M, readUint32: () => y, segmentValidRange: () => h, writeUint32: () => S });
                var j = N("./src/loader/fragment.ts"), R = N("./src/utils/typed-array.ts"), F = N("./src/demux/id3.ts"), O = N("./src/utils/logger.ts"), x = N("./src/utils/hex.ts"), k = Math.pow(2, 32) - 1, m2 = [].push, E = { video: 1, audio: 2, id3: 3, text: 4 };
                function L(K) {
                  return String.fromCharCode.apply(null, K);
                }
                function M(K, W) {
                  var H = K[W] << 8 | K[W + 1];
                  return H < 0 ? 65536 + H : H;
                }
                function y(K, W) {
                  var H = I(K, W);
                  return H < 0 ? 4294967296 + H : H;
                }
                function I(K, W) {
                  return K[W] << 24 | K[W + 1] << 16 | K[W + 2] << 8 | K[W + 3];
                }
                function S(K, W, H) {
                  K[W] = H >> 24, K[W + 1] = H >> 16 & 255, K[W + 2] = H >> 8 & 255, K[W + 3] = H & 255;
                }
                function d(K, W) {
                  var H = [];
                  if (!W.length)
                    return H;
                  for (var V = K.byteLength, z = 0; z < V; ) {
                    var Q = y(K, z), q = L(K.subarray(z + 4, z + 8)), ee = Q > 1 ? z + Q : V;
                    if (q === W[0])
                      if (W.length === 1)
                        H.push(K.subarray(z + 8, ee));
                      else {
                        var ae = d(K.subarray(z + 8, ee), W.slice(1));
                        ae.length && m2.apply(H, ae);
                      }
                    z = ee;
                  }
                  return H;
                }
                function v(K) {
                  var W = [], H = K[0], V = 8, z = y(K, V);
                  V += 4;
                  var Q = 0, q = 0;
                  H === 0 ? V += 8 : V += 16, V += 2;
                  var ee = K.length + q, ae = M(K, V);
                  V += 2;
                  for (var ne = 0; ne < ae; ne++) {
                    var ue = V, ye = y(K, ue);
                    ue += 4;
                    var be = ye & 2147483647, me = (ye & 2147483648) >>> 31;
                    if (me === 1)
                      return console.warn("SIDX has hierarchical references (not supported)"), null;
                    var Se = y(K, ue);
                    ue += 4, W.push({ referenceSize: be, subsegmentDuration: Se, info: { duration: Se / z, start: ee, end: ee + be - 1 } }), ee += be, ue += 4, V = ue;
                  }
                  return { earliestPresentationTime: Q, timescale: z, version: H, referencesCount: ae, references: W };
                }
                function f(K) {
                  for (var W = [], H = d(K, ["moov", "trak"]), V = 0; V < H.length; V++) {
                    var z = H[V], Q = d(z, ["tkhd"])[0];
                    if (Q) {
                      var q = Q[0], ee = q === 0 ? 12 : 20, ae = y(Q, ee), ne = d(z, ["mdia", "mdhd"])[0];
                      if (ne) {
                        q = ne[0], ee = q === 0 ? 12 : 20;
                        var ue = y(ne, ee), ye = d(z, ["mdia", "hdlr"])[0];
                        if (ye) {
                          var be = L(ye.subarray(8, 12)), me = { soun: j.ElementaryStreamTypes.AUDIO, vide: j.ElementaryStreamTypes.VIDEO }[be];
                          if (me) {
                            var Se = d(z, ["mdia", "minf", "stbl", "stsd"])[0], Te = void 0;
                            Se && (Te = L(Se.subarray(12, 16))), W[ae] = { timescale: ue, type: me }, W[me] = { timescale: ue, id: ae, codec: Te };
                          }
                        }
                      }
                    }
                  }
                  var fe = d(K, ["moov", "mvex", "trex"]);
                  return fe.forEach(function(ie) {
                    var de = y(ie, 4), he = W[de];
                    he && (he.default = { duration: y(ie, 12), flags: y(ie, 20) });
                  }), W;
                }
                function l(K, W) {
                  if (!K || !W)
                    return K;
                  var H = W.keyId;
                  if (H && W.isCommonEncryption) {
                    var V = d(K, ["moov", "trak"]);
                    V.forEach(function(z) {
                      var Q = d(z, ["mdia", "minf", "stbl", "stsd"])[0], q = Q.subarray(8), ee = d(q, ["enca"]), ae = ee.length > 0;
                      ae || (ee = d(q, ["encv"])), ee.forEach(function(ne) {
                        var ue = ae ? ne.subarray(28) : ne.subarray(78), ye = d(ue, ["sinf"]);
                        ye.forEach(function(be) {
                          var me = _(be);
                          if (me) {
                            var Se = me.subarray(8, 24);
                            Se.some(function(Te) {
                              return Te !== 0;
                            }) || (O.logger.log("[eme] Patching keyId in 'enc" + (ae ? "a" : "v") + ">sinf>>tenc' box: " + x.default.hexDump(Se) + " -> " + x.default.hexDump(H)), me.set(H, 8));
                          }
                        });
                      });
                    });
                  }
                  return K;
                }
                function _(K) {
                  var W = d(K, ["schm"])[0];
                  if (W) {
                    var H = L(W.subarray(4, 8));
                    if (H === "cbcs" || H === "cenc")
                      return d(K, ["schi", "tenc"])[0];
                  }
                  return O.logger.error("[eme] missing 'schm' box"), null;
                }
                function g(K, W) {
                  return d(W, ["moof", "traf"]).reduce(function(H, V) {
                    var z = d(V, ["tfdt"])[0], Q = z[0], q = d(V, ["tfhd"]).reduce(function(ee, ae) {
                      var ne = y(ae, 4), ue = K[ne];
                      if (ue) {
                        var ye = y(z, 4);
                        Q === 1 && (ye *= Math.pow(2, 32), ye += y(z, 8));
                        var be = ue.timescale || 9e4, me = ye / be;
                        if (isFinite(me) && (ee === null || me < ee))
                          return me;
                      }
                      return ee;
                    }, null);
                    return q !== null && isFinite(q) && (H === null || q < H) ? q : H;
                  }, null) || 0;
                }
                function i(K, W) {
                  for (var H = 0, V = 0, z = 0, Q = d(K, ["moof", "traf"]), q = 0; q < Q.length; q++) {
                    var ee = Q[q], ae = d(ee, ["tfhd"])[0], ne = y(ae, 4), ue = W[ne];
                    if (!!ue) {
                      var ye = ue.default, be = y(ae, 0) | (ye == null ? void 0 : ye.flags), me = ye == null ? void 0 : ye.duration;
                      be & 8 && (be & 2 ? me = y(ae, 12) : me = y(ae, 8));
                      for (var Se = ue.timescale || 9e4, Te = d(ee, ["trun"]), fe = 0; fe < Te.length; fe++) {
                        if (H = n(Te[fe]), !H && me) {
                          var ie = y(Te[fe], 4);
                          H = me * ie;
                        }
                        ue.type === j.ElementaryStreamTypes.VIDEO ? V += H / Se : ue.type === j.ElementaryStreamTypes.AUDIO && (z += H / Se);
                      }
                    }
                  }
                  if (V === 0 && z === 0) {
                    for (var de = 0, he = d(K, ["sidx"]), oe = 0; oe < he.length; oe++) {
                      var se = v(he[oe]);
                      se != null && se.references && (de += se.references.reduce(function(ve, _e) {
                        return ve + _e.info.duration || 0;
                      }, 0));
                    }
                    return de;
                  }
                  return V || z;
                }
                function n(K) {
                  var W = y(K, 0), H = 8;
                  W & 1 && (H += 4), W & 4 && (H += 4);
                  for (var V = 0, z = y(K, 4), Q = 0; Q < z; Q++) {
                    if (W & 256) {
                      var q = y(K, H);
                      V += q, H += 4;
                    }
                    W & 512 && (H += 4), W & 1024 && (H += 4), W & 2048 && (H += 4);
                  }
                  return V;
                }
                function o(K, W, H) {
                  d(W, ["moof", "traf"]).forEach(function(V) {
                    d(V, ["tfhd"]).forEach(function(z) {
                      var Q = y(z, 4), q = K[Q];
                      if (!!q) {
                        var ee = q.timescale || 9e4;
                        d(V, ["tfdt"]).forEach(function(ae) {
                          var ne = ae[0], ue = y(ae, 4);
                          if (ne === 0)
                            ue -= H * ee, ue = Math.max(ue, 0), S(ae, 4, ue);
                          else {
                            ue *= Math.pow(2, 32), ue += y(ae, 8), ue -= H * ee, ue = Math.max(ue, 0);
                            var ye = Math.floor(ue / (k + 1)), be = Math.floor(ue % (k + 1));
                            S(ae, 4, ye), S(ae, 8, be);
                          }
                        });
                      }
                    });
                  });
                }
                function h(K) {
                  var W = { valid: null, remainder: null }, H = d(K, ["moof"]);
                  if (H) {
                    if (H.length < 2)
                      return W.remainder = K, W;
                  } else
                    return W;
                  var V = H[H.length - 1];
                  return W.valid = (0, R.sliceUint8)(K, 0, V.byteOffset - 8), W.remainder = (0, R.sliceUint8)(K, V.byteOffset - 8), W;
                }
                function b(K, W) {
                  var H = new Uint8Array(K.length + W.length);
                  return H.set(K), H.set(W, K.length), H;
                }
                function a(K, W) {
                  var H = [], V = W.samples, z = W.timescale, Q = W.id, q = false, ee = d(V, ["moof"]);
                  return ee.map(function(ae) {
                    var ne = ae.byteOffset - 8, ue = d(ae, ["traf"]);
                    ue.map(function(ye) {
                      var be = d(ye, ["tfdt"]).map(function(me) {
                        var Se = me[0], Te = y(me, 4);
                        return Se === 1 && (Te *= Math.pow(2, 32), Te += y(me, 8)), Te / z;
                      })[0];
                      return be !== void 0 && (K = be), d(ye, ["tfhd"]).map(function(me) {
                        var Se = y(me, 4), Te = y(me, 0) & 16777215, fe = (Te & 1) != 0, ie = (Te & 2) != 0, de = (Te & 8) != 0, he = 0, oe = (Te & 16) != 0, se = 0, ve = (Te & 32) != 0, _e = 8;
                        Se === Q && (fe && (_e += 8), ie && (_e += 4), de && (he = y(me, _e), _e += 4), oe && (se = y(me, _e), _e += 4), ve && (_e += 4), W.type === "video" && (q = c(W.codec)), d(ye, ["trun"]).map(function(Re) {
                          var De = Re[0], ke = y(Re, 0) & 16777215, Ne = (ke & 1) != 0, Fe = 0, xe = (ke & 4) != 0, Ue = (ke & 256) != 0, qe = 0, We = (ke & 512) != 0, tt = 0, Ye = (ke & 1024) != 0, ze = (ke & 2048) != 0, Ze = 0, st = y(Re, 4), re = 8;
                          Ne && (Fe = y(Re, re), re += 4), xe && (re += 4);
                          for (var ce = Fe + ne, we = 0; we < st; we++) {
                            if (Ue ? (qe = y(Re, re), re += 4) : qe = he, We ? (tt = y(Re, re), re += 4) : tt = se, Ye && (re += 4), ze && (De === 0 ? Ze = y(Re, re) : Ze = I(Re, re), re += 4), W.type === j.ElementaryStreamTypes.VIDEO)
                              for (var Ke = 0; Ke < tt; ) {
                                var He = y(V, ce);
                                if (ce += 4, s(q, V[ce])) {
                                  var Ge = V.subarray(ce, ce + He);
                                  p(Ge, q ? 2 : 1, K + Ze / z, H);
                                }
                                ce += He, Ke += He + 4;
                              }
                            K += qe / z;
                          }
                        }));
                      });
                    });
                  }), H;
                }
                function c(K) {
                  if (!K)
                    return false;
                  var W = K.indexOf("."), H = W < 0 ? K : K.substring(0, W);
                  return H === "hvc1" || H === "hev1" || H === "dvh1" || H === "dvhe";
                }
                function s(K, W) {
                  if (K) {
                    var H = W >> 1 & 63;
                    return H === 39 || H === 40;
                  } else {
                    var V = W & 31;
                    return V === 6;
                  }
                }
                function p(K, W, H, V) {
                  var z = D(K), Q = 0;
                  Q += W;
                  for (var q = 0, ee = 0, ae = false, ne = 0; Q < z.length; ) {
                    q = 0;
                    do {
                      if (Q >= z.length)
                        break;
                      ne = z[Q++], q += ne;
                    } while (ne === 255);
                    ee = 0;
                    do {
                      if (Q >= z.length)
                        break;
                      ne = z[Q++], ee += ne;
                    } while (ne === 255);
                    var ue = z.length - Q;
                    if (!ae && q === 4 && Q < z.length) {
                      ae = true;
                      var ye = z[Q++];
                      if (ye === 181) {
                        var be = M(z, Q);
                        if (Q += 2, be === 49) {
                          var me = y(z, Q);
                          if (Q += 4, me === 1195456820) {
                            var Se = z[Q++];
                            if (Se === 3) {
                              var Te = z[Q++], fe = 31 & Te, ie = 64 & Te, de = ie ? 2 + fe * 3 : 0, he = new Uint8Array(de);
                              if (ie) {
                                he[0] = Te;
                                for (var oe = 1; oe < de; oe++)
                                  he[oe] = z[Q++];
                              }
                              V.push({ type: Se, payloadType: q, pts: H, bytes: he });
                            }
                          }
                        }
                      }
                    } else if (q === 5 && ee < ue) {
                      if (ae = true, ee > 16) {
                        for (var se = [], ve = 0; ve < 16; ve++) {
                          var _e = z[Q++].toString(16);
                          se.push(_e.length == 1 ? "0" + _e : _e), (ve === 3 || ve === 5 || ve === 7 || ve === 9) && se.push("-");
                        }
                        for (var Re = ee - 16, De = new Uint8Array(Re), ke = 0; ke < Re; ke++)
                          De[ke] = z[Q++];
                        V.push({ payloadType: q, pts: H, uuid: se.join(""), userData: (0, F.utf8ArrayToStr)(De), userDataBytes: De });
                      }
                    } else if (ee < ue)
                      Q += ee;
                    else if (ee > ue)
                      break;
                  }
                }
                function D(K) {
                  for (var W = K.byteLength, H = [], V = 1; V < W - 2; )
                    K[V] === 0 && K[V + 1] === 0 && K[V + 2] === 3 ? (H.push(V + 2), V += 2) : V++;
                  if (H.length === 0)
                    return K;
                  var z = W - H.length, Q = new Uint8Array(z), q = 0;
                  for (V = 0; V < z; q++, V++)
                    q === H[0] && (q++, H.shift()), Q[V] = K[q];
                  return Q;
                }
                function A(K) {
                  var W = K[0], H = "", V = "", z = 0, Q = 0, q = 0, ee = 0, ae = 0, ne = 0;
                  if (W === 0) {
                    for (; L(K.subarray(ne, ne + 1)) !== "\0"; )
                      H += L(K.subarray(ne, ne + 1)), ne += 1;
                    for (H += L(K.subarray(ne, ne + 1)), ne += 1; L(K.subarray(ne, ne + 1)) !== "\0"; )
                      V += L(K.subarray(ne, ne + 1)), ne += 1;
                    V += L(K.subarray(ne, ne + 1)), ne += 1, z = y(K, 12), Q = y(K, 16), ee = y(K, 20), ae = y(K, 24), ne = 28;
                  } else if (W === 1) {
                    ne += 4, z = y(K, ne), ne += 4;
                    var ue = y(K, ne);
                    ne += 4;
                    var ye = y(K, ne);
                    for (ne += 4, q = Math.pow(2, 32) * ue + ye, Number.isSafeInteger(q) || (q = Number.MAX_SAFE_INTEGER, console.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), ee = y(K, ne), ne += 4, ae = y(K, ne), ne += 4; L(K.subarray(ne, ne + 1)) !== "\0"; )
                      H += L(K.subarray(ne, ne + 1)), ne += 1;
                    for (H += L(K.subarray(ne, ne + 1)), ne += 1; L(K.subarray(ne, ne + 1)) !== "\0"; )
                      V += L(K.subarray(ne, ne + 1)), ne += 1;
                    V += L(K.subarray(ne, ne + 1)), ne += 1;
                  }
                  var be = K.subarray(ne, K.byteLength);
                  return { schemeIdUri: H, value: V, timeScale: z, presentationTime: q, presentationTimeDelta: Q, eventDuration: ee, id: ae, payload: be };
                }
                function w(K) {
                  for (var W = arguments.length, H = new Array(W > 1 ? W - 1 : 0), V = 1; V < W; V++)
                    H[V - 1] = arguments[V];
                  for (var z = H.length, Q = 8, q = z; q--; )
                    Q += H[q].byteLength;
                  var ee = new Uint8Array(Q);
                  for (ee[0] = Q >> 24 & 255, ee[1] = Q >> 16 & 255, ee[2] = Q >> 8 & 255, ee[3] = Q & 255, ee.set(K, 4), q = 0, Q = 8; q < z; q++)
                    ee.set(H[q], Q), Q += H[q].byteLength;
                  return ee;
                }
                function B(K, W, H) {
                  if (K.byteLength !== 16)
                    throw new RangeError("Invalid system id");
                  var V, z;
                  if (W) {
                    V = 1, z = new Uint8Array(W.length * 16);
                    for (var Q = 0; Q < W.length; Q++) {
                      var q = W[Q];
                      if (q.byteLength !== 16)
                        throw new RangeError("Invalid key");
                      z.set(q, Q * 16);
                    }
                  } else
                    V = 0, z = new Uint8Array();
                  var ee;
                  V > 0 ? (ee = new Uint8Array(4), W.length > 0 && new DataView(ee.buffer).setUint32(0, W.length, false)) : ee = new Uint8Array();
                  var ae = new Uint8Array(4);
                  return H && H.byteLength > 0 && new DataView(ae.buffer).setUint32(0, H.byteLength, false), w([112, 115, 115, 104], new Uint8Array([V, 0, 0, 0]), K, ee, z, ae, H || new Uint8Array());
                }
                function U(K) {
                  if (!(K instanceof ArrayBuffer) || K.byteLength < 32)
                    return null;
                  var W = { version: 0, systemId: "", kids: null, data: null }, H = new DataView(K), V = H.getUint32(0);
                  if (K.byteLength !== V && V > 44)
                    return null;
                  var z = H.getUint32(4);
                  if (z !== 1886614376 || (W.version = H.getUint32(8) >>> 24, W.version > 1))
                    return null;
                  W.systemId = x.default.hexDump(new Uint8Array(K, 12, 16));
                  var Q = H.getUint32(28);
                  if (W.version === 0) {
                    if (V - 32 < Q)
                      return null;
                    W.data = new Uint8Array(K, 32, Q);
                  } else if (W.version === 1) {
                    W.kids = [];
                    for (var q = 0; q < Q; q++)
                      W.kids.push(new Uint8Array(K, 32 + q * 16, 16));
                  }
                  return W;
                }
              }, "./src/utils/numeric-encoding-utils.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { base64Decode: () => k, base64DecodeToStr: () => F, base64Encode: () => O, base64ToBase64Url: () => j, base64UrlEncode: () => x, strToBase64Encode: () => R });
                function j(m2) {
                  return m2.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
                }
                function R(m2) {
                  return btoa(m2);
                }
                function F(m2) {
                  return atob(m2);
                }
                function O(m2) {
                  return btoa(String.fromCharCode.apply(String, m2));
                }
                function x(m2) {
                  return j(O(m2));
                }
                function k(m2) {
                  return Uint8Array.from(atob(m2), function(E) {
                    return E.charCodeAt(0);
                  });
                }
              }, "./src/utils/output-filter.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                var j = function() {
                  function R(O, x) {
                    this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = O, this.trackName = x;
                  }
                  var F = R.prototype;
                  return F.dispatchCue = function() {
                    this.startTime !== null && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null);
                  }, F.newCue = function(x, k, m2) {
                    (this.startTime === null || this.startTime > x) && (this.startTime = x), this.endTime = k, this.screen = m2, this.timelineController.createCaptionsTrack(this.trackName);
                  }, F.reset = function() {
                    this.cueRanges = [], this.startTime = null;
                  }, R;
                }();
              }, "./src/utils/texttrack-utils.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { addCueToTrack: () => F, clearCurrentCues: () => O, getCuesInRange: () => m2, removeCuesInRange: () => x, sendAddTrackEvent: () => R });
                var j = N("./src/utils/logger.ts");
                function R(E, L) {
                  var M;
                  try {
                    M = new Event("addtrack");
                  } catch (y) {
                    M = document.createEvent("Event"), M.initEvent("addtrack", false, false);
                  }
                  M.track = E, L.dispatchEvent(M);
                }
                function F(E, L) {
                  var M = E.mode;
                  if (M === "disabled" && (E.mode = "hidden"), E.cues && !E.cues.getCueById(L.id))
                    try {
                      if (E.addCue(L), !E.cues.getCueById(L.id))
                        throw new Error("addCue is failed for: " + L);
                    } catch (I) {
                      j.logger.debug("[texttrack-utils]: " + I);
                      var y = new self.TextTrackCue(L.startTime, L.endTime, L.text);
                      y.id = L.id, E.addCue(y);
                    }
                  M === "disabled" && (E.mode = M);
                }
                function O(E) {
                  var L = E.mode;
                  if (L === "disabled" && (E.mode = "hidden"), E.cues)
                    for (var M = E.cues.length; M--; )
                      E.removeCue(E.cues[M]);
                  L === "disabled" && (E.mode = L);
                }
                function x(E, L, M, y) {
                  var I = E.mode;
                  if (I === "disabled" && (E.mode = "hidden"), E.cues && E.cues.length > 0)
                    for (var S = m2(E.cues, L, M), d = 0; d < S.length; d++)
                      (!y || y(S[d])) && E.removeCue(S[d]);
                  I === "disabled" && (E.mode = I);
                }
                function k(E, L) {
                  if (L < E[0].startTime)
                    return 0;
                  var M = E.length - 1;
                  if (L > E[M].endTime)
                    return -1;
                  for (var y = 0, I = M; y <= I; ) {
                    var S = Math.floor((I + y) / 2);
                    if (L < E[S].startTime)
                      I = S - 1;
                    else if (L > E[S].startTime && y < M)
                      y = S + 1;
                    else
                      return S;
                  }
                  return E[y].startTime - L < L - E[I].startTime ? y : I;
                }
                function m2(E, L, M) {
                  var y = [], I = k(E, L);
                  if (I > -1)
                    for (var S = I, d = E.length; S < d; S++) {
                      var v = E[S];
                      if (v.startTime >= L && v.endTime <= M)
                        y.push(v);
                      else if (v.startTime > M)
                        return y;
                    }
                  return y;
                }
              }, "./src/utils/time-ranges.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => R });
                var j = { toString: function(O) {
                  for (var x = "", k = O.length, m2 = 0; m2 < k; m2++)
                    x += "[" + O.start(m2).toFixed(3) + "," + O.end(m2).toFixed(3) + "]";
                  return x;
                } };
                const R = j;
              }, "./src/utils/timescale-conversion.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { toMpegTsClockFromTimescale: () => x, toMsFromMpegTsClock: () => O, toTimescaleFromBase: () => R, toTimescaleFromScale: () => F });
                var j = 9e4;
                function R(k, m2, E, L) {
                  E === void 0 && (E = 1), L === void 0 && (L = false);
                  var M = k * m2 * E;
                  return L ? Math.round(M) : M;
                }
                function F(k, m2, E, L) {
                  return E === void 0 && (E = 1), L === void 0 && (L = false), R(k, m2, 1 / E, L);
                }
                function O(k, m2) {
                  return m2 === void 0 && (m2 = false), R(k, 1e3, 1 / j, m2);
                }
                function x(k, m2) {
                  return m2 === void 0 && (m2 = 1), R(k, j, 1 / m2);
                }
              }, "./src/utils/typed-array.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { sliceUint8: () => j });
                function j(R, F, O) {
                  return Uint8Array.prototype.slice ? R.slice(F, O) : new Uint8Array(Array.prototype.slice.call(R, F, O));
                }
              }, "./src/utils/vttcue.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => j });
                const j = function() {
                  if (typeof self != "undefined" && self.VTTCue)
                    return self.VTTCue;
                  var R = ["", "lr", "rl"], F = ["start", "middle", "end", "left", "right"];
                  function O(L, M) {
                    if (typeof M != "string" || !Array.isArray(L))
                      return false;
                    var y = M.toLowerCase();
                    return ~L.indexOf(y) ? y : false;
                  }
                  function x(L) {
                    return O(R, L);
                  }
                  function k(L) {
                    return O(F, L);
                  }
                  function m2(L) {
                    for (var M = arguments.length, y = new Array(M > 1 ? M - 1 : 0), I = 1; I < M; I++)
                      y[I - 1] = arguments[I];
                    for (var S = 1; S < arguments.length; S++) {
                      var d = arguments[S];
                      for (var v in d)
                        L[v] = d[v];
                    }
                    return L;
                  }
                  function E(L, M, y) {
                    var I = this, S = { enumerable: true };
                    I.hasBeenReset = false;
                    var d = "", v = false, f = L, l = M, _ = y, g = null, i = "", n = true, o = "auto", h = "start", b = 50, a = "middle", c = 50, s = "middle";
                    Object.defineProperty(I, "id", m2({}, S, { get: function() {
                      return d;
                    }, set: function(D) {
                      d = "" + D;
                    } })), Object.defineProperty(I, "pauseOnExit", m2({}, S, { get: function() {
                      return v;
                    }, set: function(D) {
                      v = !!D;
                    } })), Object.defineProperty(I, "startTime", m2({}, S, { get: function() {
                      return f;
                    }, set: function(D) {
                      if (typeof D != "number")
                        throw new TypeError("Start time must be set to a number.");
                      f = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "endTime", m2({}, S, { get: function() {
                      return l;
                    }, set: function(D) {
                      if (typeof D != "number")
                        throw new TypeError("End time must be set to a number.");
                      l = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "text", m2({}, S, { get: function() {
                      return _;
                    }, set: function(D) {
                      _ = "" + D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "region", m2({}, S, { get: function() {
                      return g;
                    }, set: function(D) {
                      g = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "vertical", m2({}, S, { get: function() {
                      return i;
                    }, set: function(D) {
                      var A = x(D);
                      if (A === false)
                        throw new SyntaxError("An invalid or illegal string was specified.");
                      i = A, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "snapToLines", m2({}, S, { get: function() {
                      return n;
                    }, set: function(D) {
                      n = !!D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "line", m2({}, S, { get: function() {
                      return o;
                    }, set: function(D) {
                      if (typeof D != "number" && D !== "auto")
                        throw new SyntaxError("An invalid number or illegal string was specified.");
                      o = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "lineAlign", m2({}, S, { get: function() {
                      return h;
                    }, set: function(D) {
                      var A = k(D);
                      if (!A)
                        throw new SyntaxError("An invalid or illegal string was specified.");
                      h = A, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "position", m2({}, S, { get: function() {
                      return b;
                    }, set: function(D) {
                      if (D < 0 || D > 100)
                        throw new Error("Position must be between 0 and 100.");
                      b = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "positionAlign", m2({}, S, { get: function() {
                      return a;
                    }, set: function(D) {
                      var A = k(D);
                      if (!A)
                        throw new SyntaxError("An invalid or illegal string was specified.");
                      a = A, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "size", m2({}, S, { get: function() {
                      return c;
                    }, set: function(D) {
                      if (D < 0 || D > 100)
                        throw new Error("Size must be between 0 and 100.");
                      c = D, this.hasBeenReset = true;
                    } })), Object.defineProperty(I, "align", m2({}, S, { get: function() {
                      return s;
                    }, set: function(D) {
                      var A = k(D);
                      if (!A)
                        throw new SyntaxError("An invalid or illegal string was specified.");
                      s = A, this.hasBeenReset = true;
                    } })), I.displayState = void 0;
                  }
                  return E.prototype.getCueAsHTML = function() {
                    var L = self.WebVTT;
                    return L.convertCueToDOMTree(self, this.text);
                  }, E;
                }();
              }, "./src/utils/vttparser.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { VTTParser: () => M, fixLineBreaks: () => L, parseTimeStamp: () => F });
                var j = N("./src/utils/vttcue.ts"), R = function() {
                  function y() {
                  }
                  var I = y.prototype;
                  return I.decode = function(d, v) {
                    if (!d)
                      return "";
                    if (typeof d != "string")
                      throw new Error("Error - expected string data.");
                    return decodeURIComponent(encodeURIComponent(d));
                  }, y;
                }();
                function F(y) {
                  function I(d, v, f, l) {
                    return (d | 0) * 3600 + (v | 0) * 60 + (f | 0) + parseFloat(l || 0);
                  }
                  var S = y.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
                  return S ? parseFloat(S[2]) > 59 ? I(S[2], S[3], 0, S[4]) : I(S[1], S[2], S[3], S[4]) : null;
                }
                var O = function() {
                  function y() {
                    this.values = /* @__PURE__ */ Object.create(null);
                  }
                  var I = y.prototype;
                  return I.set = function(d, v) {
                    !this.get(d) && v !== "" && (this.values[d] = v);
                  }, I.get = function(d, v, f) {
                    return f ? this.has(d) ? this.values[d] : v[f] : this.has(d) ? this.values[d] : v;
                  }, I.has = function(d) {
                    return d in this.values;
                  }, I.alt = function(d, v, f) {
                    for (var l = 0; l < f.length; ++l)
                      if (v === f[l]) {
                        this.set(d, v);
                        break;
                      }
                  }, I.integer = function(d, v) {
                    /^-?\d+$/.test(v) && this.set(d, parseInt(v, 10));
                  }, I.percent = function(d, v) {
                    if (/^([\d]{1,3})(\.[\d]*)?%$/.test(v)) {
                      var f = parseFloat(v);
                      if (f >= 0 && f <= 100)
                        return this.set(d, f), true;
                    }
                    return false;
                  }, y;
                }();
                function x(y, I, S, d) {
                  var v = d ? y.split(d) : [y];
                  for (var f in v)
                    if (typeof v[f] == "string") {
                      var l = v[f].split(S);
                      if (l.length === 2) {
                        var _ = l[0], g = l[1];
                        I(_, g);
                      }
                    }
                }
                var k = new j.default(0, 0, ""), m2 = k.align === "middle" ? "middle" : "center";
                function E(y, I, S) {
                  var d = y;
                  function v() {
                    var _ = F(y);
                    if (_ === null)
                      throw new Error("Malformed timestamp: " + d);
                    return y = y.replace(/^[^\sa-zA-Z-]+/, ""), _;
                  }
                  function f(_, g) {
                    var i = new O();
                    x(_, function(h, b) {
                      var a;
                      switch (h) {
                        case "region":
                          for (var c = S.length - 1; c >= 0; c--)
                            if (S[c].id === b) {
                              i.set(h, S[c].region);
                              break;
                            }
                          break;
                        case "vertical":
                          i.alt(h, b, ["rl", "lr"]);
                          break;
                        case "line":
                          a = b.split(","), i.integer(h, a[0]), i.percent(h, a[0]) && i.set("snapToLines", false), i.alt(h, a[0], ["auto"]), a.length === 2 && i.alt("lineAlign", a[1], ["start", m2, "end"]);
                          break;
                        case "position":
                          a = b.split(","), i.percent(h, a[0]), a.length === 2 && i.alt("positionAlign", a[1], ["start", m2, "end", "line-left", "line-right", "auto"]);
                          break;
                        case "size":
                          i.percent(h, b);
                          break;
                        case "align":
                          i.alt(h, b, ["start", m2, "end", "left", "right"]);
                          break;
                      }
                    }, /:/, /\s/), g.region = i.get("region", null), g.vertical = i.get("vertical", "");
                    var n = i.get("line", "auto");
                    n === "auto" && k.line === -1 && (n = -1), g.line = n, g.lineAlign = i.get("lineAlign", "start"), g.snapToLines = i.get("snapToLines", true), g.size = i.get("size", 100), g.align = i.get("align", m2);
                    var o = i.get("position", "auto");
                    o === "auto" && k.position === 50 && (o = g.align === "start" || g.align === "left" ? 0 : g.align === "end" || g.align === "right" ? 100 : 50), g.position = o;
                  }
                  function l() {
                    y = y.replace(/^\s+/, "");
                  }
                  if (l(), I.startTime = v(), l(), y.slice(0, 3) !== "-->")
                    throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + d);
                  y = y.slice(3), l(), I.endTime = v(), l(), f(y, I);
                }
                function L(y) {
                  return y.replace(/<br(?: \/)?>/gi, `
`);
                }
                var M = function() {
                  function y() {
                    this.state = "INITIAL", this.buffer = "", this.decoder = new R(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0;
                  }
                  var I = y.prototype;
                  return I.parse = function(d) {
                    var v = this;
                    d && (v.buffer += v.decoder.decode(d, { stream: true }));
                    function f() {
                      var o = v.buffer, h = 0;
                      for (o = L(o); h < o.length && o[h] !== "\r" && o[h] !== `
`; )
                        ++h;
                      var b = o.slice(0, h);
                      return o[h] === "\r" && ++h, o[h] === `
` && ++h, v.buffer = o.slice(h), b;
                    }
                    function l(o) {
                      x(o, function(h, b) {
                      }, /:/);
                    }
                    try {
                      var _ = "";
                      if (v.state === "INITIAL") {
                        if (!/\r\n|\n/.test(v.buffer))
                          return this;
                        _ = f();
                        var g = _.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                        if (!g || !g[0])
                          throw new Error("Malformed WebVTT signature.");
                        v.state = "HEADER";
                      }
                      for (var i = false; v.buffer; ) {
                        if (!/\r\n|\n/.test(v.buffer))
                          return this;
                        switch (i ? i = false : _ = f(), v.state) {
                          case "HEADER":
                            /:/.test(_) ? l(_) : _ || (v.state = "ID");
                            continue;
                          case "NOTE":
                            _ || (v.state = "ID");
                            continue;
                          case "ID":
                            if (/^NOTE($|[ \t])/.test(_)) {
                              v.state = "NOTE";
                              break;
                            }
                            if (!_)
                              continue;
                            if (v.cue = new j.default(0, 0, ""), v.state = "CUE", _.indexOf("-->") === -1) {
                              v.cue.id = _;
                              continue;
                            }
                          case "CUE":
                            if (!v.cue) {
                              v.state = "BADCUE";
                              continue;
                            }
                            try {
                              E(_, v.cue, v.regionList);
                            } catch (o) {
                              v.cue = null, v.state = "BADCUE";
                              continue;
                            }
                            v.state = "CUETEXT";
                            continue;
                          case "CUETEXT":
                            {
                              var n = _.indexOf("-->") !== -1;
                              if (!_ || n && (i = true)) {
                                v.oncue && v.cue && v.oncue(v.cue), v.cue = null, v.state = "ID";
                                continue;
                              }
                              if (v.cue === null)
                                continue;
                              v.cue.text && (v.cue.text += `
`), v.cue.text += _;
                            }
                            continue;
                          case "BADCUE":
                            _ || (v.state = "ID");
                        }
                      }
                    } catch (o) {
                      v.state === "CUETEXT" && v.cue && v.oncue && v.oncue(v.cue), v.cue = null, v.state = v.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
                    }
                    return this;
                  }, I.flush = function() {
                    var d = this;
                    try {
                      if ((d.cue || d.state === "HEADER") && (d.buffer += `

`, d.parse()), d.state === "INITIAL" || d.state === "BADWEBVTT")
                        throw new Error("Malformed WebVTT signature.");
                    } catch (v) {
                      d.onparsingerror && d.onparsingerror(v);
                    }
                    return d.onflush && d.onflush(), this;
                  }, y;
                }();
              }, "./src/utils/webvtt-parser.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { generateCueId: () => M, parseWebVTT: () => I });
                var j = N("./src/polyfills/number.ts"), R = N("./src/utils/vttparser.ts"), F = N("./src/demux/id3.ts"), O = N("./src/utils/timescale-conversion.ts"), x = N("./src/remux/mp4-remuxer.ts"), k = /\r\n|\n\r|\n|\r/g, m2 = function(d, v, f) {
                  return f === void 0 && (f = 0), d.slice(f, f + v.length) === v;
                }, E = function(d) {
                  var v = parseInt(d.slice(-3)), f = parseInt(d.slice(-6, -4)), l = parseInt(d.slice(-9, -7)), _ = d.length > 9 ? parseInt(d.substring(0, d.indexOf(":"))) : 0;
                  if (!(0, j.isFiniteNumber)(v) || !(0, j.isFiniteNumber)(f) || !(0, j.isFiniteNumber)(l) || !(0, j.isFiniteNumber)(_))
                    throw Error("Malformed X-TIMESTAMP-MAP: Local:" + d);
                  return v += 1e3 * f, v += 60 * 1e3 * l, v += 60 * 60 * 1e3 * _, v;
                }, L = function(d) {
                  for (var v = 5381, f = d.length; f; )
                    v = v * 33 ^ d.charCodeAt(--f);
                  return (v >>> 0).toString();
                };
                function M(S, d, v) {
                  return L(S.toString()) + L(d.toString()) + L(v);
                }
                var y = function(d, v, f) {
                  var l = d[v], _ = d[l.prevCC];
                  if (!_ || !_.new && l.new) {
                    d.ccOffset = d.presentationOffset = l.start, l.new = false;
                    return;
                  }
                  for (; (g = _) !== null && g !== void 0 && g.new; ) {
                    var g;
                    d.ccOffset += l.start - _.start, l.new = false, l = _, _ = d[l.prevCC];
                  }
                  d.presentationOffset = f;
                };
                function I(S, d, v, f, l, _, g, i) {
                  var n = new R.VTTParser(), o = (0, F.utf8ArrayToStr)(new Uint8Array(S)).trim().replace(k, `
`).split(`
`), h = [], b = (0, O.toMpegTsClockFromTimescale)(d, v), a = "00:00.000", c = 0, s = 0, p, D = true;
                  n.oncue = function(A) {
                    var w = f[l], B = f.ccOffset, U = (c - b) / 9e4;
                    w != null && w.new && (s !== void 0 ? B = f.ccOffset = w.start : y(f, l, U)), U && (B = U - f.presentationOffset);
                    var K = A.endTime - A.startTime, W = (0, x.normalizePts)((A.startTime + B - s) * 9e4, _ * 9e4) / 9e4;
                    A.startTime = Math.max(W, 0), A.endTime = Math.max(W + K, 0);
                    var H = A.text.trim();
                    A.text = decodeURIComponent(encodeURIComponent(H)), A.id || (A.id = M(A.startTime, A.endTime, H)), A.endTime > 0 && h.push(A);
                  }, n.onparsingerror = function(A) {
                    p = A;
                  }, n.onflush = function() {
                    if (p) {
                      i(p);
                      return;
                    }
                    g(h);
                  }, o.forEach(function(A) {
                    if (D)
                      if (m2(A, "X-TIMESTAMP-MAP=")) {
                        D = false, A.slice(16).split(",").forEach(function(w) {
                          m2(w, "LOCAL:") ? a = w.slice(6) : m2(w, "MPEGTS:") && (c = parseInt(w.slice(7)));
                        });
                        try {
                          s = E(a) / 1e3;
                        } catch (w) {
                          p = w;
                        }
                        return;
                      } else
                        A === "" && (D = false);
                    n.parse(A + `
`);
                  }), n.flush();
                }
              }, "./src/utils/xhr-loader.ts": (Z, Y, N) => {
                "use strict";
                N.r(Y), N.d(Y, { default: () => x });
                var j = N("./src/utils/logger.ts"), R = N("./src/loader/load-stats.ts"), F = /^age:\s*[\d.]+\s*$/m, O = function() {
                  function k(E) {
                    this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = void 0, this.loader = null, this.stats = void 0, this.xhrSetup = E ? E.xhrSetup : null, this.stats = new R.LoadStats(), this.retryDelay = 0;
                  }
                  var m2 = k.prototype;
                  return m2.destroy = function() {
                    this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null;
                  }, m2.abortInternal = function() {
                    var L = this.loader;
                    self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), L && (L.onreadystatechange = null, L.onprogress = null, L.readyState !== 4 && (this.stats.aborted = true, L.abort()));
                  }, m2.abort = function() {
                    var L;
                    this.abortInternal(), (L = this.callbacks) !== null && L !== void 0 && L.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader);
                  }, m2.load = function(L, M, y) {
                    if (this.stats.loading.start)
                      throw new Error("Loader can only be used once.");
                    this.stats.loading.start = self.performance.now(), this.context = L, this.config = M, this.callbacks = y, this.retryDelay = M.retryDelay, this.loadInternal();
                  }, m2.loadInternal = function() {
                    var L = this.config, M = this.context;
                    if (!!L) {
                      var y = this.loader = new self.XMLHttpRequest(), I = this.stats;
                      I.loading.first = 0, I.loaded = 0;
                      var S = this.xhrSetup;
                      try {
                        if (S)
                          try {
                            S(y, M.url);
                          } catch (f) {
                            y.open("GET", M.url, true), S(y, M.url);
                          }
                        y.readyState || y.open("GET", M.url, true);
                        var d = this.context.headers;
                        if (d)
                          for (var v in d)
                            y.setRequestHeader(v, d[v]);
                      } catch (f) {
                        this.callbacks.onError({ code: y.status, text: f.message }, M, y);
                        return;
                      }
                      M.rangeEnd && y.setRequestHeader("Range", "bytes=" + M.rangeStart + "-" + (M.rangeEnd - 1)), y.onreadystatechange = this.readystatechange.bind(this), y.onprogress = this.loadprogress.bind(this), y.responseType = M.responseType, self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), L.timeout), y.send();
                    }
                  }, m2.readystatechange = function() {
                    var L = this.context, M = this.loader, y = this.stats;
                    if (!(!L || !M)) {
                      var I = M.readyState, S = this.config;
                      if (!y.aborted && I >= 2)
                        if (self.clearTimeout(this.requestTimeout), y.loading.first === 0 && (y.loading.first = Math.max(self.performance.now(), y.loading.start)), I === 4) {
                          M.onreadystatechange = null, M.onprogress = null;
                          var d = M.status, v = M.responseType === "arraybuffer";
                          if (d >= 200 && d < 300 && (v && M.response || M.responseText !== null)) {
                            y.loading.end = Math.max(self.performance.now(), y.loading.first);
                            var f, l;
                            if (v ? (f = M.response, l = f.byteLength) : (f = M.responseText, l = f.length), y.loaded = y.total = l, !this.callbacks)
                              return;
                            var _ = this.callbacks.onProgress;
                            if (_ && _(y, L, f, M), !this.callbacks)
                              return;
                            var g = { url: M.responseURL, data: f };
                            this.callbacks.onSuccess(g, y, L, M);
                          } else
                            y.retry >= S.maxRetry || d >= 400 && d < 499 ? (j.logger.error(d + " while loading " + L.url), this.callbacks.onError({ code: d, text: M.statusText }, L, M)) : (j.logger.warn(d + " while loading " + L.url + ", retrying in " + this.retryDelay + "..."), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay), this.retryDelay = Math.min(2 * this.retryDelay, S.maxRetryDelay), y.retry++);
                        } else
                          self.clearTimeout(this.requestTimeout), this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), S.timeout);
                    }
                  }, m2.loadtimeout = function() {
                    j.logger.warn("timeout while loading " + this.context.url);
                    var L = this.callbacks;
                    L && (this.abortInternal(), L.onTimeout(this.stats, this.context, this.loader));
                  }, m2.loadprogress = function(L) {
                    var M = this.stats;
                    M.loaded = L.loaded, L.lengthComputable && (M.total = L.total);
                  }, m2.getCacheAge = function() {
                    var L = null;
                    if (this.loader && F.test(this.loader.getAllResponseHeaders())) {
                      var M = this.loader.getResponseHeader("age");
                      L = M ? parseFloat(M) : null;
                    }
                    return L;
                  }, k;
                }();
                const x = O;
              }, "./node_modules/eventemitter3/index.js": (Z) => {
                "use strict";
                var Y = Object.prototype.hasOwnProperty, N = "~";
                function j() {
                }
                Object.create && (j.prototype = /* @__PURE__ */ Object.create(null), new j().__proto__ || (N = false));
                function R(k, m2, E) {
                  this.fn = k, this.context = m2, this.once = E || false;
                }
                function F(k, m2, E, L, M) {
                  if (typeof E != "function")
                    throw new TypeError("The listener must be a function");
                  var y = new R(E, L || k, M), I = N ? N + m2 : m2;
                  return k._events[I] ? k._events[I].fn ? k._events[I] = [k._events[I], y] : k._events[I].push(y) : (k._events[I] = y, k._eventsCount++), k;
                }
                function O(k, m2) {
                  --k._eventsCount == 0 ? k._events = new j() : delete k._events[m2];
                }
                function x() {
                  this._events = new j(), this._eventsCount = 0;
                }
                x.prototype.eventNames = function() {
                  var m2 = [], E, L;
                  if (this._eventsCount === 0)
                    return m2;
                  for (L in E = this._events)
                    Y.call(E, L) && m2.push(N ? L.slice(1) : L);
                  return Object.getOwnPropertySymbols ? m2.concat(Object.getOwnPropertySymbols(E)) : m2;
                }, x.prototype.listeners = function(m2) {
                  var E = N ? N + m2 : m2, L = this._events[E];
                  if (!L)
                    return [];
                  if (L.fn)
                    return [L.fn];
                  for (var M = 0, y = L.length, I = new Array(y); M < y; M++)
                    I[M] = L[M].fn;
                  return I;
                }, x.prototype.listenerCount = function(m2) {
                  var E = N ? N + m2 : m2, L = this._events[E];
                  return L ? L.fn ? 1 : L.length : 0;
                }, x.prototype.emit = function(m2, E, L, M, y, I) {
                  var S = N ? N + m2 : m2;
                  if (!this._events[S])
                    return false;
                  var d = this._events[S], v = arguments.length, f, l;
                  if (d.fn) {
                    switch (d.once && this.removeListener(m2, d.fn, void 0, true), v) {
                      case 1:
                        return d.fn.call(d.context), true;
                      case 2:
                        return d.fn.call(d.context, E), true;
                      case 3:
                        return d.fn.call(d.context, E, L), true;
                      case 4:
                        return d.fn.call(d.context, E, L, M), true;
                      case 5:
                        return d.fn.call(d.context, E, L, M, y), true;
                      case 6:
                        return d.fn.call(d.context, E, L, M, y, I), true;
                    }
                    for (l = 1, f = new Array(v - 1); l < v; l++)
                      f[l - 1] = arguments[l];
                    d.fn.apply(d.context, f);
                  } else {
                    var _ = d.length, g;
                    for (l = 0; l < _; l++)
                      switch (d[l].once && this.removeListener(m2, d[l].fn, void 0, true), v) {
                        case 1:
                          d[l].fn.call(d[l].context);
                          break;
                        case 2:
                          d[l].fn.call(d[l].context, E);
                          break;
                        case 3:
                          d[l].fn.call(d[l].context, E, L);
                          break;
                        case 4:
                          d[l].fn.call(d[l].context, E, L, M);
                          break;
                        default:
                          if (!f)
                            for (g = 1, f = new Array(v - 1); g < v; g++)
                              f[g - 1] = arguments[g];
                          d[l].fn.apply(d[l].context, f);
                      }
                  }
                  return true;
                }, x.prototype.on = function(m2, E, L) {
                  return F(this, m2, E, L, false);
                }, x.prototype.once = function(m2, E, L) {
                  return F(this, m2, E, L, true);
                }, x.prototype.removeListener = function(m2, E, L, M) {
                  var y = N ? N + m2 : m2;
                  if (!this._events[y])
                    return this;
                  if (!E)
                    return O(this, y), this;
                  var I = this._events[y];
                  if (I.fn)
                    I.fn === E && (!M || I.once) && (!L || I.context === L) && O(this, y);
                  else {
                    for (var S = 0, d = [], v = I.length; S < v; S++)
                      (I[S].fn !== E || M && !I[S].once || L && I[S].context !== L) && d.push(I[S]);
                    d.length ? this._events[y] = d.length === 1 ? d[0] : d : O(this, y);
                  }
                  return this;
                }, x.prototype.removeAllListeners = function(m2) {
                  var E;
                  return m2 ? (E = N ? N + m2 : m2, this._events[E] && O(this, E)) : (this._events = new j(), this._eventsCount = 0), this;
                }, x.prototype.off = x.prototype.removeListener, x.prototype.addListener = x.prototype.on, x.prefixed = N, x.EventEmitter = x, Z.exports = x;
              }, "./node_modules/url-toolkit/src/url-toolkit.js": function(Z) {
                (function(Y) {
                  var N = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, j = /^(?=([^\/?#]*))\1([^]*)$/, R = /(?:\/|^)\.(?=\/)/g, F = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, O = { buildAbsoluteURL: function(x, k, m2) {
                    if (m2 = m2 || {}, x = x.trim(), k = k.trim(), !k) {
                      if (!m2.alwaysNormalize)
                        return x;
                      var E = O.parseURL(x);
                      if (!E)
                        throw new Error("Error trying to parse base URL.");
                      return E.path = O.normalizePath(E.path), O.buildURLFromParts(E);
                    }
                    var L = O.parseURL(k);
                    if (!L)
                      throw new Error("Error trying to parse relative URL.");
                    if (L.scheme)
                      return m2.alwaysNormalize ? (L.path = O.normalizePath(L.path), O.buildURLFromParts(L)) : k;
                    var M = O.parseURL(x);
                    if (!M)
                      throw new Error("Error trying to parse base URL.");
                    if (!M.netLoc && M.path && M.path[0] !== "/") {
                      var y = j.exec(M.path);
                      M.netLoc = y[1], M.path = y[2];
                    }
                    M.netLoc && !M.path && (M.path = "/");
                    var I = { scheme: M.scheme, netLoc: L.netLoc, path: null, params: L.params, query: L.query, fragment: L.fragment };
                    if (!L.netLoc && (I.netLoc = M.netLoc, L.path[0] !== "/"))
                      if (!L.path)
                        I.path = M.path, L.params || (I.params = M.params, L.query || (I.query = M.query));
                      else {
                        var S = M.path, d = S.substring(0, S.lastIndexOf("/") + 1) + L.path;
                        I.path = O.normalizePath(d);
                      }
                    return I.path === null && (I.path = m2.alwaysNormalize ? O.normalizePath(L.path) : L.path), O.buildURLFromParts(I);
                  }, parseURL: function(x) {
                    var k = N.exec(x);
                    return k ? { scheme: k[1] || "", netLoc: k[2] || "", path: k[3] || "", params: k[4] || "", query: k[5] || "", fragment: k[6] || "" } : null;
                  }, normalizePath: function(x) {
                    for (x = x.split("").reverse().join("").replace(R, ""); x.length !== (x = x.replace(F, "")).length; )
                      ;
                    return x.split("").reverse().join("");
                  }, buildURLFromParts: function(x) {
                    return x.scheme + x.netLoc + x.path + x.params + x.query + x.fragment;
                  } };
                  Z.exports = O;
                })(this);
              } }, Ce = {};
              function Ae(Z) {
                var Y = Ce[Z];
                if (Y !== void 0)
                  return Y.exports;
                var N = Ce[Z] = { exports: {} };
                return Me[Z].call(N.exports, N, N.exports, Ae), N.exports;
              }
              Ae.m = Me, (() => {
                Ae.n = (Z) => {
                  var Y = Z && Z.__esModule ? () => Z.default : () => Z;
                  return Ae.d(Y, { a: Y }), Y;
                };
              })(), (() => {
                Ae.d = (Z, Y) => {
                  for (var N in Y)
                    Ae.o(Y, N) && !Ae.o(Z, N) && Object.defineProperty(Z, N, { enumerable: true, get: Y[N] });
                };
              })(), (() => {
                Ae.o = (Z, Y) => Object.prototype.hasOwnProperty.call(Z, Y);
              })(), (() => {
                Ae.r = (Z) => {
                  typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(Z, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(Z, "__esModule", { value: true });
                };
              })();
              var Pe = Ae("./src/hls.ts");
              return Pe = Pe.default, Pe;
            })());
          }, 988: (Ee) => {
            Ee.exports = Ce;
            var Me = Object.prototype.toString;
            function Ce(Ae) {
              if (!Ae)
                return false;
              var Pe = Me.call(Ae);
              return Pe === "[object Function]" || typeof Ae == "function" && Pe !== "[object RegExp]" || typeof window != "undefined" && (Ae === window.setTimeout || Ae === window.alert || Ae === window.confirm || Ae === window.prompt);
            }
          }, 642: (Ee, Me) => {
            function Ce(j) {
              if (j && typeof j == "object") {
                var R = j.which || j.keyCode || j.charCode;
                R && (j = R);
              }
              if (typeof j == "number")
                return Y[j];
              var F = String(j), O = Ae[F.toLowerCase()];
              if (O)
                return O;
              var O = Pe[F.toLowerCase()];
              if (O)
                return O;
              if (F.length === 1)
                return F.charCodeAt(0);
            }
            Ce.isEventKey = function(R, F) {
              if (R && typeof R == "object") {
                var O = R.which || R.keyCode || R.charCode;
                if (O == null)
                  return false;
                if (typeof F == "string") {
                  var x = Ae[F.toLowerCase()];
                  if (x)
                    return x === O;
                  var x = Pe[F.toLowerCase()];
                  if (x)
                    return x === O;
                } else if (typeof F == "number")
                  return F === O;
                return false;
              }
            }, Me = Ee.exports = Ce;
            var Ae = Me.code = Me.codes = { backspace: 8, tab: 9, enter: 13, shift: 16, ctrl: 17, alt: 18, "pause/break": 19, "caps lock": 20, esc: 27, space: 32, "page up": 33, "page down": 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40, insert: 45, delete: 46, command: 91, "left command": 91, "right command": 93, "numpad *": 106, "numpad +": 107, "numpad -": 109, "numpad .": 110, "numpad /": 111, "num lock": 144, "scroll lock": 145, "my computer": 182, "my calculator": 183, ";": 186, "=": 187, ",": 188, "-": 189, ".": 190, "/": 191, "`": 192, "[": 219, "\\": 220, "]": 221, "'": 222 }, Pe = Me.aliases = { windows: 91, "\u21E7": 16, "\u2325": 18, "\u2303": 17, "\u2318": 91, ctl: 17, control: 17, option: 18, pause: 19, break: 19, caps: 20, return: 13, escape: 27, spc: 32, spacebar: 32, pgup: 33, pgdn: 34, ins: 45, del: 46, cmd: 91 };
            for (Z = 97; Z < 123; Z++)
              Ae[String.fromCharCode(Z)] = Z - 32;
            for (var Z = 48; Z < 58; Z++)
              Ae[Z - 48] = Z;
            for (Z = 1; Z < 13; Z++)
              Ae["f" + Z] = Z + 111;
            for (Z = 0; Z < 10; Z++)
              Ae["numpad " + Z] = Z + 96;
            var Y = Me.names = Me.title = {};
            for (Z in Ae)
              Y[Ae[Z]] = Z;
            for (var N in Pe)
              Ae[N] = Pe[N];
          }, 54: (Ee) => {
            Ee.exports = Me;
            function Me(Ce, Ae) {
              var Pe, Z = null;
              try {
                Pe = JSON.parse(Ce, Ae);
              } catch (Y) {
                Z = Y;
              }
              return [Z, Pe];
            }
          }, 207: (Ee, Me, Ce) => {
            "use strict";
            var Ae = Ce(697), Pe = Ce(675), Z = Ce(110), Y = Ce(642), N = Ce(104), j = Ce(721), R = Ce(54), F = Ce(424), O = Ce(497), x = Ce(271), k = Ce(169);
            function m2(T) {
              return T && typeof T == "object" && "default" in T ? T : { default: T };
            }
            for (var E = m2(Ae), L = m2(Pe), M = m2(Z), y = m2(Y), I = m2(N), S = m2(j), d = m2(R), v = m2(F), f = m2(O), l = m2(x), _ = m2(k), g = "7.21.2", i = {}, n = function(P, u) {
              return i[P] = i[P] || [], u && (i[P] = i[P].concat(u)), i[P];
            }, o = function(P, u) {
              n(P, u);
            }, h = function(P, u) {
              var r = n(P).indexOf(u);
              return r <= -1 ? false : (i[P] = i[P].slice(), i[P].splice(r, 1), true);
            }, b = function(P, u) {
              n(P, [].concat(u).map(function(r) {
                var e = function t() {
                  return h(P, t), r.apply(void 0, arguments);
                };
                return e;
              }));
            }, a = { prefixed: true }, c = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]], s = c[0], p, D = 0; D < c.length; D++)
              if (c[D][1] in L.default) {
                p = c[D];
                break;
              }
            if (p) {
              for (var A = 0; A < p.length; A++)
                a[s[A]] = p[A];
              a.prefixed = p[0] !== s[0];
            }
            var w = [], B = function(P, u) {
              return function(r, e, t) {
                var C = u.levels[e], G = new RegExp("^(" + C + ")$");
                if (r !== "log" && t.unshift(r.toUpperCase() + ":"), t.unshift(P + ":"), w) {
                  w.push([].concat(t));
                  var X = w.length - 1e3;
                  w.splice(0, X > 0 ? X : 0);
                }
                if (!!E.default.console) {
                  var $2 = E.default.console[r];
                  !$2 && r === "debug" && ($2 = E.default.console.info || E.default.console.log), !(!$2 || !C || !G.test(r)) && $2[Array.isArray(t) ? "apply" : "call"](E.default.console, t);
                }
              };
            };
            function U(T) {
              var P = "info", u, r = function() {
                for (var t = arguments.length, C = new Array(t), G = 0; G < t; G++)
                  C[G] = arguments[G];
                u("log", P, C);
              };
              return u = B(T, r), r.createLogger = function(e) {
                return U(T + ": " + e);
              }, r.levels = { all: "debug|log|warn|error", off: "", debug: "debug|log|warn|error", info: "log|warn|error", warn: "warn|error", error: "error", DEFAULT: P }, r.level = function(e) {
                if (typeof e == "string") {
                  if (!r.levels.hasOwnProperty(e))
                    throw new Error('"' + e + '" in not a valid log level');
                  P = e;
                }
                return P;
              }, r.history = function() {
                return w ? [].concat(w) : [];
              }, r.history.filter = function(e) {
                return (w || []).filter(function(t) {
                  return new RegExp(".*" + e + ".*").test(t[0]);
                });
              }, r.history.clear = function() {
                w && (w.length = 0);
              }, r.history.disable = function() {
                w !== null && (w.length = 0, w = null);
              }, r.history.enable = function() {
                w === null && (w = []);
              }, r.error = function() {
                for (var e = arguments.length, t = new Array(e), C = 0; C < e; C++)
                  t[C] = arguments[C];
                return u("error", P, t);
              }, r.warn = function() {
                for (var e = arguments.length, t = new Array(e), C = 0; C < e; C++)
                  t[C] = arguments[C];
                return u("warn", P, t);
              }, r.debug = function() {
                for (var e = arguments.length, t = new Array(e), C = 0; C < e; C++)
                  t[C] = arguments[C];
                return u("debug", P, t);
              }, r;
            }
            var K = U("VIDEOJS"), W = K.createLogger, H = Object.prototype.toString, V = function(P) {
              return ee(P) ? Object.keys(P) : [];
            };
            function z(T, P) {
              V(T).forEach(function(u) {
                return P(T[u], u);
              });
            }
            function Q(T, P, u) {
              return u === void 0 && (u = 0), V(T).reduce(function(r, e) {
                return P(r, T[e], e);
              }, u);
            }
            function q(T) {
              for (var P = arguments.length, u = new Array(P > 1 ? P - 1 : 0), r = 1; r < P; r++)
                u[r - 1] = arguments[r];
              return Object.assign ? M.default.apply(void 0, [T].concat(u)) : (u.forEach(function(e) {
                !e || z(e, function(t, C) {
                  T[C] = t;
                });
              }), T);
            }
            function ee(T) {
              return !!T && typeof T == "object";
            }
            function ae(T) {
              return ee(T) && H.call(T) === "[object Object]" && T.constructor === Object;
            }
            function ne(T, P) {
              if (!T || !P)
                return "";
              if (typeof E.default.getComputedStyle == "function") {
                var u;
                try {
                  u = E.default.getComputedStyle(T);
                } catch (r) {
                  return "";
                }
                return u ? u.getPropertyValue(P) || u[P] : "";
              }
              return "";
            }
            var ue = E.default.navigator && E.default.navigator.userAgent || "", ye = /AppleWebKit\/([\d.]+)/i.exec(ue), be = ye ? parseFloat(ye.pop()) : null, me = /iPod/i.test(ue), Se = function() {
              var T = ue.match(/OS (\d+)_/i);
              return T && T[1] ? T[1] : null;
            }(), Te = /Android/i.test(ue), fe = function() {
              var T = ue.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
              if (!T)
                return null;
              var P = T[1] && parseFloat(T[1]), u = T[2] && parseFloat(T[2]);
              return P && u ? parseFloat(T[1] + "." + T[2]) : P || null;
            }(), ie = Te && fe < 5 && be < 537, de = /Firefox/i.test(ue), he = /Edg/i.test(ue), oe = !he && (/Chrome/i.test(ue) || /CriOS/i.test(ue)), se = function() {
              var T = ue.match(/(Chrome|CriOS)\/(\d+)/);
              return T && T[2] ? parseFloat(T[2]) : null;
            }(), ve = function() {
              var T = /MSIE\s(\d+)\.\d/.exec(ue), P = T && parseFloat(T[1]);
              return !P && /Trident\/7.0/i.test(ue) && /rv:11.0/.test(ue) && (P = 11), P;
            }(), _e = /Safari/i.test(ue) && !oe && !Te && !he, Re = /Windows/i.test(ue), De = Boolean(Ye() && ("ontouchstart" in E.default || E.default.navigator.maxTouchPoints || E.default.DocumentTouch && E.default.document instanceof E.default.DocumentTouch)), ke = /iPad/i.test(ue) || _e && De && !/iPhone/i.test(ue), Ne = /iPhone/i.test(ue) && !ke, Fe = Ne || ke || me, xe = (_e || Fe) && !oe, Ue = Object.freeze({ __proto__: null, IS_IPOD: me, IOS_VERSION: Se, IS_ANDROID: Te, ANDROID_VERSION: fe, IS_NATIVE_ANDROID: ie, IS_FIREFOX: de, IS_EDGE: he, IS_CHROME: oe, CHROME_VERSION: se, IE_VERSION: ve, IS_SAFARI: _e, IS_WINDOWS: Re, TOUCH_ENABLED: De, IS_IPAD: ke, IS_IPHONE: Ne, IS_IOS: Fe, IS_ANY_SAFARI: xe });
            function qe(T) {
              return typeof T == "string" && Boolean(T.trim());
            }
            function We(T) {
              if (T.indexOf(" ") >= 0)
                throw new Error("class has illegal whitespace characters");
            }
            function tt(T) {
              return new RegExp("(^|\\s)" + T + "($|\\s)");
            }
            function Ye() {
              return L.default === E.default.document;
            }
            function ze(T) {
              return ee(T) && T.nodeType === 1;
            }
            function Ze() {
              try {
                return E.default.parent !== E.default.self;
              } catch (T) {
                return true;
              }
            }
            function st(T) {
              return function(P, u) {
                if (!qe(P))
                  return L.default[T](null);
                qe(u) && (u = L.default.querySelector(u));
                var r = ze(u) ? u : L.default;
                return r[T] && r[T](P);
              };
            }
            function re(T, P, u, r) {
              T === void 0 && (T = "div"), P === void 0 && (P = {}), u === void 0 && (u = {});
              var e = L.default.createElement(T);
              return Object.getOwnPropertyNames(P).forEach(function(t) {
                var C = P[t];
                t.indexOf("aria-") !== -1 || t === "role" || t === "type" ? (K.warn(`Setting attributes in the second argument of createEl()
has been deprecated. Use the third argument instead.
` + ("createEl(type, properties, attributes). Attempting to set " + t + " to " + C + ".")), e.setAttribute(t, C)) : t === "textContent" ? ce(e, C) : (e[t] !== C || t === "tabIndex") && (e[t] = C);
              }), Object.getOwnPropertyNames(u).forEach(function(t) {
                e.setAttribute(t, u[t]);
              }), r && Ot(e, r), e;
            }
            function ce(T, P) {
              return typeof T.textContent == "undefined" ? T.innerText = P : T.textContent = P, T;
            }
            function we(T, P) {
              P.firstChild ? P.insertBefore(T, P.firstChild) : P.appendChild(T);
            }
            function Ke(T, P) {
              return We(P), T.classList ? T.classList.contains(P) : tt(P).test(T.className);
            }
            function He(T, P) {
              return T.classList ? T.classList.add(P) : Ke(T, P) || (T.className = (T.className + " " + P).trim()), T;
            }
            function Ge(T, P) {
              return T ? (T.classList ? T.classList.remove(P) : (We(P), T.className = T.className.split(/\s+/).filter(function(u) {
                return u !== P;
              }).join(" ")), T) : (K.warn("removeClass was called with an element that doesn't exist"), null);
            }
            function Be(T, P, u) {
              var r = Ke(T, P);
              if (typeof u == "function" && (u = u(T, P)), typeof u != "boolean" && (u = !r), u !== r)
                return u ? He(T, P) : Ge(T, P), T;
            }
            function it(T, P) {
              Object.getOwnPropertyNames(P).forEach(function(u) {
                var r = P[u];
                r === null || typeof r == "undefined" || r === false ? T.removeAttribute(u) : T.setAttribute(u, r === true ? "" : r);
              });
            }
            function Xe(T) {
              var P = {}, u = ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";
              if (T && T.attributes && T.attributes.length > 0)
                for (var r = T.attributes, e = r.length - 1; e >= 0; e--) {
                  var t = r[e].name, C = r[e].value;
                  (typeof T[t] == "boolean" || u.indexOf("," + t + ",") !== -1) && (C = C !== null), P[t] = C;
                }
              return P;
            }
            function ot(T, P) {
              return T.getAttribute(P);
            }
            function yt(T, P, u) {
              T.setAttribute(P, u);
            }
            function Ct(T, P) {
              T.removeAttribute(P);
            }
            function ht() {
              L.default.body.focus(), L.default.onselectstart = function() {
                return false;
              };
            }
            function nt() {
              L.default.onselectstart = function() {
                return true;
              };
            }
            function pt(T) {
              if (T && T.getBoundingClientRect && T.parentNode) {
                var P = T.getBoundingClientRect(), u = {};
                return ["bottom", "height", "left", "right", "top", "width"].forEach(function(r) {
                  P[r] !== void 0 && (u[r] = P[r]);
                }), u.height || (u.height = parseFloat(ne(T, "height"))), u.width || (u.width = parseFloat(ne(T, "width"))), u;
              }
            }
            function _t(T) {
              if (!T || T && !T.offsetParent)
                return { left: 0, top: 0, width: 0, height: 0 };
              for (var P = T.offsetWidth, u = T.offsetHeight, r = 0, e = 0; T.offsetParent && T !== L.default[a.fullscreenElement]; )
                r += T.offsetLeft, e += T.offsetTop, T = T.offsetParent;
              return { left: r, top: e, width: P, height: u };
            }
            function Et(T, P) {
              var u = { x: 0, y: 0 };
              if (Fe)
                for (var r = T; r && r.nodeName.toLowerCase() !== "html"; ) {
                  var e = ne(r, "transform");
                  if (/^matrix/.test(e)) {
                    var t = e.slice(7, -1).split(/,\s/).map(Number);
                    u.x += t[4], u.y += t[5];
                  } else if (/^matrix3d/.test(e)) {
                    var C = e.slice(9, -1).split(/,\s/).map(Number);
                    u.x += C[12], u.y += C[13];
                  }
                  r = r.parentNode;
                }
              var G = {}, X = _t(P.target), $2 = _t(T), te = $2.width, le = $2.height, J = P.offsetY - ($2.top - X.top), pe = P.offsetX - ($2.left - X.left);
              return P.changedTouches && (pe = P.changedTouches[0].pageX - $2.left, J = P.changedTouches[0].pageY + $2.top, Fe && (pe -= u.x, J -= u.y)), G.y = 1 - Math.max(0, Math.min(1, J / le)), G.x = Math.max(0, Math.min(1, pe / te)), G;
            }
            function xt(T) {
              return ee(T) && T.nodeType === 3;
            }
            function At(T) {
              for (; T.firstChild; )
                T.removeChild(T.firstChild);
              return T;
            }
            function Ft(T) {
              return typeof T == "function" && (T = T()), (Array.isArray(T) ? T : [T]).map(function(P) {
                if (typeof P == "function" && (P = P()), ze(P) || xt(P))
                  return P;
                if (typeof P == "string" && /\S/.test(P))
                  return L.default.createTextNode(P);
              }).filter(function(P) {
                return P;
              });
            }
            function Ot(T, P) {
              return Ft(P).forEach(function(u) {
                return T.appendChild(u);
              }), T;
            }
            function Rt(T, P) {
              return Ot(At(T), P);
            }
            function Tt(T) {
              return T.button === void 0 && T.buttons === void 0 || T.button === 0 && T.buttons === void 0 || T.type === "mouseup" && T.button === 0 && T.buttons === 0 ? true : !(T.button !== 0 || T.buttons !== 1);
            }
            var ft = st("querySelector"), Bt = st("querySelectorAll"), Vt = Object.freeze({ __proto__: null, isReal: Ye, isEl: ze, isInFrame: Ze, createEl: re, textContent: ce, prependTo: we, hasClass: Ke, addClass: He, removeClass: Ge, toggleClass: Be, setAttributes: it, getAttributes: Xe, getAttribute: ot, setAttribute: yt, removeAttribute: Ct, blockTextSelection: ht, unblockTextSelection: nt, getBoundingClientRect: pt, findPosition: _t, getPointerPosition: Et, isTextNode: xt, emptyEl: At, normalizeContent: Ft, appendContent: Ot, insertContent: Rt, isSingleLeftClick: Tt, $: ft, $$: Bt }), ir = false, nr, ar = function() {
              if (nr.options.autoSetup !== false) {
                var P = Array.prototype.slice.call(L.default.getElementsByTagName("video")), u = Array.prototype.slice.call(L.default.getElementsByTagName("audio")), r = Array.prototype.slice.call(L.default.getElementsByTagName("video-js")), e = P.concat(u, r);
                if (e && e.length > 0)
                  for (var t = 0, C = e.length; t < C; t++) {
                    var G = e[t];
                    if (G && G.getAttribute) {
                      if (G.player === void 0) {
                        var X = G.getAttribute("data-setup");
                        X !== null && nr(G);
                      }
                    } else {
                      Pt(1);
                      break;
                    }
                  }
                else
                  ir || Pt(1);
              }
            };
            function Pt(T, P) {
              !Ye() || (P && (nr = P), E.default.setTimeout(ar, T));
            }
            function Nt() {
              ir = true, E.default.removeEventListener("load", Nt);
            }
            Ye() && (L.default.readyState === "complete" ? Nt() : E.default.addEventListener("load", Nt));
            var vr = function(P) {
              var u = L.default.createElement("style");
              return u.className = P, u;
            }, sr = function(P, u) {
              P.styleSheet ? P.styleSheet.cssText = u : P.textContent = u;
            }, Fn = 3, Nn = Fn;
            function Mt() {
              return Nn++;
            }
            var Pi;
            E.default.WeakMap || (Pi = function() {
              function T() {
                this.vdata = "vdata" + Math.floor(E.default.performance && E.default.performance.now() || Date.now()), this.data = {};
              }
              var P = T.prototype;
              return P.set = function(r, e) {
                var t = r[this.vdata] || Mt();
                return r[this.vdata] || (r[this.vdata] = t), this.data[t] = e, this;
              }, P.get = function(r) {
                var e = r[this.vdata];
                if (e)
                  return this.data[e];
                K("We have no data for this element", r);
              }, P.has = function(r) {
                var e = r[this.vdata];
                return e in this.data;
              }, P.delete = function(r) {
                var e = r[this.vdata];
                e && (delete this.data[e], delete r[this.vdata]);
              }, T;
            }());
            var lt = E.default.WeakMap ? /* @__PURE__ */ new WeakMap() : new Pi();
            function Li(T, P) {
              if (!!lt.has(T)) {
                var u = lt.get(T);
                u.handlers[P].length === 0 && (delete u.handlers[P], T.removeEventListener ? T.removeEventListener(P, u.dispatcher, false) : T.detachEvent && T.detachEvent("on" + P, u.dispatcher)), Object.getOwnPropertyNames(u.handlers).length <= 0 && (delete u.handlers, delete u.dispatcher, delete u.disabled), Object.getOwnPropertyNames(u).length === 0 && lt.delete(T);
              }
            }
            function Fr(T, P, u, r) {
              u.forEach(function(e) {
                T(P, e, r);
              });
            }
            function pr(T) {
              if (T.fixed_)
                return T;
              function P() {
                return true;
              }
              function u() {
                return false;
              }
              if (!T || !T.isPropagationStopped || !T.isImmediatePropagationStopped) {
                var r = T || E.default.event;
                T = {};
                for (var e in r)
                  e !== "layerX" && e !== "layerY" && e !== "keyLocation" && e !== "webkitMovementX" && e !== "webkitMovementY" && e !== "path" && (e === "returnValue" && r.preventDefault || (T[e] = r[e]));
                if (T.target || (T.target = T.srcElement || L.default), T.relatedTarget || (T.relatedTarget = T.fromElement === T.target ? T.toElement : T.fromElement), T.preventDefault = function() {
                  r.preventDefault && r.preventDefault(), T.returnValue = false, r.returnValue = false, T.defaultPrevented = true;
                }, T.defaultPrevented = false, T.stopPropagation = function() {
                  r.stopPropagation && r.stopPropagation(), T.cancelBubble = true, r.cancelBubble = true, T.isPropagationStopped = P;
                }, T.isPropagationStopped = u, T.stopImmediatePropagation = function() {
                  r.stopImmediatePropagation && r.stopImmediatePropagation(), T.isImmediatePropagationStopped = P, T.stopPropagation();
                }, T.isImmediatePropagationStopped = u, T.clientX !== null && T.clientX !== void 0) {
                  var t = L.default.documentElement, C = L.default.body;
                  T.pageX = T.clientX + (t && t.scrollLeft || C && C.scrollLeft || 0) - (t && t.clientLeft || C && C.clientLeft || 0), T.pageY = T.clientY + (t && t.scrollTop || C && C.scrollTop || 0) - (t && t.clientTop || C && C.clientTop || 0);
                }
                T.which = T.charCode || T.keyCode, T.button !== null && T.button !== void 0 && (T.button = T.button & 1 ? 0 : T.button & 4 ? 1 : T.button & 2 ? 2 : 0);
              }
              return T.fixed_ = true, T;
            }
            var gr, Bn = function() {
              if (typeof gr != "boolean") {
                gr = false;
                try {
                  var P = Object.defineProperty({}, "passive", { get: function() {
                    gr = true;
                  } });
                  E.default.addEventListener("test", null, P), E.default.removeEventListener("test", null, P);
                } catch (u) {
                }
              }
              return gr;
            }, Un = ["touchstart", "touchmove"];
            function vt(T, P, u) {
              if (Array.isArray(P))
                return Fr(vt, T, P, u);
              lt.has(T) || lt.set(T, {});
              var r = lt.get(T);
              if (r.handlers || (r.handlers = {}), r.handlers[P] || (r.handlers[P] = []), u.guid || (u.guid = Mt()), r.handlers[P].push(u), r.dispatcher || (r.disabled = false, r.dispatcher = function(t, C) {
                if (!r.disabled) {
                  t = pr(t);
                  var G = r.handlers[t.type];
                  if (G)
                    for (var X = G.slice(0), $2 = 0, te = X.length; $2 < te && !t.isImmediatePropagationStopped(); $2++)
                      try {
                        X[$2].call(T, t, C);
                      } catch (le) {
                        K.error(le);
                      }
                }
              }), r.handlers[P].length === 1)
                if (T.addEventListener) {
                  var e = false;
                  Bn() && Un.indexOf(P) > -1 && (e = { passive: true }), T.addEventListener(P, r.dispatcher, e);
                } else
                  T.attachEvent && T.attachEvent("on" + P, r.dispatcher);
            }
            function at(T, P, u) {
              if (!!lt.has(T)) {
                var r = lt.get(T);
                if (!!r.handlers) {
                  if (Array.isArray(P))
                    return Fr(at, T, P, u);
                  var e = function($2, te) {
                    r.handlers[te] = [], Li($2, te);
                  };
                  if (P === void 0) {
                    for (var t in r.handlers)
                      Object.prototype.hasOwnProperty.call(r.handlers || {}, t) && e(T, t);
                    return;
                  }
                  var C = r.handlers[P];
                  if (!!C) {
                    if (!u) {
                      e(T, P);
                      return;
                    }
                    if (u.guid)
                      for (var G = 0; G < C.length; G++)
                        C[G].guid === u.guid && C.splice(G--, 1);
                    Li(T, P);
                  }
                }
              }
            }
            function Yt(T, P, u) {
              var r = lt.has(T) ? lt.get(T) : {}, e = T.parentNode || T.ownerDocument;
              if (typeof P == "string" ? P = { type: P, target: T } : P.target || (P.target = T), P = pr(P), r.dispatcher && r.dispatcher.call(T, P, u), e && !P.isPropagationStopped() && P.bubbles === true)
                Yt.call(null, e, P, u);
              else if (!e && !P.defaultPrevented && P.target && P.target[P.type]) {
                lt.has(P.target) || lt.set(P.target, {});
                var t = lt.get(P.target);
                P.target[P.type] && (t.disabled = true, typeof P.target[P.type] == "function" && P.target[P.type](), t.disabled = false);
              }
              return !P.defaultPrevented;
            }
            function mr(T, P, u) {
              if (Array.isArray(P))
                return Fr(mr, T, P, u);
              var r = function e() {
                at(T, P, e), u.apply(this, arguments);
              };
              r.guid = u.guid = u.guid || Mt(), vt(T, P, r);
            }
            function Di(T, P, u) {
              var r = function e() {
                at(T, P, e), u.apply(this, arguments);
              };
              r.guid = u.guid = u.guid || Mt(), vt(T, P, r);
            }
            var Kn = Object.freeze({ __proto__: null, fixEvent: pr, on: vt, off: at, trigger: Yt, one: mr, any: Di }), St = 30, Qe = function(P, u, r) {
              u.guid || (u.guid = Mt());
              var e = u.bind(P);
              return e.guid = r ? r + "_" + u.guid : u.guid, e;
            }, kt = function(P, u) {
              var r = E.default.performance.now(), e = function() {
                var C = E.default.performance.now();
                C - r >= u && (P.apply(void 0, arguments), r = C);
              };
              return e;
            }, jn = function(P, u, r, e) {
              e === void 0 && (e = E.default);
              var t, C = function() {
                e.clearTimeout(t), t = null;
              }, G = function() {
                var $2 = this, te = arguments, le = function() {
                  t = null, le = null, r || P.apply($2, te);
                };
                !t && r && P.apply($2, te), e.clearTimeout(t), t = e.setTimeout(le, u);
              };
              return G.cancel = C, G;
            }, rt = function() {
            };
            rt.prototype.allowedEvents_ = {}, rt.prototype.on = function(T, P) {
              var u = this.addEventListener;
              this.addEventListener = function() {
              }, vt(this, T, P), this.addEventListener = u;
            }, rt.prototype.addEventListener = rt.prototype.on, rt.prototype.off = function(T, P) {
              at(this, T, P);
            }, rt.prototype.removeEventListener = rt.prototype.off, rt.prototype.one = function(T, P) {
              var u = this.addEventListener;
              this.addEventListener = function() {
              }, mr(this, T, P), this.addEventListener = u;
            }, rt.prototype.any = function(T, P) {
              var u = this.addEventListener;
              this.addEventListener = function() {
              }, Di(this, T, P), this.addEventListener = u;
            }, rt.prototype.trigger = function(T) {
              var P = T.type || T;
              typeof T == "string" && (T = { type: P }), T = pr(T), this.allowedEvents_[P] && this["on" + P] && this["on" + P](T), Yt(this, T);
            }, rt.prototype.dispatchEvent = rt.prototype.trigger;
            var or;
            rt.prototype.queueTrigger = function(T) {
              var P = this;
              or || (or = /* @__PURE__ */ new Map());
              var u = T.type || T, r = or.get(this);
              r || (r = /* @__PURE__ */ new Map(), or.set(this, r));
              var e = r.get(u);
              r.delete(u), E.default.clearTimeout(e);
              var t = E.default.setTimeout(function() {
                r.delete(u), r.size === 0 && (r = null, or.delete(P)), P.trigger(T);
              }, 0);
              r.set(u, t);
            };
            var yr = function(P) {
              return typeof P.name == "function" ? P.name() : typeof P.name == "string" ? P.name : P.name_ ? P.name_ : P.constructor && P.constructor.name ? P.constructor.name : typeof P;
            }, wt = function(P) {
              return P instanceof rt || !!P.eventBusEl_ && ["on", "one", "off", "trigger"].every(function(u) {
                return typeof P[u] == "function";
              });
            }, Hn = function(P, u) {
              wt(P) ? u() : (P.eventedCallbacks || (P.eventedCallbacks = []), P.eventedCallbacks.push(u));
            }, Nr = function(P) {
              return typeof P == "string" && /\S/.test(P) || Array.isArray(P) && !!P.length;
            }, _r = function(P, u, r) {
              if (!P || !P.nodeName && !wt(P))
                throw new Error("Invalid target for " + yr(u) + "#" + r + "; must be a DOM node or evented object.");
            }, Ii = function(P, u, r) {
              if (!Nr(P))
                throw new Error("Invalid event type for " + yr(u) + "#" + r + "; must be a non-empty string or array.");
            }, Oi = function(P, u, r) {
              if (typeof P != "function")
                throw new Error("Invalid listener for " + yr(u) + "#" + r + "; must be a function.");
            }, Br = function(P, u, r) {
              var e = u.length < 3 || u[0] === P || u[0] === P.eventBusEl_, t, C, G;
              return e ? (t = P.eventBusEl_, u.length >= 3 && u.shift(), C = u[0], G = u[1]) : (t = u[0], C = u[1], G = u[2]), _r(t, P, r), Ii(C, P, r), Oi(G, P, r), G = Qe(P, G), { isTargetingSelf: e, target: t, type: C, listener: G };
            }, Ut = function(P, u, r, e) {
              _r(P, P, u), P.nodeName ? Kn[u](P, r, e) : P[u](r, e);
            }, Wn = { on: function() {
              for (var P = this, u = arguments.length, r = new Array(u), e = 0; e < u; e++)
                r[e] = arguments[e];
              var t = Br(this, r, "on"), C = t.isTargetingSelf, G = t.target, X = t.type, $2 = t.listener;
              if (Ut(G, "on", X, $2), !C) {
                var te = function() {
                  return P.off(G, X, $2);
                };
                te.guid = $2.guid;
                var le = function() {
                  return P.off("dispose", te);
                };
                le.guid = $2.guid, Ut(this, "on", "dispose", te), Ut(G, "on", "dispose", le);
              }
            }, one: function() {
              for (var P = this, u = arguments.length, r = new Array(u), e = 0; e < u; e++)
                r[e] = arguments[e];
              var t = Br(this, r, "one"), C = t.isTargetingSelf, G = t.target, X = t.type, $2 = t.listener;
              if (C)
                Ut(G, "one", X, $2);
              else {
                var te = function le() {
                  P.off(G, X, le);
                  for (var J = arguments.length, pe = new Array(J), Ie = 0; Ie < J; Ie++)
                    pe[Ie] = arguments[Ie];
                  $2.apply(null, pe);
                };
                te.guid = $2.guid, Ut(G, "one", X, te);
              }
            }, any: function() {
              for (var P = this, u = arguments.length, r = new Array(u), e = 0; e < u; e++)
                r[e] = arguments[e];
              var t = Br(this, r, "any"), C = t.isTargetingSelf, G = t.target, X = t.type, $2 = t.listener;
              if (C)
                Ut(G, "any", X, $2);
              else {
                var te = function le() {
                  P.off(G, X, le);
                  for (var J = arguments.length, pe = new Array(J), Ie = 0; Ie < J; Ie++)
                    pe[Ie] = arguments[Ie];
                  $2.apply(null, pe);
                };
                te.guid = $2.guid, Ut(G, "any", X, te);
              }
            }, off: function(P, u, r) {
              if (!P || Nr(P))
                at(this.eventBusEl_, P, u);
              else {
                var e = P, t = u;
                _r(e, this, "off"), Ii(t, this, "off"), Oi(r, this, "off"), r = Qe(this, r), this.off("dispose", r), e.nodeName ? (at(e, t, r), at(e, "dispose", r)) : wt(e) && (e.off(t, r), e.off("dispose", r));
              }
            }, trigger: function(P, u) {
              _r(this.eventBusEl_, this, "trigger");
              var r = P && typeof P != "string" ? P.type : P;
              if (!Nr(r)) {
                var e = "Invalid event type for " + yr(this) + "#trigger; must be a non-empty string or object with a type key that has a non-empty value.";
                if (P)
                  (this.log || K).error(e);
                else
                  throw new Error(e);
              }
              return Yt(this.eventBusEl_, P, u);
            } };
            function Ur(T, P) {
              P === void 0 && (P = {});
              var u = P, r = u.eventBusKey;
              if (r) {
                if (!T[r].nodeName)
                  throw new Error('The eventBusKey "' + r + '" does not refer to an element.');
                T.eventBusEl_ = T[r];
              } else
                T.eventBusEl_ = re("span", { className: "vjs-event-bus" });
              return q(T, Wn), T.eventedCallbacks && T.eventedCallbacks.forEach(function(e) {
                e();
              }), T.on("dispose", function() {
                T.off(), [T, T.el_, T.eventBusEl_].forEach(function(e) {
                  e && lt.has(e) && lt.delete(e);
                }), E.default.setTimeout(function() {
                  T.eventBusEl_ = null;
                }, 0);
              }), T;
            }
            var Gn = { state: {}, setState: function(P) {
              var u = this;
              typeof P == "function" && (P = P());
              var r;
              return z(P, function(e, t) {
                u.state[t] !== e && (r = r || {}, r[t] = { from: u.state[t], to: e }), u.state[t] = e;
              }), r && wt(this) && this.trigger({ changes: r, type: "statechanged" }), r;
            } };
            function Ri(T, P) {
              return q(T, Gn), T.state = q({}, T.state, P), typeof T.handleStateChanged == "function" && wt(T) && T.on("statechanged", T.handleStateChanged), T;
            }
            var Er = function(P) {
              return typeof P != "string" ? P : P.replace(/./, function(u) {
                return u.toLowerCase();
              });
            }, Je = function(P) {
              return typeof P != "string" ? P : P.replace(/./, function(u) {
                return u.toUpperCase();
              });
            }, Vn = function(P, u) {
              return Je(P) === Je(u);
            };
            function $e() {
              for (var T = {}, P = arguments.length, u = new Array(P), r = 0; r < P; r++)
                u[r] = arguments[r];
              return u.forEach(function(e) {
                !e || z(e, function(t, C) {
                  if (!ae(t)) {
                    T[C] = t;
                    return;
                  }
                  ae(T[C]) || (T[C] = {}), T[C] = $e(T[C], t);
                });
              }), T;
            }
            var Yn = function() {
              function T() {
                this.map_ = {};
              }
              var P = T.prototype;
              return P.has = function(r) {
                return r in this.map_;
              }, P.delete = function(r) {
                var e = this.has(r);
                return delete this.map_[r], e;
              }, P.set = function(r, e) {
                return this.map_[r] = e, this;
              }, P.forEach = function(r, e) {
                for (var t in this.map_)
                  r.call(e, this.map_[t], t, this);
              }, T;
            }(), zn = E.default.Map ? E.default.Map : Yn, Xn = function() {
              function T() {
                this.set_ = {};
              }
              var P = T.prototype;
              return P.has = function(r) {
                return r in this.set_;
              }, P.delete = function(r) {
                var e = this.has(r);
                return delete this.set_[r], e;
              }, P.add = function(r) {
                return this.set_[r] = 1, this;
              }, P.forEach = function(r, e) {
                for (var t in this.set_)
                  r.call(e, t, t, this);
              }, T;
            }(), Kr = E.default.Set ? E.default.Set : Xn, ge = function() {
              function T(u, r, e) {
                var t = this;
                if (!u && this.play ? this.player_ = u = this : this.player_ = u, this.isDisposed_ = false, this.parentComponent_ = null, this.options_ = $e({}, this.options_), r = this.options_ = $e(this.options_, r), this.id_ = r.id || r.el && r.el.id, !this.id_) {
                  var C = u && u.id && u.id() || "no_player";
                  this.id_ = C + "_component_" + Mt();
                }
                this.name_ = r.name || null, r.el ? this.el_ = r.el : r.createEl !== false && (this.el_ = this.createEl()), r.className && this.el_ && r.className.split(" ").forEach(function(G) {
                  return t.addClass(G);
                }), r.evented !== false && (Ur(this, { eventBusKey: this.el_ ? "el_" : null }), this.handleLanguagechange = this.handleLanguagechange.bind(this), this.on(this.player_, "languagechange", this.handleLanguagechange)), Ri(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, this.childNameIndex_ = {}, this.setTimeoutIds_ = new Kr(), this.setIntervalIds_ = new Kr(), this.rafIds_ = new Kr(), this.namedRafs_ = new zn(), this.clearingTimersOnDispose_ = false, r.initChildren !== false && this.initChildren(), this.ready(e), r.reportTouchActivity !== false && this.enableTouchActivity();
              }
              var P = T.prototype;
              return P.dispose = function(r) {
                if (r === void 0 && (r = {}), !this.isDisposed_) {
                  if (this.readyQueue_ && (this.readyQueue_.length = 0), this.trigger({ type: "dispose", bubbles: false }), this.isDisposed_ = true, this.children_)
                    for (var e = this.children_.length - 1; e >= 0; e--)
                      this.children_[e].dispose && this.children_[e].dispose();
                  this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && (r.restoreEl ? this.el_.parentNode.replaceChild(r.restoreEl, this.el_) : this.el_.parentNode.removeChild(this.el_)), this.el_ = null), this.player_ = null;
                }
              }, P.isDisposed = function() {
                return Boolean(this.isDisposed_);
              }, P.player = function() {
                return this.player_;
              }, P.options = function(r) {
                return r ? (this.options_ = $e(this.options_, r), this.options_) : this.options_;
              }, P.el = function() {
                return this.el_;
              }, P.createEl = function(r, e, t) {
                return re(r, e, t);
              }, P.localize = function(r, e, t) {
                t === void 0 && (t = r);
                var C = this.player_.language && this.player_.language(), G = this.player_.languages && this.player_.languages(), X = G && G[C], $2 = C && C.split("-")[0], te = G && G[$2], le = t;
                return X && X[r] ? le = X[r] : te && te[r] && (le = te[r]), e && (le = le.replace(/\{(\d+)\}/g, function(J, pe) {
                  var Ie = e[pe - 1], je = Ie;
                  return typeof Ie == "undefined" && (je = J), je;
                })), le;
              }, P.handleLanguagechange = function() {
              }, P.contentEl = function() {
                return this.contentEl_ || this.el_;
              }, P.id = function() {
                return this.id_;
              }, P.name = function() {
                return this.name_;
              }, P.children = function() {
                return this.children_;
              }, P.getChildById = function(r) {
                return this.childIndex_[r];
              }, P.getChild = function(r) {
                if (!!r)
                  return this.childNameIndex_[r];
              }, P.getDescendant = function() {
                for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
                  e[t] = arguments[t];
                e = e.reduce(function(X, $2) {
                  return X.concat($2);
                }, []);
                for (var C = this, G = 0; G < e.length; G++)
                  if (C = C.getChild(e[G]), !C || !C.getChild)
                    return;
                return C;
              }, P.addChild = function(r, e, t) {
                e === void 0 && (e = {}), t === void 0 && (t = this.children_.length);
                var C, G;
                if (typeof r == "string") {
                  G = Je(r);
                  var X = e.componentClass || G;
                  e.name = G;
                  var $2 = T.getComponent(X);
                  if (!$2)
                    throw new Error("Component " + X + " does not exist");
                  if (typeof $2 != "function")
                    return null;
                  C = new $2(this.player_ || this, e);
                } else
                  C = r;
                if (C.parentComponent_ && C.parentComponent_.removeChild(C), this.children_.splice(t, 0, C), C.parentComponent_ = this, typeof C.id == "function" && (this.childIndex_[C.id()] = C), G = G || C.name && Je(C.name()), G && (this.childNameIndex_[G] = C, this.childNameIndex_[Er(G)] = C), typeof C.el == "function" && C.el()) {
                  var te = null;
                  this.children_[t + 1] && (this.children_[t + 1].el_ ? te = this.children_[t + 1].el_ : ze(this.children_[t + 1]) && (te = this.children_[t + 1])), this.contentEl().insertBefore(C.el(), te);
                }
                return C;
              }, P.removeChild = function(r) {
                if (typeof r == "string" && (r = this.getChild(r)), !(!r || !this.children_)) {
                  for (var e = false, t = this.children_.length - 1; t >= 0; t--)
                    if (this.children_[t] === r) {
                      e = true, this.children_.splice(t, 1);
                      break;
                    }
                  if (!!e) {
                    r.parentComponent_ = null, this.childIndex_[r.id()] = null, this.childNameIndex_[Je(r.name())] = null, this.childNameIndex_[Er(r.name())] = null;
                    var C = r.el();
                    C && C.parentNode === this.contentEl() && this.contentEl().removeChild(r.el());
                  }
                }
              }, P.initChildren = function() {
                var r = this, e = this.options_.children;
                if (e) {
                  var t = this.options_, C = function(te) {
                    var le = te.name, J = te.opts;
                    if (t[le] !== void 0 && (J = t[le]), J !== false) {
                      J === true && (J = {}), J.playerOptions = r.options_.playerOptions;
                      var pe = r.addChild(le, J);
                      pe && (r[le] = pe);
                    }
                  }, G, X = T.getComponent("Tech");
                  Array.isArray(e) ? G = e : G = Object.keys(e), G.concat(Object.keys(this.options_).filter(function($2) {
                    return !G.some(function(te) {
                      return typeof te == "string" ? $2 === te : $2 === te.name;
                    });
                  })).map(function($2) {
                    var te, le;
                    return typeof $2 == "string" ? (te = $2, le = e[te] || r.options_[te] || {}) : (te = $2.name, le = $2), { name: te, opts: le };
                  }).filter(function($2) {
                    var te = T.getComponent($2.opts.componentClass || Je($2.name));
                    return te && !X.isTech(te);
                  }).forEach(C);
                }
              }, P.buildCSSClass = function() {
                return "";
              }, P.ready = function(r, e) {
                if (e === void 0 && (e = false), !!r) {
                  if (!this.isReady_) {
                    this.readyQueue_ = this.readyQueue_ || [], this.readyQueue_.push(r);
                    return;
                  }
                  e ? r.call(this) : this.setTimeout(r, 1);
                }
              }, P.triggerReady = function() {
                this.isReady_ = true, this.setTimeout(function() {
                  var r = this.readyQueue_;
                  this.readyQueue_ = [], r && r.length > 0 && r.forEach(function(e) {
                    e.call(this);
                  }, this), this.trigger("ready");
                }, 1);
              }, P.$ = function(r, e) {
                return ft(r, e || this.contentEl());
              }, P.$$ = function(r, e) {
                return Bt(r, e || this.contentEl());
              }, P.hasClass = function(r) {
                return Ke(this.el_, r);
              }, P.addClass = function(r) {
                He(this.el_, r);
              }, P.removeClass = function(r) {
                Ge(this.el_, r);
              }, P.toggleClass = function(r, e) {
                Be(this.el_, r, e);
              }, P.show = function() {
                this.removeClass("vjs-hidden");
              }, P.hide = function() {
                this.addClass("vjs-hidden");
              }, P.lockShowing = function() {
                this.addClass("vjs-lock-showing");
              }, P.unlockShowing = function() {
                this.removeClass("vjs-lock-showing");
              }, P.getAttribute = function(r) {
                return ot(this.el_, r);
              }, P.setAttribute = function(r, e) {
                yt(this.el_, r, e);
              }, P.removeAttribute = function(r) {
                Ct(this.el_, r);
              }, P.width = function(r, e) {
                return this.dimension("width", r, e);
              }, P.height = function(r, e) {
                return this.dimension("height", r, e);
              }, P.dimensions = function(r, e) {
                this.width(r, true), this.height(e);
              }, P.dimension = function(r, e, t) {
                if (e !== void 0) {
                  (e === null || e !== e) && (e = 0), ("" + e).indexOf("%") !== -1 || ("" + e).indexOf("px") !== -1 ? this.el_.style[r] = e : e === "auto" ? this.el_.style[r] = "" : this.el_.style[r] = e + "px", t || this.trigger("componentresize");
                  return;
                }
                if (!this.el_)
                  return 0;
                var C = this.el_.style[r], G = C.indexOf("px");
                return parseInt(G !== -1 ? C.slice(0, G) : this.el_["offset" + Je(r)], 10);
              }, P.currentDimension = function(r) {
                var e = 0;
                if (r !== "width" && r !== "height")
                  throw new Error("currentDimension only accepts width or height value");
                if (e = ne(this.el_, r), e = parseFloat(e), e === 0 || isNaN(e)) {
                  var t = "offset" + Je(r);
                  e = this.el_[t];
                }
                return e;
              }, P.currentDimensions = function() {
                return { width: this.currentDimension("width"), height: this.currentDimension("height") };
              }, P.currentWidth = function() {
                return this.currentDimension("width");
              }, P.currentHeight = function() {
                return this.currentDimension("height");
              }, P.focus = function() {
                this.el_.focus();
              }, P.blur = function() {
                this.el_.blur();
              }, P.handleKeyDown = function(r) {
                this.player_ && (y.default.isEventKey(r, "Tab") || r.stopPropagation(), this.player_.handleKeyDown(r));
              }, P.handleKeyPress = function(r) {
                this.handleKeyDown(r);
              }, P.emitTapEvents = function() {
                var r = 0, e = null, t = 10, C = 200, G;
                this.on("touchstart", function($2) {
                  $2.touches.length === 1 && (e = { pageX: $2.touches[0].pageX, pageY: $2.touches[0].pageY }, r = E.default.performance.now(), G = true);
                }), this.on("touchmove", function($2) {
                  if ($2.touches.length > 1)
                    G = false;
                  else if (e) {
                    var te = $2.touches[0].pageX - e.pageX, le = $2.touches[0].pageY - e.pageY, J = Math.sqrt(te * te + le * le);
                    J > t && (G = false);
                  }
                });
                var X = function() {
                  G = false;
                };
                this.on("touchleave", X), this.on("touchcancel", X), this.on("touchend", function($2) {
                  if (e = null, G === true) {
                    var te = E.default.performance.now() - r;
                    te < C && ($2.preventDefault(), this.trigger("tap"));
                  }
                });
              }, P.enableTouchActivity = function() {
                if (!(!this.player() || !this.player().reportUserActivity)) {
                  var r = Qe(this.player(), this.player().reportUserActivity), e;
                  this.on("touchstart", function() {
                    r(), this.clearInterval(e), e = this.setInterval(r, 250);
                  });
                  var t = function(G) {
                    r(), this.clearInterval(e);
                  };
                  this.on("touchmove", r), this.on("touchend", t), this.on("touchcancel", t);
                }
              }, P.setTimeout = function(r, e) {
                var t = this, C;
                return r = Qe(this, r), this.clearTimersOnDispose_(), C = E.default.setTimeout(function() {
                  t.setTimeoutIds_.has(C) && t.setTimeoutIds_.delete(C), r();
                }, e), this.setTimeoutIds_.add(C), C;
              }, P.clearTimeout = function(r) {
                return this.setTimeoutIds_.has(r) && (this.setTimeoutIds_.delete(r), E.default.clearTimeout(r)), r;
              }, P.setInterval = function(r, e) {
                r = Qe(this, r), this.clearTimersOnDispose_();
                var t = E.default.setInterval(r, e);
                return this.setIntervalIds_.add(t), t;
              }, P.clearInterval = function(r) {
                return this.setIntervalIds_.has(r) && (this.setIntervalIds_.delete(r), E.default.clearInterval(r)), r;
              }, P.requestAnimationFrame = function(r) {
                var e = this;
                if (!this.supportsRaf_)
                  return this.setTimeout(r, 1e3 / 60);
                this.clearTimersOnDispose_();
                var t;
                return r = Qe(this, r), t = E.default.requestAnimationFrame(function() {
                  e.rafIds_.has(t) && e.rafIds_.delete(t), r();
                }), this.rafIds_.add(t), t;
              }, P.requestNamedAnimationFrame = function(r, e) {
                var t = this;
                if (!this.namedRafs_.has(r)) {
                  this.clearTimersOnDispose_(), e = Qe(this, e);
                  var C = this.requestAnimationFrame(function() {
                    e(), t.namedRafs_.has(r) && t.namedRafs_.delete(r);
                  });
                  return this.namedRafs_.set(r, C), r;
                }
              }, P.cancelNamedAnimationFrame = function(r) {
                !this.namedRafs_.has(r) || (this.cancelAnimationFrame(this.namedRafs_.get(r)), this.namedRafs_.delete(r));
              }, P.cancelAnimationFrame = function(r) {
                return this.supportsRaf_ ? (this.rafIds_.has(r) && (this.rafIds_.delete(r), E.default.cancelAnimationFrame(r)), r) : this.clearTimeout(r);
              }, P.clearTimersOnDispose_ = function() {
                var r = this;
                this.clearingTimersOnDispose_ || (this.clearingTimersOnDispose_ = true, this.one("dispose", function() {
                  [["namedRafs_", "cancelNamedAnimationFrame"], ["rafIds_", "cancelAnimationFrame"], ["setTimeoutIds_", "clearTimeout"], ["setIntervalIds_", "clearInterval"]].forEach(function(e) {
                    var t = e[0], C = e[1];
                    r[t].forEach(function(G, X) {
                      return r[C](X);
                    });
                  }), r.clearingTimersOnDispose_ = false;
                }));
              }, T.registerComponent = function(r, e) {
                if (typeof r != "string" || !r)
                  throw new Error('Illegal component name, "' + r + '"; must be a non-empty string.');
                var t = T.getComponent("Tech"), C = t && t.isTech(e), G = T === e || T.prototype.isPrototypeOf(e.prototype);
                if (C || !G) {
                  var X;
                  throw C ? X = "techs must be registered using Tech.registerTech()" : X = "must be a Component subclass", new Error('Illegal component, "' + r + '"; ' + X + ".");
                }
                r = Je(r), T.components_ || (T.components_ = {});
                var $2 = T.getComponent("Player");
                if (r === "Player" && $2 && $2.players) {
                  var te = $2.players, le = Object.keys(te);
                  if (te && le.length > 0 && le.map(function(J) {
                    return te[J];
                  }).every(Boolean))
                    throw new Error("Can not register Player component after player has been created.");
                }
                return T.components_[r] = e, T.components_[Er(r)] = e, e;
              }, T.getComponent = function(r) {
                if (!(!r || !T.components_))
                  return T.components_[r];
              }, T;
            }();
            ge.prototype.supportsRaf_ = typeof E.default.requestAnimationFrame == "function" && typeof E.default.cancelAnimationFrame == "function", ge.registerComponent("Component", ge);
            function Qn(T, P, u) {
              if (typeof P != "number" || P < 0 || P > u)
                throw new Error("Failed to execute '" + T + "' on 'TimeRanges': The index provided (" + P + ") is non-numeric or out of bounds (0-" + u + ").");
            }
            function Mi(T, P, u, r) {
              return Qn(T, r, u.length - 1), u[r][P];
            }
            function jr(T) {
              var P;
              return T === void 0 || T.length === 0 ? P = { length: 0, start: function() {
                throw new Error("This TimeRanges object is empty");
              }, end: function() {
                throw new Error("This TimeRanges object is empty");
              } } : P = { length: T.length, start: Mi.bind(null, "start", 0, T), end: Mi.bind(null, "end", 1, T) }, E.default.Symbol && E.default.Symbol.iterator && (P[E.default.Symbol.iterator] = function() {
                return (T || []).values();
              }), P;
            }
            function Kt(T, P) {
              return Array.isArray(T) ? jr(T) : T === void 0 || P === void 0 ? jr() : jr([[T, P]]);
            }
            function ki(T, P) {
              var u = 0, r, e;
              if (!P)
                return 0;
              (!T || !T.length) && (T = Kt(0, 0));
              for (var t = 0; t < T.length; t++)
                r = T.start(t), e = T.end(t), e > P && (e = P), u += e - r;
              return u / P;
            }
            function ut(T) {
              if (T instanceof ut)
                return T;
              typeof T == "number" ? this.code = T : typeof T == "string" ? this.message = T : ee(T) && (typeof T.code == "number" && (this.code = T.code), q(this, T)), this.message || (this.message = ut.defaultMessages[this.code] || "");
            }
            ut.prototype.code = 0, ut.prototype.message = "", ut.prototype.status = null, ut.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"], ut.defaultMessages = { 1: "You aborted the media playback", 2: "A network error caused the media download to fail part-way.", 3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.", 4: "The media could not be loaded, either because the server or network failed or because the format is not supported.", 5: "The media is encrypted and we do not have the keys to decrypt it." };
            for (var zt = 0; zt < ut.errorTypes.length; zt++)
              ut[ut.errorTypes[zt]] = zt, ut.prototype[ut.errorTypes[zt]] = zt;
            function lr(T) {
              return T != null && typeof T.then == "function";
            }
            function Lt(T) {
              lr(T) && T.then(null, function(P) {
              });
            }
            var Hr = function(P) {
              var u = ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function(r, e, t) {
                return P[e] && (r[e] = P[e]), r;
              }, { cues: P.cues && Array.prototype.map.call(P.cues, function(r) {
                return { startTime: r.startTime, endTime: r.endTime, text: r.text, id: r.id };
              }) });
              return u;
            }, $n = function(P) {
              var u = P.$$("track"), r = Array.prototype.map.call(u, function(t) {
                return t.track;
              }), e = Array.prototype.map.call(u, function(t) {
                var C = Hr(t.track);
                return t.src && (C.src = t.src), C;
              });
              return e.concat(Array.prototype.filter.call(P.textTracks(), function(t) {
                return r.indexOf(t) === -1;
              }).map(Hr));
            }, qn = function(P, u) {
              return P.forEach(function(r) {
                var e = u.addRemoteTextTrack(r).track;
                !r.src && r.cues && r.cues.forEach(function(t) {
                  return e.addCue(t);
                });
              }), u.textTracks();
            }, wi = { textTracksToJson: $n, jsonToTextTracks: qn, trackToJson_: Hr }, Wr = "vjs-modal-dialog", Xt = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.handleKeyDown_ = function(C) {
                  return t.handleKeyDown(C);
                }, t.close_ = function(C) {
                  return t.close(C);
                }, t.opened_ = t.hasBeenOpened_ = t.hasBeenFilled_ = false, t.closeable(!t.options_.uncloseable), t.content(t.options_.content), t.contentEl_ = re("div", { className: Wr + "-content" }, { role: "document" }), t.descEl_ = re("p", { className: Wr + "-description vjs-control-text", id: t.el().getAttribute("aria-describedby") }), ce(t.descEl_, t.description()), t.el_.appendChild(t.descEl_), t.el_.appendChild(t.contentEl_), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: this.buildCSSClass(), tabIndex: -1 }, { "aria-describedby": this.id() + "_description", "aria-hidden": "true", "aria-label": this.label(), role: "dialog" });
              }, u.dispose = function() {
                this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, T.prototype.dispose.call(this);
              }, u.buildCSSClass = function() {
                return Wr + " vjs-hidden " + T.prototype.buildCSSClass.call(this);
              }, u.label = function() {
                return this.localize(this.options_.label || "Modal Window");
              }, u.description = function() {
                var e = this.options_.description || this.localize("This is a modal window.");
                return this.closeable() && (e += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), e;
              }, u.open = function() {
                if (!this.opened_) {
                  var e = this.player();
                  this.trigger("beforemodalopen"), this.opened_ = true, (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) && this.fill(), this.wasPlaying_ = !e.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && e.pause(), this.on("keydown", this.handleKeyDown_), this.hadControls_ = e.controls(), e.controls(false), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), this.trigger("modalopen"), this.hasBeenOpened_ = true;
                }
              }, u.opened = function(e) {
                return typeof e == "boolean" && this[e ? "open" : "close"](), this.opened_;
              }, u.close = function() {
                if (!!this.opened_) {
                  var e = this.player();
                  this.trigger("beforemodalclose"), this.opened_ = false, this.wasPlaying_ && this.options_.pauseOnOpen && e.play(), this.off("keydown", this.handleKeyDown_), this.hadControls_ && e.controls(true), this.hide(), this.el().setAttribute("aria-hidden", "true"), this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
                }
              }, u.closeable = function(e) {
                if (typeof e == "boolean") {
                  var t = this.closeable_ = !!e, C = this.getChild("closeButton");
                  if (t && !C) {
                    var G = this.contentEl_;
                    this.contentEl_ = this.el_, C = this.addChild("closeButton", { controlText: "Close Modal Dialog" }), this.contentEl_ = G, this.on(C, "close", this.close_);
                  }
                  !t && C && (this.off(C, "close", this.close_), this.removeChild(C), C.dispose());
                }
                return this.closeable_;
              }, u.fill = function() {
                this.fillWith(this.content());
              }, u.fillWith = function(e) {
                var t = this.contentEl(), C = t.parentNode, G = t.nextSibling;
                this.trigger("beforemodalfill"), this.hasBeenFilled_ = true, C.removeChild(t), this.empty(), Rt(t, e), this.trigger("modalfill"), G ? C.insertBefore(t, G) : C.appendChild(t);
                var X = this.getChild("closeButton");
                X && C.appendChild(X.el_);
              }, u.empty = function() {
                this.trigger("beforemodalempty"), At(this.contentEl()), this.trigger("modalempty");
              }, u.content = function(e) {
                return typeof e != "undefined" && (this.content_ = e), this.content_;
              }, u.conditionalFocus_ = function() {
                var e = L.default.activeElement, t = this.player_.el_;
                this.previouslyActiveEl_ = null, (t.contains(e) || t === e) && (this.previouslyActiveEl_ = e, this.focus());
              }, u.conditionalBlur_ = function() {
                this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null);
              }, u.handleKeyDown = function(e) {
                if (e.stopPropagation(), y.default.isEventKey(e, "Escape") && this.closeable()) {
                  e.preventDefault(), this.close();
                  return;
                }
                if (!!y.default.isEventKey(e, "Tab")) {
                  for (var t = this.focusableEls_(), C = this.el_.querySelector(":focus"), G, X = 0; X < t.length; X++)
                    if (C === t[X]) {
                      G = X;
                      break;
                    }
                  L.default.activeElement === this.el_ && (G = 0), e.shiftKey && G === 0 ? (t[t.length - 1].focus(), e.preventDefault()) : !e.shiftKey && G === t.length - 1 && (t[0].focus(), e.preventDefault());
                }
              }, u.focusableEls_ = function() {
                var e = this.el_.querySelectorAll("*");
                return Array.prototype.filter.call(e, function(t) {
                  return (t instanceof E.default.HTMLAnchorElement || t instanceof E.default.HTMLAreaElement) && t.hasAttribute("href") || (t instanceof E.default.HTMLInputElement || t instanceof E.default.HTMLSelectElement || t instanceof E.default.HTMLTextAreaElement || t instanceof E.default.HTMLButtonElement) && !t.hasAttribute("disabled") || t instanceof E.default.HTMLIFrameElement || t instanceof E.default.HTMLObjectElement || t instanceof E.default.HTMLEmbedElement || t.hasAttribute("tabindex") && t.getAttribute("tabindex") !== -1 || t.hasAttribute("contenteditable");
                });
              }, P;
            }(ge);
            Xt.prototype.options_ = { pauseOnOpen: true, temporary: true }, ge.registerComponent("ModalDialog", Xt);
            var Qt = function(T) {
              S.default(P, T);
              function P(r) {
                var e;
                r === void 0 && (r = []), e = T.call(this) || this, e.tracks_ = [], Object.defineProperty(I.default(e), "length", { get: function() {
                  return this.tracks_.length;
                } });
                for (var t = 0; t < r.length; t++)
                  e.addTrack(r[t]);
                return e;
              }
              var u = P.prototype;
              return u.addTrack = function(e) {
                var t = this, C = this.tracks_.length;
                "" + C in this || Object.defineProperty(this, C, { get: function() {
                  return this.tracks_[C];
                } }), this.tracks_.indexOf(e) === -1 && (this.tracks_.push(e), this.trigger({ track: e, type: "addtrack", target: this })), e.labelchange_ = function() {
                  t.trigger({ track: e, type: "labelchange", target: t });
                }, wt(e) && e.addEventListener("labelchange", e.labelchange_);
              }, u.removeTrack = function(e) {
                for (var t, C = 0, G = this.length; C < G; C++)
                  if (this[C] === e) {
                    t = this[C], t.off && t.off(), this.tracks_.splice(C, 1);
                    break;
                  }
                !t || this.trigger({ track: t, type: "removetrack", target: this });
              }, u.getTrackById = function(e) {
                for (var t = null, C = 0, G = this.length; C < G; C++) {
                  var X = this[C];
                  if (X.id === e) {
                    t = X;
                    break;
                  }
                }
                return t;
              }, P;
            }(rt);
            Qt.prototype.allowedEvents_ = { change: "change", addtrack: "addtrack", removetrack: "removetrack", labelchange: "labelchange" };
            for (var Jn in Qt.prototype.allowedEvents_)
              Qt.prototype["on" + Jn] = null;
            var Gr = function(P, u) {
              for (var r = 0; r < P.length; r++)
                !Object.keys(P[r]).length || u.id === P[r].id || (P[r].enabled = false);
            }, Zn = function(T) {
              S.default(P, T);
              function P(r) {
                var e;
                r === void 0 && (r = []);
                for (var t = r.length - 1; t >= 0; t--)
                  if (r[t].enabled) {
                    Gr(r, r[t]);
                    break;
                  }
                return e = T.call(this, r) || this, e.changing_ = false, e;
              }
              var u = P.prototype;
              return u.addTrack = function(e) {
                var t = this;
                e.enabled && Gr(this, e), T.prototype.addTrack.call(this, e), !!e.addEventListener && (e.enabledChange_ = function() {
                  t.changing_ || (t.changing_ = true, Gr(t, e), t.changing_ = false, t.trigger("change"));
                }, e.addEventListener("enabledchange", e.enabledChange_));
              }, u.removeTrack = function(e) {
                T.prototype.removeTrack.call(this, e), e.removeEventListener && e.enabledChange_ && (e.removeEventListener("enabledchange", e.enabledChange_), e.enabledChange_ = null);
              }, P;
            }(Qt), Vr = function(P, u) {
              for (var r = 0; r < P.length; r++)
                !Object.keys(P[r]).length || u.id === P[r].id || (P[r].selected = false);
            }, ea = function(T) {
              S.default(P, T);
              function P(r) {
                var e;
                r === void 0 && (r = []);
                for (var t = r.length - 1; t >= 0; t--)
                  if (r[t].selected) {
                    Vr(r, r[t]);
                    break;
                  }
                return e = T.call(this, r) || this, e.changing_ = false, Object.defineProperty(I.default(e), "selectedIndex", { get: function() {
                  for (var G = 0; G < this.length; G++)
                    if (this[G].selected)
                      return G;
                  return -1;
                }, set: function() {
                } }), e;
              }
              var u = P.prototype;
              return u.addTrack = function(e) {
                var t = this;
                e.selected && Vr(this, e), T.prototype.addTrack.call(this, e), !!e.addEventListener && (e.selectedChange_ = function() {
                  t.changing_ || (t.changing_ = true, Vr(t, e), t.changing_ = false, t.trigger("change"));
                }, e.addEventListener("selectedchange", e.selectedChange_));
              }, u.removeTrack = function(e) {
                T.prototype.removeTrack.call(this, e), e.removeEventListener && e.selectedChange_ && (e.removeEventListener("selectedchange", e.selectedChange_), e.selectedChange_ = null);
              }, P;
            }(Qt), xi = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.addTrack = function(e) {
                var t = this;
                T.prototype.addTrack.call(this, e), this.queueChange_ || (this.queueChange_ = function() {
                  return t.queueTrigger("change");
                }), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = function() {
                  return t.trigger("selectedlanguagechange");
                }), e.addEventListener("modechange", this.queueChange_);
                var C = ["metadata", "chapters"];
                C.indexOf(e.kind) === -1 && e.addEventListener("modechange", this.triggerSelectedlanguagechange_);
              }, u.removeTrack = function(e) {
                T.prototype.removeTrack.call(this, e), e.removeEventListener && (this.queueChange_ && e.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && e.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
              }, P;
            }(Qt), ta = function() {
              function T(u) {
                u === void 0 && (u = []), this.trackElements_ = [], Object.defineProperty(this, "length", { get: function() {
                  return this.trackElements_.length;
                } });
                for (var r = 0, e = u.length; r < e; r++)
                  this.addTrackElement_(u[r]);
              }
              var P = T.prototype;
              return P.addTrackElement_ = function(r) {
                var e = this.trackElements_.length;
                "" + e in this || Object.defineProperty(this, e, { get: function() {
                  return this.trackElements_[e];
                } }), this.trackElements_.indexOf(r) === -1 && this.trackElements_.push(r);
              }, P.getTrackElementByTrack_ = function(r) {
                for (var e, t = 0, C = this.trackElements_.length; t < C; t++)
                  if (r === this.trackElements_[t].track) {
                    e = this.trackElements_[t];
                    break;
                  }
                return e;
              }, P.removeTrackElement_ = function(r) {
                for (var e = 0, t = this.trackElements_.length; e < t; e++)
                  if (r === this.trackElements_[e]) {
                    this.trackElements_[e].track && typeof this.trackElements_[e].track.off == "function" && this.trackElements_[e].track.off(), typeof this.trackElements_[e].off == "function" && this.trackElements_[e].off(), this.trackElements_.splice(e, 1);
                    break;
                  }
              }, T;
            }(), Fi = function() {
              function T(u) {
                T.prototype.setCues_.call(this, u), Object.defineProperty(this, "length", { get: function() {
                  return this.length_;
                } });
              }
              var P = T.prototype;
              return P.setCues_ = function(r) {
                var e = this.length || 0, t = 0, C = r.length;
                this.cues_ = r, this.length_ = r.length;
                var G = function($2) {
                  "" + $2 in this || Object.defineProperty(this, "" + $2, { get: function() {
                    return this.cues_[$2];
                  } });
                };
                if (e < C)
                  for (t = e; t < C; t++)
                    G.call(this, t);
              }, P.getCueById = function(r) {
                for (var e = null, t = 0, C = this.length; t < C; t++) {
                  var G = this[t];
                  if (G.id === r) {
                    e = G;
                    break;
                  }
                }
                return e;
              }, T;
            }(), ra = { alternative: "alternative", captions: "captions", main: "main", sign: "sign", subtitles: "subtitles", commentary: "commentary" }, ia = { alternative: "alternative", descriptions: "descriptions", main: "main", "main-desc": "main-desc", translation: "translation", commentary: "commentary" }, na = { subtitles: "subtitles", captions: "captions", descriptions: "descriptions", chapters: "chapters", metadata: "metadata" }, Ni = { disabled: "disabled", hidden: "hidden", showing: "showing" }, Yr = function(T) {
              S.default(P, T);
              function P(u) {
                var r;
                u === void 0 && (u = {}), r = T.call(this) || this;
                var e = { id: u.id || "vjs_track_" + Mt(), kind: u.kind || "", language: u.language || "" }, t = u.label || "", C = function($2) {
                  Object.defineProperty(I.default(r), $2, { get: function() {
                    return e[$2];
                  }, set: function() {
                  } });
                };
                for (var G in e)
                  C(G);
                return Object.defineProperty(I.default(r), "label", { get: function() {
                  return t;
                }, set: function($2) {
                  $2 !== t && (t = $2, this.trigger("labelchange"));
                } }), r;
              }
              return P;
            }(rt), zr = function(P) {
              var u = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"], r = L.default.createElement("a");
              r.href = P;
              for (var e = {}, t = 0; t < u.length; t++)
                e[u[t]] = r[u[t]];
              return e.protocol === "http:" && (e.host = e.host.replace(/:80$/, "")), e.protocol === "https:" && (e.host = e.host.replace(/:443$/, "")), e.protocol || (e.protocol = E.default.location.protocol), e.host || (e.host = E.default.location.host), e;
            }, Bi = function(P) {
              if (!P.match(/^https?:\/\//)) {
                var u = L.default.createElement("a");
                u.href = P, P = u.href;
              }
              return P;
            }, Xr = function(P) {
              if (typeof P == "string") {
                var u = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/, r = u.exec(P);
                if (r)
                  return r.pop().toLowerCase();
              }
              return "";
            }, Tr = function(P, u) {
              u === void 0 && (u = E.default.location);
              var r = zr(P), e = r.protocol === ":" ? u.protocol : r.protocol, t = e + r.host !== u.protocol + u.host;
              return t;
            }, aa = Object.freeze({ __proto__: null, parseUrl: zr, getAbsoluteURL: Bi, getFileExtension: Xr, isCrossOrigin: Tr }), Ui = function(P, u) {
              var r = new E.default.WebVTT.Parser(E.default, E.default.vttjs, E.default.WebVTT.StringDecoder()), e = [];
              r.oncue = function(t) {
                u.addCue(t);
              }, r.onparsingerror = function(t) {
                e.push(t);
              }, r.onflush = function() {
                u.trigger({ type: "loadeddata", target: u });
              }, r.parse(P), e.length > 0 && (E.default.console && E.default.console.groupCollapsed && E.default.console.groupCollapsed("Text Track parsing errors for " + u.src), e.forEach(function(t) {
                return K.error(t);
              }), E.default.console && E.default.console.groupEnd && E.default.console.groupEnd()), r.flush();
            }, Ki = function(P, u) {
              var r = { uri: P }, e = Tr(P);
              e && (r.cors = e);
              var t = u.tech_.crossOrigin() === "use-credentials";
              t && (r.withCredentials = t), v.default(r, Qe(this, function(C, G, X) {
                if (C)
                  return K.error(C, G);
                u.loaded_ = true, typeof E.default.WebVTT != "function" ? u.tech_ && u.tech_.any(["vttjsloaded", "vttjserror"], function($2) {
                  if ($2.type === "vttjserror") {
                    K.error("vttjs failed to load, stopping trying to process " + u.src);
                    return;
                  }
                  return Ui(X, u);
                }) : Ui(X, u);
              }));
            }, ur = function(T) {
              S.default(P, T);
              function P(r) {
                var e;
                if (r === void 0 && (r = {}), !r.tech)
                  throw new Error("A tech was not provided.");
                var t = $e(r, { kind: na[r.kind] || "subtitles", language: r.language || r.srclang || "" }), C = Ni[t.mode] || "disabled", G = t.default;
                (t.kind === "metadata" || t.kind === "chapters") && (C = "hidden"), e = T.call(this, t) || this, e.tech_ = t.tech, e.cues_ = [], e.activeCues_ = [], e.preload_ = e.tech_.preloadTextTracks !== false;
                var X = new Fi(e.cues_), $2 = new Fi(e.activeCues_), te = false;
                e.timeupdateHandler = Qe(I.default(e), function(J) {
                  if (J === void 0 && (J = {}), !this.tech_.isDisposed()) {
                    if (!this.tech_.isReady_) {
                      J.type !== "timeupdate" && (this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler));
                      return;
                    }
                    this.activeCues = this.activeCues, te && (this.trigger("cuechange"), te = false), J.type !== "timeupdate" && (this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler));
                  }
                });
                var le = function() {
                  e.stopTracking();
                };
                return e.tech_.one("dispose", le), C !== "disabled" && e.startTracking(), Object.defineProperties(I.default(e), { default: { get: function() {
                  return G;
                }, set: function() {
                } }, mode: { get: function() {
                  return C;
                }, set: function(pe) {
                  !Ni[pe] || C !== pe && (C = pe, !this.preload_ && C !== "disabled" && this.cues.length === 0 && Ki(this.src, this), this.stopTracking(), C !== "disabled" && this.startTracking(), this.trigger("modechange"));
                } }, cues: { get: function() {
                  return this.loaded_ ? X : null;
                }, set: function() {
                } }, activeCues: { get: function() {
                  if (!this.loaded_)
                    return null;
                  if (this.cues.length === 0)
                    return $2;
                  for (var pe = this.tech_.currentTime(), Ie = [], je = 0, Gt = this.cues.length; je < Gt; je++) {
                    var It = this.cues[je];
                    (It.startTime <= pe && It.endTime >= pe || It.startTime === It.endTime && It.startTime <= pe && It.startTime + 0.5 >= pe) && Ie.push(It);
                  }
                  if (te = false, Ie.length !== this.activeCues_.length)
                    te = true;
                  else
                    for (var Ci = 0; Ci < Ie.length; Ci++)
                      this.activeCues_.indexOf(Ie[Ci]) === -1 && (te = true);
                  return this.activeCues_ = Ie, $2.setCues_(this.activeCues_), $2;
                }, set: function() {
                } } }), t.src ? (e.src = t.src, e.preload_ || (e.loaded_ = true), (e.preload_ || t.kind !== "subtitles" && t.kind !== "captions") && Ki(e.src, I.default(e))) : e.loaded_ = true, e;
              }
              var u = P.prototype;
              return u.startTracking = function() {
                this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler), this.tech_.on("timeupdate", this.timeupdateHandler);
              }, u.stopTracking = function() {
                this.rvf_ && (this.tech_.cancelVideoFrameCallback(this.rvf_), this.rvf_ = void 0), this.tech_.off("timeupdate", this.timeupdateHandler);
              }, u.addCue = function(e) {
                var t = e;
                if (E.default.vttjs && !(e instanceof E.default.vttjs.VTTCue)) {
                  t = new E.default.vttjs.VTTCue(e.startTime, e.endTime, e.text);
                  for (var C in e)
                    C in t || (t[C] = e[C]);
                  t.id = e.id, t.originalCue_ = e;
                }
                for (var G = this.tech_.textTracks(), X = 0; X < G.length; X++)
                  G[X] !== this && G[X].removeCue(t);
                this.cues_.push(t), this.cues.setCues_(this.cues_);
              }, u.removeCue = function(e) {
                for (var t = this.cues_.length; t--; ) {
                  var C = this.cues_[t];
                  if (C === e || C.originalCue_ && C.originalCue_ === e) {
                    this.cues_.splice(t, 1), this.cues.setCues_(this.cues_);
                    break;
                  }
                }
              }, P;
            }(Yr);
            ur.prototype.allowedEvents_ = { cuechange: "cuechange" };
            var ji = function(T) {
              S.default(P, T);
              function P(u) {
                var r;
                u === void 0 && (u = {});
                var e = $e(u, { kind: ia[u.kind] || "" });
                r = T.call(this, e) || this;
                var t = false;
                return Object.defineProperty(I.default(r), "enabled", { get: function() {
                  return t;
                }, set: function(G) {
                  typeof G != "boolean" || G === t || (t = G, this.trigger("enabledchange"));
                } }), e.enabled && (r.enabled = e.enabled), r.loaded_ = true, r;
              }
              return P;
            }(Yr), Hi = function(T) {
              S.default(P, T);
              function P(u) {
                var r;
                u === void 0 && (u = {});
                var e = $e(u, { kind: ra[u.kind] || "" });
                r = T.call(this, e) || this;
                var t = false;
                return Object.defineProperty(I.default(r), "selected", { get: function() {
                  return t;
                }, set: function(G) {
                  typeof G != "boolean" || G === t || (t = G, this.trigger("selectedchange"));
                } }), e.selected && (r.selected = e.selected), r;
              }
              return P;
            }(Yr), Wi = 0, sa = 1, Gi = 2, oa = 3, $t = function(T) {
              S.default(P, T);
              function P(u) {
                var r;
                u === void 0 && (u = {}), r = T.call(this) || this;
                var e, t = new ur(u);
                return r.kind = t.kind, r.src = t.src, r.srclang = t.language, r.label = t.label, r.default = t.default, Object.defineProperties(I.default(r), { readyState: { get: function() {
                  return e;
                } }, track: { get: function() {
                  return t;
                } } }), e = Wi, t.addEventListener("loadeddata", function() {
                  e = Gi, r.trigger({ type: "load", target: I.default(r) });
                }), r;
              }
              return P;
            }(rt);
            $t.prototype.allowedEvents_ = { load: "load" }, $t.NONE = Wi, $t.LOADING = sa, $t.LOADED = Gi, $t.ERROR = oa;
            var gt = { audio: { ListClass: Zn, TrackClass: ji, capitalName: "Audio" }, video: { ListClass: ea, TrackClass: Hi, capitalName: "Video" }, text: { ListClass: xi, TrackClass: ur, capitalName: "Text" } };
            Object.keys(gt).forEach(function(T) {
              gt[T].getterName = T + "Tracks", gt[T].privateName = T + "Tracks_";
            });
            var qt = { remoteText: { ListClass: xi, TrackClass: ur, capitalName: "RemoteText", getterName: "remoteTextTracks", privateName: "remoteTextTracks_" }, remoteTextEl: { ListClass: ta, TrackClass: $t, capitalName: "RemoteTextTrackEls", getterName: "remoteTextTrackEls", privateName: "remoteTextTrackEls_" } }, ct = M.default({}, gt, qt);
            qt.names = Object.keys(qt), gt.names = Object.keys(gt), ct.names = [].concat(qt.names).concat(gt.names);
            function la(T, P, u, r, e) {
              e === void 0 && (e = {});
              var t = T.textTracks();
              e.kind = P, u && (e.label = u), r && (e.language = r), e.tech = T;
              var C = new ct.text.TrackClass(e);
              return t.addTrack(C), C;
            }
            var Ve = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return r === void 0 && (r = {}), e === void 0 && (e = function() {
                }), r.reportTouchActivity = false, t = T.call(this, null, r, e) || this, t.onDurationChange_ = function(C) {
                  return t.onDurationChange(C);
                }, t.trackProgress_ = function(C) {
                  return t.trackProgress(C);
                }, t.trackCurrentTime_ = function(C) {
                  return t.trackCurrentTime(C);
                }, t.stopTrackingCurrentTime_ = function(C) {
                  return t.stopTrackingCurrentTime(C);
                }, t.disposeSourceHandler_ = function(C) {
                  return t.disposeSourceHandler(C);
                }, t.queuedHanders_ = /* @__PURE__ */ new Set(), t.hasStarted_ = false, t.on("playing", function() {
                  this.hasStarted_ = true;
                }), t.on("loadstart", function() {
                  this.hasStarted_ = false;
                }), ct.names.forEach(function(C) {
                  var G = ct[C];
                  r && r[G.getterName] && (t[G.privateName] = r[G.getterName]);
                }), t.featuresProgressEvents || t.manualProgressOn(), t.featuresTimeupdateEvents || t.manualTimeUpdatesOn(), ["Text", "Audio", "Video"].forEach(function(C) {
                  r["native" + C + "Tracks"] === false && (t["featuresNative" + C + "Tracks"] = false);
                }), r.nativeCaptions === false || r.nativeTextTracks === false ? t.featuresNativeTextTracks = false : (r.nativeCaptions === true || r.nativeTextTracks === true) && (t.featuresNativeTextTracks = true), t.featuresNativeTextTracks || t.emulateTextTracks(), t.preloadTextTracks = r.preloadTextTracks !== false, t.autoRemoteTextTracks_ = new ct.text.ListClass(), t.initTrackListeners(), r.nativeControlsForTouch || t.emitTapEvents(), t.constructor && (t.name_ = t.constructor.name || "Unknown Tech"), t;
              }
              var u = P.prototype;
              return u.triggerSourceset = function(e) {
                var t = this;
                this.isReady_ || this.one("ready", function() {
                  return t.setTimeout(function() {
                    return t.triggerSourceset(e);
                  }, 1);
                }), this.trigger({ src: e, type: "sourceset" });
              }, u.manualProgressOn = function() {
                this.on("durationchange", this.onDurationChange_), this.manualProgress = true, this.one("ready", this.trackProgress_);
              }, u.manualProgressOff = function() {
                this.manualProgress = false, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange_);
              }, u.trackProgress = function(e) {
                this.stopTrackingProgress(), this.progressInterval = this.setInterval(Qe(this, function() {
                  var t = this.bufferedPercent();
                  this.bufferedPercent_ !== t && this.trigger("progress"), this.bufferedPercent_ = t, t === 1 && this.stopTrackingProgress();
                }), 500);
              }, u.onDurationChange = function(e) {
                this.duration_ = this.duration();
              }, u.buffered = function() {
                return Kt(0, 0);
              }, u.bufferedPercent = function() {
                return ki(this.buffered(), this.duration_);
              }, u.stopTrackingProgress = function() {
                this.clearInterval(this.progressInterval);
              }, u.manualTimeUpdatesOn = function() {
                this.manualTimeUpdates = true, this.on("play", this.trackCurrentTime_), this.on("pause", this.stopTrackingCurrentTime_);
              }, u.manualTimeUpdatesOff = function() {
                this.manualTimeUpdates = false, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime_), this.off("pause", this.stopTrackingCurrentTime_);
              }, u.trackCurrentTime = function() {
                this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function() {
                  this.trigger({ type: "timeupdate", target: this, manuallyTriggered: true });
                }, 250);
              }, u.stopTrackingCurrentTime = function() {
                this.clearInterval(this.currentTimeInterval), this.trigger({ type: "timeupdate", target: this, manuallyTriggered: true });
              }, u.dispose = function() {
                this.clearTracks(gt.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), T.prototype.dispose.call(this);
              }, u.clearTracks = function(e) {
                var t = this;
                e = [].concat(e), e.forEach(function(C) {
                  for (var G = t[C + "Tracks"]() || [], X = G.length; X--; ) {
                    var $2 = G[X];
                    C === "text" && t.removeRemoteTextTrack($2), G.removeTrack($2);
                  }
                });
              }, u.cleanupAutoTextTracks = function() {
                for (var e = this.autoRemoteTextTracks_ || [], t = e.length; t--; ) {
                  var C = e[t];
                  this.removeRemoteTextTrack(C);
                }
              }, u.reset = function() {
              }, u.crossOrigin = function() {
              }, u.setCrossOrigin = function() {
              }, u.error = function(e) {
                return e !== void 0 && (this.error_ = new ut(e), this.trigger("error")), this.error_;
              }, u.played = function() {
                return this.hasStarted_ ? Kt(0, 0) : Kt();
              }, u.play = function() {
              }, u.setScrubbing = function() {
              }, u.scrubbing = function() {
              }, u.setCurrentTime = function() {
                this.manualTimeUpdates && this.trigger({ type: "timeupdate", target: this, manuallyTriggered: true });
              }, u.initTrackListeners = function() {
                var e = this;
                gt.names.forEach(function(t) {
                  var C = gt[t], G = function() {
                    e.trigger(t + "trackchange");
                  }, X = e[C.getterName]();
                  X.addEventListener("removetrack", G), X.addEventListener("addtrack", G), e.on("dispose", function() {
                    X.removeEventListener("removetrack", G), X.removeEventListener("addtrack", G);
                  });
                });
              }, u.addWebVttScript_ = function() {
                var e = this;
                if (!E.default.WebVTT)
                  if (L.default.body.contains(this.el())) {
                    if (!this.options_["vtt.js"] && ae(f.default) && Object.keys(f.default).length > 0) {
                      this.trigger("vttjsloaded");
                      return;
                    }
                    var t = L.default.createElement("script");
                    t.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", t.onload = function() {
                      e.trigger("vttjsloaded");
                    }, t.onerror = function() {
                      e.trigger("vttjserror");
                    }, this.on("dispose", function() {
                      t.onload = null, t.onerror = null;
                    }), E.default.WebVTT = true, this.el().parentNode.appendChild(t);
                  } else
                    this.ready(this.addWebVttScript_);
              }, u.emulateTextTracks = function() {
                var e = this, t = this.textTracks(), C = this.remoteTextTracks(), G = function(J) {
                  return t.addTrack(J.track);
                }, X = function(J) {
                  return t.removeTrack(J.track);
                };
                C.on("addtrack", G), C.on("removetrack", X), this.addWebVttScript_();
                var $2 = function() {
                  return e.trigger("texttrackchange");
                }, te = function() {
                  $2();
                  for (var J = 0; J < t.length; J++) {
                    var pe = t[J];
                    pe.removeEventListener("cuechange", $2), pe.mode === "showing" && pe.addEventListener("cuechange", $2);
                  }
                };
                te(), t.addEventListener("change", te), t.addEventListener("addtrack", te), t.addEventListener("removetrack", te), this.on("dispose", function() {
                  C.off("addtrack", G), C.off("removetrack", X), t.removeEventListener("change", te), t.removeEventListener("addtrack", te), t.removeEventListener("removetrack", te);
                  for (var le = 0; le < t.length; le++) {
                    var J = t[le];
                    J.removeEventListener("cuechange", $2);
                  }
                });
              }, u.addTextTrack = function(e, t, C) {
                if (!e)
                  throw new Error("TextTrack kind is required but was not provided");
                return la(this, e, t, C);
              }, u.createRemoteTextTrack = function(e) {
                var t = $e(e, { tech: this });
                return new qt.remoteTextEl.TrackClass(t);
              }, u.addRemoteTextTrack = function(e, t) {
                var C = this;
                e === void 0 && (e = {});
                var G = this.createRemoteTextTrack(e);
                return t !== true && t !== false && (K.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'), t = true), this.remoteTextTrackEls().addTrackElement_(G), this.remoteTextTracks().addTrack(G.track), t !== true && this.ready(function() {
                  return C.autoRemoteTextTracks_.addTrack(G.track);
                }), G;
              }, u.removeRemoteTextTrack = function(e) {
                var t = this.remoteTextTrackEls().getTrackElementByTrack_(e);
                this.remoteTextTrackEls().removeTrackElement_(t), this.remoteTextTracks().removeTrack(e), this.autoRemoteTextTracks_.removeTrack(e);
              }, u.getVideoPlaybackQuality = function() {
                return {};
              }, u.requestPictureInPicture = function() {
                var e = this.options_.Promise || E.default.Promise;
                if (e)
                  return e.reject();
              }, u.disablePictureInPicture = function() {
                return true;
              }, u.setDisablePictureInPicture = function() {
              }, u.requestVideoFrameCallback = function(e) {
                var t = this, C = Mt();
                return !this.isReady_ || this.paused() ? (this.queuedHanders_.add(C), this.one("playing", function() {
                  t.queuedHanders_.has(C) && (t.queuedHanders_.delete(C), e());
                })) : this.requestNamedAnimationFrame(C, e), C;
              }, u.cancelVideoFrameCallback = function(e) {
                this.queuedHanders_.has(e) ? this.queuedHanders_.delete(e) : this.cancelNamedAnimationFrame(e);
              }, u.setPoster = function() {
              }, u.playsinline = function() {
              }, u.setPlaysinline = function() {
              }, u.overrideNativeAudioTracks = function() {
              }, u.overrideNativeVideoTracks = function() {
              }, u.canPlayType = function() {
                return "";
              }, P.canPlayType = function() {
                return "";
              }, P.canPlaySource = function(e, t) {
                return P.canPlayType(e.type);
              }, P.isTech = function(e) {
                return e.prototype instanceof P || e instanceof P || e === P;
              }, P.registerTech = function(e, t) {
                if (P.techs_ || (P.techs_ = {}), !P.isTech(t))
                  throw new Error("Tech " + e + " must be a Tech");
                if (!P.canPlayType)
                  throw new Error("Techs must have a static canPlayType method on them");
                if (!P.canPlaySource)
                  throw new Error("Techs must have a static canPlaySource method on them");
                return e = Je(e), P.techs_[e] = t, P.techs_[Er(e)] = t, e !== "Tech" && P.defaultTechOrder_.push(e), t;
              }, P.getTech = function(e) {
                if (!!e) {
                  if (P.techs_ && P.techs_[e])
                    return P.techs_[e];
                  if (e = Je(e), E.default && E.default.videojs && E.default.videojs[e])
                    return K.warn("The " + e + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"), E.default.videojs[e];
                }
              }, P;
            }(ge);
            ct.names.forEach(function(T) {
              var P = ct[T];
              Ve.prototype[P.getterName] = function() {
                return this[P.privateName] = this[P.privateName] || new P.ListClass(), this[P.privateName];
              };
            }), Ve.prototype.featuresVolumeControl = true, Ve.prototype.featuresMuteControl = true, Ve.prototype.featuresFullscreenResize = false, Ve.prototype.featuresPlaybackRate = false, Ve.prototype.featuresProgressEvents = false, Ve.prototype.featuresSourceset = false, Ve.prototype.featuresTimeupdateEvents = false, Ve.prototype.featuresNativeTextTracks = false, Ve.prototype.featuresVideoFrameCallback = false, Ve.withSourceHandlers = function(T) {
              T.registerSourceHandler = function(u, r) {
                var e = T.sourceHandlers;
                e || (e = T.sourceHandlers = []), r === void 0 && (r = e.length), e.splice(r, 0, u);
              }, T.canPlayType = function(u) {
                for (var r = T.sourceHandlers || [], e, t = 0; t < r.length; t++)
                  if (e = r[t].canPlayType(u), e)
                    return e;
                return "";
              }, T.selectSourceHandler = function(u, r) {
                for (var e = T.sourceHandlers || [], t, C = 0; C < e.length; C++)
                  if (t = e[C].canHandleSource(u, r), t)
                    return e[C];
                return null;
              }, T.canPlaySource = function(u, r) {
                var e = T.selectSourceHandler(u, r);
                return e ? e.canHandleSource(u, r) : "";
              };
              var P = ["seekable", "seeking", "duration"];
              P.forEach(function(u) {
                var r = this[u];
                typeof r == "function" && (this[u] = function() {
                  return this.sourceHandler_ && this.sourceHandler_[u] ? this.sourceHandler_[u].apply(this.sourceHandler_, arguments) : r.apply(this, arguments);
                });
              }, T.prototype), T.prototype.setSource = function(u) {
                var r = T.selectSourceHandler(u, this.options_);
                r || (T.nativeSourceHandler ? r = T.nativeSourceHandler : K.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler_), r !== T.nativeSourceHandler && (this.currentSource_ = u), this.sourceHandler_ = r.handleSource(u, this, this.options_), this.one("dispose", this.disposeSourceHandler_);
              }, T.prototype.disposeSourceHandler = function() {
                this.currentSource_ && (this.clearTracks(["audio", "video"]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
              };
            }, ge.registerComponent("Tech", Ve), Ve.registerTech("Tech", Ve), Ve.defaultTechOrder_ = [];
            var jt = {}, Qr = {}, Sr = {};
            function ua(T, P) {
              jt[T] = jt[T] || [], jt[T].push(P);
            }
            function ca(T, P, u) {
              T.setTimeout(function() {
                return Ht(P, jt[P.type], u, T);
              }, 1);
            }
            function da(T, P) {
              T.forEach(function(u) {
                return u.setTech && u.setTech(P);
              });
            }
            function fa(T, P, u) {
              return T.reduceRight($r(u), P[u]());
            }
            function ha(T, P, u, r) {
              return P[u](T.reduce($r(u), r));
            }
            function Vi(T, P, u, r) {
              r === void 0 && (r = null);
              var e = "call" + Je(u), t = T.reduce($r(e), r), C = t === Sr, G = C ? null : P[u](t);
              return ga(T, u, G, C), G;
            }
            var va = { buffered: 1, currentTime: 1, duration: 1, muted: 1, played: 1, paused: 1, seekable: 1, volume: 1, ended: 1 }, pa = { setCurrentTime: 1, setMuted: 1, setVolume: 1 }, Yi = { play: 1, pause: 1 };
            function $r(T) {
              return function(P, u) {
                return P === Sr ? Sr : u[T] ? u[T](P) : P;
              };
            }
            function ga(T, P, u, r) {
              for (var e = T.length - 1; e >= 0; e--) {
                var t = T[e];
                t[P] && t[P](r, u);
              }
            }
            function ma(T) {
              Qr[T.id()] = null;
            }
            function ya(T, P) {
              var u = Qr[T.id()], r = null;
              if (u == null)
                return r = P(T), Qr[T.id()] = [[P, r]], r;
              for (var e = 0; e < u.length; e++) {
                var t = u[e], C = t[0], G = t[1];
                C === P && (r = G);
              }
              return r === null && (r = P(T), u.push([P, r])), r;
            }
            function Ht(T, P, u, r, e, t) {
              T === void 0 && (T = {}), P === void 0 && (P = []), e === void 0 && (e = []), t === void 0 && (t = false);
              var C = P, G = C[0], X = C.slice(1);
              if (typeof G == "string")
                Ht(T, jt[G], u, r, e, t);
              else if (G) {
                var $2 = ya(r, G);
                if (!$2.setSource)
                  return e.push($2), Ht(T, X, u, r, e, t);
                $2.setSource(q({}, T), function(te, le) {
                  if (te)
                    return Ht(T, X, u, r, e, t);
                  e.push($2), Ht(le, T.type === le.type ? X : jt[le.type], u, r, e, t);
                });
              } else
                X.length ? Ht(T, X, u, r, e, t) : t ? u(T, e) : Ht(T, jt["*"], u, r, e, true);
            }
            var _a = { opus: "video/ogg", ogv: "video/ogg", mp4: "video/mp4", mov: "video/mp4", m4v: "video/mp4", mkv: "video/x-matroska", m4a: "audio/mp4", mp3: "audio/mpeg", aac: "audio/aac", caf: "audio/x-caf", flac: "audio/flac", oga: "audio/ogg", wav: "audio/wav", m3u8: "application/x-mpegURL", mpd: "application/dash+xml", jpg: "image/jpeg", jpeg: "image/jpeg", gif: "image/gif", png: "image/png", svg: "image/svg+xml", webp: "image/webp" }, br = function(P) {
              P === void 0 && (P = "");
              var u = Xr(P), r = _a[u.toLowerCase()];
              return r || "";
            }, Ea = function(P, u) {
              if (!u)
                return "";
              if (P.cache_.source.src === u && P.cache_.source.type)
                return P.cache_.source.type;
              var r = P.cache_.sources.filter(function(G) {
                return G.src === u;
              });
              if (r.length)
                return r[0].type;
              for (var e = P.$$("source"), t = 0; t < e.length; t++) {
                var C = e[t];
                if (C.type && C.src && C.src === u)
                  return C.type;
              }
              return br(u);
            }, Ta = function T(P) {
              if (Array.isArray(P)) {
                var u = [];
                P.forEach(function(r) {
                  r = T(r), Array.isArray(r) ? u = u.concat(r) : ee(r) && u.push(r);
                }), P = u;
              } else
                typeof P == "string" && P.trim() ? P = [zi({ src: P })] : ee(P) && typeof P.src == "string" && P.src && P.src.trim() ? P = [zi(P)] : P = [];
              return P;
            };
            function zi(T) {
              if (!T.type) {
                var P = br(T.src);
                P && (T.type = P);
              }
              return T;
            }
            var Sa = function(T) {
              S.default(P, T);
              function P(u, r, e) {
                var t, C = $e({ createEl: false }, r);
                if (t = T.call(this, u, C, e) || this, !r.playerOptions.sources || r.playerOptions.sources.length === 0)
                  for (var G = 0, X = r.playerOptions.techOrder; G < X.length; G++) {
                    var $2 = Je(X[G]), te = Ve.getTech($2);
                    if ($2 || (te = ge.getComponent($2)), te && te.isSupported()) {
                      u.loadTech_($2);
                      break;
                    }
                  }
                else
                  u.src(r.playerOptions.sources);
                return t;
              }
              return P;
            }(ge);
            ge.registerComponent("MediaLoader", Sa);
            var Cr = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.options_.controlText && t.controlText(t.options_.controlText), t.handleMouseOver_ = function(C) {
                  return t.handleMouseOver(C);
                }, t.handleMouseOut_ = function(C) {
                  return t.handleMouseOut(C);
                }, t.handleClick_ = function(C) {
                  return t.handleClick(C);
                }, t.handleKeyDown_ = function(C) {
                  return t.handleKeyDown(C);
                }, t.emitTapEvents(), t.enable(), t;
              }
              var u = P.prototype;
              return u.createEl = function(e, t, C) {
                e === void 0 && (e = "div"), t === void 0 && (t = {}), C === void 0 && (C = {}), t = q({ className: this.buildCSSClass(), tabIndex: 0 }, t), e === "button" && K.error("Creating a ClickableComponent with an HTML element of " + e + " is not supported; use a Button instead."), C = q({ role: "button" }, C), this.tabIndex_ = t.tabIndex;
                var G = re(e, t, C);
                return G.appendChild(re("span", { className: "vjs-icon-placeholder" }, { "aria-hidden": true })), this.createControlTextEl(G), G;
              }, u.dispose = function() {
                this.controlTextEl_ = null, T.prototype.dispose.call(this);
              }, u.createControlTextEl = function(e) {
                return this.controlTextEl_ = re("span", { className: "vjs-control-text" }, { "aria-live": "polite" }), e && e.appendChild(this.controlTextEl_), this.controlText(this.controlText_, e), this.controlTextEl_;
              }, u.controlText = function(e, t) {
                if (t === void 0 && (t = this.el()), e === void 0)
                  return this.controlText_ || "Need Text";
                var C = this.localize(e);
                this.controlText_ = e, ce(this.controlTextEl_, C), !this.nonIconControl && !this.player_.options_.noUITitleAttributes && t.setAttribute("title", C);
              }, u.buildCSSClass = function() {
                return "vjs-control vjs-button " + T.prototype.buildCSSClass.call(this);
              }, u.enable = function() {
                this.enabled_ || (this.enabled_ = true, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), typeof this.tabIndex_ != "undefined" && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on(["tap", "click"], this.handleClick_), this.on("keydown", this.handleKeyDown_));
              }, u.disable = function() {
                this.enabled_ = false, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), typeof this.tabIndex_ != "undefined" && this.el_.removeAttribute("tabIndex"), this.off("mouseover", this.handleMouseOver_), this.off("mouseout", this.handleMouseOut_), this.off(["tap", "click"], this.handleClick_), this.off("keydown", this.handleKeyDown_);
              }, u.handleLanguagechange = function() {
                this.controlText(this.controlText_);
              }, u.handleClick = function(e) {
                this.options_.clickHandler && this.options_.clickHandler.call(this, arguments);
              }, u.handleKeyDown = function(e) {
                y.default.isEventKey(e, "Space") || y.default.isEventKey(e, "Enter") ? (e.preventDefault(), e.stopPropagation(), this.trigger("click")) : T.prototype.handleKeyDown.call(this, e);
              }, P;
            }(ge);
            ge.registerComponent("ClickableComponent", Cr);
            var ba = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update(), t.update_ = function(C) {
                  return t.update(C);
                }, r.on("posterchange", t.update_), t;
              }
              var u = P.prototype;
              return u.dispose = function() {
                this.player().off("posterchange", this.update_), T.prototype.dispose.call(this);
              }, u.createEl = function() {
                var e = re("div", { className: "vjs-poster", tabIndex: -1 });
                return e;
              }, u.update = function(e) {
                var t = this.player().poster();
                this.setSrc(t), t ? this.show() : this.hide();
              }, u.setSrc = function(e) {
                var t = "";
                e && (t = 'url("' + e + '")'), this.el_.style.backgroundImage = t;
              }, u.handleClick = function(e) {
                if (!!this.player_.controls()) {
                  var t = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                  this.player_.tech(true) && !((ve || he) && t) && this.player_.tech(true).focus(), this.player_.paused() ? Lt(this.player_.play()) : this.player_.pause();
                }
              }, P;
            }(Cr);
            ge.registerComponent("PosterImage", ba);
            var mt = "#222", Xi = "#ccc", Ca = { monospace: "monospace", sansSerif: "sans-serif", serif: "serif", monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace', monospaceSerif: '"Courier New", monospace', proportionalSansSerif: "sans-serif", proportionalSerif: "serif", casual: '"Comic Sans MS", Impact, fantasy', script: '"Monotype Corsiva", cursive', smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif' };
            function qr(T, P) {
              var u;
              if (T.length === 4)
                u = T[1] + T[1] + T[2] + T[2] + T[3] + T[3];
              else if (T.length === 7)
                u = T.slice(1);
              else
                throw new Error("Invalid color code provided, " + T + "; must be formatted as e.g. #f0e or #f604e2.");
              return "rgba(" + parseInt(u.slice(0, 2), 16) + "," + parseInt(u.slice(2, 4), 16) + "," + parseInt(u.slice(4, 6), 16) + "," + P + ")";
            }
            function Jr(T, P, u) {
              try {
                T.style[P] = u;
              } catch (r) {
                return;
              }
            }
            var Aa = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                var C;
                C = T.call(this, r, e, t) || this;
                var G = function($2) {
                  return C.updateDisplay($2);
                };
                return r.on("loadstart", function(X) {
                  return C.toggleDisplay(X);
                }), r.on("texttrackchange", G), r.on("loadedmetadata", function(X) {
                  return C.preselectTrack(X);
                }), r.ready(Qe(I.default(C), function() {
                  if (r.tech_ && r.tech_.featuresNativeTextTracks) {
                    this.hide();
                    return;
                  }
                  r.on("fullscreenchange", G), r.on("playerresize", G), E.default.addEventListener("orientationchange", G), r.on("dispose", function() {
                    return E.default.removeEventListener("orientationchange", G);
                  });
                  for (var X = this.options_.playerOptions.tracks || [], $2 = 0; $2 < X.length; $2++)
                    this.player_.addRemoteTextTrack(X[$2], true);
                  this.preselectTrack();
                })), C;
              }
              var u = P.prototype;
              return u.preselectTrack = function() {
                for (var e = { captions: 1, subtitles: 1 }, t = this.player_.textTracks(), C = this.player_.cache_.selectedLanguage, G, X, $2, te = 0; te < t.length; te++) {
                  var le = t[te];
                  C && C.enabled && C.language && C.language === le.language && le.kind in e ? le.kind === C.kind ? $2 = le : $2 || ($2 = le) : C && !C.enabled ? ($2 = null, G = null, X = null) : le.default && (le.kind === "descriptions" && !G ? G = le : le.kind in e && !X && (X = le));
                }
                $2 ? $2.mode = "showing" : X ? X.mode = "showing" : G && (G.mode = "showing");
              }, u.toggleDisplay = function() {
                this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
              }, u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-text-track-display" }, { translate: "yes", "aria-live": "off", "aria-atomic": "true" });
              }, u.clearDisplay = function() {
                typeof E.default.WebVTT == "function" && E.default.WebVTT.processCues(E.default, [], this.el_);
              }, u.updateDisplay = function() {
                var e = this.player_.textTracks(), t = this.options_.allowMultipleShowingTracks;
                if (this.clearDisplay(), t) {
                  for (var C = [], G = 0; G < e.length; ++G) {
                    var X = e[G];
                    X.mode === "showing" && C.push(X);
                  }
                  this.updateForTrack(C);
                  return;
                }
                for (var $2 = null, te = null, le = e.length; le--; ) {
                  var J = e[le];
                  J.mode === "showing" && (J.kind === "descriptions" ? $2 = J : te = J);
                }
                te ? (this.getAttribute("aria-live") !== "off" && this.setAttribute("aria-live", "off"), this.updateForTrack(te)) : $2 && (this.getAttribute("aria-live") !== "assertive" && this.setAttribute("aria-live", "assertive"), this.updateForTrack($2));
              }, u.updateDisplayState = function(e) {
                for (var t = this.player_.textTrackSettings.getValues(), C = e.activeCues, G = C.length; G--; ) {
                  var X = C[G];
                  if (!!X) {
                    var $2 = X.displayState;
                    if (t.color && ($2.firstChild.style.color = t.color), t.textOpacity && Jr($2.firstChild, "color", qr(t.color || "#fff", t.textOpacity)), t.backgroundColor && ($2.firstChild.style.backgroundColor = t.backgroundColor), t.backgroundOpacity && Jr($2.firstChild, "backgroundColor", qr(t.backgroundColor || "#000", t.backgroundOpacity)), t.windowColor && (t.windowOpacity ? Jr($2, "backgroundColor", qr(t.windowColor, t.windowOpacity)) : $2.style.backgroundColor = t.windowColor), t.edgeStyle && (t.edgeStyle === "dropshadow" ? $2.firstChild.style.textShadow = "2px 2px 3px " + mt + ", 2px 2px 4px " + mt + ", 2px 2px 5px " + mt : t.edgeStyle === "raised" ? $2.firstChild.style.textShadow = "1px 1px " + mt + ", 2px 2px " + mt + ", 3px 3px " + mt : t.edgeStyle === "depressed" ? $2.firstChild.style.textShadow = "1px 1px " + Xi + ", 0 1px " + Xi + ", -1px -1px " + mt + ", 0 -1px " + mt : t.edgeStyle === "uniform" && ($2.firstChild.style.textShadow = "0 0 4px " + mt + ", 0 0 4px " + mt + ", 0 0 4px " + mt + ", 0 0 4px " + mt)), t.fontPercent && t.fontPercent !== 1) {
                      var te = E.default.parseFloat($2.style.fontSize);
                      $2.style.fontSize = te * t.fontPercent + "px", $2.style.height = "auto", $2.style.top = "auto";
                    }
                    t.fontFamily && t.fontFamily !== "default" && (t.fontFamily === "small-caps" ? $2.firstChild.style.fontVariant = "small-caps" : $2.firstChild.style.fontFamily = Ca[t.fontFamily]);
                  }
                }
              }, u.updateForTrack = function(e) {
                if (Array.isArray(e) || (e = [e]), !(typeof E.default.WebVTT != "function" || e.every(function(pe) {
                  return !pe.activeCues;
                }))) {
                  for (var t = [], C = 0; C < e.length; ++C)
                    for (var G = e[C], X = 0; X < G.activeCues.length; ++X)
                      t.push(G.activeCues[X]);
                  E.default.WebVTT.processCues(E.default, t, this.el_);
                  for (var $2 = 0; $2 < e.length; ++$2) {
                    for (var te = e[$2], le = 0; le < te.activeCues.length; ++le) {
                      var J = te.activeCues[le].displayState;
                      He(J, "vjs-text-track-cue"), He(J, "vjs-text-track-cue-" + (te.language ? te.language : $2)), te.language && yt(J, "lang", te.language);
                    }
                    this.player_.textTrackSettings && this.updateDisplayState(te);
                  }
                }
              }, P;
            }(ge);
            ge.registerComponent("TextTrackDisplay", Aa);
            var Pa = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = this.player_.isAudio(), t = this.localize(e ? "Audio Player" : "Video Player"), C = re("span", { className: "vjs-control-text", textContent: this.localize("{1} is loading.", [t]) }), G = T.prototype.createEl.call(this, "div", { className: "vjs-loading-spinner", dir: "ltr" });
                return G.appendChild(C), G;
              }, P;
            }(ge);
            ge.registerComponent("LoadingSpinner", Pa);
            var bt = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function(e, t, C) {
                t === void 0 && (t = {}), C === void 0 && (C = {}), e = "button", t = q({ className: this.buildCSSClass() }, t), C = q({ type: "button" }, C);
                var G = re(e, t, C);
                return G.appendChild(re("span", { className: "vjs-icon-placeholder" }, { "aria-hidden": true })), this.createControlTextEl(G), G;
              }, u.addChild = function(e, t) {
                t === void 0 && (t = {});
                var C = this.constructor.name;
                return K.warn("Adding an actionable (user controllable) child to a Button (" + C + ") is not supported; use a ClickableComponent instead."), ge.prototype.addChild.call(this, e, t);
              }, u.enable = function() {
                T.prototype.enable.call(this), this.el_.removeAttribute("disabled");
              }, u.disable = function() {
                T.prototype.disable.call(this), this.el_.setAttribute("disabled", "disabled");
              }, u.handleKeyDown = function(e) {
                if (y.default.isEventKey(e, "Space") || y.default.isEventKey(e, "Enter")) {
                  e.stopPropagation();
                  return;
                }
                T.prototype.handleKeyDown.call(this, e);
              }, P;
            }(Cr);
            ge.registerComponent("Button", bt);
            var Qi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.mouseused_ = false, t.on("mousedown", function(C) {
                  return t.handleMouseDown(C);
                }), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-big-play-button";
              }, u.handleClick = function(e) {
                var t = this.player_.play();
                if (this.mouseused_ && e.clientX && e.clientY) {
                  var C = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                  Lt(t), this.player_.tech(true) && !((ve || he) && C) && this.player_.tech(true).focus();
                  return;
                }
                var G = this.player_.getChild("controlBar"), X = G && G.getChild("playToggle");
                if (!X) {
                  this.player_.tech(true).focus();
                  return;
                }
                var $2 = function() {
                  return X.focus();
                };
                lr(t) ? t.then($2, function() {
                }) : this.setTimeout($2, 1);
              }, u.handleKeyDown = function(e) {
                this.mouseused_ = false, T.prototype.handleKeyDown.call(this, e);
              }, u.handleMouseDown = function(e) {
                this.mouseused_ = true;
              }, P;
            }(bt);
            Qi.prototype.controlText_ = "Play Video", ge.registerComponent("BigPlayButton", Qi);
            var La = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.controlText(e && e.controlText || t.localize("Close")), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-close-button " + T.prototype.buildCSSClass.call(this);
              }, u.handleClick = function(e) {
                this.trigger({ type: "close", bubbles: false });
              }, u.handleKeyDown = function(e) {
                y.default.isEventKey(e, "Esc") ? (e.preventDefault(), e.stopPropagation(), this.trigger("click")) : T.prototype.handleKeyDown.call(this, e);
              }, P;
            }(bt);
            ge.registerComponent("CloseButton", La);
            var $i = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e === void 0 && (e = {}), t = T.call(this, r, e) || this, e.replay = e.replay === void 0 || e.replay, t.on(r, "play", function(C) {
                  return t.handlePlay(C);
                }), t.on(r, "pause", function(C) {
                  return t.handlePause(C);
                }), e.replay && t.on(r, "ended", function(C) {
                  return t.handleEnded(C);
                }), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-play-control " + T.prototype.buildCSSClass.call(this);
              }, u.handleClick = function(e) {
                this.player_.paused() ? Lt(this.player_.play()) : this.player_.pause();
              }, u.handleSeeked = function(e) {
                this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(e) : this.handlePlay(e);
              }, u.handlePlay = function(e) {
                this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.controlText("Pause");
              }, u.handlePause = function(e) {
                this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.controlText("Play");
              }, u.handleEnded = function(e) {
                var t = this;
                this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.controlText("Replay"), this.one(this.player_, "seeked", function(C) {
                  return t.handleSeeked(C);
                });
              }, P;
            }(bt);
            $i.prototype.controlText_ = "Play", ge.registerComponent("PlayToggle", $i);
            var qi = function(P, u) {
              P = P < 0 ? 0 : P;
              var r = Math.floor(P % 60), e = Math.floor(P / 60 % 60), t = Math.floor(P / 3600), C = Math.floor(u / 60 % 60), G = Math.floor(u / 3600);
              return (isNaN(P) || P === 1 / 0) && (t = e = r = "-"), t = t > 0 || G > 0 ? t + ":" : "", e = ((t || C >= 10) && e < 10 ? "0" + e : e) + ":", r = r < 10 ? "0" + r : r, t + e + r;
            }, Zr = qi;
            function Da(T) {
              Zr = T;
            }
            function Ia() {
              Zr = qi;
            }
            function Jt(T, P) {
              return P === void 0 && (P = T), Zr(T, P);
            }
            var Zt = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on(r, ["timeupdate", "ended"], function(C) {
                  return t.updateContent(C);
                }), t.updateTextNode_(), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = this.buildCSSClass(), t = T.prototype.createEl.call(this, "div", { className: e + " vjs-time-control vjs-control" }), C = re("span", { className: "vjs-control-text", textContent: this.localize(this.labelText_) + "\xA0" }, { role: "presentation" });
                return t.appendChild(C), this.contentEl_ = re("span", { className: e + "-display" }, { "aria-live": "off", role: "presentation" }), t.appendChild(this.contentEl_), t;
              }, u.dispose = function() {
                this.contentEl_ = null, this.textNode_ = null, T.prototype.dispose.call(this);
              }, u.updateTextNode_ = function(e) {
                var t = this;
                e === void 0 && (e = 0), e = Jt(e), this.formattedTime_ !== e && (this.formattedTime_ = e, this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
                  if (!!t.contentEl_) {
                    var C = t.textNode_;
                    C && t.contentEl_.firstChild !== C && (C = null, K.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.")), t.textNode_ = L.default.createTextNode(t.formattedTime_), !!t.textNode_ && (C ? t.contentEl_.replaceChild(t.textNode_, C) : t.contentEl_.appendChild(t.textNode_));
                  }
                }));
              }, u.updateContent = function(e) {
              }, P;
            }(ge);
            Zt.prototype.labelText_ = "Time", Zt.prototype.controlText_ = "Time", ge.registerComponent("TimeDisplay", Zt);
            var ei = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-current-time";
              }, u.updateContent = function(e) {
                var t;
                this.player_.ended() ? t = this.player_.duration() : t = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime(), this.updateTextNode_(t);
              }, P;
            }(Zt);
            ei.prototype.labelText_ = "Current Time", ei.prototype.controlText_ = "Current Time", ge.registerComponent("CurrentTimeDisplay", ei);
            var ti = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                t = T.call(this, r, e) || this;
                var C = function(X) {
                  return t.updateContent(X);
                };
                return t.on(r, "durationchange", C), t.on(r, "loadstart", C), t.on(r, "loadedmetadata", C), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-duration";
              }, u.updateContent = function(e) {
                var t = this.player_.duration();
                this.updateTextNode_(t);
              }, P;
            }(Zt);
            ti.prototype.labelText_ = "Duration", ti.prototype.controlText_ = "Duration", ge.registerComponent("DurationDisplay", ti);
            var Oa = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this, "div", { className: "vjs-time-control vjs-time-divider" }, { "aria-hidden": true }), t = T.prototype.createEl.call(this, "div"), C = T.prototype.createEl.call(this, "span", { textContent: "/" });
                return t.appendChild(C), e.appendChild(t), e;
              }, P;
            }(ge);
            ge.registerComponent("TimeDivider", Oa);
            var ri = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on(r, "durationchange", function(C) {
                  return t.updateContent(C);
                }), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-remaining-time";
              }, u.createEl = function() {
                var e = T.prototype.createEl.call(this);
                return this.options_.displayNegative !== false && e.insertBefore(re("span", {}, { "aria-hidden": true }, "-"), this.contentEl_), e;
              }, u.updateContent = function(e) {
                if (typeof this.player_.duration() == "number") {
                  var t;
                  this.player_.ended() ? t = 0 : this.player_.remainingTimeDisplay ? t = this.player_.remainingTimeDisplay() : t = this.player_.remainingTime(), this.updateTextNode_(t);
                }
              }, P;
            }(Zt);
            ri.prototype.labelText_ = "Remaining Time", ri.prototype.controlText_ = "Remaining Time", ge.registerComponent("RemainingTimeDisplay", ri);
            var Ra = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.updateShowing(), t.on(t.player(), "durationchange", function(C) {
                  return t.updateShowing(C);
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this, "div", { className: "vjs-live-control vjs-control" });
                return this.contentEl_ = re("div", { className: "vjs-live-display" }, { "aria-live": "off" }), this.contentEl_.appendChild(re("span", { className: "vjs-control-text", textContent: this.localize("Stream Type") + "\xA0" })), this.contentEl_.appendChild(L.default.createTextNode(this.localize("LIVE"))), e.appendChild(this.contentEl_), e;
              }, u.dispose = function() {
                this.contentEl_ = null, T.prototype.dispose.call(this);
              }, u.updateShowing = function(e) {
                this.player().duration() === 1 / 0 ? this.show() : this.hide();
              }, P;
            }(ge);
            ge.registerComponent("LiveDisplay", Ra);
            var Ji = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.updateLiveEdgeStatus(), t.player_.liveTracker && (t.updateLiveEdgeStatusHandler_ = function(C) {
                  return t.updateLiveEdgeStatus(C);
                }, t.on(t.player_.liveTracker, "liveedgechange", t.updateLiveEdgeStatusHandler_)), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this, "button", { className: "vjs-seek-to-live-control vjs-control" });
                return this.textEl_ = re("span", { className: "vjs-seek-to-live-text", textContent: this.localize("LIVE") }, { "aria-hidden": "true" }), e.appendChild(this.textEl_), e;
              }, u.updateLiveEdgeStatus = function() {
                !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", true), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", false), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
              }, u.handleClick = function() {
                this.player_.liveTracker.seekToLiveEdge();
              }, u.dispose = function() {
                this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_), this.textEl_ = null, T.prototype.dispose.call(this);
              }, P;
            }(bt);
            Ji.prototype.controlText_ = "Seek to live, currently playing live", ge.registerComponent("SeekToLive", Ji);
            var Ar = function(P, u, r) {
              return P = Number(P), Math.min(r, Math.max(u, isNaN(P) ? u : P));
            }, ii = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.handleMouseDown_ = function(C) {
                  return t.handleMouseDown(C);
                }, t.handleMouseUp_ = function(C) {
                  return t.handleMouseUp(C);
                }, t.handleKeyDown_ = function(C) {
                  return t.handleKeyDown(C);
                }, t.handleClick_ = function(C) {
                  return t.handleClick(C);
                }, t.handleMouseMove_ = function(C) {
                  return t.handleMouseMove(C);
                }, t.update_ = function(C) {
                  return t.update(C);
                }, t.bar = t.getChild(t.options_.barName), t.vertical(!!t.options_.vertical), t.enable(), t;
              }
              var u = P.prototype;
              return u.enabled = function() {
                return this.enabled_;
              }, u.enable = function() {
                this.enabled() || (this.on("mousedown", this.handleMouseDown_), this.on("touchstart", this.handleMouseDown_), this.on("keydown", this.handleKeyDown_), this.on("click", this.handleClick_), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = true);
              }, u.disable = function() {
                if (!!this.enabled()) {
                  var e = this.bar.el_.ownerDocument;
                  this.off("mousedown", this.handleMouseDown_), this.off("touchstart", this.handleMouseDown_), this.off("keydown", this.handleKeyDown_), this.off("click", this.handleClick_), this.off(this.player_, "controlsvisible", this.update_), this.off(e, "mousemove", this.handleMouseMove_), this.off(e, "mouseup", this.handleMouseUp_), this.off(e, "touchmove", this.handleMouseMove_), this.off(e, "touchend", this.handleMouseUp_), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = false;
                }
              }, u.createEl = function(e, t, C) {
                return t === void 0 && (t = {}), C === void 0 && (C = {}), t.className = t.className + " vjs-slider", t = q({ tabIndex: 0 }, t), C = q({ role: "slider", "aria-valuenow": 0, "aria-valuemin": 0, "aria-valuemax": 100, tabIndex: 0 }, C), T.prototype.createEl.call(this, e, t, C);
              }, u.handleMouseDown = function(e) {
                var t = this.bar.el_.ownerDocument;
                e.type === "mousedown" && e.preventDefault(), e.type === "touchstart" && !oe && e.preventDefault(), ht(), this.addClass("vjs-sliding"), this.trigger("slideractive"), this.on(t, "mousemove", this.handleMouseMove_), this.on(t, "mouseup", this.handleMouseUp_), this.on(t, "touchmove", this.handleMouseMove_), this.on(t, "touchend", this.handleMouseUp_), this.handleMouseMove(e, true);
              }, u.handleMouseMove = function(e) {
              }, u.handleMouseUp = function() {
                var e = this.bar.el_.ownerDocument;
                nt(), this.removeClass("vjs-sliding"), this.trigger("sliderinactive"), this.off(e, "mousemove", this.handleMouseMove_), this.off(e, "mouseup", this.handleMouseUp_), this.off(e, "touchmove", this.handleMouseMove_), this.off(e, "touchend", this.handleMouseUp_), this.update();
              }, u.update = function() {
                var e = this;
                if (!(!this.el_ || !this.bar)) {
                  var t = this.getProgress();
                  return t === this.progress_ || (this.progress_ = t, this.requestNamedAnimationFrame("Slider#update", function() {
                    var C = e.vertical() ? "height" : "width";
                    e.bar.el().style[C] = (t * 100).toFixed(2) + "%";
                  })), t;
                }
              }, u.getProgress = function() {
                return Number(Ar(this.getPercent(), 0, 1).toFixed(4));
              }, u.calculateDistance = function(e) {
                var t = Et(this.el_, e);
                return this.vertical() ? t.y : t.x;
              }, u.handleKeyDown = function(e) {
                y.default.isEventKey(e, "Left") || y.default.isEventKey(e, "Down") ? (e.preventDefault(), e.stopPropagation(), this.stepBack()) : y.default.isEventKey(e, "Right") || y.default.isEventKey(e, "Up") ? (e.preventDefault(), e.stopPropagation(), this.stepForward()) : T.prototype.handleKeyDown.call(this, e);
              }, u.handleClick = function(e) {
                e.stopPropagation(), e.preventDefault();
              }, u.vertical = function(e) {
                if (e === void 0)
                  return this.vertical_ || false;
                this.vertical_ = !!e, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
              }, P;
            }(ge);
            ge.registerComponent("Slider", ii);
            var ni = function(P, u) {
              return Ar(P / u * 100, 0, 100).toFixed(2) + "%";
            }, Ma = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.partEls_ = [], t.on(r, "progress", function(C) {
                  return t.update(C);
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this, "div", { className: "vjs-load-progress" }), t = re("span", { className: "vjs-control-text" }), C = re("span", { textContent: this.localize("Loaded") }), G = L.default.createTextNode(": ");
                return this.percentageEl_ = re("span", { className: "vjs-control-text-loaded-percentage", textContent: "0%" }), e.appendChild(t), t.appendChild(C), t.appendChild(G), t.appendChild(this.percentageEl_), e;
              }, u.dispose = function() {
                this.partEls_ = null, this.percentageEl_ = null, T.prototype.dispose.call(this);
              }, u.update = function(e) {
                var t = this;
                this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
                  var C = t.player_.liveTracker, G = t.player_.buffered(), X = C && C.isLive() ? C.seekableEnd() : t.player_.duration(), $2 = t.player_.bufferedEnd(), te = t.partEls_, le = ni($2, X);
                  t.percent_ !== le && (t.el_.style.width = le, ce(t.percentageEl_, le), t.percent_ = le);
                  for (var J = 0; J < G.length; J++) {
                    var pe = G.start(J), Ie = G.end(J), je = te[J];
                    je || (je = t.el_.appendChild(re()), te[J] = je), !(je.dataset.start === pe && je.dataset.end === Ie) && (je.dataset.start = pe, je.dataset.end = Ie, je.style.left = ni(pe, $2), je.style.width = ni(Ie - pe, $2));
                  }
                  for (var Gt = te.length; Gt > G.length; Gt--)
                    t.el_.removeChild(te[Gt - 1]);
                  te.length = G.length;
                });
              }, P;
            }(ge);
            ge.registerComponent("LoadProgressBar", Ma);
            var ka = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update = kt(Qe(I.default(t), t.update), St), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-time-tooltip" }, { "aria-hidden": "true" });
              }, u.update = function(e, t, C) {
                var G = _t(this.el_), X = pt(this.player_.el()), $2 = e.width * t;
                if (!(!X || !G)) {
                  var te = e.left - X.left + $2, le = e.width - $2 + (X.right - e.right), J = G.width / 2;
                  te < J ? J += J - te : le < J && (J = le), J < 0 ? J = 0 : J > G.width && (J = G.width), J = Math.round(J), this.el_.style.right = "-" + J + "px", this.write(C);
                }
              }, u.write = function(e) {
                ce(this.el_, e);
              }, u.updateTime = function(e, t, C, G) {
                var X = this;
                this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
                  var $2, te = X.player_.duration();
                  if (X.player_.liveTracker && X.player_.liveTracker.isLive()) {
                    var le = X.player_.liveTracker.liveWindow(), J = le - t * le;
                    $2 = (J < 1 ? "" : "-") + Jt(J, le);
                  } else
                    $2 = Jt(C, te);
                  X.update(e, t, $2), G && G();
                });
              }, P;
            }(ge);
            ge.registerComponent("TimeTooltip", ka);
            var ai = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update = kt(Qe(I.default(t), t.update), St), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-play-progress vjs-slider-bar" }, { "aria-hidden": "true" });
              }, u.update = function(e, t) {
                var C = this.getChild("timeTooltip");
                if (!!C) {
                  var G = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                  C.updateTime(e, t, G);
                }
              }, P;
            }(ge);
            ai.prototype.options_ = { children: [] }, !Fe && !Te && ai.prototype.options_.children.push("timeTooltip"), ge.registerComponent("PlayProgressBar", ai);
            var Zi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update = kt(Qe(I.default(t), t.update), St), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-mouse-display" });
              }, u.update = function(e, t) {
                var C = this, G = t * this.player_.duration();
                this.getChild("timeTooltip").updateTime(e, t, G, function() {
                  C.el_.style.left = e.width * t + "px";
                });
              }, P;
            }(ge);
            Zi.prototype.options_ = { children: ["timeTooltip"] }, ge.registerComponent("MouseTimeDisplay", Zi);
            var Pr = 5, en = 12, si = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.setEventHandlers_(), t;
              }
              var u = P.prototype;
              return u.setEventHandlers_ = function() {
                var e = this;
                this.update_ = Qe(this, this.update), this.update = kt(this.update_, St), this.on(this.player_, ["ended", "durationchange", "timeupdate"], this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), this.updateInterval = null, this.enableIntervalHandler_ = function(t) {
                  return e.enableInterval_(t);
                }, this.disableIntervalHandler_ = function(t) {
                  return e.disableInterval_(t);
                }, this.on(this.player_, ["playing"], this.enableIntervalHandler_), this.on(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_), "hidden" in L.default && "visibilityState" in L.default && this.on(L.default, "visibilitychange", this.toggleVisibility_);
              }, u.toggleVisibility_ = function(e) {
                L.default.visibilityState === "hidden" ? (this.cancelNamedAnimationFrame("SeekBar#update"), this.cancelNamedAnimationFrame("Slider#update"), this.disableInterval_(e)) : (!this.player_.ended() && !this.player_.paused() && this.enableInterval_(), this.update());
              }, u.enableInterval_ = function() {
                this.updateInterval || (this.updateInterval = this.setInterval(this.update, St));
              }, u.disableInterval_ = function(e) {
                this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== "ended" || !this.updateInterval || (this.clearInterval(this.updateInterval), this.updateInterval = null);
              }, u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-progress-holder" }, { "aria-label": this.localize("Progress Bar") });
              }, u.update = function(e) {
                var t = this;
                if (L.default.visibilityState !== "hidden") {
                  var C = T.prototype.update.call(this);
                  return this.requestNamedAnimationFrame("SeekBar#update", function() {
                    var G = t.player_.ended() ? t.player_.duration() : t.getCurrentTime_(), X = t.player_.liveTracker, $2 = t.player_.duration();
                    X && X.isLive() && ($2 = t.player_.liveTracker.liveCurrentTime()), t.percent_ !== C && (t.el_.setAttribute("aria-valuenow", (C * 100).toFixed(2)), t.percent_ = C), (t.currentTime_ !== G || t.duration_ !== $2) && (t.el_.setAttribute("aria-valuetext", t.localize("progress bar timing: currentTime={1} duration={2}", [Jt(G, $2), Jt($2, $2)], "{1} of {2}")), t.currentTime_ = G, t.duration_ = $2), t.bar && t.bar.update(pt(t.el()), t.getProgress());
                  }), C;
                }
              }, u.userSeek_ = function(e) {
                this.player_.liveTracker && this.player_.liveTracker.isLive() && this.player_.liveTracker.nextSeekedFromUser(), this.player_.currentTime(e);
              }, u.getCurrentTime_ = function() {
                return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
              }, u.getPercent = function() {
                var e = this.getCurrentTime_(), t, C = this.player_.liveTracker;
                return C && C.isLive() ? (t = (e - C.seekableStart()) / C.liveWindow(), C.atLiveEdge() && (t = 1)) : t = e / this.player_.duration(), t;
              }, u.handleMouseDown = function(e) {
                !Tt(e) || (e.stopPropagation(), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), T.prototype.handleMouseDown.call(this, e));
              }, u.handleMouseMove = function(e, t) {
                if (t === void 0 && (t = false), !!Tt(e)) {
                  !t && !this.player_.scrubbing() && this.player_.scrubbing(true);
                  var C, G = this.calculateDistance(e), X = this.player_.liveTracker;
                  if (!X || !X.isLive())
                    C = G * this.player_.duration(), C === this.player_.duration() && (C = C - 0.1);
                  else {
                    if (G >= 0.99) {
                      X.seekToLiveEdge();
                      return;
                    }
                    var $2 = X.seekableStart(), te = X.liveCurrentTime();
                    if (C = $2 + G * X.liveWindow(), C >= te && (C = te), C <= $2 && (C = $2 + 0.1), C === 1 / 0)
                      return;
                  }
                  this.userSeek_(C);
                }
              }, u.enable = function() {
                T.prototype.enable.call(this);
                var e = this.getChild("mouseTimeDisplay");
                !e || e.show();
              }, u.disable = function() {
                T.prototype.disable.call(this);
                var e = this.getChild("mouseTimeDisplay");
                !e || e.hide();
              }, u.handleMouseUp = function(e) {
                T.prototype.handleMouseUp.call(this, e), e && e.stopPropagation(), this.player_.scrubbing(false), this.player_.trigger({ type: "timeupdate", target: this, manuallyTriggered: true }), this.videoWasPlaying ? Lt(this.player_.play()) : this.update_();
              }, u.stepForward = function() {
                this.userSeek_(this.player_.currentTime() + Pr);
              }, u.stepBack = function() {
                this.userSeek_(this.player_.currentTime() - Pr);
              }, u.handleAction = function(e) {
                this.player_.paused() ? this.player_.play() : this.player_.pause();
              }, u.handleKeyDown = function(e) {
                var t = this.player_.liveTracker;
                if (y.default.isEventKey(e, "Space") || y.default.isEventKey(e, "Enter"))
                  e.preventDefault(), e.stopPropagation(), this.handleAction(e);
                else if (y.default.isEventKey(e, "Home"))
                  e.preventDefault(), e.stopPropagation(), this.userSeek_(0);
                else if (y.default.isEventKey(e, "End"))
                  e.preventDefault(), e.stopPropagation(), t && t.isLive() ? this.userSeek_(t.liveCurrentTime()) : this.userSeek_(this.player_.duration());
                else if (/^[0-9]$/.test(y.default(e))) {
                  e.preventDefault(), e.stopPropagation();
                  var C = (y.default.codes[y.default(e)] - y.default.codes["0"]) * 10 / 100;
                  t && t.isLive() ? this.userSeek_(t.seekableStart() + t.liveWindow() * C) : this.userSeek_(this.player_.duration() * C);
                } else
                  y.default.isEventKey(e, "PgDn") ? (e.preventDefault(), e.stopPropagation(), this.userSeek_(this.player_.currentTime() - Pr * en)) : y.default.isEventKey(e, "PgUp") ? (e.preventDefault(), e.stopPropagation(), this.userSeek_(this.player_.currentTime() + Pr * en)) : T.prototype.handleKeyDown.call(this, e);
              }, u.dispose = function() {
                this.disableInterval_(), this.off(this.player_, ["ended", "durationchange", "timeupdate"], this.update), this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.update), this.off(this.player_, ["playing"], this.enableIntervalHandler_), this.off(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_), "hidden" in L.default && "visibilityState" in L.default && this.off(L.default, "visibilitychange", this.toggleVisibility_), T.prototype.dispose.call(this);
              }, P;
            }(ii);
            si.prototype.options_ = { children: ["loadProgressBar", "playProgressBar"], barName: "playProgressBar" }, !Fe && !Te && si.prototype.options_.children.splice(1, 0, "mouseTimeDisplay"), ge.registerComponent("SeekBar", si);
            var tn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.handleMouseMove = kt(Qe(I.default(t), t.handleMouseMove), St), t.throttledHandleMouseSeek = kt(Qe(I.default(t), t.handleMouseSeek), St), t.handleMouseUpHandler_ = function(C) {
                  return t.handleMouseUp(C);
                }, t.handleMouseDownHandler_ = function(C) {
                  return t.handleMouseDown(C);
                }, t.enable(), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-progress-control vjs-control" });
              }, u.handleMouseMove = function(e) {
                var t = this.getChild("seekBar");
                if (!!t) {
                  var C = t.getChild("playProgressBar"), G = t.getChild("mouseTimeDisplay");
                  if (!(!C && !G)) {
                    var X = t.el(), $2 = _t(X), te = Et(X, e).x;
                    te = Ar(te, 0, 1), G && G.update($2, te), C && C.update($2, t.getProgress());
                  }
                }
              }, u.handleMouseSeek = function(e) {
                var t = this.getChild("seekBar");
                t && t.handleMouseMove(e);
              }, u.enabled = function() {
                return this.enabled_;
              }, u.disable = function() {
                if (this.children().forEach(function(t) {
                  return t.disable && t.disable();
                }), !!this.enabled() && (this.off(["mousedown", "touchstart"], this.handleMouseDownHandler_), this.off(this.el_, "mousemove", this.handleMouseMove), this.removeListenersAddedOnMousedownAndTouchstart(), this.addClass("disabled"), this.enabled_ = false, this.player_.scrubbing())) {
                  var e = this.getChild("seekBar");
                  this.player_.scrubbing(false), e.videoWasPlaying && Lt(this.player_.play());
                }
              }, u.enable = function() {
                this.children().forEach(function(e) {
                  return e.enable && e.enable();
                }), !this.enabled() && (this.on(["mousedown", "touchstart"], this.handleMouseDownHandler_), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = true);
              }, u.removeListenersAddedOnMousedownAndTouchstart = function() {
                var e = this.el_.ownerDocument;
                this.off(e, "mousemove", this.throttledHandleMouseSeek), this.off(e, "touchmove", this.throttledHandleMouseSeek), this.off(e, "mouseup", this.handleMouseUpHandler_), this.off(e, "touchend", this.handleMouseUpHandler_);
              }, u.handleMouseDown = function(e) {
                var t = this.el_.ownerDocument, C = this.getChild("seekBar");
                C && C.handleMouseDown(e), this.on(t, "mousemove", this.throttledHandleMouseSeek), this.on(t, "touchmove", this.throttledHandleMouseSeek), this.on(t, "mouseup", this.handleMouseUpHandler_), this.on(t, "touchend", this.handleMouseUpHandler_);
              }, u.handleMouseUp = function(e) {
                var t = this.getChild("seekBar");
                t && t.handleMouseUp(e), this.removeListenersAddedOnMousedownAndTouchstart();
              }, P;
            }(ge);
            tn.prototype.options_ = { children: ["seekBar"] }, ge.registerComponent("ProgressControl", tn);
            var rn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on(r, ["enterpictureinpicture", "leavepictureinpicture"], function(C) {
                  return t.handlePictureInPictureChange(C);
                }), t.on(r, ["disablepictureinpicturechanged", "loadedmetadata"], function(C) {
                  return t.handlePictureInPictureEnabledChange(C);
                }), t.on(r, ["loadedmetadata", "audioonlymodechange", "audiopostermodechange"], function() {
                  var C = r.currentType().substring(0, 5) === "audio";
                  C || r.audioPosterMode() || r.audioOnlyMode() ? (r.isInPictureInPicture() && r.exitPictureInPicture(), t.hide()) : t.show();
                }), t.disable(), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-picture-in-picture-control " + T.prototype.buildCSSClass.call(this);
              }, u.handlePictureInPictureEnabledChange = function() {
                L.default.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false ? this.enable() : this.disable();
              }, u.handlePictureInPictureChange = function(e) {
                this.player_.isInPictureInPicture() ? this.controlText("Exit Picture-in-Picture") : this.controlText("Picture-in-Picture"), this.handlePictureInPictureEnabledChange();
              }, u.handleClick = function(e) {
                this.player_.isInPictureInPicture() ? this.player_.exitPictureInPicture() : this.player_.requestPictureInPicture();
              }, P;
            }(bt);
            rn.prototype.controlText_ = "Picture-in-Picture", ge.registerComponent("PictureInPictureToggle", rn);
            var nn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on(r, "fullscreenchange", function(C) {
                  return t.handleFullscreenChange(C);
                }), L.default[r.fsApi_.fullscreenEnabled] === false && t.disable(), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-fullscreen-control " + T.prototype.buildCSSClass.call(this);
              }, u.handleFullscreenChange = function(e) {
                this.player_.isFullscreen() ? this.controlText("Non-Fullscreen") : this.controlText("Fullscreen");
              }, u.handleClick = function(e) {
                this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
              }, P;
            }(bt);
            nn.prototype.controlText_ = "Fullscreen", ge.registerComponent("FullscreenToggle", nn);
            var wa = function(P, u) {
              u.tech_ && !u.tech_.featuresVolumeControl && P.addClass("vjs-hidden"), P.on(u, "loadstart", function() {
                u.tech_.featuresVolumeControl ? P.removeClass("vjs-hidden") : P.addClass("vjs-hidden");
              });
            }, xa = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this, "div", { className: "vjs-volume-level" });
                return e.appendChild(T.prototype.createEl.call(this, "span", { className: "vjs-control-text" })), e;
              }, P;
            }(ge);
            ge.registerComponent("VolumeLevel", xa);
            var Fa = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update = kt(Qe(I.default(t), t.update), St), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-volume-tooltip" }, { "aria-hidden": "true" });
              }, u.update = function(e, t, C, G) {
                if (!C) {
                  var X = pt(this.el_), $2 = pt(this.player_.el()), te = e.width * t;
                  if (!$2 || !X)
                    return;
                  var le = e.left - $2.left + te, J = e.width - te + ($2.right - e.right), pe = X.width / 2;
                  le < pe ? pe += pe - le : J < pe && (pe = J), pe < 0 ? pe = 0 : pe > X.width && (pe = X.width), this.el_.style.right = "-" + pe + "px";
                }
                this.write(G + "%");
              }, u.write = function(e) {
                ce(this.el_, e);
              }, u.updateVolume = function(e, t, C, G, X) {
                var $2 = this;
                this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", function() {
                  $2.update(e, t, C, G.toFixed(0)), X && X();
                });
              }, P;
            }(ge);
            ge.registerComponent("VolumeLevelTooltip", Fa);
            var an = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.update = kt(Qe(I.default(t), t.update), St), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-mouse-display" });
              }, u.update = function(e, t, C) {
                var G = this, X = 100 * t;
                this.getChild("volumeLevelTooltip").updateVolume(e, t, C, X, function() {
                  C ? G.el_.style.bottom = e.height * t + "px" : G.el_.style.left = e.width * t + "px";
                });
              }, P;
            }(ge);
            an.prototype.options_ = { children: ["volumeLevelTooltip"] }, ge.registerComponent("MouseVolumeLevelDisplay", an);
            var Lr = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on("slideractive", function(C) {
                  return t.updateLastVolume_(C);
                }), t.on(r, "volumechange", function(C) {
                  return t.updateARIAAttributes(C);
                }), r.ready(function() {
                  return t.updateARIAAttributes();
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-volume-bar vjs-slider-bar" }, { "aria-label": this.localize("Volume Level"), "aria-live": "polite" });
              }, u.handleMouseDown = function(e) {
                !Tt(e) || T.prototype.handleMouseDown.call(this, e);
              }, u.handleMouseMove = function(e) {
                var t = this.getChild("mouseVolumeLevelDisplay");
                if (t) {
                  var C = this.el(), G = pt(C), X = this.vertical(), $2 = Et(C, e);
                  $2 = X ? $2.y : $2.x, $2 = Ar($2, 0, 1), t.update(G, $2, X);
                }
                !Tt(e) || (this.checkMuted(), this.player_.volume(this.calculateDistance(e)));
              }, u.checkMuted = function() {
                this.player_.muted() && this.player_.muted(false);
              }, u.getPercent = function() {
                return this.player_.muted() ? 0 : this.player_.volume();
              }, u.stepForward = function() {
                this.checkMuted(), this.player_.volume(this.player_.volume() + 0.1);
              }, u.stepBack = function() {
                this.checkMuted(), this.player_.volume(this.player_.volume() - 0.1);
              }, u.updateARIAAttributes = function(e) {
                var t = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                this.el_.setAttribute("aria-valuenow", t), this.el_.setAttribute("aria-valuetext", t + "%");
              }, u.volumeAsPercentage_ = function() {
                return Math.round(this.player_.volume() * 100);
              }, u.updateLastVolume_ = function() {
                var e = this, t = this.player_.volume();
                this.one("sliderinactive", function() {
                  e.player_.volume() === 0 && e.player_.lastVolume_(t);
                });
              }, P;
            }(ii);
            Lr.prototype.options_ = { children: ["volumeLevel"], barName: "volumeLevel" }, !Fe && !Te && Lr.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay"), Lr.prototype.playerEvent = "volumechange", ge.registerComponent("VolumeBar", Lr);
            var sn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e === void 0 && (e = {}), e.vertical = e.vertical || false, (typeof e.volumeBar == "undefined" || ae(e.volumeBar)) && (e.volumeBar = e.volumeBar || {}, e.volumeBar.vertical = e.vertical), t = T.call(this, r, e) || this, wa(I.default(t), r), t.throttledHandleMouseMove = kt(Qe(I.default(t), t.handleMouseMove), St), t.handleMouseUpHandler_ = function(C) {
                  return t.handleMouseUp(C);
                }, t.on("mousedown", function(C) {
                  return t.handleMouseDown(C);
                }), t.on("touchstart", function(C) {
                  return t.handleMouseDown(C);
                }), t.on("mousemove", function(C) {
                  return t.handleMouseMove(C);
                }), t.on(t.volumeBar, ["focus", "slideractive"], function() {
                  t.volumeBar.addClass("vjs-slider-active"), t.addClass("vjs-slider-active"), t.trigger("slideractive");
                }), t.on(t.volumeBar, ["blur", "sliderinactive"], function() {
                  t.volumeBar.removeClass("vjs-slider-active"), t.removeClass("vjs-slider-active"), t.trigger("sliderinactive");
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = "vjs-volume-horizontal";
                return this.options_.vertical && (e = "vjs-volume-vertical"), T.prototype.createEl.call(this, "div", { className: "vjs-volume-control vjs-control " + e });
              }, u.handleMouseDown = function(e) {
                var t = this.el_.ownerDocument;
                this.on(t, "mousemove", this.throttledHandleMouseMove), this.on(t, "touchmove", this.throttledHandleMouseMove), this.on(t, "mouseup", this.handleMouseUpHandler_), this.on(t, "touchend", this.handleMouseUpHandler_);
              }, u.handleMouseUp = function(e) {
                var t = this.el_.ownerDocument;
                this.off(t, "mousemove", this.throttledHandleMouseMove), this.off(t, "touchmove", this.throttledHandleMouseMove), this.off(t, "mouseup", this.handleMouseUpHandler_), this.off(t, "touchend", this.handleMouseUpHandler_);
              }, u.handleMouseMove = function(e) {
                this.volumeBar.handleMouseMove(e);
              }, P;
            }(ge);
            sn.prototype.options_ = { children: ["volumeBar"] }, ge.registerComponent("VolumeControl", sn);
            var Na = function(P, u) {
              u.tech_ && !u.tech_.featuresMuteControl && P.addClass("vjs-hidden"), P.on(u, "loadstart", function() {
                u.tech_.featuresMuteControl ? P.removeClass("vjs-hidden") : P.addClass("vjs-hidden");
              });
            }, on = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, Na(I.default(t), r), t.on(r, ["loadstart", "volumechange"], function(C) {
                  return t.update(C);
                }), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-mute-control " + T.prototype.buildCSSClass.call(this);
              }, u.handleClick = function(e) {
                var t = this.player_.volume(), C = this.player_.lastVolume_();
                if (t === 0) {
                  var G = C < 0.1 ? 0.1 : C;
                  this.player_.volume(G), this.player_.muted(false);
                } else
                  this.player_.muted(!this.player_.muted());
              }, u.update = function(e) {
                this.updateIcon_(), this.updateControlText_();
              }, u.updateIcon_ = function() {
                var e = this.player_.volume(), t = 3;
                Fe && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), e === 0 || this.player_.muted() ? t = 0 : e < 0.33 ? t = 1 : e < 0.67 && (t = 2);
                for (var C = 0; C < 4; C++)
                  Ge(this.el_, "vjs-vol-" + C);
                He(this.el_, "vjs-vol-" + t);
              }, u.updateControlText_ = function() {
                var e = this.player_.muted() || this.player_.volume() === 0, t = e ? "Unmute" : "Mute";
                this.controlText() !== t && this.controlText(t);
              }, P;
            }(bt);
            on.prototype.controlText_ = "Mute", ge.registerComponent("MuteToggle", on);
            var ln = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e === void 0 && (e = {}), typeof e.inline != "undefined" ? e.inline = e.inline : e.inline = true, (typeof e.volumeControl == "undefined" || ae(e.volumeControl)) && (e.volumeControl = e.volumeControl || {}, e.volumeControl.vertical = !e.inline), t = T.call(this, r, e) || this, t.handleKeyPressHandler_ = function(C) {
                  return t.handleKeyPress(C);
                }, t.on(r, ["loadstart"], function(C) {
                  return t.volumePanelState_(C);
                }), t.on(t.muteToggle, "keyup", function(C) {
                  return t.handleKeyPress(C);
                }), t.on(t.volumeControl, "keyup", function(C) {
                  return t.handleVolumeControlKeyUp(C);
                }), t.on("keydown", function(C) {
                  return t.handleKeyPress(C);
                }), t.on("mouseover", function(C) {
                  return t.handleMouseOver(C);
                }), t.on("mouseout", function(C) {
                  return t.handleMouseOut(C);
                }), t.on(t.volumeControl, ["slideractive"], t.sliderActive_), t.on(t.volumeControl, ["sliderinactive"], t.sliderInactive_), t;
              }
              var u = P.prototype;
              return u.sliderActive_ = function() {
                this.addClass("vjs-slider-active");
              }, u.sliderInactive_ = function() {
                this.removeClass("vjs-slider-active");
              }, u.volumePanelState_ = function() {
                this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
              }, u.createEl = function() {
                var e = "vjs-volume-panel-horizontal";
                return this.options_.inline || (e = "vjs-volume-panel-vertical"), T.prototype.createEl.call(this, "div", { className: "vjs-volume-panel vjs-control " + e });
              }, u.dispose = function() {
                this.handleMouseOut(), T.prototype.dispose.call(this);
              }, u.handleVolumeControlKeyUp = function(e) {
                y.default.isEventKey(e, "Esc") && this.muteToggle.focus();
              }, u.handleMouseOver = function(e) {
                this.addClass("vjs-hover"), vt(L.default, "keyup", this.handleKeyPressHandler_);
              }, u.handleMouseOut = function(e) {
                this.removeClass("vjs-hover"), at(L.default, "keyup", this.handleKeyPressHandler_);
              }, u.handleKeyPress = function(e) {
                y.default.isEventKey(e, "Esc") && this.handleMouseOut();
              }, P;
            }(ge);
            ln.prototype.options_ = { children: ["muteToggle", "volumeControl"] }, ge.registerComponent("VolumePanel", ln);
            var un = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, e && (t.menuButton_ = e.menuButton), t.focusedChild_ = -1, t.on("keydown", function(C) {
                  return t.handleKeyDown(C);
                }), t.boundHandleBlur_ = function(C) {
                  return t.handleBlur(C);
                }, t.boundHandleTapClick_ = function(C) {
                  return t.handleTapClick(C);
                }, t;
              }
              var u = P.prototype;
              return u.addEventListenerForItem = function(e) {
                e instanceof ge && (this.on(e, "blur", this.boundHandleBlur_), this.on(e, ["tap", "click"], this.boundHandleTapClick_));
              }, u.removeEventListenerForItem = function(e) {
                e instanceof ge && (this.off(e, "blur", this.boundHandleBlur_), this.off(e, ["tap", "click"], this.boundHandleTapClick_));
              }, u.removeChild = function(e) {
                typeof e == "string" && (e = this.getChild(e)), this.removeEventListenerForItem(e), T.prototype.removeChild.call(this, e);
              }, u.addItem = function(e) {
                var t = this.addChild(e);
                t && this.addEventListenerForItem(t);
              }, u.createEl = function() {
                var e = this.options_.contentElType || "ul";
                this.contentEl_ = re(e, { className: "vjs-menu-content" }), this.contentEl_.setAttribute("role", "menu");
                var t = T.prototype.createEl.call(this, "div", { append: this.contentEl_, className: "vjs-menu" });
                return t.appendChild(this.contentEl_), vt(t, "click", function(C) {
                  C.preventDefault(), C.stopImmediatePropagation();
                }), t;
              }, u.dispose = function() {
                this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, T.prototype.dispose.call(this);
              }, u.handleBlur = function(e) {
                var t = e.relatedTarget || L.default.activeElement;
                if (!this.children().some(function(G) {
                  return G.el() === t;
                })) {
                  var C = this.menuButton_;
                  C && C.buttonPressed_ && t !== C.el().firstChild && C.unpressButton();
                }
              }, u.handleTapClick = function(e) {
                if (this.menuButton_) {
                  this.menuButton_.unpressButton();
                  var t = this.children();
                  if (!Array.isArray(t))
                    return;
                  var C = t.filter(function(G) {
                    return G.el() === e.target;
                  })[0];
                  if (!C)
                    return;
                  C.name() !== "CaptionSettingsMenuItem" && this.menuButton_.focus();
                }
              }, u.handleKeyDown = function(e) {
                y.default.isEventKey(e, "Left") || y.default.isEventKey(e, "Down") ? (e.preventDefault(), e.stopPropagation(), this.stepForward()) : (y.default.isEventKey(e, "Right") || y.default.isEventKey(e, "Up")) && (e.preventDefault(), e.stopPropagation(), this.stepBack());
              }, u.stepForward = function() {
                var e = 0;
                this.focusedChild_ !== void 0 && (e = this.focusedChild_ + 1), this.focus(e);
              }, u.stepBack = function() {
                var e = 0;
                this.focusedChild_ !== void 0 && (e = this.focusedChild_ - 1), this.focus(e);
              }, u.focus = function(e) {
                e === void 0 && (e = 0);
                var t = this.children().slice(), C = t.length && t[0].hasClass("vjs-menu-title");
                C && t.shift(), t.length > 0 && (e < 0 ? e = 0 : e >= t.length && (e = t.length - 1), this.focusedChild_ = e, t[e].el_.focus());
              }, P;
            }(ge);
            ge.registerComponent("Menu", un);
            var oi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                e === void 0 && (e = {}), t = T.call(this, r, e) || this, t.menuButton_ = new bt(r, e), t.menuButton_.controlText(t.controlText_), t.menuButton_.el_.setAttribute("aria-haspopup", "true");
                var C = bt.prototype.buildCSSClass();
                t.menuButton_.el_.className = t.buildCSSClass() + " " + C, t.menuButton_.removeClass("vjs-control"), t.addChild(t.menuButton_), t.update(), t.enabled_ = true;
                var G = function($2) {
                  return t.handleClick($2);
                };
                return t.handleMenuKeyUp_ = function(X) {
                  return t.handleMenuKeyUp(X);
                }, t.on(t.menuButton_, "tap", G), t.on(t.menuButton_, "click", G), t.on(t.menuButton_, "keydown", function(X) {
                  return t.handleKeyDown(X);
                }), t.on(t.menuButton_, "mouseenter", function() {
                  t.addClass("vjs-hover"), t.menu.show(), vt(L.default, "keyup", t.handleMenuKeyUp_);
                }), t.on("mouseleave", function(X) {
                  return t.handleMouseLeave(X);
                }), t.on("keydown", function(X) {
                  return t.handleSubmenuKeyDown(X);
                }), t;
              }
              var u = P.prototype;
              return u.update = function() {
                var e = this.createMenu();
                this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = e, this.addChild(e), this.buttonPressed_ = false, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? (this.hide(), this.menu.contentEl_.removeAttribute("role")) : (this.show(), this.menu.contentEl_.setAttribute("role", "menu"));
              }, u.createMenu = function() {
                var e = new un(this.player_, { menuButton: this });
                if (this.hideThreshold_ = 0, this.options_.title) {
                  var t = re("li", { className: "vjs-menu-title", textContent: Je(this.options_.title), tabIndex: -1 }), C = new ge(this.player_, { el: t });
                  e.addItem(C);
                }
                if (this.items = this.createItems(), this.items)
                  for (var G = 0; G < this.items.length; G++)
                    e.addItem(this.items[G]);
                return e;
              }, u.createItems = function() {
              }, u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: this.buildWrapperCSSClass() }, {});
              }, u.buildWrapperCSSClass = function() {
                var e = "vjs-menu-button";
                this.options_.inline === true ? e += "-inline" : e += "-popup";
                var t = bt.prototype.buildCSSClass();
                return "vjs-menu-button " + e + " " + t + " " + T.prototype.buildCSSClass.call(this);
              }, u.buildCSSClass = function() {
                var e = "vjs-menu-button";
                return this.options_.inline === true ? e += "-inline" : e += "-popup", "vjs-menu-button " + e + " " + T.prototype.buildCSSClass.call(this);
              }, u.controlText = function(e, t) {
                return t === void 0 && (t = this.menuButton_.el()), this.menuButton_.controlText(e, t);
              }, u.dispose = function() {
                this.handleMouseLeave(), T.prototype.dispose.call(this);
              }, u.handleClick = function(e) {
                this.buttonPressed_ ? this.unpressButton() : this.pressButton();
              }, u.handleMouseLeave = function(e) {
                this.removeClass("vjs-hover"), at(L.default, "keyup", this.handleMenuKeyUp_);
              }, u.focus = function() {
                this.menuButton_.focus();
              }, u.blur = function() {
                this.menuButton_.blur();
              }, u.handleKeyDown = function(e) {
                y.default.isEventKey(e, "Esc") || y.default.isEventKey(e, "Tab") ? (this.buttonPressed_ && this.unpressButton(), y.default.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus())) : (y.default.isEventKey(e, "Up") || y.default.isEventKey(e, "Down")) && (this.buttonPressed_ || (e.preventDefault(), this.pressButton()));
              }, u.handleMenuKeyUp = function(e) {
                (y.default.isEventKey(e, "Esc") || y.default.isEventKey(e, "Tab")) && this.removeClass("vjs-hover");
              }, u.handleSubmenuKeyPress = function(e) {
                this.handleSubmenuKeyDown(e);
              }, u.handleSubmenuKeyDown = function(e) {
                (y.default.isEventKey(e, "Esc") || y.default.isEventKey(e, "Tab")) && (this.buttonPressed_ && this.unpressButton(), y.default.isEventKey(e, "Tab") || (e.preventDefault(), this.menuButton_.focus()));
              }, u.pressButton = function() {
                if (this.enabled_) {
                  if (this.buttonPressed_ = true, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), Fe && Ze())
                    return;
                  this.menu.focus();
                }
              }, u.unpressButton = function() {
                this.enabled_ && (this.buttonPressed_ = false, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
              }, u.disable = function() {
                this.unpressButton(), this.enabled_ = false, this.addClass("vjs-disabled"), this.menuButton_.disable();
              }, u.enable = function() {
                this.enabled_ = true, this.removeClass("vjs-disabled"), this.menuButton_.enable();
              }, P;
            }(ge);
            ge.registerComponent("MenuButton", oi);
            var li = function(T) {
              S.default(P, T);
              function P(u, r) {
                var e, t = r.tracks;
                if (e = T.call(this, u, r) || this, e.items.length <= 1 && e.hide(), !t)
                  return I.default(e);
                var C = Qe(I.default(e), e.update);
                return t.addEventListener("removetrack", C), t.addEventListener("addtrack", C), t.addEventListener("labelchange", C), e.player_.on("ready", C), e.player_.on("dispose", function() {
                  t.removeEventListener("removetrack", C), t.removeEventListener("addtrack", C), t.removeEventListener("labelchange", C);
                }), e;
              }
              return P;
            }(oi);
            ge.registerComponent("TrackButton", li);
            var Ba = ["Tab", "Esc", "Up", "Down", "Right", "Left"], cr = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.selectable = e.selectable, t.isSelected_ = e.selected || false, t.multiSelectable = e.multiSelectable, t.selected(t.isSelected_), t.selectable ? t.multiSelectable ? t.el_.setAttribute("role", "menuitemcheckbox") : t.el_.setAttribute("role", "menuitemradio") : t.el_.setAttribute("role", "menuitem"), t;
              }
              var u = P.prototype;
              return u.createEl = function(e, t, C) {
                this.nonIconControl = true;
                var G = T.prototype.createEl.call(this, "li", q({ className: "vjs-menu-item", tabIndex: -1 }, t), C);
                return G.replaceChild(re("span", { className: "vjs-menu-item-text", textContent: this.localize(this.options_.label) }), G.querySelector(".vjs-icon-placeholder")), G;
              }, u.handleKeyDown = function(e) {
                Ba.some(function(t) {
                  return y.default.isEventKey(e, t);
                }) || T.prototype.handleKeyDown.call(this, e);
              }, u.handleClick = function(e) {
                this.selected(true);
              }, u.selected = function(e) {
                this.selectable && (e ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), this.controlText(", selected"), this.isSelected_ = true) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), this.isSelected_ = false));
              }, P;
            }(Cr);
            ge.registerComponent("MenuItem", cr);
            var dr = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = e.track, G = r.textTracks();
                e.label = C.label || C.language || "Unknown", e.selected = C.mode === "showing", t = T.call(this, r, e) || this, t.track = C, t.kinds = (e.kinds || [e.kind || t.track.kind]).filter(Boolean);
                var X = function() {
                  for (var J = arguments.length, pe = new Array(J), Ie = 0; Ie < J; Ie++)
                    pe[Ie] = arguments[Ie];
                  t.handleTracksChange.apply(I.default(t), pe);
                }, $2 = function() {
                  for (var J = arguments.length, pe = new Array(J), Ie = 0; Ie < J; Ie++)
                    pe[Ie] = arguments[Ie];
                  t.handleSelectedLanguageChange.apply(I.default(t), pe);
                };
                if (r.on(["loadstart", "texttrackchange"], X), G.addEventListener("change", X), G.addEventListener("selectedlanguagechange", $2), t.on("dispose", function() {
                  r.off(["loadstart", "texttrackchange"], X), G.removeEventListener("change", X), G.removeEventListener("selectedlanguagechange", $2);
                }), G.onchange === void 0) {
                  var te;
                  t.on(["tap", "click"], function() {
                    if (typeof E.default.Event != "object")
                      try {
                        te = new E.default.Event("change");
                      } catch (le) {
                      }
                    te || (te = L.default.createEvent("Event"), te.initEvent("change", true, true)), G.dispatchEvent(te);
                  });
                }
                return t.handleTracksChange(), t;
              }
              var u = P.prototype;
              return u.handleClick = function(e) {
                var t = this.track, C = this.player_.textTracks();
                if (T.prototype.handleClick.call(this, e), !!C)
                  for (var G = 0; G < C.length; G++) {
                    var X = C[G];
                    this.kinds.indexOf(X.kind) !== -1 && (X === t ? X.mode !== "showing" && (X.mode = "showing") : X.mode !== "disabled" && (X.mode = "disabled"));
                  }
              }, u.handleTracksChange = function(e) {
                var t = this.track.mode === "showing";
                t !== this.isSelected_ && this.selected(t);
              }, u.handleSelectedLanguageChange = function(e) {
                if (this.track.mode === "showing") {
                  var t = this.player_.cache_.selectedLanguage;
                  if (t && t.enabled && t.language === this.track.language && t.kind !== this.track.kind)
                    return;
                  this.player_.cache_.selectedLanguage = { enabled: true, language: this.track.language, kind: this.track.kind };
                }
              }, u.dispose = function() {
                this.track = null, T.prototype.dispose.call(this);
              }, P;
            }(cr);
            ge.registerComponent("TextTrackMenuItem", dr);
            var cn = function(T) {
              S.default(P, T);
              function P(r, e) {
                return e.track = { player: r, kind: e.kind, kinds: e.kinds, default: false, mode: "disabled" }, e.kinds || (e.kinds = [e.kind]), e.label ? e.track.label = e.label : e.track.label = e.kinds.join(" and ") + " off", e.selectable = true, e.multiSelectable = false, T.call(this, r, e) || this;
              }
              var u = P.prototype;
              return u.handleTracksChange = function(e) {
                for (var t = this.player().textTracks(), C = true, G = 0, X = t.length; G < X; G++) {
                  var $2 = t[G];
                  if (this.options_.kinds.indexOf($2.kind) > -1 && $2.mode === "showing") {
                    C = false;
                    break;
                  }
                }
                C !== this.isSelected_ && this.selected(C);
              }, u.handleSelectedLanguageChange = function(e) {
                for (var t = this.player().textTracks(), C = true, G = 0, X = t.length; G < X; G++) {
                  var $2 = t[G];
                  if (["captions", "descriptions", "subtitles"].indexOf($2.kind) > -1 && $2.mode === "showing") {
                    C = false;
                    break;
                  }
                }
                C && (this.player_.cache_.selectedLanguage = { enabled: false });
              }, P;
            }(dr);
            ge.registerComponent("OffTextTrackMenuItem", cn);
            var er = function(T) {
              S.default(P, T);
              function P(r, e) {
                return e === void 0 && (e = {}), e.tracks = r.textTracks(), T.call(this, r, e) || this;
              }
              var u = P.prototype;
              return u.createItems = function(e, t) {
                e === void 0 && (e = []), t === void 0 && (t = dr);
                var C;
                this.label_ && (C = this.label_ + " off"), e.push(new cn(this.player_, { kinds: this.kinds_, kind: this.kind_, label: C })), this.hideThreshold_ += 1;
                var G = this.player_.textTracks();
                Array.isArray(this.kinds_) || (this.kinds_ = [this.kind_]);
                for (var X = 0; X < G.length; X++) {
                  var $2 = G[X];
                  if (this.kinds_.indexOf($2.kind) > -1) {
                    var te = new t(this.player_, { track: $2, kinds: this.kinds_, kind: this.kind_, selectable: true, multiSelectable: false });
                    te.addClass("vjs-" + $2.kind + "-menu-item"), e.push(te);
                  }
                }
                return e;
              }, P;
            }(li);
            ge.registerComponent("TextTrackButton", er);
            var dn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = e.track, G = e.cue, X = r.currentTime();
                return e.selectable = true, e.multiSelectable = false, e.label = G.text, e.selected = G.startTime <= X && X < G.endTime, t = T.call(this, r, e) || this, t.track = C, t.cue = G, t;
              }
              var u = P.prototype;
              return u.handleClick = function(e) {
                T.prototype.handleClick.call(this), this.player_.currentTime(this.cue.startTime);
              }, P;
            }(cr);
            ge.registerComponent("ChaptersTrackMenuItem", dn);
            var ui = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                var C;
                return C = T.call(this, r, e, t) || this, C.selectCurrentItem_ = function() {
                  C.items.forEach(function(G) {
                    G.selected(C.track_.activeCues[0] === G.cue);
                  });
                }, C;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-chapters-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-chapters-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, u.update = function(e) {
                if (!(e && e.track && e.track.kind !== "chapters")) {
                  var t = this.findChaptersTrack();
                  t !== this.track_ ? (this.setTrack(t), T.prototype.update.call(this)) : (!this.items || t && t.cues && t.cues.length !== this.items.length) && T.prototype.update.call(this);
                }
              }, u.setTrack = function(e) {
                if (this.track_ !== e) {
                  if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
                    var t = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                    t && t.removeEventListener("load", this.updateHandler_), this.track_.removeEventListener("cuechange", this.selectCurrentItem_), this.track_ = null;
                  }
                  if (this.track_ = e, this.track_) {
                    this.track_.mode = "hidden";
                    var C = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                    C && C.addEventListener("load", this.updateHandler_), this.track_.addEventListener("cuechange", this.selectCurrentItem_);
                  }
                }
              }, u.findChaptersTrack = function() {
                for (var e = this.player_.textTracks() || [], t = e.length - 1; t >= 0; t--) {
                  var C = e[t];
                  if (C.kind === this.kind_)
                    return C;
                }
              }, u.getMenuCaption = function() {
                return this.track_ && this.track_.label ? this.track_.label : this.localize(Je(this.kind_));
              }, u.createMenu = function() {
                return this.options_.title = this.getMenuCaption(), T.prototype.createMenu.call(this);
              }, u.createItems = function() {
                var e = [];
                if (!this.track_)
                  return e;
                var t = this.track_.cues;
                if (!t)
                  return e;
                for (var C = 0, G = t.length; C < G; C++) {
                  var X = t[C], $2 = new dn(this.player_, { track: this.track_, cue: X });
                  e.push($2);
                }
                return e;
              }, P;
            }(er);
            ui.prototype.kind_ = "chapters", ui.prototype.controlText_ = "Chapters", ge.registerComponent("ChaptersButton", ui);
            var ci = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                var C;
                C = T.call(this, r, e, t) || this;
                var G = r.textTracks(), X = Qe(I.default(C), C.handleTracksChange);
                return G.addEventListener("change", X), C.on("dispose", function() {
                  G.removeEventListener("change", X);
                }), C;
              }
              var u = P.prototype;
              return u.handleTracksChange = function(e) {
                for (var t = this.player().textTracks(), C = false, G = 0, X = t.length; G < X; G++) {
                  var $2 = t[G];
                  if ($2.kind !== this.kind_ && $2.mode === "showing") {
                    C = true;
                    break;
                  }
                }
                C ? this.disable() : this.enable();
              }, u.buildCSSClass = function() {
                return "vjs-descriptions-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-descriptions-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, P;
            }(er);
            ci.prototype.kind_ = "descriptions", ci.prototype.controlText_ = "Descriptions", ge.registerComponent("DescriptionsButton", ci);
            var di = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                return T.call(this, r, e, t) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-subtitles-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-subtitles-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, P;
            }(er);
            di.prototype.kind_ = "subtitles", di.prototype.controlText_ = "Subtitles", ge.registerComponent("SubtitlesButton", di);
            var fi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e.track = { player: r, kind: e.kind, label: e.kind + " settings", selectable: false, default: false, mode: "disabled" }, e.selectable = false, e.name = "CaptionSettingsMenuItem", t = T.call(this, r, e) || this, t.addClass("vjs-texttrack-settings"), t.controlText(", opens " + e.kind + " settings dialog"), t;
              }
              var u = P.prototype;
              return u.handleClick = function(e) {
                this.player().getChild("textTrackSettings").open();
              }, P;
            }(dr);
            ge.registerComponent("CaptionSettingsMenuItem", fi);
            var hi = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                return T.call(this, r, e, t) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-captions-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-captions-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, u.createItems = function() {
                var e = [];
                return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (e.push(new fi(this.player_, { kind: this.kind_ })), this.hideThreshold_ += 1), T.prototype.createItems.call(this, e);
              }, P;
            }(er);
            hi.prototype.kind_ = "captions", hi.prototype.controlText_ = "Captions", ge.registerComponent("CaptionsButton", hi);
            var fn3 = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function(e, t, C) {
                var G = T.prototype.createEl.call(this, e, t, C), X = G.querySelector(".vjs-menu-item-text");
                return this.options_.track.kind === "captions" && (X.appendChild(re("span", { className: "vjs-icon-placeholder" }, { "aria-hidden": true })), X.appendChild(re("span", { className: "vjs-control-text", textContent: " " + this.localize("Captions") }))), G;
              }, P;
            }(dr);
            ge.registerComponent("SubsCapsMenuItem", fn3);
            var vi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e === void 0 && (e = {}), t = T.call(this, r, e) || this, t.label_ = "subtitles", ["en", "en-us", "en-ca", "fr-ca"].indexOf(t.player_.language_) > -1 && (t.label_ = "captions"), t.menuButton_.controlText(Je(t.label_)), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-subs-caps-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-subs-caps-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, u.createItems = function() {
                var e = [];
                return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (e.push(new fi(this.player_, { kind: this.label_ })), this.hideThreshold_ += 1), e = T.prototype.createItems.call(this, e, fn3), e;
              }, P;
            }(er);
            vi.prototype.kinds_ = ["captions", "subtitles"], vi.prototype.controlText_ = "Subtitles", ge.registerComponent("SubsCapsButton", vi);
            var hn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = e.track, G = r.audioTracks();
                e.label = C.label || C.language || "Unknown", e.selected = C.enabled, t = T.call(this, r, e) || this, t.track = C, t.addClass("vjs-" + C.kind + "-menu-item");
                var X = function() {
                  for (var te = arguments.length, le = new Array(te), J = 0; J < te; J++)
                    le[J] = arguments[J];
                  t.handleTracksChange.apply(I.default(t), le);
                };
                return G.addEventListener("change", X), t.on("dispose", function() {
                  G.removeEventListener("change", X);
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function(e, t, C) {
                var G = T.prototype.createEl.call(this, e, t, C), X = G.querySelector(".vjs-menu-item-text");
                return this.options_.track.kind === "main-desc" && (X.appendChild(re("span", { className: "vjs-icon-placeholder" }, { "aria-hidden": true })), X.appendChild(re("span", { className: "vjs-control-text", textContent: " " + this.localize("Descriptions") }))), G;
              }, u.handleClick = function(e) {
                if (T.prototype.handleClick.call(this, e), this.track.enabled = true, this.player_.tech_.featuresNativeAudioTracks)
                  for (var t = this.player_.audioTracks(), C = 0; C < t.length; C++) {
                    var G = t[C];
                    G !== this.track && (G.enabled = G === this.track);
                  }
              }, u.handleTracksChange = function(e) {
                this.selected(this.track.enabled);
              }, P;
            }(cr);
            ge.registerComponent("AudioTrackMenuItem", hn);
            var vn = function(T) {
              S.default(P, T);
              function P(r, e) {
                return e === void 0 && (e = {}), e.tracks = r.audioTracks(), T.call(this, r, e) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-audio-button " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-audio-button " + T.prototype.buildWrapperCSSClass.call(this);
              }, u.createItems = function(e) {
                e === void 0 && (e = []), this.hideThreshold_ = 1;
                for (var t = this.player_.audioTracks(), C = 0; C < t.length; C++) {
                  var G = t[C];
                  e.push(new hn(this.player_, { track: G, selectable: true, multiSelectable: false }));
                }
                return e;
              }, P;
            }(li);
            vn.prototype.controlText_ = "Audio Track", ge.registerComponent("AudioTrackButton", vn);
            var pi = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = e.rate, G = parseFloat(C, 10);
                return e.label = C, e.selected = G === r.playbackRate(), e.selectable = true, e.multiSelectable = false, t = T.call(this, r, e) || this, t.label = C, t.rate = G, t.on(r, "ratechange", function(X) {
                  return t.update(X);
                }), t;
              }
              var u = P.prototype;
              return u.handleClick = function(e) {
                T.prototype.handleClick.call(this), this.player().playbackRate(this.rate);
              }, u.update = function(e) {
                this.selected(this.player().playbackRate() === this.rate);
              }, P;
            }(cr);
            pi.prototype.contentElType = "button", ge.registerComponent("PlaybackRateMenuItem", pi);
            var pn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.menuButton_.el_.setAttribute("aria-describedby", t.labelElId_), t.updateVisibility(), t.updateLabel(), t.on(r, "loadstart", function(C) {
                  return t.updateVisibility(C);
                }), t.on(r, "ratechange", function(C) {
                  return t.updateLabel(C);
                }), t.on(r, "playbackrateschange", function(C) {
                  return t.handlePlaybackRateschange(C);
                }), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                var e = T.prototype.createEl.call(this);
                return this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_, this.labelEl_ = re("div", { className: "vjs-playback-rate-value", id: this.labelElId_, textContent: "1x" }), e.appendChild(this.labelEl_), e;
              }, u.dispose = function() {
                this.labelEl_ = null, T.prototype.dispose.call(this);
              }, u.buildCSSClass = function() {
                return "vjs-playback-rate " + T.prototype.buildCSSClass.call(this);
              }, u.buildWrapperCSSClass = function() {
                return "vjs-playback-rate " + T.prototype.buildWrapperCSSClass.call(this);
              }, u.createItems = function() {
                for (var e = this.playbackRates(), t = [], C = e.length - 1; C >= 0; C--)
                  t.push(new pi(this.player(), { rate: e[C] + "x" }));
                return t;
              }, u.updateARIAAttributes = function() {
                this.el().setAttribute("aria-valuenow", this.player().playbackRate());
              }, u.handleClick = function(e) {
                var t = this.player().playbackRate(), C = this.playbackRates(), G = C.indexOf(t), X = (G + 1) % C.length;
                this.player().playbackRate(C[X]);
              }, u.handlePlaybackRateschange = function(e) {
                this.update();
              }, u.playbackRates = function() {
                var e = this.player();
                return e.playbackRates && e.playbackRates() || [];
              }, u.playbackRateSupported = function() {
                return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
              }, u.updateVisibility = function(e) {
                this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
              }, u.updateLabel = function(e) {
                this.playbackRateSupported() && (this.labelEl_.textContent = this.player().playbackRate() + "x");
              }, P;
            }(oi);
            pn.prototype.controlText_ = "Playback Rate", ge.registerComponent("PlaybackRateMenuButton", pn);
            var gn = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-spacer " + T.prototype.buildCSSClass.call(this);
              }, u.createEl = function(e, t, C) {
                return e === void 0 && (e = "div"), t === void 0 && (t = {}), C === void 0 && (C = {}), t.className || (t.className = this.buildCSSClass()), T.prototype.createEl.call(this, e, t, C);
              }, P;
            }(ge);
            ge.registerComponent("Spacer", gn);
            var Ua = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-custom-control-spacer " + T.prototype.buildCSSClass.call(this);
              }, u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: this.buildCSSClass(), textContent: "\xA0" });
              }, P;
            }(gn);
            ge.registerComponent("CustomControlSpacer", Ua);
            var Dr = function(T) {
              S.default(P, T);
              function P() {
                return T.apply(this, arguments) || this;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "div", { className: "vjs-control-bar", dir: "ltr" });
              }, P;
            }(ge);
            Dr.prototype.options_ = { children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"] }, "exitPictureInPicture" in L.default && Dr.prototype.options_.children.splice(Dr.prototype.options_.children.length - 1, 0, "pictureInPictureToggle"), ge.registerComponent("ControlBar", Dr);
            var mn = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return t = T.call(this, r, e) || this, t.on(r, "error", function(C) {
                  return t.open(C);
                }), t;
              }
              var u = P.prototype;
              return u.buildCSSClass = function() {
                return "vjs-error-display " + T.prototype.buildCSSClass.call(this);
              }, u.content = function() {
                var e = this.player().error();
                return e ? this.localize(e.message) : "";
              }, P;
            }(Xt);
            mn.prototype.options_ = M.default({}, Xt.prototype.options_, { pauseOnOpen: false, fillAlways: true, temporary: false, uncloseable: true }), ge.registerComponent("ErrorDisplay", mn);
            var gi = "vjs-text-track-settings", yn = ["#000", "Black"], _n = ["#00F", "Blue"], En = ["#0FF", "Cyan"], Tn = ["#0F0", "Green"], Sn = ["#F0F", "Magenta"], bn = ["#F00", "Red"], Cn = ["#FFF", "White"], An = ["#FF0", "Yellow"], mi = ["1", "Opaque"], yi = ["0.5", "Semi-Transparent"], Pn = ["0", "Transparent"], Wt = { backgroundColor: { selector: ".vjs-bg-color > select", id: "captions-background-color-%s", label: "Color", options: [yn, Cn, bn, Tn, _n, An, Sn, En] }, backgroundOpacity: { selector: ".vjs-bg-opacity > select", id: "captions-background-opacity-%s", label: "Transparency", options: [mi, yi, Pn] }, color: { selector: ".vjs-fg-color > select", id: "captions-foreground-color-%s", label: "Color", options: [Cn, yn, bn, Tn, _n, An, Sn, En] }, edgeStyle: { selector: ".vjs-edge-style > select", id: "%s", label: "Text Edge Style", options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]] }, fontFamily: { selector: ".vjs-font-family > select", id: "captions-font-family-%s", label: "Font Family", options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]] }, fontPercent: { selector: ".vjs-font-percent > select", id: "captions-font-size-%s", label: "Font Size", options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]], default: 2, parser: function(P) {
              return P === "1.00" ? null : Number(P);
            } }, textOpacity: { selector: ".vjs-text-opacity > select", id: "captions-foreground-opacity-%s", label: "Transparency", options: [mi, yi] }, windowColor: { selector: ".vjs-window-color > select", id: "captions-window-color-%s", label: "Color" }, windowOpacity: { selector: ".vjs-window-opacity > select", id: "captions-window-opacity-%s", label: "Transparency", options: [Pn, yi, mi] } };
            Wt.windowColor.options = Wt.backgroundColor.options;
            function Ln(T, P) {
              if (P && (T = P(T)), T && T !== "none")
                return T;
            }
            function Ka(T, P) {
              var u = T.options[T.options.selectedIndex].value;
              return Ln(u, P);
            }
            function ja(T, P, u) {
              if (!!P) {
                for (var r = 0; r < T.options.length; r++)
                  if (Ln(T.options[r].value, u) === P) {
                    T.selectedIndex = r;
                    break;
                  }
              }
            }
            var Ha = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                return e.temporary = false, t = T.call(this, r, e) || this, t.updateDisplay = t.updateDisplay.bind(I.default(t)), t.fill(), t.hasBeenOpened_ = t.hasBeenFilled_ = true, t.endDialog = re("p", { className: "vjs-control-text", textContent: t.localize("End of dialog window.") }), t.el().appendChild(t.endDialog), t.setDefaults(), e.persistTextTrackSettings === void 0 && (t.options_.persistTextTrackSettings = t.options_.playerOptions.persistTextTrackSettings), t.on(t.$(".vjs-done-button"), "click", function() {
                  t.saveSettings(), t.close();
                }), t.on(t.$(".vjs-default-button"), "click", function() {
                  t.setDefaults(), t.updateDisplay();
                }), z(Wt, function(C) {
                  t.on(t.$(C.selector), "change", t.updateDisplay);
                }), t.options_.persistTextTrackSettings && t.restoreSettings(), t;
              }
              var u = P.prototype;
              return u.dispose = function() {
                this.endDialog = null, T.prototype.dispose.call(this);
              }, u.createElSelect_ = function(e, t, C) {
                var G = this;
                t === void 0 && (t = ""), C === void 0 && (C = "label");
                var X = Wt[e], $2 = X.id.replace("%s", this.id_), te = [t, $2].join(" ").trim();
                return ["<" + C + ' id="' + $2 + '" class="' + (C === "label" ? "vjs-label" : "") + '">', this.localize(X.label), "</" + C + ">", '<select aria-labelledby="' + te + '">'].concat(X.options.map(function(le) {
                  var J = $2 + "-" + le[1].replace(/\W+/g, "");
                  return ['<option id="' + J + '" value="' + le[0] + '" ', 'aria-labelledby="' + te + " " + J + '">', G.localize(le[1]), "</option>"].join("");
                })).concat("</select>").join("");
              }, u.createElFgColor_ = function() {
                var e = "captions-text-legend-" + this.id_;
                return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", e), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", e), "</span>", "</fieldset>"].join("");
              }, u.createElBgColor_ = function() {
                var e = "captions-background-" + this.id_;
                return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", e), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", e), "</span>", "</fieldset>"].join("");
              }, u.createElWinColor_ = function() {
                var e = "captions-window-" + this.id_;
                return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + e + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", e), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", e), "</span>", "</fieldset>"].join("");
              }, u.createElColors_ = function() {
                return re("div", { className: "vjs-track-settings-colors", innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("") });
              }, u.createElFont_ = function() {
                return re("div", { className: "vjs-track-settings-font", innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("") });
              }, u.createElControls_ = function() {
                var e = this.localize("restore all settings to the default values");
                return re("div", { className: "vjs-track-settings-controls", innerHTML: ['<button type="button" class="vjs-default-button" title="' + e + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + e + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("") });
              }, u.content = function() {
                return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
              }, u.label = function() {
                return this.localize("Caption Settings Dialog");
              }, u.description = function() {
                return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
              }, u.buildCSSClass = function() {
                return T.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
              }, u.getValues = function() {
                var e = this;
                return Q(Wt, function(t, C, G) {
                  var X = Ka(e.$(C.selector), C.parser);
                  return X !== void 0 && (t[G] = X), t;
                }, {});
              }, u.setValues = function(e) {
                var t = this;
                z(Wt, function(C, G) {
                  ja(t.$(C.selector), e[G], C.parser);
                });
              }, u.setDefaults = function() {
                var e = this;
                z(Wt, function(t) {
                  var C = t.hasOwnProperty("default") ? t.default : 0;
                  e.$(t.selector).selectedIndex = C;
                });
              }, u.restoreSettings = function() {
                var e;
                try {
                  e = JSON.parse(E.default.localStorage.getItem(gi));
                } catch (t) {
                  K.warn(t);
                }
                e && this.setValues(e);
              }, u.saveSettings = function() {
                if (!!this.options_.persistTextTrackSettings) {
                  var e = this.getValues();
                  try {
                    Object.keys(e).length ? E.default.localStorage.setItem(gi, JSON.stringify(e)) : E.default.localStorage.removeItem(gi);
                  } catch (t) {
                    K.warn(t);
                  }
                }
              }, u.updateDisplay = function() {
                var e = this.player_.getChild("textTrackDisplay");
                e && e.updateDisplay();
              }, u.conditionalBlur_ = function() {
                this.previouslyActiveEl_ = null;
                var e = this.player_.controlBar, t = e && e.subsCapsButton, C = e && e.captionsButton;
                t ? t.focus() : C && C.focus();
              }, P;
            }(Xt);
            ge.registerComponent("TextTrackSettings", Ha);
            var Wa = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = e.ResizeObserver || E.default.ResizeObserver;
                e.ResizeObserver === null && (C = false);
                var G = $e({ createEl: !C, reportTouchActivity: false }, e);
                return t = T.call(this, r, G) || this, t.ResizeObserver = e.ResizeObserver || E.default.ResizeObserver, t.loadListener_ = null, t.resizeObserver_ = null, t.debouncedHandler_ = jn(function() {
                  t.resizeHandler();
                }, 100, false, I.default(t)), C ? (t.resizeObserver_ = new t.ResizeObserver(t.debouncedHandler_), t.resizeObserver_.observe(r.el())) : (t.loadListener_ = function() {
                  if (!(!t.el_ || !t.el_.contentWindow)) {
                    var X = t.debouncedHandler_, $2 = t.unloadListener_ = function() {
                      at(this, "resize", X), at(this, "unload", $2), $2 = null;
                    };
                    vt(t.el_.contentWindow, "unload", $2), vt(t.el_.contentWindow, "resize", X);
                  }
                }, t.one("load", t.loadListener_)), t;
              }
              var u = P.prototype;
              return u.createEl = function() {
                return T.prototype.createEl.call(this, "iframe", { className: "vjs-resize-manager", tabIndex: -1, title: this.localize("No content") }, { "aria-hidden": "true" });
              }, u.resizeHandler = function() {
                !this.player_ || !this.player_.trigger || this.player_.trigger("playerresize");
              }, u.dispose = function() {
                this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, T.prototype.dispose.call(this);
              }, P;
            }(ge);
            ge.registerComponent("ResizeManager", Wa);
            var Ga = { trackingThreshold: 20, liveTolerance: 15 }, Va = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t, C = $e(Ga, e, { createEl: false });
                return t = T.call(this, r, C) || this, t.handleVisibilityChange_ = function(G) {
                  return t.handleVisibilityChange(G);
                }, t.trackLiveHandler_ = function() {
                  return t.trackLive_();
                }, t.handlePlay_ = function(G) {
                  return t.handlePlay(G);
                }, t.handleFirstTimeupdate_ = function(G) {
                  return t.handleFirstTimeupdate(G);
                }, t.handleSeeked_ = function(G) {
                  return t.handleSeeked(G);
                }, t.seekToLiveEdge_ = function(G) {
                  return t.seekToLiveEdge(G);
                }, t.reset_(), t.on(t.player_, "durationchange", function(G) {
                  return t.handleDurationchange(G);
                }), t.on(t.player_, "canplay", function() {
                  return t.toggleTracking();
                }), ve && "hidden" in L.default && "visibilityState" in L.default && t.on(L.default, "visibilitychange", t.handleVisibilityChange_), t;
              }
              var u = P.prototype;
              return u.handleVisibilityChange = function() {
                this.player_.duration() === 1 / 0 && (L.default.hidden ? this.stopTracking() : this.startTracking());
              }, u.trackLive_ = function() {
                var e = this.player_.seekable();
                if (!(!e || !e.length)) {
                  var t = Number(E.default.performance.now().toFixed(4)), C = this.lastTime_ === -1 ? 0 : (t - this.lastTime_) / 1e3;
                  this.lastTime_ = t, this.pastSeekEnd_ = this.pastSeekEnd() + C;
                  var G = this.liveCurrentTime(), X = this.player_.currentTime(), $2 = this.player_.paused() || this.seekedBehindLive_ || Math.abs(G - X) > this.options_.liveTolerance;
                  (!this.timeupdateSeen_ || G === 1 / 0) && ($2 = false), $2 !== this.behindLiveEdge_ && (this.behindLiveEdge_ = $2, this.trigger("liveedgechange"));
                }
              }, u.handleDurationchange = function() {
                this.toggleTracking();
              }, u.toggleTracking = function() {
                this.player_.duration() === 1 / 0 && this.liveWindow() >= this.options_.trackingThreshold ? (this.player_.options_.liveui && this.player_.addClass("vjs-liveui"), this.startTracking()) : (this.player_.removeClass("vjs-liveui"), this.stopTracking());
              }, u.startTracking = function() {
                this.isTracking() || (this.timeupdateSeen_ || (this.timeupdateSeen_ = this.player_.hasStarted()), this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, St), this.trackLive_(), this.on(this.player_, ["play", "pause"], this.trackLiveHandler_), this.timeupdateSeen_ ? this.on(this.player_, "seeked", this.handleSeeked_) : (this.one(this.player_, "play", this.handlePlay_), this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_)));
              }, u.handleFirstTimeupdate = function() {
                this.timeupdateSeen_ = true, this.on(this.player_, "seeked", this.handleSeeked_);
              }, u.handleSeeked = function() {
                var e = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                this.seekedBehindLive_ = this.nextSeekedFromUser_ && e > 2, this.nextSeekedFromUser_ = false, this.trackLive_();
              }, u.handlePlay = function() {
                this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
              }, u.reset_ = function() {
                this.lastTime_ = -1, this.pastSeekEnd_ = 0, this.lastSeekEnd_ = -1, this.behindLiveEdge_ = true, this.timeupdateSeen_ = false, this.seekedBehindLive_ = false, this.nextSeekedFromUser_ = false, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.off(this.player_, ["play", "pause"], this.trackLiveHandler_), this.off(this.player_, "seeked", this.handleSeeked_), this.off(this.player_, "play", this.handlePlay_), this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_), this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
              }, u.nextSeekedFromUser = function() {
                this.nextSeekedFromUser_ = true;
              }, u.stopTracking = function() {
                !this.isTracking() || (this.reset_(), this.trigger("liveedgechange"));
              }, u.seekableEnd = function() {
                for (var e = this.player_.seekable(), t = [], C = e ? e.length : 0; C--; )
                  t.push(e.end(C));
                return t.length ? t.sort()[t.length - 1] : 1 / 0;
              }, u.seekableStart = function() {
                for (var e = this.player_.seekable(), t = [], C = e ? e.length : 0; C--; )
                  t.push(e.start(C));
                return t.length ? t.sort()[0] : 0;
              }, u.liveWindow = function() {
                var e = this.liveCurrentTime();
                return e === 1 / 0 ? 0 : e - this.seekableStart();
              }, u.isLive = function() {
                return this.isTracking();
              }, u.atLiveEdge = function() {
                return !this.behindLiveEdge();
              }, u.liveCurrentTime = function() {
                return this.pastSeekEnd() + this.seekableEnd();
              }, u.pastSeekEnd = function() {
                var e = this.seekableEnd();
                return this.lastSeekEnd_ !== -1 && e !== this.lastSeekEnd_ && (this.pastSeekEnd_ = 0), this.lastSeekEnd_ = e, this.pastSeekEnd_;
              }, u.behindLiveEdge = function() {
                return this.behindLiveEdge_;
              }, u.isTracking = function() {
                return typeof this.trackingInterval_ == "number";
              }, u.seekToLiveEdge = function() {
                this.seekedBehindLive_ = false, !this.atLiveEdge() && (this.nextSeekedFromUser_ = false, this.player_.currentTime(this.liveCurrentTime()));
              }, u.dispose = function() {
                this.off(L.default, "visibilitychange", this.handleVisibilityChange_), this.stopTracking(), T.prototype.dispose.call(this);
              }, P;
            }(ge);
            ge.registerComponent("LiveTracker", Va);
            var _i = function(P) {
              var u = P.el();
              if (u.hasAttribute("src"))
                return P.triggerSourceset(u.src), true;
              var r = P.$$("source"), e = [], t = "";
              if (!r.length)
                return false;
              for (var C = 0; C < r.length; C++) {
                var G = r[C].src;
                G && e.indexOf(G) === -1 && e.push(G);
              }
              return e.length ? (e.length === 1 && (t = e[0]), P.triggerSourceset(t), true) : false;
            }, Ya = Object.defineProperty({}, "innerHTML", { get: function() {
              return this.cloneNode(true).innerHTML;
            }, set: function(P) {
              var u = L.default.createElement(this.nodeName.toLowerCase());
              u.innerHTML = P;
              for (var r = L.default.createDocumentFragment(); u.childNodes.length; )
                r.appendChild(u.childNodes[0]);
              return this.innerText = "", E.default.Element.prototype.appendChild.call(this, r), this.innerHTML;
            } }), Dn = function(P, u) {
              for (var r = {}, e = 0; e < P.length && (r = Object.getOwnPropertyDescriptor(P[e], u), !(r && r.set && r.get)); e++)
                ;
              return r.enumerable = true, r.configurable = true, r;
            }, za = function(P) {
              return Dn([P.el(), E.default.HTMLMediaElement.prototype, E.default.Element.prototype, Ya], "innerHTML");
            }, In = function(P) {
              var u = P.el();
              if (!u.resetSourceWatch_) {
                var r = {}, e = za(P), t = function(G) {
                  return function() {
                    for (var X = arguments.length, $2 = new Array(X), te = 0; te < X; te++)
                      $2[te] = arguments[te];
                    var le = G.apply(u, $2);
                    return _i(P), le;
                  };
                };
                ["append", "appendChild", "insertAdjacentHTML"].forEach(function(C) {
                  !u[C] || (r[C] = u[C], u[C] = t(r[C]));
                }), Object.defineProperty(u, "innerHTML", $e(e, { set: t(e.set) })), u.resetSourceWatch_ = function() {
                  u.resetSourceWatch_ = null, Object.keys(r).forEach(function(C) {
                    u[C] = r[C];
                  }), Object.defineProperty(u, "innerHTML", e);
                }, P.one("sourceset", u.resetSourceWatch_);
              }
            }, Xa = Object.defineProperty({}, "src", { get: function() {
              return this.hasAttribute("src") ? Bi(E.default.Element.prototype.getAttribute.call(this, "src")) : "";
            }, set: function(P) {
              return E.default.Element.prototype.setAttribute.call(this, "src", P), P;
            } }), Qa = function(P) {
              return Dn([P.el(), E.default.HTMLMediaElement.prototype, Xa], "src");
            }, $a = function(P) {
              if (!!P.featuresSourceset) {
                var u = P.el();
                if (!u.resetSourceset_) {
                  var r = Qa(P), e = u.setAttribute, t = u.load;
                  Object.defineProperty(u, "src", $e(r, { set: function(G) {
                    var X = r.set.call(u, G);
                    return P.triggerSourceset(u.src), X;
                  } })), u.setAttribute = function(C, G) {
                    var X = e.call(u, C, G);
                    return /src/i.test(C) && P.triggerSourceset(u.src), X;
                  }, u.load = function() {
                    var C = t.call(u);
                    return _i(P) || (P.triggerSourceset(""), In(P)), C;
                  }, u.currentSrc ? P.triggerSourceset(u.currentSrc) : _i(P) || In(P), u.resetSourceset_ = function() {
                    u.resetSourceset_ = null, u.load = t, u.setAttribute = e, Object.defineProperty(u, "src", r), u.resetSourceWatch_ && u.resetSourceWatch_();
                  };
                }
              }
            }, Ei = function(P, u, r, e) {
              e === void 0 && (e = true);
              var t = function(X) {
                return Object.defineProperty(P, u, { value: X, enumerable: true, writable: true });
              }, C = { configurable: true, enumerable: true, get: function() {
                var X = r();
                return t(X), X;
              } };
              return e && (C.set = t), Object.defineProperty(P, u, C);
            }, Le = function(T) {
              S.default(P, T);
              function P(r, e) {
                var t;
                t = T.call(this, r, e) || this;
                var C = r.source, G = false;
                if (t.featuresVideoFrameCallback = t.featuresVideoFrameCallback && t.el_.tagName === "VIDEO", C && (t.el_.currentSrc !== C.src || r.tag && r.tag.initNetworkState_ === 3) ? t.setSource(C) : t.handleLateInit_(t.el_), r.enableSourceset && t.setupSourcesetHandling_(), t.isScrubbing_ = false, t.el_.hasChildNodes()) {
                  for (var X = t.el_.childNodes, $2 = X.length, te = []; $2--; ) {
                    var le = X[$2], J = le.nodeName.toLowerCase();
                    J === "track" && (t.featuresNativeTextTracks ? (t.remoteTextTrackEls().addTrackElement_(le), t.remoteTextTracks().addTrack(le.track), t.textTracks().addTrack(le.track), !G && !t.el_.hasAttribute("crossorigin") && Tr(le.src) && (G = true)) : te.push(le));
                  }
                  for (var pe = 0; pe < te.length; pe++)
                    t.el_.removeChild(te[pe]);
                }
                return t.proxyNativeTracks_(), t.featuresNativeTextTracks && G && K.warn(`Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.
This may prevent text tracks from loading.`), t.restoreMetadataTracksInIOSNativePlayer_(), (De || Ne || ie) && r.nativeControlsForTouch === true && t.setControls(true), t.proxyWebkitFullscreen_(), t.triggerReady(), t;
              }
              var u = P.prototype;
              return u.dispose = function() {
                this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), P.disposeMediaElement(this.el_), this.options_ = null, T.prototype.dispose.call(this);
              }, u.setupSourcesetHandling_ = function() {
                $a(this);
              }, u.restoreMetadataTracksInIOSNativePlayer_ = function() {
                var e = this.textTracks(), t, C = function() {
                  t = [];
                  for (var $2 = 0; $2 < e.length; $2++) {
                    var te = e[$2];
                    te.kind === "metadata" && t.push({ track: te, storedMode: te.mode });
                  }
                };
                C(), e.addEventListener("change", C), this.on("dispose", function() {
                  return e.removeEventListener("change", C);
                });
                var G = function X() {
                  for (var $2 = 0; $2 < t.length; $2++) {
                    var te = t[$2];
                    te.track.mode === "disabled" && te.track.mode !== te.storedMode && (te.track.mode = te.storedMode);
                  }
                  e.removeEventListener("change", X);
                };
                this.on("webkitbeginfullscreen", function() {
                  e.removeEventListener("change", C), e.removeEventListener("change", G), e.addEventListener("change", G);
                }), this.on("webkitendfullscreen", function() {
                  e.removeEventListener("change", C), e.addEventListener("change", C), e.removeEventListener("change", G);
                });
              }, u.overrideNative_ = function(e, t) {
                var C = this;
                if (t === this["featuresNative" + e + "Tracks"]) {
                  var G = e.toLowerCase();
                  this[G + "TracksListeners_"] && Object.keys(this[G + "TracksListeners_"]).forEach(function(X) {
                    var $2 = C.el()[G + "Tracks"];
                    $2.removeEventListener(X, C[G + "TracksListeners_"][X]);
                  }), this["featuresNative" + e + "Tracks"] = !t, this[G + "TracksListeners_"] = null, this.proxyNativeTracksForType_(G);
                }
              }, u.overrideNativeAudioTracks = function(e) {
                this.overrideNative_("Audio", e);
              }, u.overrideNativeVideoTracks = function(e) {
                this.overrideNative_("Video", e);
              }, u.proxyNativeTracksForType_ = function(e) {
                var t = this, C = gt[e], G = this.el()[C.getterName], X = this[C.getterName]();
                if (!(!this["featuresNative" + C.capitalName + "Tracks"] || !G || !G.addEventListener)) {
                  var $2 = { change: function(J) {
                    var pe = { type: "change", target: X, currentTarget: X, srcElement: X };
                    X.trigger(pe), e === "text" && t[qt.remoteText.getterName]().trigger(pe);
                  }, addtrack: function(J) {
                    X.addTrack(J.track);
                  }, removetrack: function(J) {
                    X.removeTrack(J.track);
                  } }, te = function() {
                    for (var J = [], pe = 0; pe < X.length; pe++) {
                      for (var Ie = false, je = 0; je < G.length; je++)
                        if (G[je] === X[pe]) {
                          Ie = true;
                          break;
                        }
                      Ie || J.push(X[pe]);
                    }
                    for (; J.length; )
                      X.removeTrack(J.shift());
                  };
                  this[C.getterName + "Listeners_"] = $2, Object.keys($2).forEach(function(le) {
                    var J = $2[le];
                    G.addEventListener(le, J), t.on("dispose", function(pe) {
                      return G.removeEventListener(le, J);
                    });
                  }), this.on("loadstart", te), this.on("dispose", function(le) {
                    return t.off("loadstart", te);
                  });
                }
              }, u.proxyNativeTracks_ = function() {
                var e = this;
                gt.names.forEach(function(t) {
                  e.proxyNativeTracksForType_(t);
                });
              }, u.createEl = function() {
                var e = this.options_.tag;
                if (!e || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                  if (e) {
                    var t = e.cloneNode(true);
                    e.parentNode && e.parentNode.insertBefore(t, e), P.disposeMediaElement(e), e = t;
                  } else {
                    e = L.default.createElement("video");
                    var C = this.options_.tag && Xe(this.options_.tag), G = $e({}, C);
                    (!De || this.options_.nativeControlsForTouch !== true) && delete G.controls, it(e, q(G, { id: this.options_.techId, class: "vjs-tech" }));
                  }
                  e.playerId = this.options_.playerId;
                }
                typeof this.options_.preload != "undefined" && yt(e, "preload", this.options_.preload), this.options_.disablePictureInPicture !== void 0 && (e.disablePictureInPicture = this.options_.disablePictureInPicture);
                for (var X = ["loop", "muted", "playsinline", "autoplay"], $2 = 0; $2 < X.length; $2++) {
                  var te = X[$2], le = this.options_[te];
                  typeof le != "undefined" && (le ? yt(e, te, te) : Ct(e, te), e[te] = le);
                }
                return e;
              }, u.handleLateInit_ = function(e) {
                if (!(e.networkState === 0 || e.networkState === 3)) {
                  if (e.readyState === 0) {
                    var t = false, C = function() {
                      t = true;
                    };
                    this.on("loadstart", C);
                    var G = function() {
                      t || this.trigger("loadstart");
                    };
                    this.on("loadedmetadata", G), this.ready(function() {
                      this.off("loadstart", C), this.off("loadedmetadata", G), t || this.trigger("loadstart");
                    });
                    return;
                  }
                  var X = ["loadstart"];
                  X.push("loadedmetadata"), e.readyState >= 2 && X.push("loadeddata"), e.readyState >= 3 && X.push("canplay"), e.readyState >= 4 && X.push("canplaythrough"), this.ready(function() {
                    X.forEach(function($2) {
                      this.trigger($2);
                    }, this);
                  });
                }
              }, u.setScrubbing = function(e) {
                this.isScrubbing_ = e;
              }, u.scrubbing = function() {
                return this.isScrubbing_;
              }, u.setCurrentTime = function(e) {
                try {
                  this.isScrubbing_ && this.el_.fastSeek && xe ? this.el_.fastSeek(e) : this.el_.currentTime = e;
                } catch (t) {
                  K(t, "Video is not ready. (Video.js)");
                }
              }, u.duration = function() {
                var e = this;
                if (this.el_.duration === 1 / 0 && Te && oe && this.el_.currentTime === 0) {
                  var t = function C() {
                    e.el_.currentTime > 0 && (e.el_.duration === 1 / 0 && e.trigger("durationchange"), e.off("timeupdate", C));
                  };
                  return this.on("timeupdate", t), NaN;
                }
                return this.el_.duration || NaN;
              }, u.width = function() {
                return this.el_.offsetWidth;
              }, u.height = function() {
                return this.el_.offsetHeight;
              }, u.proxyWebkitFullscreen_ = function() {
                var e = this;
                if ("webkitDisplayingFullscreen" in this.el_) {
                  var t = function() {
                    this.trigger("fullscreenchange", { isFullscreen: false }), this.el_.controls && !this.options_.nativeControlsForTouch && this.controls() && (this.el_.controls = false);
                  }, C = function() {
                    "webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture" && (this.one("webkitendfullscreen", t), this.trigger("fullscreenchange", { isFullscreen: true, nativeIOSFullscreen: true }));
                  };
                  this.on("webkitbeginfullscreen", C), this.on("dispose", function() {
                    e.off("webkitbeginfullscreen", C), e.off("webkitendfullscreen", t);
                  });
                }
              }, u.supportsFullScreen = function() {
                if (typeof this.el_.webkitEnterFullScreen == "function") {
                  var e = E.default.navigator && E.default.navigator.userAgent || "";
                  if (/Android/.test(e) || !/Chrome|Mac OS X 10.5/.test(e))
                    return true;
                }
                return false;
              }, u.enterFullScreen = function() {
                var e = this.el_;
                if (e.paused && e.networkState <= e.HAVE_METADATA)
                  Lt(this.el_.play()), this.setTimeout(function() {
                    e.pause();
                    try {
                      e.webkitEnterFullScreen();
                    } catch (t) {
                      this.trigger("fullscreenerror", t);
                    }
                  }, 0);
                else
                  try {
                    e.webkitEnterFullScreen();
                  } catch (t) {
                    this.trigger("fullscreenerror", t);
                  }
              }, u.exitFullScreen = function() {
                if (!this.el_.webkitDisplayingFullscreen) {
                  this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
                  return;
                }
                this.el_.webkitExitFullScreen();
              }, u.requestPictureInPicture = function() {
                return this.el_.requestPictureInPicture();
              }, u.requestVideoFrameCallback = function(e) {
                return this.featuresVideoFrameCallback && !this.el_.webkitKeys ? this.el_.requestVideoFrameCallback(e) : T.prototype.requestVideoFrameCallback.call(this, e);
              }, u.cancelVideoFrameCallback = function(e) {
                this.featuresVideoFrameCallback && !this.el_.webkitKeys ? this.el_.cancelVideoFrameCallback(e) : T.prototype.cancelVideoFrameCallback.call(this, e);
              }, u.src = function(e) {
                if (e === void 0)
                  return this.el_.src;
                this.setSrc(e);
              }, u.reset = function() {
                P.resetMediaElement(this.el_);
              }, u.currentSrc = function() {
                return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
              }, u.setControls = function(e) {
                this.el_.controls = !!e;
              }, u.addTextTrack = function(e, t, C) {
                return this.featuresNativeTextTracks ? this.el_.addTextTrack(e, t, C) : T.prototype.addTextTrack.call(this, e, t, C);
              }, u.createRemoteTextTrack = function(e) {
                if (!this.featuresNativeTextTracks)
                  return T.prototype.createRemoteTextTrack.call(this, e);
                var t = L.default.createElement("track");
                return e.kind && (t.kind = e.kind), e.label && (t.label = e.label), (e.language || e.srclang) && (t.srclang = e.language || e.srclang), e.default && (t.default = e.default), e.id && (t.id = e.id), e.src && (t.src = e.src), t;
              }, u.addRemoteTextTrack = function(e, t) {
                var C = T.prototype.addRemoteTextTrack.call(this, e, t);
                return this.featuresNativeTextTracks && this.el().appendChild(C), C;
              }, u.removeRemoteTextTrack = function(e) {
                if (T.prototype.removeRemoteTextTrack.call(this, e), this.featuresNativeTextTracks)
                  for (var t = this.$$("track"), C = t.length; C--; )
                    (e === t[C] || e === t[C].track) && this.el().removeChild(t[C]);
              }, u.getVideoPlaybackQuality = function() {
                if (typeof this.el().getVideoPlaybackQuality == "function")
                  return this.el().getVideoPlaybackQuality();
                var e = {};
                return typeof this.el().webkitDroppedFrameCount != "undefined" && typeof this.el().webkitDecodedFrameCount != "undefined" && (e.droppedVideoFrames = this.el().webkitDroppedFrameCount, e.totalVideoFrames = this.el().webkitDecodedFrameCount), E.default.performance && typeof E.default.performance.now == "function" ? e.creationTime = E.default.performance.now() : E.default.performance && E.default.performance.timing && typeof E.default.performance.timing.navigationStart == "number" && (e.creationTime = E.default.Date.now() - E.default.performance.timing.navigationStart), e;
              }, P;
            }(Ve);
            Ei(Le, "TEST_VID", function() {
              if (!!Ye()) {
                var T = L.default.createElement("video"), P = L.default.createElement("track");
                return P.kind = "captions", P.srclang = "en", P.label = "English", T.appendChild(P), T;
              }
            }), Le.isSupported = function() {
              try {
                Le.TEST_VID.volume = 0.5;
              } catch (T) {
                return false;
              }
              return !!(Le.TEST_VID && Le.TEST_VID.canPlayType);
            }, Le.canPlayType = function(T) {
              return Le.TEST_VID.canPlayType(T);
            }, Le.canPlaySource = function(T, P) {
              return Le.canPlayType(T.type);
            }, Le.canControlVolume = function() {
              try {
                var T = Le.TEST_VID.volume;
                Le.TEST_VID.volume = T / 2 + 0.1;
                var P = T !== Le.TEST_VID.volume;
                return P && Fe ? (E.default.setTimeout(function() {
                  Le && Le.prototype && (Le.prototype.featuresVolumeControl = T !== Le.TEST_VID.volume);
                }), false) : P;
              } catch (u) {
                return false;
              }
            }, Le.canMuteVolume = function() {
              try {
                var T = Le.TEST_VID.muted;
                return Le.TEST_VID.muted = !T, Le.TEST_VID.muted ? yt(Le.TEST_VID, "muted", "muted") : Ct(Le.TEST_VID, "muted", "muted"), T !== Le.TEST_VID.muted;
              } catch (P) {
                return false;
              }
            }, Le.canControlPlaybackRate = function() {
              if (Te && oe && se < 58)
                return false;
              try {
                var T = Le.TEST_VID.playbackRate;
                return Le.TEST_VID.playbackRate = T / 2 + 0.1, T !== Le.TEST_VID.playbackRate;
              } catch (P) {
                return false;
              }
            }, Le.canOverrideAttributes = function() {
              try {
                var T = function() {
                };
                Object.defineProperty(L.default.createElement("video"), "src", { get: T, set: T }), Object.defineProperty(L.default.createElement("audio"), "src", { get: T, set: T }), Object.defineProperty(L.default.createElement("video"), "innerHTML", { get: T, set: T }), Object.defineProperty(L.default.createElement("audio"), "innerHTML", { get: T, set: T });
              } catch (P) {
                return false;
              }
              return true;
            }, Le.supportsNativeTextTracks = function() {
              return xe || Fe && oe;
            }, Le.supportsNativeVideoTracks = function() {
              return !!(Le.TEST_VID && Le.TEST_VID.videoTracks);
            }, Le.supportsNativeAudioTracks = function() {
              return !!(Le.TEST_VID && Le.TEST_VID.audioTracks);
            }, Le.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"], [["featuresMuteControl", "canMuteVolume"], ["featuresPlaybackRate", "canControlPlaybackRate"], ["featuresSourceset", "canOverrideAttributes"], ["featuresNativeTextTracks", "supportsNativeTextTracks"], ["featuresNativeVideoTracks", "supportsNativeVideoTracks"], ["featuresNativeAudioTracks", "supportsNativeAudioTracks"]].forEach(function(T) {
              var P = T[0], u = T[1];
              Ei(Le.prototype, P, function() {
                return Le[u]();
              }, true);
            }), Le.prototype.featuresVolumeControl = Le.canControlVolume(), Le.prototype.movingMediaElementInDOM = !Fe, Le.prototype.featuresFullscreenResize = true, Le.prototype.featuresProgressEvents = true, Le.prototype.featuresTimeupdateEvents = true, Le.prototype.featuresVideoFrameCallback = !!(Le.TEST_VID && Le.TEST_VID.requestVideoFrameCallback);
            var Ir;
            Le.patchCanPlayType = function() {
              fe >= 4 && !de && !oe && (Ir = Le.TEST_VID && Le.TEST_VID.constructor.prototype.canPlayType, Le.TEST_VID.constructor.prototype.canPlayType = function(T) {
                var P = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                return T && P.test(T) ? "maybe" : Ir.call(this, T);
              });
            }, Le.unpatchCanPlayType = function() {
              var T = Le.TEST_VID.constructor.prototype.canPlayType;
              return Ir && (Le.TEST_VID.constructor.prototype.canPlayType = Ir), T;
            }, Le.patchCanPlayType(), Le.disposeMediaElement = function(T) {
              if (!!T) {
                for (T.parentNode && T.parentNode.removeChild(T); T.hasChildNodes(); )
                  T.removeChild(T.firstChild);
                T.removeAttribute("src"), typeof T.load == "function" && function() {
                  try {
                    T.load();
                  } catch (P) {
                  }
                }();
              }
            }, Le.resetMediaElement = function(T) {
              if (!!T) {
                for (var P = T.querySelectorAll("source"), u = P.length; u--; )
                  T.removeChild(P[u]);
                T.removeAttribute("src"), typeof T.load == "function" && function() {
                  try {
                    T.load();
                  } catch (r) {
                  }
                }();
              }
            }, ["muted", "defaultMuted", "autoplay", "controls", "loop", "playsinline"].forEach(function(T) {
              Le.prototype[T] = function() {
                return this.el_[T] || this.el_.hasAttribute(T);
              };
            }), ["muted", "defaultMuted", "autoplay", "loop", "playsinline"].forEach(function(T) {
              Le.prototype["set" + Je(T)] = function(P) {
                this.el_[T] = P, P ? this.el_.setAttribute(T, T) : this.el_.removeAttribute(T);
              };
            }), ["paused", "currentTime", "buffered", "volume", "poster", "preload", "error", "seeking", "seekable", "ended", "playbackRate", "defaultPlaybackRate", "disablePictureInPicture", "played", "networkState", "readyState", "videoWidth", "videoHeight", "crossOrigin"].forEach(function(T) {
              Le.prototype[T] = function() {
                return this.el_[T];
              };
            }), ["volume", "src", "poster", "preload", "playbackRate", "defaultPlaybackRate", "disablePictureInPicture", "crossOrigin"].forEach(function(T) {
              Le.prototype["set" + Je(T)] = function(P) {
                this.el_[T] = P;
              };
            }), ["pause", "load", "play"].forEach(function(T) {
              Le.prototype[T] = function() {
                return this.el_[T]();
              };
            }), Ve.withSourceHandlers(Le), Le.nativeSourceHandler = {}, Le.nativeSourceHandler.canPlayType = function(T) {
              try {
                return Le.TEST_VID.canPlayType(T);
              } catch (P) {
                return "";
              }
            }, Le.nativeSourceHandler.canHandleSource = function(T, P) {
              if (T.type)
                return Le.nativeSourceHandler.canPlayType(T.type);
              if (T.src) {
                var u = Xr(T.src);
                return Le.nativeSourceHandler.canPlayType("video/" + u);
              }
              return "";
            }, Le.nativeSourceHandler.handleSource = function(T, P, u) {
              P.setSrc(T.src);
            }, Le.nativeSourceHandler.dispose = function() {
            }, Le.registerSourceHandler(Le.nativeSourceHandler), Ve.registerTech("Html5", Le);
            var On = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "resize", "volumechange", "texttrackchange"], Ti = { canplay: "CanPlay", canplaythrough: "CanPlayThrough", playing: "Playing", seeked: "Seeked" }, Si = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"], Or = {};
            Si.forEach(function(T) {
              var P = T.charAt(0) === "x" ? "x-" + T.substring(1) : T;
              Or[T] = "vjs-layout-" + P;
            });
            var qa = { tiny: 210, xsmall: 320, small: 425, medium: 768, large: 1440, xlarge: 2560, huge: 1 / 0 }, et = function(T) {
              S.default(P, T);
              function P(r, e, t) {
                var C;
                if (r.id = r.id || e.id || "vjs_video_" + Mt(), e = q(P.getTagSettings(r), e), e.initChildren = false, e.createEl = false, e.evented = false, e.reportTouchActivity = false, !e.language)
                  if (typeof r.closest == "function") {
                    var G = r.closest("[lang]");
                    G && G.getAttribute && (e.language = G.getAttribute("lang"));
                  } else
                    for (var X = r; X && X.nodeType === 1; ) {
                      if (Xe(X).hasOwnProperty("lang")) {
                        e.language = X.getAttribute("lang");
                        break;
                      }
                      X = X.parentNode;
                    }
                if (C = T.call(this, null, e, t) || this, C.boundDocumentFullscreenChange_ = function(J) {
                  return C.documentFullscreenChange_(J);
                }, C.boundFullWindowOnEscKey_ = function(J) {
                  return C.fullWindowOnEscKey(J);
                }, C.boundUpdateStyleEl_ = function(J) {
                  return C.updateStyleEl_(J);
                }, C.boundApplyInitTime_ = function(J) {
                  return C.applyInitTime_(J);
                }, C.boundUpdateCurrentBreakpoint_ = function(J) {
                  return C.updateCurrentBreakpoint_(J);
                }, C.boundHandleTechClick_ = function(J) {
                  return C.handleTechClick_(J);
                }, C.boundHandleTechDoubleClick_ = function(J) {
                  return C.handleTechDoubleClick_(J);
                }, C.boundHandleTechTouchStart_ = function(J) {
                  return C.handleTechTouchStart_(J);
                }, C.boundHandleTechTouchMove_ = function(J) {
                  return C.handleTechTouchMove_(J);
                }, C.boundHandleTechTouchEnd_ = function(J) {
                  return C.handleTechTouchEnd_(J);
                }, C.boundHandleTechTap_ = function(J) {
                  return C.handleTechTap_(J);
                }, C.isFullscreen_ = false, C.log = W(C.id_), C.fsApi_ = a, C.isPosterFromTech_ = false, C.queuedCallbacks_ = [], C.isReady_ = false, C.hasStarted_ = false, C.userActive_ = false, C.debugEnabled_ = false, C.audioOnlyMode_ = false, C.audioPosterMode_ = false, C.audioOnlyCache_ = { playerHeight: null, hiddenChildren: [] }, !C.options_ || !C.options_.techOrder || !C.options_.techOrder.length)
                  throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");
                if (C.tag = r, C.tagAttributes = r && Xe(r), C.language(C.options_.language), e.languages) {
                  var $2 = {};
                  Object.getOwnPropertyNames(e.languages).forEach(function(J) {
                    $2[J.toLowerCase()] = e.languages[J];
                  }), C.languages_ = $2;
                } else
                  C.languages_ = P.prototype.options_.languages;
                C.resetCache_(), C.poster_ = e.poster || "", C.controls_ = !!e.controls, r.controls = false, r.removeAttribute("controls"), C.changingSrc_ = false, C.playCallbacks_ = [], C.playTerminatedQueue_ = [], r.hasAttribute("autoplay") ? C.autoplay(true) : C.autoplay(C.options_.autoplay), e.plugins && Object.keys(e.plugins).forEach(function(J) {
                  if (typeof C[J] != "function")
                    throw new Error('plugin "' + J + '" does not exist');
                }), C.scrubbing_ = false, C.el_ = C.createEl(), Ur(I.default(C), { eventBusKey: "el_" }), C.fsApi_.requestFullscreen && (vt(L.default, C.fsApi_.fullscreenchange, C.boundDocumentFullscreenChange_), C.on(C.fsApi_.fullscreenchange, C.boundDocumentFullscreenChange_)), C.fluid_ && C.on(["playerreset", "resize"], C.boundUpdateStyleEl_);
                var te = $e(C.options_);
                e.plugins && Object.keys(e.plugins).forEach(function(J) {
                  C[J](e.plugins[J]);
                }), e.debug && C.debug(true), C.options_.playerOptions = te, C.middleware_ = [], C.playbackRates(e.playbackRates), C.initChildren(), C.isAudio(r.nodeName.toLowerCase() === "audio"), C.controls() ? C.addClass("vjs-controls-enabled") : C.addClass("vjs-controls-disabled"), C.el_.setAttribute("role", "region"), C.isAudio() ? C.el_.setAttribute("aria-label", C.localize("Audio Player")) : C.el_.setAttribute("aria-label", C.localize("Video Player")), C.isAudio() && C.addClass("vjs-audio"), C.flexNotSupported_() && C.addClass("vjs-no-flex"), De && C.addClass("vjs-touch-enabled"), Fe || C.addClass("vjs-workinghover"), P.players[C.id_] = I.default(C);
                var le = g.split(".")[0];
                return C.addClass("vjs-v" + le), C.userActive(true), C.reportUserActivity(), C.one("play", function(J) {
                  return C.listenForUserActivity_(J);
                }), C.on("stageclick", function(J) {
                  return C.handleStageClick_(J);
                }), C.on("keydown", function(J) {
                  return C.handleKeyDown(J);
                }), C.on("languagechange", function(J) {
                  return C.handleLanguagechange(J);
                }), C.breakpoints(C.options_.breakpoints), C.responsive(C.options_.responsive), C.on("ready", function() {
                  C.audioPosterMode(C.options_.audioPosterMode), C.audioOnlyMode(C.options_.audioOnlyMode);
                }), C;
              }
              var u = P.prototype;
              return u.dispose = function() {
                var e = this;
                this.trigger("dispose"), this.off("dispose"), at(L.default, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_), at(L.default, "keydown", this.boundFullWindowOnEscKey_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), P.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = false, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), ma(this), ct.names.forEach(function(t) {
                  var C = ct[t], G = e[C.getterName]();
                  G && G.off && G.off();
                }), T.prototype.dispose.call(this, { restoreEl: this.options_.restoreEl });
              }, u.createEl = function() {
                var e = this.tag, t, C = this.playerElIngest_ = e.parentNode && e.parentNode.hasAttribute && e.parentNode.hasAttribute("data-vjs-player"), G = this.tag.tagName.toLowerCase() === "video-js";
                C ? t = this.el_ = e.parentNode : G || (t = this.el_ = T.prototype.createEl.call(this, "div"));
                var X = Xe(e);
                if (G) {
                  for (t = this.el_ = e, e = this.tag = L.default.createElement("video"); t.children.length; )
                    e.appendChild(t.firstChild);
                  Ke(t, "video-js") || He(t, "video-js"), t.appendChild(e), C = this.playerElIngest_ = t, Object.keys(t).forEach(function(Ie) {
                    try {
                      e[Ie] = t[Ie];
                    } catch (je) {
                    }
                  });
                }
                if (e.setAttribute("tabindex", "-1"), X.tabindex = "-1", (ve || oe && Re) && (e.setAttribute("role", "application"), X.role = "application"), e.removeAttribute("width"), e.removeAttribute("height"), "width" in X && delete X.width, "height" in X && delete X.height, Object.getOwnPropertyNames(X).forEach(function(Ie) {
                  G && Ie === "class" || t.setAttribute(Ie, X[Ie]), G && e.setAttribute(Ie, X[Ie]);
                }), e.playerId = e.id, e.id += "_html5_api", e.className = "vjs-tech", e.player = t.player = this, this.addClass("vjs-paused"), E.default.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                  this.styleEl_ = vr("vjs-styles-dimensions");
                  var $2 = ft(".vjs-styles-defaults"), te = ft("head");
                  te.insertBefore(this.styleEl_, $2 ? $2.nextSibling : te.firstChild);
                }
                this.fill_ = false, this.fluid_ = false, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio), this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                for (var le = e.getElementsByTagName("a"), J = 0; J < le.length; J++) {
                  var pe = le.item(J);
                  He(pe, "vjs-hidden"), pe.setAttribute("hidden", "hidden");
                }
                return e.initNetworkState_ = e.networkState, e.parentNode && !C && e.parentNode.insertBefore(t, e), we(e, t), this.children_.unshift(e), this.el_.setAttribute("lang", this.language_), this.el_.setAttribute("translate", "no"), this.el_ = t, t;
              }, u.crossOrigin = function(e) {
                if (!e)
                  return this.techGet_("crossOrigin");
                if (e !== "anonymous" && e !== "use-credentials") {
                  K.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + e + '"');
                  return;
                }
                this.techCall_("setCrossOrigin", e);
              }, u.width = function(e) {
                return this.dimension("width", e);
              }, u.height = function(e) {
                return this.dimension("height", e);
              }, u.dimension = function(e, t) {
                var C = e + "_";
                if (t === void 0)
                  return this[C] || 0;
                if (t === "" || t === "auto") {
                  this[C] = void 0, this.updateStyleEl_();
                  return;
                }
                var G = parseFloat(t);
                if (isNaN(G)) {
                  K.error('Improper value "' + t + '" supplied for for ' + e);
                  return;
                }
                this[C] = G, this.updateStyleEl_();
              }, u.fluid = function(e) {
                var t = this;
                if (e === void 0)
                  return !!this.fluid_;
                this.fluid_ = !!e, wt(this) && this.off(["playerreset", "resize"], this.boundUpdateStyleEl_), e ? (this.addClass("vjs-fluid"), this.fill(false), Hn(this, function() {
                  t.on(["playerreset", "resize"], t.boundUpdateStyleEl_);
                })) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
              }, u.fill = function(e) {
                if (e === void 0)
                  return !!this.fill_;
                this.fill_ = !!e, e ? (this.addClass("vjs-fill"), this.fluid(false)) : this.removeClass("vjs-fill");
              }, u.aspectRatio = function(e) {
                if (e === void 0)
                  return this.aspectRatio_;
                if (!/^\d+\:\d+$/.test(e))
                  throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
                this.aspectRatio_ = e, this.fluid(true), this.updateStyleEl_();
              }, u.updateStyleEl_ = function() {
                if (E.default.VIDEOJS_NO_DYNAMIC_STYLE === true) {
                  var e = typeof this.width_ == "number" ? this.width_ : this.options_.width, t = typeof this.height_ == "number" ? this.height_ : this.options_.height, C = this.tech_ && this.tech_.el();
                  C && (e >= 0 && (C.width = e), t >= 0 && (C.height = t));
                  return;
                }
                var G, X, $2, te;
                this.aspectRatio_ !== void 0 && this.aspectRatio_ !== "auto" ? $2 = this.aspectRatio_ : this.videoWidth() > 0 ? $2 = this.videoWidth() + ":" + this.videoHeight() : $2 = "16:9";
                var le = $2.split(":"), J = le[1] / le[0];
                this.width_ !== void 0 ? G = this.width_ : this.height_ !== void 0 ? G = this.height_ / J : G = this.videoWidth() || 300, this.height_ !== void 0 ? X = this.height_ : X = G * J, /^[^a-zA-Z]/.test(this.id()) ? te = "dimensions-" + this.id() : te = this.id() + "-dimensions", this.addClass(te), sr(this.styleEl_, `
      .` + te + ` {
        width: ` + G + `px;
        height: ` + X + `px;
      }

      .` + te + `.vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: ` + J * 100 + `%;
      }
    `);
              }, u.loadTech_ = function(e, t) {
                var C = this;
                this.tech_ && this.unloadTech_();
                var G = Je(e), X = e.charAt(0).toLowerCase() + e.slice(1);
                G !== "Html5" && this.tag && (Ve.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = G, this.isReady_ = false;
                var $2 = this.autoplay();
                (typeof this.autoplay() == "string" || this.autoplay() === true && this.options_.normalizeAutoplay) && ($2 = false);
                var te = { source: t, autoplay: $2, nativeControlsForTouch: this.options_.nativeControlsForTouch, playerId: this.id(), techId: this.id() + "_" + X + "_api", playsinline: this.options_.playsinline, preload: this.options_.preload, loop: this.options_.loop, disablePictureInPicture: this.options_.disablePictureInPicture, muted: this.options_.muted, poster: this.poster(), language: this.language(), playerElIngest: this.playerElIngest_ || false, "vtt.js": this.options_["vtt.js"], canOverridePoster: !!this.options_.techCanOverridePoster, enableSourceset: this.options_.enableSourceset, Promise: this.options_.Promise };
                ct.names.forEach(function(J) {
                  var pe = ct[J];
                  te[pe.getterName] = C[pe.privateName];
                }), q(te, this.options_[G]), q(te, this.options_[X]), q(te, this.options_[e.toLowerCase()]), this.tag && (te.tag = this.tag), t && t.src === this.cache_.src && this.cache_.currentTime > 0 && (te.startTime = this.cache_.currentTime);
                var le = Ve.getTech(e);
                if (!le)
                  throw new Error("No Tech named '" + G + "' exists! '" + G + "' should be registered using videojs.registerTech()'");
                this.tech_ = new le(te), this.tech_.ready(Qe(this, this.handleTechReady_), true), wi.jsonToTextTracks(this.textTracksJson_ || [], this.tech_), On.forEach(function(J) {
                  C.on(C.tech_, J, function(pe) {
                    return C["handleTech" + Je(J) + "_"](pe);
                  });
                }), Object.keys(Ti).forEach(function(J) {
                  C.on(C.tech_, J, function(pe) {
                    if (C.tech_.playbackRate() === 0 && C.tech_.seeking()) {
                      C.queuedCallbacks_.push({ callback: C["handleTech" + Ti[J] + "_"].bind(C), event: pe });
                      return;
                    }
                    C["handleTech" + Ti[J] + "_"](pe);
                  });
                }), this.on(this.tech_, "loadstart", function(J) {
                  return C.handleTechLoadStart_(J);
                }), this.on(this.tech_, "sourceset", function(J) {
                  return C.handleTechSourceset_(J);
                }), this.on(this.tech_, "waiting", function(J) {
                  return C.handleTechWaiting_(J);
                }), this.on(this.tech_, "ended", function(J) {
                  return C.handleTechEnded_(J);
                }), this.on(this.tech_, "seeking", function(J) {
                  return C.handleTechSeeking_(J);
                }), this.on(this.tech_, "play", function(J) {
                  return C.handleTechPlay_(J);
                }), this.on(this.tech_, "firstplay", function(J) {
                  return C.handleTechFirstPlay_(J);
                }), this.on(this.tech_, "pause", function(J) {
                  return C.handleTechPause_(J);
                }), this.on(this.tech_, "durationchange", function(J) {
                  return C.handleTechDurationChange_(J);
                }), this.on(this.tech_, "fullscreenchange", function(J, pe) {
                  return C.handleTechFullscreenChange_(J, pe);
                }), this.on(this.tech_, "fullscreenerror", function(J, pe) {
                  return C.handleTechFullscreenError_(J, pe);
                }), this.on(this.tech_, "enterpictureinpicture", function(J) {
                  return C.handleTechEnterPictureInPicture_(J);
                }), this.on(this.tech_, "leavepictureinpicture", function(J) {
                  return C.handleTechLeavePictureInPicture_(J);
                }), this.on(this.tech_, "error", function(J) {
                  return C.handleTechError_(J);
                }), this.on(this.tech_, "posterchange", function(J) {
                  return C.handleTechPosterChange_(J);
                }), this.on(this.tech_, "textdata", function(J) {
                  return C.handleTechTextData_(J);
                }), this.on(this.tech_, "ratechange", function(J) {
                  return C.handleTechRateChange_(J);
                }), this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode !== this.el() && (G !== "Html5" || !this.tag) && we(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
              }, u.unloadTech_ = function() {
                var e = this;
                ct.names.forEach(function(t) {
                  var C = ct[t];
                  e[C.privateName] = e[C.getterName]();
                }), this.textTracksJson_ = wi.textTracksToJson(this.tech_), this.isReady_ = false, this.tech_.dispose(), this.tech_ = false, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = false;
              }, u.tech = function(e) {
                return e === void 0 && K.warn(`Using the tech directly can be dangerous. I hope you know what you're doing.
See https://github.com/videojs/video.js/issues/2617 for more info.
`), this.tech_;
              }, u.addTechControlsListeners_ = function() {
                this.removeTechControlsListeners_(), this.on(this.tech_, "click", this.boundHandleTechClick_), this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_), this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_), this.on(this.tech_, "tap", this.boundHandleTechTap_);
              }, u.removeTechControlsListeners_ = function() {
                this.off(this.tech_, "tap", this.boundHandleTechTap_), this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_), this.off(this.tech_, "click", this.boundHandleTechClick_), this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
              }, u.handleTechReady_ = function() {
                this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
              }, u.handleTechLoadStart_ = function() {
                this.removeClass("vjs-ended"), this.removeClass("vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (this.hasStarted(false), this.trigger("loadstart")) : (this.trigger("loadstart"), this.trigger("firstplay")), this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay());
              }, u.manualAutoplay_ = function(e) {
                var t = this;
                if (!(!this.tech_ || typeof e != "string")) {
                  var C = function() {
                    var $2 = t.muted();
                    t.muted(true);
                    var te = function() {
                      t.muted($2);
                    };
                    t.playTerminatedQueue_.push(te);
                    var le = t.play();
                    if (!!lr(le))
                      return le.catch(function(J) {
                        throw te(), new Error("Rejection at manualAutoplay. Restoring muted value. " + (J || ""));
                      });
                  }, G;
                  if (e === "any" && !this.muted() ? (G = this.play(), lr(G) && (G = G.catch(C))) : e === "muted" && !this.muted() ? G = C() : G = this.play(), !!lr(G))
                    return G.then(function() {
                      t.trigger({ type: "autoplay-success", autoplay: e });
                    }).catch(function() {
                      t.trigger({ type: "autoplay-failure", autoplay: e });
                    });
                }
              }, u.updateSourceCaches_ = function(e) {
                e === void 0 && (e = "");
                var t = e, C = "";
                typeof t != "string" && (t = e.src, C = e.type), this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], t && !C && (C = Ea(this, t)), this.cache_.source = $e({}, e, { src: t, type: C });
                for (var G = this.cache_.sources.filter(function(pe) {
                  return pe.src && pe.src === t;
                }), X = [], $2 = this.$$("source"), te = [], le = 0; le < $2.length; le++) {
                  var J = Xe($2[le]);
                  X.push(J), J.src && J.src === t && te.push(J.src);
                }
                te.length && !G.length ? this.cache_.sources = X : G.length || (this.cache_.sources = [this.cache_.source]), this.cache_.src = t;
              }, u.handleTechSourceset_ = function(e) {
                var t = this;
                if (!this.changingSrc_) {
                  var C = function(te) {
                    return t.updateSourceCaches_(te);
                  }, G = this.currentSource().src, X = e.src;
                  G && !/^blob:/.test(G) && /^blob:/.test(X) && (!this.lastSource_ || this.lastSource_.tech !== X && this.lastSource_.player !== G) && (C = function() {
                  }), C(X), e.src || this.tech_.any(["sourceset", "loadstart"], function($2) {
                    if ($2.type !== "sourceset") {
                      var te = t.techGet("currentSrc");
                      t.lastSource_.tech = te, t.updateSourceCaches_(te);
                    }
                  });
                }
                this.lastSource_ = { player: this.currentSource().src, tech: e.src }, this.trigger({ src: e.src, type: "sourceset" });
              }, u.hasStarted = function(e) {
                if (e === void 0)
                  return this.hasStarted_;
                e !== this.hasStarted_ && (this.hasStarted_ = e, this.hasStarted_ ? (this.addClass("vjs-has-started"), this.trigger("firstplay")) : this.removeClass("vjs-has-started"));
              }, u.handleTechPlay_ = function() {
                this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(true), this.trigger("play");
              }, u.handleTechRateChange_ = function() {
                this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0 && (this.queuedCallbacks_.forEach(function(e) {
                  return e.callback(e.event);
                }), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), this.trigger("ratechange");
              }, u.handleTechWaiting_ = function() {
                var e = this;
                this.addClass("vjs-waiting"), this.trigger("waiting");
                var t = this.currentTime(), C = function G() {
                  t !== e.currentTime() && (e.removeClass("vjs-waiting"), e.off("timeupdate", G));
                };
                this.on("timeupdate", C);
              }, u.handleTechCanPlay_ = function() {
                this.removeClass("vjs-waiting"), this.trigger("canplay");
              }, u.handleTechCanPlayThrough_ = function() {
                this.removeClass("vjs-waiting"), this.trigger("canplaythrough");
              }, u.handleTechPlaying_ = function() {
                this.removeClass("vjs-waiting"), this.trigger("playing");
              }, u.handleTechSeeking_ = function() {
                this.addClass("vjs-seeking"), this.trigger("seeking");
              }, u.handleTechSeeked_ = function() {
                this.removeClass("vjs-seeking"), this.removeClass("vjs-ended"), this.trigger("seeked");
              }, u.handleTechFirstPlay_ = function() {
                this.options_.starttime && (K.warn("Passing the `starttime` option to the player will be deprecated in 6.0"), this.currentTime(this.options_.starttime)), this.addClass("vjs-has-started"), this.trigger("firstplay");
              }, u.handleTechPause_ = function() {
                this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.trigger("pause");
              }, u.handleTechEnded_ = function() {
                this.addClass("vjs-ended"), this.removeClass("vjs-waiting"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), this.trigger("ended");
              }, u.handleTechDurationChange_ = function() {
                this.duration(this.techGet_("duration"));
              }, u.handleTechClick_ = function(e) {
                !this.controls_ || (this.options_ === void 0 || this.options_.userActions === void 0 || this.options_.userActions.click === void 0 || this.options_.userActions.click !== false) && (this.options_ !== void 0 && this.options_.userActions !== void 0 && typeof this.options_.userActions.click == "function" ? this.options_.userActions.click.call(this, e) : this.paused() ? Lt(this.play()) : this.pause());
              }, u.handleTechDoubleClick_ = function(e) {
                if (!!this.controls_) {
                  var t = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(C) {
                    return C.contains(e.target);
                  });
                  t || (this.options_ === void 0 || this.options_.userActions === void 0 || this.options_.userActions.doubleClick === void 0 || this.options_.userActions.doubleClick !== false) && (this.options_ !== void 0 && this.options_.userActions !== void 0 && typeof this.options_.userActions.doubleClick == "function" ? this.options_.userActions.doubleClick.call(this, e) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen());
                }
              }, u.handleTechTap_ = function() {
                this.userActive(!this.userActive());
              }, u.handleTechTouchStart_ = function() {
                this.userWasActive = this.userActive();
              }, u.handleTechTouchMove_ = function() {
                this.userWasActive && this.reportUserActivity();
              }, u.handleTechTouchEnd_ = function(e) {
                e.cancelable && e.preventDefault();
              }, u.handleStageClick_ = function() {
                this.reportUserActivity();
              }, u.toggleFullscreenClass_ = function() {
                this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
              }, u.documentFullscreenChange_ = function(e) {
                var t = e.target.player;
                if (!(t && t !== this)) {
                  var C = this.el(), G = L.default[this.fsApi_.fullscreenElement] === C;
                  !G && C.matches ? G = C.matches(":" + this.fsApi_.fullscreen) : !G && C.msMatchesSelector && (G = C.msMatchesSelector(":" + this.fsApi_.fullscreen)), this.isFullscreen(G);
                }
              }, u.handleTechFullscreenChange_ = function(e, t) {
                var C = this;
                t && (t.nativeIOSFullscreen && (this.addClass("vjs-ios-native-fs"), this.tech_.one("webkitendfullscreen", function() {
                  C.removeClass("vjs-ios-native-fs");
                })), this.isFullscreen(t.isFullscreen));
              }, u.handleTechFullscreenError_ = function(e, t) {
                this.trigger("fullscreenerror", t);
              }, u.togglePictureInPictureClass_ = function() {
                this.isInPictureInPicture() ? this.addClass("vjs-picture-in-picture") : this.removeClass("vjs-picture-in-picture");
              }, u.handleTechEnterPictureInPicture_ = function(e) {
                this.isInPictureInPicture(true);
              }, u.handleTechLeavePictureInPicture_ = function(e) {
                this.isInPictureInPicture(false);
              }, u.handleTechError_ = function() {
                var e = this.tech_.error();
                this.error(e);
              }, u.handleTechTextData_ = function() {
                var e = null;
                arguments.length > 1 && (e = arguments[1]), this.trigger("textdata", e);
              }, u.getCache = function() {
                return this.cache_;
              }, u.resetCache_ = function() {
                this.cache_ = { currentTime: 0, initTime: 0, inactivityTimeout: this.options_.inactivityTimeout, duration: NaN, lastVolume: 1, lastPlaybackRate: this.defaultPlaybackRate(), media: null, src: "", source: {}, sources: [], playbackRates: [], volume: 1 };
              }, u.techCall_ = function(e, t) {
                this.ready(function() {
                  if (e in pa)
                    return ha(this.middleware_, this.tech_, e, t);
                  if (e in Yi)
                    return Vi(this.middleware_, this.tech_, e, t);
                  try {
                    this.tech_ && this.tech_[e](t);
                  } catch (C) {
                    throw K(C), C;
                  }
                }, true);
              }, u.techGet_ = function(e) {
                if (!(!this.tech_ || !this.tech_.isReady_)) {
                  if (e in va)
                    return fa(this.middleware_, this.tech_, e);
                  if (e in Yi)
                    return Vi(this.middleware_, this.tech_, e);
                  try {
                    return this.tech_[e]();
                  } catch (t) {
                    throw this.tech_[e] === void 0 ? (K("Video.js: " + e + " method not defined for " + this.techName_ + " playback technology.", t), t) : t.name === "TypeError" ? (K("Video.js: " + e + " unavailable on " + this.techName_ + " playback technology element.", t), this.tech_.isReady_ = false, t) : (K(t), t);
                  }
                }
              }, u.play = function() {
                var e = this, t = this.options_.Promise || E.default.Promise;
                return t ? new t(function(C) {
                  e.play_(C);
                }) : this.play_();
              }, u.play_ = function(e) {
                var t = this;
                e === void 0 && (e = Lt), this.playCallbacks_.push(e);
                var C = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
                if (this.waitToPlay_ && (this.off(["ready", "loadstart"], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !C) {
                  this.waitToPlay_ = function(X) {
                    t.play_();
                  }, this.one(["ready", "loadstart"], this.waitToPlay_), !C && (xe || Fe) && this.load();
                  return;
                }
                var G = this.techGet_("play");
                G === null ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(G);
              }, u.runPlayTerminatedQueue_ = function() {
                var e = this.playTerminatedQueue_.slice(0);
                this.playTerminatedQueue_ = [], e.forEach(function(t) {
                  t();
                });
              }, u.runPlayCallbacks_ = function(e) {
                var t = this.playCallbacks_.slice(0);
                this.playCallbacks_ = [], this.playTerminatedQueue_ = [], t.forEach(function(C) {
                  C(e);
                });
              }, u.pause = function() {
                this.techCall_("pause");
              }, u.paused = function() {
                return this.techGet_("paused") !== false;
              }, u.played = function() {
                return this.techGet_("played") || Kt(0, 0);
              }, u.scrubbing = function(e) {
                if (typeof e == "undefined")
                  return this.scrubbing_;
                this.scrubbing_ = !!e, this.techCall_("setScrubbing", this.scrubbing_), e ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
              }, u.currentTime = function(e) {
                if (typeof e != "undefined") {
                  if (e < 0 && (e = 0), !this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                    this.cache_.initTime = e, this.off("canplay", this.boundApplyInitTime_), this.one("canplay", this.boundApplyInitTime_);
                    return;
                  }
                  this.techCall_("setCurrentTime", e), this.cache_.initTime = 0;
                  return;
                }
                return this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime;
              }, u.applyInitTime_ = function() {
                this.currentTime(this.cache_.initTime);
              }, u.duration = function(e) {
                if (e === void 0)
                  return this.cache_.duration !== void 0 ? this.cache_.duration : NaN;
                e = parseFloat(e), e < 0 && (e = 1 / 0), e !== this.cache_.duration && (this.cache_.duration = e, e === 1 / 0 ? this.addClass("vjs-live") : this.removeClass("vjs-live"), isNaN(e) || this.trigger("durationchange"));
              }, u.remainingTime = function() {
                return this.duration() - this.currentTime();
              }, u.remainingTimeDisplay = function() {
                return Math.floor(this.duration()) - Math.floor(this.currentTime());
              }, u.buffered = function() {
                var e = this.techGet_("buffered");
                return (!e || !e.length) && (e = Kt(0, 0)), e;
              }, u.bufferedPercent = function() {
                return ki(this.buffered(), this.duration());
              }, u.bufferedEnd = function() {
                var e = this.buffered(), t = this.duration(), C = e.end(e.length - 1);
                return C > t && (C = t), C;
              }, u.volume = function(e) {
                var t;
                if (e !== void 0) {
                  t = Math.max(0, Math.min(1, parseFloat(e))), this.cache_.volume = t, this.techCall_("setVolume", t), t > 0 && this.lastVolume_(t);
                  return;
                }
                return t = parseFloat(this.techGet_("volume")), isNaN(t) ? 1 : t;
              }, u.muted = function(e) {
                if (e !== void 0) {
                  this.techCall_("setMuted", e);
                  return;
                }
                return this.techGet_("muted") || false;
              }, u.defaultMuted = function(e) {
                return e !== void 0 ? this.techCall_("setDefaultMuted", e) : this.techGet_("defaultMuted") || false;
              }, u.lastVolume_ = function(e) {
                if (e !== void 0 && e !== 0) {
                  this.cache_.lastVolume = e;
                  return;
                }
                return this.cache_.lastVolume;
              }, u.supportsFullScreen = function() {
                return this.techGet_("supportsFullScreen") || false;
              }, u.isFullscreen = function(e) {
                if (e !== void 0) {
                  var t = this.isFullscreen_;
                  this.isFullscreen_ = Boolean(e), this.isFullscreen_ !== t && this.fsApi_.prefixed && this.trigger("fullscreenchange"), this.toggleFullscreenClass_();
                  return;
                }
                return this.isFullscreen_;
              }, u.requestFullscreen = function(e) {
                var t = this.options_.Promise || E.default.Promise;
                if (t) {
                  var C = this;
                  return new t(function(G, X) {
                    function $2() {
                      C.off("fullscreenerror", le), C.off("fullscreenchange", te);
                    }
                    function te() {
                      $2(), G();
                    }
                    function le(pe, Ie) {
                      $2(), X(Ie);
                    }
                    C.one("fullscreenchange", te), C.one("fullscreenerror", le);
                    var J = C.requestFullscreenHelper_(e);
                    J && (J.then($2, $2), J.then(G, X));
                  });
                }
                return this.requestFullscreenHelper_();
              }, u.requestFullscreenHelper_ = function(e) {
                var t = this, C;
                if (this.fsApi_.prefixed || (C = this.options_.fullscreen && this.options_.fullscreen.options || {}, e !== void 0 && (C = e)), this.fsApi_.requestFullscreen) {
                  var G = this.el_[this.fsApi_.requestFullscreen](C);
                  return G && G.then(function() {
                    return t.isFullscreen(true);
                  }, function() {
                    return t.isFullscreen(false);
                  }), G;
                } else
                  this.tech_.supportsFullScreen() && !this.options_.preferFullWindow ? this.techCall_("enterFullScreen") : this.enterFullWindow();
              }, u.exitFullscreen = function() {
                var e = this.options_.Promise || E.default.Promise;
                if (e) {
                  var t = this;
                  return new e(function(C, G) {
                    function X() {
                      t.off("fullscreenerror", te), t.off("fullscreenchange", $2);
                    }
                    function $2() {
                      X(), C();
                    }
                    function te(J, pe) {
                      X(), G(pe);
                    }
                    t.one("fullscreenchange", $2), t.one("fullscreenerror", te);
                    var le = t.exitFullscreenHelper_();
                    le && (le.then(X, X), le.then(C, G));
                  });
                }
                return this.exitFullscreenHelper_();
              }, u.exitFullscreenHelper_ = function() {
                var e = this;
                if (this.fsApi_.requestFullscreen) {
                  var t = L.default[this.fsApi_.exitFullscreen]();
                  return t && Lt(t.then(function() {
                    return e.isFullscreen(false);
                  })), t;
                } else
                  this.tech_.supportsFullScreen() && !this.options_.preferFullWindow ? this.techCall_("exitFullScreen") : this.exitFullWindow();
              }, u.enterFullWindow = function() {
                this.isFullscreen(true), this.isFullWindow = true, this.docOrigOverflow = L.default.documentElement.style.overflow, vt(L.default, "keydown", this.boundFullWindowOnEscKey_), L.default.documentElement.style.overflow = "hidden", He(L.default.body, "vjs-full-window"), this.trigger("enterFullWindow");
              }, u.fullWindowOnEscKey = function(e) {
                y.default.isEventKey(e, "Esc") && this.isFullscreen() === true && (this.isFullWindow ? this.exitFullWindow() : this.exitFullscreen());
              }, u.exitFullWindow = function() {
                this.isFullscreen(false), this.isFullWindow = false, at(L.default, "keydown", this.boundFullWindowOnEscKey_), L.default.documentElement.style.overflow = this.docOrigOverflow, Ge(L.default.body, "vjs-full-window"), this.trigger("exitFullWindow");
              }, u.disablePictureInPicture = function(e) {
                if (e === void 0)
                  return this.techGet_("disablePictureInPicture");
                this.techCall_("setDisablePictureInPicture", e), this.options_.disablePictureInPicture = e, this.trigger("disablepictureinpicturechanged");
              }, u.isInPictureInPicture = function(e) {
                if (e !== void 0) {
                  this.isInPictureInPicture_ = !!e, this.togglePictureInPictureClass_();
                  return;
                }
                return !!this.isInPictureInPicture_;
              }, u.requestPictureInPicture = function() {
                if ("pictureInPictureEnabled" in L.default && this.disablePictureInPicture() === false)
                  return this.techGet_("requestPictureInPicture");
              }, u.exitPictureInPicture = function() {
                if ("pictureInPictureEnabled" in L.default)
                  return L.default.exitPictureInPicture();
              }, u.handleKeyDown = function(e) {
                var t = this.options_.userActions;
                if (!(!t || !t.hotkeys)) {
                  var C = function(X) {
                    var $2 = X.tagName.toLowerCase();
                    if (X.isContentEditable)
                      return true;
                    var te = ["button", "checkbox", "hidden", "radio", "reset", "submit"];
                    if ($2 === "input")
                      return te.indexOf(X.type) === -1;
                    var le = ["textarea"];
                    return le.indexOf($2) !== -1;
                  };
                  C(this.el_.ownerDocument.activeElement) || (typeof t.hotkeys == "function" ? t.hotkeys.call(this, e) : this.handleHotkeys(e));
                }
              }, u.handleHotkeys = function(e) {
                var t = this.options_.userActions ? this.options_.userActions.hotkeys : {}, C = t.fullscreenKey, G = C === void 0 ? function(je) {
                  return y.default.isEventKey(je, "f");
                } : C, X = t.muteKey, $2 = X === void 0 ? function(je) {
                  return y.default.isEventKey(je, "m");
                } : X, te = t.playPauseKey, le = te === void 0 ? function(je) {
                  return y.default.isEventKey(je, "k") || y.default.isEventKey(je, "Space");
                } : te;
                if (G.call(this, e)) {
                  e.preventDefault(), e.stopPropagation();
                  var J = ge.getComponent("FullscreenToggle");
                  L.default[this.fsApi_.fullscreenEnabled] !== false && J.prototype.handleClick.call(this, e);
                } else if ($2.call(this, e)) {
                  e.preventDefault(), e.stopPropagation();
                  var pe = ge.getComponent("MuteToggle");
                  pe.prototype.handleClick.call(this, e);
                } else if (le.call(this, e)) {
                  e.preventDefault(), e.stopPropagation();
                  var Ie = ge.getComponent("PlayToggle");
                  Ie.prototype.handleClick.call(this, e);
                }
              }, u.canPlayType = function(e) {
                for (var t, C = 0, G = this.options_.techOrder; C < G.length; C++) {
                  var X = G[C], $2 = Ve.getTech(X);
                  if ($2 || ($2 = ge.getComponent(X)), !$2) {
                    K.error('The "' + X + '" tech is undefined. Skipped browser support check for that tech.');
                    continue;
                  }
                  if ($2.isSupported() && (t = $2.canPlayType(e), t))
                    return t;
                }
                return "";
              }, u.selectSource = function(e) {
                var t = this, C = this.options_.techOrder.map(function(le) {
                  return [le, Ve.getTech(le)];
                }).filter(function(le) {
                  var J = le[0], pe = le[1];
                  return pe ? pe.isSupported() : (K.error('The "' + J + '" tech is undefined. Skipped browser support check for that tech.'), false);
                }), G = function(J, pe, Ie) {
                  var je;
                  return J.some(function(Gt) {
                    return pe.some(function(It) {
                      if (je = Ie(Gt, It), je)
                        return true;
                    });
                  }), je;
                }, X, $2 = function(J) {
                  return function(pe, Ie) {
                    return J(Ie, pe);
                  };
                }, te = function(J, pe) {
                  var Ie = J[0], je = J[1];
                  if (je.canPlaySource(pe, t.options_[Ie.toLowerCase()]))
                    return { source: pe, tech: Ie };
                };
                return this.options_.sourceOrder ? X = G(e, C, $2(te)) : X = G(C, e, te), X || false;
              }, u.handleSrc_ = function(e, t) {
                var C = this;
                if (typeof e == "undefined")
                  return this.cache_.src || "";
                this.resetRetryOnError_ && this.resetRetryOnError_();
                var G = Ta(e);
                if (!G.length) {
                  this.setTimeout(function() {
                    this.error({ code: 4, message: this.options_.notSupportedMessage });
                  }, 0);
                  return;
                }
                if (this.changingSrc_ = true, t || (this.cache_.sources = G), this.updateSourceCaches_(G[0]), ca(this, G[0], function(te, le) {
                  C.middleware_ = le, t || (C.cache_.sources = G), C.updateSourceCaches_(te);
                  var J = C.src_(te);
                  if (J) {
                    if (G.length > 1)
                      return C.handleSrc_(G.slice(1));
                    C.changingSrc_ = false, C.setTimeout(function() {
                      this.error({ code: 4, message: this.options_.notSupportedMessage });
                    }, 0), C.triggerReady();
                    return;
                  }
                  da(le, C.tech_);
                }), this.options_.retryOnError && G.length > 1) {
                  var X = function() {
                    C.error(null), C.handleSrc_(G.slice(1), true);
                  }, $2 = function() {
                    C.off("error", X);
                  };
                  this.one("error", X), this.one("playing", $2), this.resetRetryOnError_ = function() {
                    C.off("error", X), C.off("playing", $2);
                  };
                }
              }, u.src = function(e) {
                return this.handleSrc_(e, false);
              }, u.src_ = function(e) {
                var t = this, C = this.selectSource([e]);
                return C ? Vn(C.tech, this.techName_) ? (this.ready(function() {
                  this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", e) : this.techCall_("src", e.src), this.changingSrc_ = false;
                }, true), false) : (this.changingSrc_ = true, this.loadTech_(C.tech, C.source), this.tech_.ready(function() {
                  t.changingSrc_ = false;
                }), false) : true;
              }, u.load = function() {
                this.techCall_("load");
              }, u.reset = function() {
                var e = this, t = this.options_.Promise || E.default.Promise;
                if (this.paused() || !t)
                  this.doReset_();
                else {
                  var C = this.play();
                  Lt(C.then(function() {
                    return e.doReset_();
                  }));
                }
              }, u.doReset_ = function() {
                this.tech_ && this.tech_.clearTracks("text"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), wt(this) && this.trigger("playerreset");
              }, u.resetControlBarUI_ = function() {
                this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
              }, u.resetProgressBar_ = function() {
                this.currentTime(0);
                var e = this.controlBar || {}, t = e.durationDisplay, C = e.remainingTimeDisplay;
                t && t.updateContent(), C && C.updateContent();
              }, u.resetPlaybackRate_ = function() {
                this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
              }, u.resetVolumeBar_ = function() {
                this.volume(1), this.trigger("volumechange");
              }, u.currentSources = function() {
                var e = this.currentSource(), t = [];
                return Object.keys(e).length !== 0 && t.push(e), this.cache_.sources || t;
              }, u.currentSource = function() {
                return this.cache_.source || {};
              }, u.currentSrc = function() {
                return this.currentSource() && this.currentSource().src || "";
              }, u.currentType = function() {
                return this.currentSource() && this.currentSource().type || "";
              }, u.preload = function(e) {
                if (e !== void 0) {
                  this.techCall_("setPreload", e), this.options_.preload = e;
                  return;
                }
                return this.techGet_("preload");
              }, u.autoplay = function(e) {
                if (e === void 0)
                  return this.options_.autoplay || false;
                var t;
                typeof e == "string" && /(any|play|muted)/.test(e) || e === true && this.options_.normalizeAutoplay ? (this.options_.autoplay = e, this.manualAutoplay_(typeof e == "string" ? e : "play"), t = false) : e ? this.options_.autoplay = true : this.options_.autoplay = false, t = typeof t == "undefined" ? this.options_.autoplay : t, this.tech_ && this.techCall_("setAutoplay", t);
              }, u.playsinline = function(e) {
                return e !== void 0 ? (this.techCall_("setPlaysinline", e), this.options_.playsinline = e, this) : this.techGet_("playsinline");
              }, u.loop = function(e) {
                if (e !== void 0) {
                  this.techCall_("setLoop", e), this.options_.loop = e;
                  return;
                }
                return this.techGet_("loop");
              }, u.poster = function(e) {
                if (e === void 0)
                  return this.poster_;
                e || (e = ""), e !== this.poster_ && (this.poster_ = e, this.techCall_("setPoster", e), this.isPosterFromTech_ = false, this.trigger("posterchange"));
              }, u.handleTechPosterChange_ = function() {
                if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                  var e = this.tech_.poster() || "";
                  e !== this.poster_ && (this.poster_ = e, this.isPosterFromTech_ = true, this.trigger("posterchange"));
                }
              }, u.controls = function(e) {
                if (e === void 0)
                  return !!this.controls_;
                e = !!e, this.controls_ !== e && (this.controls_ = e, this.usingNativeControls() && this.techCall_("setControls", e), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
              }, u.usingNativeControls = function(e) {
                if (e === void 0)
                  return !!this.usingNativeControls_;
                e = !!e, this.usingNativeControls_ !== e && (this.usingNativeControls_ = e, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), this.trigger("usingcustomcontrols")));
              }, u.error = function(e) {
                var t = this;
                if (e === void 0)
                  return this.error_ || null;
                if (n("beforeerror").forEach(function(G) {
                  var X = G(t, e);
                  if (!(ee(X) && !Array.isArray(X) || typeof X == "string" || typeof X == "number" || X === null)) {
                    t.log.error("please return a value that MediaError expects in beforeerror hooks");
                    return;
                  }
                  e = X;
                }), this.options_.suppressNotSupportedError && e && e.code === 4) {
                  var C = function() {
                    this.error(e);
                  };
                  this.options_.suppressNotSupportedError = false, this.any(["click", "touchstart"], C), this.one("loadstart", function() {
                    this.off(["click", "touchstart"], C);
                  });
                  return;
                }
                if (e === null) {
                  this.error_ = e, this.removeClass("vjs-error"), this.errorDisplay && this.errorDisplay.close();
                  return;
                }
                this.error_ = new ut(e), this.addClass("vjs-error"), K.error("(CODE:" + this.error_.code + " " + ut.errorTypes[this.error_.code] + ")", this.error_.message, this.error_), this.trigger("error"), n("error").forEach(function(G) {
                  return G(t, t.error_);
                });
              }, u.reportUserActivity = function(e) {
                this.userActivity_ = true;
              }, u.userActive = function(e) {
                if (e === void 0)
                  return this.userActive_;
                if (e = !!e, e !== this.userActive_) {
                  if (this.userActive_ = e, this.userActive_) {
                    this.userActivity_ = true, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), this.trigger("useractive");
                    return;
                  }
                  this.tech_ && this.tech_.one("mousemove", function(t) {
                    t.stopPropagation(), t.preventDefault();
                  }), this.userActivity_ = false, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), this.trigger("userinactive");
                }
              }, u.listenForUserActivity_ = function() {
                var e, t, C, G = Qe(this, this.reportUserActivity), X = function(Ie) {
                  (Ie.screenX !== t || Ie.screenY !== C) && (t = Ie.screenX, C = Ie.screenY, G());
                }, $2 = function() {
                  G(), this.clearInterval(e), e = this.setInterval(G, 250);
                }, te = function(Ie) {
                  G(), this.clearInterval(e);
                };
                this.on("mousedown", $2), this.on("mousemove", X), this.on("mouseup", te), this.on("mouseleave", te);
                var le = this.getChild("controlBar");
                le && !Fe && !Te && (le.on("mouseenter", function(pe) {
                  this.player().options_.inactivityTimeout !== 0 && (this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout), this.player().options_.inactivityTimeout = 0;
                }), le.on("mouseleave", function(pe) {
                  this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
                })), this.on("keydown", G), this.on("keyup", G);
                var J;
                this.setInterval(function() {
                  if (!!this.userActivity_) {
                    this.userActivity_ = false, this.userActive(true), this.clearTimeout(J);
                    var pe = this.options_.inactivityTimeout;
                    pe <= 0 || (J = this.setTimeout(function() {
                      this.userActivity_ || this.userActive(false);
                    }, pe));
                  }
                }, 250);
              }, u.playbackRate = function(e) {
                if (e !== void 0) {
                  this.techCall_("setPlaybackRate", e);
                  return;
                }
                return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1;
              }, u.defaultPlaybackRate = function(e) {
                return e !== void 0 ? this.techCall_("setDefaultPlaybackRate", e) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1;
              }, u.isAudio = function(e) {
                if (e !== void 0) {
                  this.isAudio_ = !!e;
                  return;
                }
                return !!this.isAudio_;
              }, u.enableAudioOnlyUI_ = function() {
                var e = this;
                this.addClass("vjs-audio-only-mode");
                var t = this.children(), C = this.getChild("ControlBar"), G = C && C.currentHeight();
                t.forEach(function(X) {
                  X !== C && X.el_ && !X.hasClass("vjs-hidden") && (X.hide(), e.audioOnlyCache_.hiddenChildren.push(X));
                }), this.audioOnlyCache_.playerHeight = this.currentHeight(), this.height(G), this.trigger("audioonlymodechange");
              }, u.disableAudioOnlyUI_ = function() {
                this.removeClass("vjs-audio-only-mode"), this.audioOnlyCache_.hiddenChildren.forEach(function(e) {
                  return e.show();
                }), this.height(this.audioOnlyCache_.playerHeight), this.trigger("audioonlymodechange");
              }, u.audioOnlyMode = function(e) {
                var t = this;
                if (typeof e != "boolean" || e === this.audioOnlyMode_)
                  return this.audioOnlyMode_;
                this.audioOnlyMode_ = e;
                var C = this.options_.Promise || E.default.Promise;
                if (C) {
                  if (e) {
                    var G = [];
                    return this.isInPictureInPicture() && G.push(this.exitPictureInPicture()), this.isFullscreen() && G.push(this.exitFullscreen()), this.audioPosterMode() && G.push(this.audioPosterMode(false)), C.all(G).then(function() {
                      return t.enableAudioOnlyUI_();
                    });
                  }
                  return C.resolve().then(function() {
                    return t.disableAudioOnlyUI_();
                  });
                }
                e ? (this.isInPictureInPicture() && this.exitPictureInPicture(), this.isFullscreen() && this.exitFullscreen(), this.enableAudioOnlyUI_()) : this.disableAudioOnlyUI_();
              }, u.enablePosterModeUI_ = function() {
                var e = this.tech_ && this.tech_;
                e.hide(), this.addClass("vjs-audio-poster-mode"), this.trigger("audiopostermodechange");
              }, u.disablePosterModeUI_ = function() {
                var e = this.tech_ && this.tech_;
                e.show(), this.removeClass("vjs-audio-poster-mode"), this.trigger("audiopostermodechange");
              }, u.audioPosterMode = function(e) {
                var t = this;
                if (typeof e != "boolean" || e === this.audioPosterMode_)
                  return this.audioPosterMode_;
                this.audioPosterMode_ = e;
                var C = this.options_.Promise || E.default.Promise;
                if (C) {
                  if (e) {
                    if (this.audioOnlyMode()) {
                      var G = this.audioOnlyMode(false);
                      return G.then(function() {
                        t.enablePosterModeUI_();
                      });
                    }
                    return C.resolve().then(function() {
                      t.enablePosterModeUI_();
                    });
                  }
                  return C.resolve().then(function() {
                    t.disablePosterModeUI_();
                  });
                }
                if (e) {
                  this.audioOnlyMode() && this.audioOnlyMode(false), this.enablePosterModeUI_();
                  return;
                }
                this.disablePosterModeUI_();
              }, u.addTextTrack = function(e, t, C) {
                if (this.tech_)
                  return this.tech_.addTextTrack(e, t, C);
              }, u.addRemoteTextTrack = function(e, t) {
                if (this.tech_)
                  return this.tech_.addRemoteTextTrack(e, t);
              }, u.removeRemoteTextTrack = function(e) {
                e === void 0 && (e = {});
                var t = e, C = t.track;
                if (C || (C = e), this.tech_)
                  return this.tech_.removeRemoteTextTrack(C);
              }, u.getVideoPlaybackQuality = function() {
                return this.techGet_("getVideoPlaybackQuality");
              }, u.videoWidth = function() {
                return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
              }, u.videoHeight = function() {
                return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
              }, u.language = function(e) {
                if (e === void 0)
                  return this.language_;
                this.language_ !== String(e).toLowerCase() && (this.language_ = String(e).toLowerCase(), wt(this) && this.trigger("languagechange"));
              }, u.languages = function() {
                return $e(P.prototype.options_.languages, this.languages_);
              }, u.toJSON = function() {
                var e = $e(this.options_), t = e.tracks;
                e.tracks = [];
                for (var C = 0; C < t.length; C++) {
                  var G = t[C];
                  G = $e(G), G.player = void 0, e.tracks[C] = G;
                }
                return e;
              }, u.createModal = function(e, t) {
                var C = this;
                t = t || {}, t.content = e || "";
                var G = new Xt(this, t);
                return this.addChild(G), G.on("dispose", function() {
                  C.removeChild(G);
                }), G.open(), G;
              }, u.updateCurrentBreakpoint_ = function() {
                if (!!this.responsive())
                  for (var e = this.currentBreakpoint(), t = this.currentWidth(), C = 0; C < Si.length; C++) {
                    var G = Si[C], X = this.breakpoints_[G];
                    if (t <= X) {
                      if (e === G)
                        return;
                      e && this.removeClass(Or[e]), this.addClass(Or[G]), this.breakpoint_ = G;
                      break;
                    }
                  }
              }, u.removeCurrentBreakpoint_ = function() {
                var e = this.currentBreakpointClass();
                this.breakpoint_ = "", e && this.removeClass(e);
              }, u.breakpoints = function(e) {
                return e === void 0 ? q(this.breakpoints_) : (this.breakpoint_ = "", this.breakpoints_ = q({}, qa, e), this.updateCurrentBreakpoint_(), q(this.breakpoints_));
              }, u.responsive = function(e) {
                if (e === void 0)
                  return this.responsive_;
                e = Boolean(e);
                var t = this.responsive_;
                if (e !== t)
                  return this.responsive_ = e, e ? (this.on("playerresize", this.boundUpdateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.boundUpdateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), e;
              }, u.currentBreakpoint = function() {
                return this.breakpoint_;
              }, u.currentBreakpointClass = function() {
                return Or[this.breakpoint_] || "";
              }, u.loadMedia = function(e, t) {
                var C = this;
                if (!(!e || typeof e != "object")) {
                  this.reset(), this.cache_.media = $e(e);
                  var G = this.cache_.media, X = G.artwork, $2 = G.poster, te = G.src, le = G.textTracks;
                  !X && $2 && (this.cache_.media.artwork = [{ src: $2, type: br($2) }]), te && this.src(te), $2 && this.poster($2), Array.isArray(le) && le.forEach(function(J) {
                    return C.addRemoteTextTrack(J, false);
                  }), this.ready(t);
                }
              }, u.getMedia = function() {
                if (!this.cache_.media) {
                  var e = this.poster(), t = this.currentSources(), C = Array.prototype.map.call(this.remoteTextTracks(), function(X) {
                    return { kind: X.kind, label: X.label, language: X.language, src: X.src };
                  }), G = { src: t, textTracks: C };
                  return e && (G.poster = e, G.artwork = [{ src: G.poster, type: br(G.poster) }]), G;
                }
                return $e(this.cache_.media);
              }, P.getTagSettings = function(e) {
                var t = { sources: [], tracks: [] }, C = Xe(e), G = C["data-setup"];
                if (Ke(e, "vjs-fill") && (C.fill = true), Ke(e, "vjs-fluid") && (C.fluid = true), G !== null) {
                  var X = d.default(G || "{}"), $2 = X[0], te = X[1];
                  $2 && K.error($2), q(C, te);
                }
                if (q(t, C), e.hasChildNodes())
                  for (var le = e.childNodes, J = 0, pe = le.length; J < pe; J++) {
                    var Ie = le[J], je = Ie.nodeName.toLowerCase();
                    je === "source" ? t.sources.push(Xe(Ie)) : je === "track" && t.tracks.push(Xe(Ie));
                  }
                return t;
              }, u.flexNotSupported_ = function() {
                var e = L.default.createElement("i");
                return !("flexBasis" in e.style || "webkitFlexBasis" in e.style || "mozFlexBasis" in e.style || "msFlexBasis" in e.style || "msFlexOrder" in e.style);
              }, u.debug = function(e) {
                if (e === void 0)
                  return this.debugEnabled_;
                e ? (this.trigger("debugon"), this.previousLogLevel_ = this.log.level, this.log.level("debug"), this.debugEnabled_ = true) : (this.trigger("debugoff"), this.log.level(this.previousLogLevel_), this.previousLogLevel_ = void 0, this.debugEnabled_ = false);
              }, u.playbackRates = function(e) {
                if (e === void 0)
                  return this.cache_.playbackRates;
                !Array.isArray(e) || !e.every(function(t) {
                  return typeof t == "number";
                }) || (this.cache_.playbackRates = e, this.trigger("playbackrateschange"));
              }, P;
            }(ge);
            ct.names.forEach(function(T) {
              var P = ct[T];
              et.prototype[P.getterName] = function() {
                return this.tech_ ? this.tech_[P.getterName]() : (this[P.privateName] = this[P.privateName] || new P.ListClass(), this[P.privateName]);
              };
            }), et.prototype.crossorigin = et.prototype.crossOrigin, et.players = {};
            var fr = E.default.navigator;
            et.prototype.options_ = { techOrder: Ve.defaultTechOrder_, html5: {}, inactivityTimeout: 2e3, playbackRates: [], liveui: false, children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"], language: fr && (fr.languages && fr.languages[0] || fr.userLanguage || fr.language) || "en", languages: {}, notSupportedMessage: "No compatible source was found for this media.", normalizeAutoplay: false, fullscreen: { options: { navigationUI: "hide" } }, breakpoints: {}, responsive: false, audioOnlyMode: false, audioPosterMode: false }, ["ended", "seeking", "seekable", "networkState", "readyState"].forEach(function(T) {
              et.prototype[T] = function() {
                return this.techGet_(T);
              };
            }), On.forEach(function(T) {
              et.prototype["handleTech" + Je(T) + "_"] = function() {
                return this.trigger(T);
              };
            }), ge.registerComponent("Player", et);
            var Rr = "plugin", tr = "activePlugins_", rr = {}, Mr = function(P) {
              return rr.hasOwnProperty(P);
            }, kr = function(P) {
              return Mr(P) ? rr[P] : void 0;
            }, Rn = function(P, u) {
              P[tr] = P[tr] || {}, P[tr][u] = true;
            }, wr = function(P, u, r) {
              var e = (r ? "before" : "") + "pluginsetup";
              P.trigger(e, u), P.trigger(e + ":" + u.name, u);
            }, Ja = function(P, u) {
              var r = function() {
                wr(this, { name: P, plugin: u, instance: null }, true);
                var t = u.apply(this, arguments);
                return Rn(this, P), wr(this, { name: P, plugin: u, instance: t }), t;
              };
              return Object.keys(u).forEach(function(e) {
                r[e] = u[e];
              }), r;
            }, Mn = function(P, u) {
              return u.prototype.name = P, function() {
                wr(this, { name: P, plugin: u, instance: null }, true);
                for (var r = arguments.length, e = new Array(r), t = 0; t < r; t++)
                  e[t] = arguments[t];
                var C = l.default(u, [this].concat(e));
                return this[P] = function() {
                  return C;
                }, wr(this, C.getEventHash()), C;
              };
            }, Dt = function() {
              function T(u) {
                if (this.constructor === T)
                  throw new Error("Plugin must be sub-classed; not directly instantiated.");
                this.player = u, this.log || (this.log = this.player.log.createLogger(this.name)), Ur(this), delete this.trigger, Ri(this, this.constructor.defaultState), Rn(u, this.name), this.dispose = this.dispose.bind(this), u.on("dispose", this.dispose);
              }
              var P = T.prototype;
              return P.version = function() {
                return this.constructor.VERSION;
              }, P.getEventHash = function(r) {
                return r === void 0 && (r = {}), r.name = this.name, r.plugin = this.constructor, r.instance = this, r;
              }, P.trigger = function(r, e) {
                return e === void 0 && (e = {}), Yt(this.eventBusEl_, r, this.getEventHash(e));
              }, P.handleStateChanged = function(r) {
              }, P.dispose = function() {
                var r = this.name, e = this.player;
                this.trigger("dispose"), this.off(), e.off("dispose", this.dispose), e[tr][r] = false, this.player = this.state = null, e[r] = Mn(r, rr[r]);
              }, T.isBasic = function(r) {
                var e = typeof r == "string" ? kr(r) : r;
                return typeof e == "function" && !T.prototype.isPrototypeOf(e.prototype);
              }, T.registerPlugin = function(r, e) {
                if (typeof r != "string")
                  throw new Error('Illegal plugin name, "' + r + '", must be a string, was ' + typeof r + ".");
                if (Mr(r))
                  K.warn('A plugin named "' + r + '" already exists. You may want to avoid re-registering plugins!');
                else if (et.prototype.hasOwnProperty(r))
                  throw new Error('Illegal plugin name, "' + r + '", cannot share a name with an existing player method!');
                if (typeof e != "function")
                  throw new Error('Illegal plugin for "' + r + '", must be a function, was ' + typeof e + ".");
                return rr[r] = e, r !== Rr && (T.isBasic(e) ? et.prototype[r] = Ja(r, e) : et.prototype[r] = Mn(r, e)), e;
              }, T.deregisterPlugin = function(r) {
                if (r === Rr)
                  throw new Error("Cannot de-register base plugin.");
                Mr(r) && (delete rr[r], delete et.prototype[r]);
              }, T.getPlugins = function(r) {
                r === void 0 && (r = Object.keys(rr));
                var e;
                return r.forEach(function(t) {
                  var C = kr(t);
                  C && (e = e || {}, e[t] = C);
                }), e;
              }, T.getPluginVersion = function(r) {
                var e = kr(r);
                return e && e.VERSION || "";
              }, T;
            }();
            Dt.getPlugin = kr, Dt.BASE_PLUGIN_NAME = Rr, Dt.registerPlugin(Rr, Dt), et.prototype.usingPlugin = function(T) {
              return !!this[tr] && this[tr][T] === true;
            }, et.prototype.hasPlugin = function(T) {
              return !!Mr(T);
            };
            var kn = false, Za = function(P, u) {
              u === void 0 && (u = {}), kn || (K.warn("videojs.extend is deprecated as of Video.js 7.22.0 and will be removed in Video.js 8.0.0"), kn = true);
              var r = function() {
                P.apply(this, arguments);
              }, e = {};
              typeof u == "object" ? (u.constructor !== Object.prototype.constructor && (r = u.constructor), e = u) : typeof u == "function" && (r = u), _.default(r, P), P && (r.super_ = P);
              for (var t in e)
                e.hasOwnProperty(t) && (r.prototype[t] = e[t]);
              return r;
            }, wn = function(P) {
              return P.indexOf("#") === 0 ? P.slice(1) : P;
            };
            function Oe(T, P, u) {
              var r = Oe.getPlayer(T);
              if (r)
                return P && K.warn('Player "' + T + '" is already initialised. Options will not be applied.'), u && r.ready(u), r;
              var e = typeof T == "string" ? ft("#" + wn(T)) : T;
              if (!ze(e))
                throw new TypeError("The element or ID supplied is not valid. (videojs)");
              (!e.ownerDocument.defaultView || !e.ownerDocument.body.contains(e)) && K.warn("The element supplied is not included in the DOM"), P = P || {}, P.restoreEl === true && (P.restoreEl = (e.parentNode && e.parentNode.hasAttribute("data-vjs-player") ? e.parentNode : e).cloneNode(true)), n("beforesetup").forEach(function(C) {
                var G = C(e, $e(P));
                if (!ee(G) || Array.isArray(G)) {
                  K.error("please return an object in beforesetup hooks");
                  return;
                }
                P = $e(P, G);
              });
              var t = ge.getComponent("Player");
              return r = new t(e, P, u), n("setup").forEach(function(C) {
                return C(r);
              }), r;
            }
            if (Oe.hooks_ = i, Oe.hooks = n, Oe.hook = o, Oe.hookOnce = b, Oe.removeHook = h, E.default.VIDEOJS_NO_DYNAMIC_STYLE !== true && Ye()) {
              var xr = ft(".vjs-styles-defaults");
              if (!xr) {
                xr = vr("vjs-styles-defaults");
                var bi = ft("head");
                bi && bi.insertBefore(xr, bi.firstChild), sr(xr, `
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: 56.25%
      }
    `);
              }
            }
            Pt(1, Oe), Oe.VERSION = g, Oe.options = et.prototype.options_, Oe.getPlayers = function() {
              return et.players;
            }, Oe.getPlayer = function(T) {
              var P = et.players, u;
              if (typeof T == "string") {
                var r = wn(T), e = P[r];
                if (e)
                  return e;
                u = ft("#" + r);
              } else
                u = T;
              if (ze(u)) {
                var t = u, C = t.player, G = t.playerId;
                if (C || P[G])
                  return C || P[G];
              }
            }, Oe.getAllPlayers = function() {
              return Object.keys(et.players).map(function(T) {
                return et.players[T];
              }).filter(Boolean);
            }, Oe.players = et.players, Oe.getComponent = ge.getComponent, Oe.registerComponent = function(T, P) {
              Ve.isTech(P) && K.warn("The " + T + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"), ge.registerComponent.call(ge, T, P);
            }, Oe.getTech = Ve.getTech, Oe.registerTech = Ve.registerTech, Oe.use = ua, Object.defineProperty(Oe, "middleware", { value: {}, writeable: false, enumerable: true }), Object.defineProperty(Oe.middleware, "TERMINATOR", { value: Sr, writeable: false, enumerable: true }), Oe.browser = Ue, Oe.TOUCH_ENABLED = De, Oe.extend = Za, Oe.mergeOptions = $e, Oe.bind = Qe, Oe.registerPlugin = Dt.registerPlugin, Oe.deregisterPlugin = Dt.deregisterPlugin, Oe.plugin = function(T, P) {
              return K.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), Dt.registerPlugin(T, P);
            }, Oe.getPlugins = Dt.getPlugins, Oe.getPlugin = Dt.getPlugin, Oe.getPluginVersion = Dt.getPluginVersion, Oe.addLanguage = function(T, P) {
              var u;
              return T = ("" + T).toLowerCase(), Oe.options.languages = $e(Oe.options.languages, (u = {}, u[T] = P, u)), Oe.options.languages[T];
            }, Oe.log = K, Oe.createLogger = W, Oe.createTimeRange = Oe.createTimeRanges = Kt, Oe.formatTime = Jt, Oe.setFormatTime = Da, Oe.resetFormatTime = Ia, Oe.parseUrl = zr, Oe.isCrossOrigin = Tr, Oe.EventTarget = rt, Oe.on = vt, Oe.one = mr, Oe.off = at, Oe.trigger = Yt, Oe.xhr = v.default, Oe.TextTrack = ur, Oe.AudioTrack = ji, Oe.VideoTrack = Hi, ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach(function(T) {
              Oe[T] = function() {
                return K.warn("videojs." + T + "() is deprecated; use videojs.dom." + T + "() instead"), Vt[T].apply(null, arguments);
              };
            }), Oe.computedStyle = ne, Oe.dom = Vt, Oe.url = aa, Oe.defineLazyProperty = Ei, Oe.addLanguage("en", { "Non-Fullscreen": "Exit Fullscreen" }), Ee.exports = Oe;
          }, 288: (Ee, Me, Ce) => {
            (function() {
              var Ae = false;
              (function(Pe, Z) {
                if (true)
                  Ee.exports = Z(Ce(207));
                else
                  var Y, N;
              })(typeof self != "undefined" ? self : this, function(Pe) {
                return function(Z) {
                  function Y(j) {
                    if (N[j])
                      return N[j].exports;
                    var R = N[j] = { i: j, l: false, exports: {} };
                    return Z[j].call(R.exports, R, R.exports, Y), R.l = true, R.exports;
                  }
                  var N = {};
                  return Y.m = Z, Y.c = N, Y.d = function(j, R, F) {
                    Y.o(j, R) || Object.defineProperty(j, R, { configurable: false, enumerable: true, get: F });
                  }, Y.n = function(j) {
                    var R = j && j.__esModule ? function() {
                      return j.default;
                    } : function() {
                      return j;
                    };
                    return Y.d(R, "a", R), R;
                  }, Y.o = function(j, R) {
                    return Object.prototype.hasOwnProperty.call(j, R);
                  }, Y.p = "", Y(Y.s = 2);
                }([function(Z, Y, N) {
                  (function() {
                    (function(j, R) {
                      Z.exports = R();
                    })(typeof self != "undefined" && self, function() {
                      return function(j) {
                        function R(O) {
                          if (F[O])
                            return F[O].exports;
                          var x = F[O] = { i: O, l: false, exports: {} };
                          return j[O].call(x.exports, x, x.exports, R), x.l = true, x.exports;
                        }
                        var F = {};
                        return R.m = j, R.c = F, R.d = function(O, x, k) {
                          R.o(O, x) || Object.defineProperty(O, x, { configurable: false, enumerable: true, get: k });
                        }, R.n = function(O) {
                          var x = O && O.__esModule ? function() {
                            return O.default;
                          } : function() {
                            return O;
                          };
                          return R.d(x, "a", x), x;
                        }, R.o = function(O, x) {
                          return Object.prototype.hasOwnProperty.call(O, x);
                        }, R.p = "", R(R.s = 18);
                      }([function(j, R, F) {
                        (function(O) {
                          var x;
                          x = typeof window != "undefined" ? window : O !== void 0 ? O : typeof self != "undefined" ? self : {}, j.exports = x;
                        }).call(R, F(20));
                      }, function(j, R) {
                        function F(H, V, z) {
                          switch (z.length) {
                            case 0:
                              return H.call(V);
                            case 1:
                              return H.call(V, z[0]);
                            case 2:
                              return H.call(V, z[0], z[1]);
                            case 3:
                              return H.call(V, z[0], z[1], z[2]);
                          }
                          return H.apply(V, z);
                        }
                        function O(H, V) {
                          for (var z = -1, Q = Array(H); ++z < H; )
                            Q[z] = V(z);
                          return Q;
                        }
                        function x(H, V) {
                          var z = K(H) || d(H) ? O(H.length, String) : [], Q = z.length, q = !!Q;
                          for (var ee in H)
                            !V && !p.call(H, ee) || q && (ee == "length" || M(ee, Q)) || z.push(ee);
                          return z;
                        }
                        function k(H, V, z) {
                          var Q = H[V];
                          p.call(H, V) && S(Q, z) && (z !== void 0 || V in H) || (H[V] = z);
                        }
                        function m2(H) {
                          if (!I(H))
                            return w(H);
                          var V = [];
                          for (var z in Object(H))
                            p.call(H, z) && z != "constructor" && V.push(z);
                          return V;
                        }
                        function E(H, V) {
                          return V = B(V === void 0 ? H.length - 1 : V, 0), function() {
                            for (var z = arguments, Q = -1, q = B(z.length - V, 0), ee = Array(q); ++Q < q; )
                              ee[Q] = z[V + Q];
                            Q = -1;
                            for (var ae = Array(V + 1); ++Q < V; )
                              ae[Q] = z[Q];
                            return ae[V] = ee, F(H, this, ae);
                          };
                        }
                        function L(H, V, z, Q) {
                          z || (z = {});
                          for (var q = -1, ee = V.length; ++q < ee; ) {
                            var ae = V[q], ne = Q ? Q(z[ae], H[ae], ae, z, H) : void 0;
                            k(z, ae, ne === void 0 ? H[ae] : ne);
                          }
                          return z;
                        }
                        function M(H, V) {
                          return !!(V = V == null ? o : V) && (typeof H == "number" || c.test(H)) && H > -1 && H % 1 == 0 && H < V;
                        }
                        function y(H, V, z) {
                          if (!g(z))
                            return false;
                          var Q = typeof V;
                          return !!(Q == "number" ? v(z) && M(V, z.length) : Q == "string" && V in z) && S(z[V], H);
                        }
                        function I(H) {
                          var V = H && H.constructor;
                          return H === (typeof V == "function" && V.prototype || s);
                        }
                        function S(H, V) {
                          return H === V || H !== H && V !== V;
                        }
                        function d(H) {
                          return f(H) && p.call(H, "callee") && (!A.call(H, "callee") || D.call(H) == h);
                        }
                        function v(H) {
                          return H != null && _(H.length) && !l(H);
                        }
                        function f(H) {
                          return i(H) && v(H);
                        }
                        function l(H) {
                          var V = g(H) ? D.call(H) : "";
                          return V == b || V == a;
                        }
                        function _(H) {
                          return typeof H == "number" && H > -1 && H % 1 == 0 && H <= o;
                        }
                        function g(H) {
                          var V = typeof H;
                          return !!H && (V == "object" || V == "function");
                        }
                        function i(H) {
                          return !!H && typeof H == "object";
                        }
                        function n(H) {
                          return v(H) ? x(H) : m2(H);
                        }
                        var o = 9007199254740991, h = "[object Arguments]", b = "[object Function]", a = "[object GeneratorFunction]", c = /^(?:0|[1-9]\d*)$/, s = Object.prototype, p = s.hasOwnProperty, D = s.toString, A = s.propertyIsEnumerable, w = function(H, V) {
                          return function(z) {
                            return H(V(z));
                          };
                        }(Object.keys, Object), B = Math.max, U = !A.call({ valueOf: 1 }, "valueOf"), K = Array.isArray, W = function(H) {
                          return E(function(V, z) {
                            var Q = -1, q = z.length, ee = q > 1 ? z[q - 1] : void 0, ae = q > 2 ? z[2] : void 0;
                            for (ee = H.length > 3 && typeof ee == "function" ? (q--, ee) : void 0, ae && y(z[0], z[1], ae) && (ee = q < 3 ? void 0 : ee, q = 1), V = Object(V); ++Q < q; ) {
                              var ne = z[Q];
                              ne && H(V, ne);
                            }
                            return V;
                          });
                        }(function(H, V) {
                          if (U || I(V) || v(V))
                            return void L(V, n(V), H);
                          for (var z in V)
                            p.call(V, z) && k(H, z, V[z]);
                        });
                        j.exports = W;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(0), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = {};
                        k.now = function() {
                          var m2 = x.default.performance, E = m2 && m2.timing;
                          return E && typeof E.navigationStart == "number" && typeof m2.now == "function" ? E.navigationStart + m2.now() : Date.now();
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        function O(x, k, m2) {
                          m2 = m2 === void 0 ? 1 : m2, x[k] = x[k] || 0, x[k] += m2;
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(21), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = x.default.methodFactory;
                        x.default.methodFactory = function(m2, E, L) {
                          var M = k(m2, E, L);
                          return function() {
                            for (var y = ["[mux]"], I = 0; I < arguments.length; I++)
                              y.push(arguments[I]);
                            M.apply(void 0, y);
                          };
                        }, x.default.setLevel(x.default.getLevel()), R.default = x.default;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = function(m2) {
                          return k(m2)[0];
                        }, x = function(m2) {
                          return k(m2)[1];
                        }, k = function(m2) {
                          if (typeof m2 != "string" || m2 === "")
                            return ["localhost"];
                          var E = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, L = m2.match(E) || [], M = L[4], y = void 0;
                          return M && (y = (M.match(/[^\.]+\.[^\.]+$/) || [])[0]), [M, y];
                        };
                        R.extractHostnameAndDomain = k, R.extractHostname = O, R.extractDomain = x;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = function() {
                          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(k) {
                            var m2 = 16 * Math.random() | 0;
                            return (k === "x" ? m2 : 3 & m2 | 8).toString(16);
                          });
                        }, x = function() {
                          return ("000000" + (Math.random() * Math.pow(36, 6) << 0).toString(36)).slice(-6);
                        };
                        R.generateUUID = O, R.generateShortID = x;
                      }, function(j, R, F) {
                        "use strict";
                        function O(k) {
                          k = k || "";
                          var m2 = {};
                          return k.trim().split(/[\r\n]+/).forEach(function(E) {
                            if (E) {
                              var L = E.split(": "), M = L.shift();
                              M && (x.indexOf(M.toLowerCase()) >= 0 || M.toLowerCase().indexOf("x-litix-") === 0) && (m2[M] = L.join(": "));
                            }
                          }), m2;
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = ["x-cdn", "content-type"];
                      }, function(j, R, F) {
                        "use strict";
                        var O = SyntaxError, x = Function, k = TypeError, m2 = function(p) {
                          try {
                            return x('"use strict"; return (' + p + ").constructor;")();
                          } catch (D) {
                          }
                        }, E = Object.getOwnPropertyDescriptor;
                        if (E)
                          try {
                            E({}, "");
                          } catch (p) {
                            E = null;
                          }
                        var L = function() {
                          throw new k();
                        }, M = E ? function() {
                          try {
                            return arguments.callee, L;
                          } catch (p) {
                            try {
                              return E(arguments, "callee").get;
                            } catch (D) {
                              return L;
                            }
                          }
                        }() : L, y = F(43)(), I = Object.getPrototypeOf || function(p) {
                          return p.__proto__;
                        }, S = {}, d = typeof Uint8Array == "undefined" ? void 0 : I(Uint8Array), v = { "%AggregateError%": typeof AggregateError == "undefined" ? void 0 : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer == "undefined" ? void 0 : ArrayBuffer, "%ArrayIteratorPrototype%": y ? I([][Symbol.iterator]()) : void 0, "%AsyncFromSyncIteratorPrototype%": void 0, "%AsyncFunction%": S, "%AsyncGenerator%": S, "%AsyncGeneratorFunction%": S, "%AsyncIteratorPrototype%": S, "%Atomics%": typeof Atomics == "undefined" ? void 0 : Atomics, "%BigInt%": typeof BigInt == "undefined" ? void 0 : BigInt, "%Boolean%": Boolean, "%DataView%": typeof DataView == "undefined" ? void 0 : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": typeof Float32Array == "undefined" ? void 0 : Float32Array, "%Float64Array%": typeof Float64Array == "undefined" ? void 0 : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry == "undefined" ? void 0 : FinalizationRegistry, "%Function%": x, "%GeneratorFunction%": S, "%Int8Array%": typeof Int8Array == "undefined" ? void 0 : Int8Array, "%Int16Array%": typeof Int16Array == "undefined" ? void 0 : Int16Array, "%Int32Array%": typeof Int32Array == "undefined" ? void 0 : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": y ? I(I([][Symbol.iterator]())) : void 0, "%JSON%": typeof JSON == "object" ? JSON : void 0, "%Map%": typeof Map == "undefined" ? void 0 : Map, "%MapIteratorPrototype%": typeof Map != "undefined" && y ? I((/* @__PURE__ */ new Map())[Symbol.iterator]()) : void 0, "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise == "undefined" ? void 0 : Promise, "%Proxy%": typeof Proxy == "undefined" ? void 0 : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": typeof Reflect == "undefined" ? void 0 : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set == "undefined" ? void 0 : Set, "%SetIteratorPrototype%": typeof Set != "undefined" && y ? I((/* @__PURE__ */ new Set())[Symbol.iterator]()) : void 0, "%SharedArrayBuffer%": typeof SharedArrayBuffer == "undefined" ? void 0 : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": y ? I(""[Symbol.iterator]()) : void 0, "%Symbol%": y ? Symbol : void 0, "%SyntaxError%": O, "%ThrowTypeError%": M, "%TypedArray%": d, "%TypeError%": k, "%Uint8Array%": typeof Uint8Array == "undefined" ? void 0 : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray == "undefined" ? void 0 : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array == "undefined" ? void 0 : Uint16Array, "%Uint32Array%": typeof Uint32Array == "undefined" ? void 0 : Uint32Array, "%URIError%": URIError, "%WeakMap%": typeof WeakMap == "undefined" ? void 0 : WeakMap, "%WeakRef%": typeof WeakRef == "undefined" ? void 0 : WeakRef, "%WeakSet%": typeof WeakSet == "undefined" ? void 0 : WeakSet }, f = function p(D) {
                          var A;
                          if (D === "%AsyncFunction%")
                            A = m2("async function () {}");
                          else if (D === "%GeneratorFunction%")
                            A = m2("function* () {}");
                          else if (D === "%AsyncGeneratorFunction%")
                            A = m2("async function* () {}");
                          else if (D === "%AsyncGenerator%") {
                            var w = p("%AsyncGeneratorFunction%");
                            w && (A = w.prototype);
                          } else if (D === "%AsyncIteratorPrototype%") {
                            var B = p("%AsyncGenerator%");
                            B && (A = I(B.prototype));
                          }
                          return v[D] = A, A;
                        }, l = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, _ = F(9), g = F(46), i = _.call(Function.call, Array.prototype.concat), n = _.call(Function.apply, Array.prototype.splice), o = _.call(Function.call, String.prototype.replace), h = _.call(Function.call, String.prototype.slice), b = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, a = /\\(\\)?/g, c = function(p) {
                          var D = h(p, 0, 1), A = h(p, -1);
                          if (D === "%" && A !== "%")
                            throw new O("invalid intrinsic syntax, expected closing `%`");
                          if (A === "%" && D !== "%")
                            throw new O("invalid intrinsic syntax, expected opening `%`");
                          var w = [];
                          return o(p, b, function(B, U, K, W) {
                            w[w.length] = K ? o(W, a, "$1") : U || B;
                          }), w;
                        }, s = function(p, D) {
                          var A, w = p;
                          if (g(l, w) && (A = l[w], w = "%" + A[0] + "%"), g(v, w)) {
                            var B = v[w];
                            if (B === S && (B = f(w)), B === void 0 && !D)
                              throw new k("intrinsic " + p + " exists, but is not available. Please file an issue!");
                            return { alias: A, name: w, value: B };
                          }
                          throw new O("intrinsic " + p + " does not exist!");
                        };
                        j.exports = function(p, D) {
                          if (typeof p != "string" || p.length === 0)
                            throw new k("intrinsic name must be a non-empty string");
                          if (arguments.length > 1 && typeof D != "boolean")
                            throw new k('"allowMissing" argument must be a boolean');
                          var A = c(p), w = A.length > 0 ? A[0] : "", B = s("%" + w + "%", D), U = B.name, K = B.value, W = false, H = B.alias;
                          H && (w = H[0], n(A, i([0, 1], H)));
                          for (var V = 1, z = true; V < A.length; V += 1) {
                            var Q = A[V], q = h(Q, 0, 1), ee = h(Q, -1);
                            if ((q === '"' || q === "'" || q === "`" || ee === '"' || ee === "'" || ee === "`") && q !== ee)
                              throw new O("property names with quotes must have matching quotes");
                            if (Q !== "constructor" && z || (W = true), w += "." + Q, U = "%" + w + "%", g(v, U))
                              K = v[U];
                            else if (K != null) {
                              if (!(Q in K)) {
                                if (!D)
                                  throw new k("base intrinsic for " + p + " exists, but the property is not available.");
                                return;
                              }
                              if (E && V + 1 >= A.length) {
                                var ae = E(K, Q);
                                z = !!ae, K = z && "get" in ae && !("originalValue" in ae.get) ? ae.get : K[Q];
                              } else
                                z = g(K, Q), K = K[Q];
                              z && !W && (v[U] = K);
                            }
                          }
                          return K;
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(45);
                        j.exports = Function.prototype.bind || O;
                      }, function(j, R, F) {
                        "use strict";
                        var O = String.prototype.replace, x = /%20/g, k = { RFC1738: "RFC1738", RFC3986: "RFC3986" };
                        j.exports = { default: k.RFC3986, formatters: { RFC1738: function(m2) {
                          return O.call(m2, x, "+");
                        }, RFC3986: function(m2) {
                          return String(m2);
                        } }, RFC1738: k.RFC1738, RFC3986: k.RFC3986 };
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true }), R.findMediaElement = R.getMuxPlayerId = void 0;
                        var O = F(6), x = function(m2) {
                          return m2 && m2.nodeName !== void 0 ? (m2.muxId || (m2.muxId = m2.id || (0, O.generateShortID)()), m2.muxId) : m2;
                        }, k = function(m2) {
                          var E = void 0;
                          return m2 && m2.nodeName !== void 0 ? (E = m2, m2 = x(E)) : E = document.querySelector(m2), [E, m2, E && E.nodeName ? E.nodeName.toLowerCase() : ""];
                        };
                        R.getMuxPlayerId = x, R.findMediaElement = k;
                      }, function(j, R, F) {
                        "use strict";
                        function O() {
                          return (k.default.doNotTrack || k.default.navigator && (k.default.navigator.doNotTrack || k.default.navigator.msDoNotTrack)) === "1";
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = F(0), k = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(x);
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(0), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = {};
                        k.exists = function() {
                          var m2 = x.default.performance;
                          return (m2 && m2.timing) !== void 0;
                        }, k.domContentLoadedEventEnd = function() {
                          var m2 = x.default.performance, E = m2 && m2.timing;
                          return E && E.domContentLoadedEventEnd;
                        }, k.navigationStart = function() {
                          var m2 = x.default.performance, E = m2 && m2.timing;
                          return E && E.navigationStart;
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = function(x) {
                          var k = {};
                          for (var m2 in x) {
                            var E = x[m2];
                            E["DATA-ID"].search("io.litix.data.") !== -1 && (k[E["DATA-ID"].replace("io.litix.data.", "")] = E.VALUE);
                          }
                          return k;
                        };
                        R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(41), x = F(51), k = F(10);
                        j.exports = { formats: k, parse: x, stringify: O };
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(10), x = Object.prototype.hasOwnProperty, k = Array.isArray, m2 = function() {
                          for (var g = [], i = 0; i < 256; ++i)
                            g.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
                          return g;
                        }(), E = function(g) {
                          for (; g.length > 1; ) {
                            var i = g.pop(), n = i.obj[i.prop];
                            if (k(n)) {
                              for (var o = [], h = 0; h < n.length; ++h)
                                n[h] !== void 0 && o.push(n[h]);
                              i.obj[i.prop] = o;
                            }
                          }
                        }, L = function(g, i) {
                          for (var n = i && i.plainObjects ? /* @__PURE__ */ Object.create(null) : {}, o = 0; o < g.length; ++o)
                            g[o] !== void 0 && (n[o] = g[o]);
                          return n;
                        }, M = function g(i, n, o) {
                          if (!n)
                            return i;
                          if (typeof n != "object") {
                            if (k(i))
                              i.push(n);
                            else {
                              if (!i || typeof i != "object")
                                return [i, n];
                              (o && (o.plainObjects || o.allowPrototypes) || !x.call(Object.prototype, n)) && (i[n] = true);
                            }
                            return i;
                          }
                          if (!i || typeof i != "object")
                            return [i].concat(n);
                          var h = i;
                          return k(i) && !k(n) && (h = L(i, o)), k(i) && k(n) ? (n.forEach(function(b, a) {
                            if (x.call(i, a)) {
                              var c = i[a];
                              c && typeof c == "object" && b && typeof b == "object" ? i[a] = g(c, b, o) : i.push(b);
                            } else
                              i[a] = b;
                          }), i) : Object.keys(n).reduce(function(b, a) {
                            var c = n[a];
                            return x.call(b, a) ? b[a] = g(b[a], c, o) : b[a] = c, b;
                          }, h);
                        }, y = function(g, i) {
                          return Object.keys(i).reduce(function(n, o) {
                            return n[o] = i[o], n;
                          }, g);
                        }, I = function(g, i, n) {
                          var o = g.replace(/\+/g, " ");
                          if (n === "iso-8859-1")
                            return o.replace(/%[0-9a-f]{2}/gi, unescape);
                          try {
                            return decodeURIComponent(o);
                          } catch (h) {
                            return o;
                          }
                        }, S = function(g, i, n, o, h) {
                          if (g.length === 0)
                            return g;
                          var b = g;
                          if (typeof g == "symbol" ? b = Symbol.prototype.toString.call(g) : typeof g != "string" && (b = String(g)), n === "iso-8859-1")
                            return escape(b).replace(/%u[0-9a-f]{4}/gi, function(p) {
                              return "%26%23" + parseInt(p.slice(2), 16) + "%3B";
                            });
                          for (var a = "", c = 0; c < b.length; ++c) {
                            var s = b.charCodeAt(c);
                            s === 45 || s === 46 || s === 95 || s === 126 || s >= 48 && s <= 57 || s >= 65 && s <= 90 || s >= 97 && s <= 122 || h === O.RFC1738 && (s === 40 || s === 41) ? a += b.charAt(c) : s < 128 ? a += m2[s] : s < 2048 ? a += m2[192 | s >> 6] + m2[128 | 63 & s] : s < 55296 || s >= 57344 ? a += m2[224 | s >> 12] + m2[128 | s >> 6 & 63] + m2[128 | 63 & s] : (c += 1, s = 65536 + ((1023 & s) << 10 | 1023 & b.charCodeAt(c)), a += m2[240 | s >> 18] + m2[128 | s >> 12 & 63] + m2[128 | s >> 6 & 63] + m2[128 | 63 & s]);
                          }
                          return a;
                        }, d = function(g) {
                          for (var i = [{ obj: { o: g }, prop: "o" }], n = [], o = 0; o < i.length; ++o)
                            for (var h = i[o], b = h.obj[h.prop], a = Object.keys(b), c = 0; c < a.length; ++c) {
                              var s = a[c], p = b[s];
                              typeof p == "object" && p !== null && n.indexOf(p) === -1 && (i.push({ obj: b, prop: s }), n.push(p));
                            }
                          return E(i), g;
                        }, v = function(g) {
                          return Object.prototype.toString.call(g) === "[object RegExp]";
                        }, f = function(g) {
                          return !(!g || typeof g != "object" || !(g.constructor && g.constructor.isBuffer && g.constructor.isBuffer(g)));
                        }, l = function(g, i) {
                          return [].concat(g, i);
                        }, _ = function(g, i) {
                          if (k(g)) {
                            for (var n = [], o = 0; o < g.length; o += 1)
                              n.push(i(g[o]));
                            return n;
                          }
                          return i(g);
                        };
                        j.exports = { arrayToObject: L, assign: y, combine: l, compact: d, decode: I, encode: S, isBuffer: f, isRegExp: v, maybeMap: _, merge: M };
                      }, function(j, R, F) {
                        "use strict";
                        function O(v) {
                          return v && v.__esModule ? v : { default: v };
                        }
                        function x(v) {
                          var f = {};
                          for (var l in v)
                            v.hasOwnProperty(l) && (f[v[l]] = l);
                          return f;
                        }
                        function k(v) {
                          var f = {}, l = {};
                          return Object.keys(v).forEach(function(_) {
                            var g = false;
                            if (v.hasOwnProperty(_) && v[_] !== void 0) {
                              var i = _.split("_"), n = i[0], o = I[n];
                              o || (E.default.info("Data key word `" + i[0] + "` not expected in " + _), o = n + "_"), i.splice(1).forEach(function(h) {
                                h === "url" && (g = true), d[h] ? o += d[h] : Number(h) && Math.floor(Number(h)) === Number(h) ? o += h : (E.default.info("Data key word `" + h + "` not expected in " + _), o += "_" + h + "_");
                              }), g ? l[o] = v[_] : f[o] = v[_];
                            }
                          }), (0, M.default)(f, l);
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = k;
                        var m2 = F(4), E = O(m2), L = F(1), M = O(L), y = { a: "env", b: "beacon", c: "custom", d: "ad", e: "event", f: "experiment", i: "internal", m: "mux", n: "response", p: "player", q: "request", r: "retry", s: "session", t: "timestamp", u: "viewer", v: "video", w: "page", x: "view", y: "sub" }, I = x(y), S = { ad: "ad", ag: "aggregate", ap: "api", al: "application", ar: "architecture", as: "asset", au: "autoplay", av: "average", bi: "bitrate", br: "break", bw: "browser", by: "bytes", ca: "cached", cb: "cancel", cd: "code", cg: "category", ch: "changed", cn: "config", co: "count", ce: "counter", cp: "complete", cr: "creative", ct: "content", cu: "current", cx: "connection", dg: "downscaling", dm: "domain", dn: "cdn", do: "downscale", du: "duration", dv: "device", ec: "encoding", ed: "edge", en: "end", eg: "engine", em: "embed", er: "error", es: "errorcode", et: "errortext", ee: "event", ev: "events", ex: "expires", ep: "experiments", fi: "first", fm: "family", ft: "format", fq: "frequency", fr: "frame", fs: "fullscreen", hb: "holdback", he: "headers", ho: "host", hn: "hostname", ht: "height", id: "id", ii: "init", in: "instance", ip: "ip", is: "is", ke: "key", la: "language", lb: "labeled", le: "level", li: "live", ld: "loaded", lo: "load", ls: "lists", lt: "latency", ma: "max", md: "media", me: "message", mf: "manifest", mi: "mime", ml: "midroll", mm: "min", mn: "manufacturer", mo: "model", mx: "mux", ne: "newest", nm: "name", no: "number", on: "on", os: "os", pa: "paused", pb: "playback", pd: "producer", pe: "percentage", pf: "played", pg: "program", ph: "playhead", pi: "plugin", pl: "preroll", pn: "playing", po: "poster", pr: "preload", ps: "position", pt: "part", py: "property", ra: "rate", rd: "requested", re: "rebuffer", rf: "rendition", rm: "remote", ro: "ratio", rp: "response", rq: "request", rs: "requests", sa: "sample", se: "session", sk: "seek", sm: "stream", so: "source", sq: "sequence", sr: "series", st: "start", su: "startup", sv: "server", sw: "software", ta: "tag", tc: "tech", te: "text", tg: "target", th: "throughput", ti: "time", tl: "total", to: "to", tt: "title", ty: "type", ug: "upscaling", up: "upscale", ur: "url", us: "user", va: "variant", vd: "viewed", vi: "video", ve: "version", vw: "view", vr: "viewer", wd: "width", wa: "watch", wt: "waiting" }, d = x(S);
                      }, function(j, R, F) {
                        "use strict";
                        j.exports = F(19).default;
                      }, function(j, R, F) {
                        "use strict";
                        function O(a) {
                          return a && a.__esModule ? a : { default: a };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = function() {
                          function a(c, s) {
                            var p = [], D = true, A = false, w = void 0;
                            try {
                              for (var B, U = c[Symbol.iterator](); !(D = (B = U.next()).done) && (p.push(B.value), !s || p.length !== s); D = true)
                                ;
                            } catch (K) {
                              A = true, w = K;
                            } finally {
                              try {
                                !D && U.return && U.return();
                              } finally {
                                if (A)
                                  throw w;
                              }
                            }
                            return p;
                          }
                          return function(c, s) {
                            if (Array.isArray(c))
                              return c;
                            if (Symbol.iterator in Object(c))
                              return a(c, s);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance");
                          };
                        }(), k = F(0), m2 = O(k), E = F(11), L = F(4), M = O(L), y = F(12), I = O(y), S = F(2), d = O(S), v = F(22), f = O(v), l = F(58), _ = O(l), g = F(59), i = O(g), n = F(64), o = O(n), h = {}, b = function a(c) {
                          var s = arguments;
                          typeof c == "string" ? a.hasOwnProperty(c) ? m2.default.setTimeout(function() {
                            s = Array.prototype.splice.call(s, 1), a[c].apply(null, s);
                          }, 0) : M.default.warn("`" + c + "` is an unknown task") : typeof c == "function" ? m2.default.setTimeout(function() {
                            c(a);
                          }, 0) : M.default.warn("`" + c + "` is invalid.");
                        };
                        b.loaded = d.default.now(), b.NAME = "mux-embed", b.VERSION = "4.9.1", b.API_VERSION = "2.1", b.PLAYER_TRACKED = false, b.monitor = function(a, c) {
                          return (0, _.default)(b, a, c);
                        }, b.destroyMonitor = function(a) {
                          var c = (0, E.findMediaElement)(a), s = x(c, 1), p = s[0];
                          p && p.mux && typeof p.mux.destroy == "function" ? p.mux.destroy() : M.default.error("A video element monitor for `" + a + "` has not been initialized via `mux.monitor`.");
                        }, b.addHLSJS = function(a, c) {
                          var s = (0, E.getMuxPlayerId)(a);
                          h[s] ? h[s].addHLSJS(c) : M.default.error("A monitor for `" + s + "` has not been initialized.");
                        }, b.addDashJS = function(a, c) {
                          var s = (0, E.getMuxPlayerId)(a);
                          h[s] ? h[s].addDashJS(c) : M.default.error("A monitor for `" + s + "` has not been initialized.");
                        }, b.removeHLSJS = function(a) {
                          var c = (0, E.getMuxPlayerId)(a);
                          h[c] ? h[c].removeHLSJS() : M.default.error("A monitor for `" + c + "` has not been initialized.");
                        }, b.removeDashJS = function(a) {
                          var c = (0, E.getMuxPlayerId)(a);
                          h[c] ? h[c].removeDashJS() : M.default.error("A monitor for `" + c + "` has not been initialized.");
                        }, b.init = function(a, c) {
                          (0, I.default)() && c && c.respectDoNotTrack && M.default.info("The browser's Do Not Track flag is enabled - Mux beaconing is disabled.");
                          var s = (0, E.getMuxPlayerId)(a);
                          h[s] = new f.default(b, s, c);
                        }, b.emit = function(a, c, s) {
                          var p = (0, E.getMuxPlayerId)(a);
                          h[p] ? (h[p].emit(c, s), c === "destroy" && delete h[p]) : M.default.error("A monitor for `" + p + "` has not been initialized.");
                        }, m2.default !== void 0 && typeof m2.default.addEventListener == "function" && m2.default.addEventListener("pagehide", function(a) {
                          a.persisted || (b.WINDOW_UNLOADING = true);
                        }, false), b.checkDoNotTrack = I.default, b.log = M.default, b.utils = i.default, b.events = o.default, R.default = b;
                      }, function(j, R) {
                        var F;
                        F = function() {
                          return this;
                        }();
                        try {
                          F = F || Function("return this")() || (0, eval)("this");
                        } catch (O) {
                          typeof window == "object" && (F = window);
                        }
                        j.exports = F;
                      }, function(j, R, F) {
                        var O, x;
                        (function(k, m2) {
                          "use strict";
                          O = m2, (x = typeof O == "function" ? O.call(R, F, R, j) : O) !== void 0 && (j.exports = x);
                        })(0, function() {
                          "use strict";
                          function k(i, n) {
                            var o = i[n];
                            if (typeof o.bind == "function")
                              return o.bind(i);
                            try {
                              return Function.prototype.bind.call(o, i);
                            } catch (h) {
                              return function() {
                                return Function.prototype.apply.apply(o, [i, arguments]);
                              };
                            }
                          }
                          function m2() {
                            console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
                          }
                          function E(i) {
                            return i === "debug" && (i = "log"), typeof console !== d && (i === "trace" && v ? m2 : console[i] !== void 0 ? k(console, i) : console.log !== void 0 ? k(console, "log") : S);
                          }
                          function L(i, n) {
                            for (var o = 0; o < f.length; o++) {
                              var h = f[o];
                              this[h] = o < i ? S : this.methodFactory(h, i, n);
                            }
                            this.log = this.debug;
                          }
                          function M(i, n, o) {
                            return function() {
                              typeof console !== d && (L.call(this, n, o), this[i].apply(this, arguments));
                            };
                          }
                          function y(i, n, o) {
                            return E(i) || M.apply(this, arguments);
                          }
                          function I(i, n, o) {
                            function h(A) {
                              var w = (f[A] || "silent").toUpperCase();
                              if (typeof window !== d && p) {
                                try {
                                  return void (window.localStorage[p] = w);
                                } catch (B) {
                                }
                                try {
                                  window.document.cookie = encodeURIComponent(p) + "=" + w + ";";
                                } catch (B) {
                                }
                              }
                            }
                            function b() {
                              var A;
                              if (typeof window !== d && p) {
                                try {
                                  A = window.localStorage[p];
                                } catch (U) {
                                }
                                if (typeof A === d)
                                  try {
                                    var w = window.document.cookie, B = w.indexOf(encodeURIComponent(p) + "=");
                                    B !== -1 && (A = /^([^;]+)/.exec(w.slice(B))[1]);
                                  } catch (U) {
                                  }
                                return s.levels[A] === void 0 && (A = void 0), A;
                              }
                            }
                            function a() {
                              if (typeof window !== d && p) {
                                try {
                                  return void window.localStorage.removeItem(p);
                                } catch (A) {
                                }
                                try {
                                  window.document.cookie = encodeURIComponent(p) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                                } catch (A) {
                                }
                              }
                            }
                            var c, s = this;
                            n = n == null ? "WARN" : n;
                            var p = "loglevel";
                            typeof i == "string" ? p += ":" + i : typeof i == "symbol" && (p = void 0), s.name = i, s.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, s.methodFactory = o || y, s.getLevel = function() {
                              return c;
                            }, s.setLevel = function(A, w) {
                              if (typeof A == "string" && s.levels[A.toUpperCase()] !== void 0 && (A = s.levels[A.toUpperCase()]), !(typeof A == "number" && A >= 0 && A <= s.levels.SILENT))
                                throw "log.setLevel() called with invalid level: " + A;
                              if (c = A, w !== false && h(A), L.call(s, A, i), typeof console === d && A < s.levels.SILENT)
                                return "No console available for logging";
                            }, s.setDefaultLevel = function(A) {
                              n = A, b() || s.setLevel(A, false);
                            }, s.resetLevel = function() {
                              s.setLevel(n, false), a();
                            }, s.enableAll = function(A) {
                              s.setLevel(s.levels.TRACE, A);
                            }, s.disableAll = function(A) {
                              s.setLevel(s.levels.SILENT, A);
                            };
                            var D = b();
                            D == null && (D = n), s.setLevel(D, false);
                          }
                          var S = function() {
                          }, d = "undefined", v = typeof window !== d && typeof window.navigator !== d && /Trident\/|MSIE /.test(window.navigator.userAgent), f = ["trace", "debug", "info", "warn", "error"], l = new I(), _ = {};
                          l.getLogger = function(i) {
                            if (typeof i != "symbol" && typeof i != "string" || i === "")
                              throw new TypeError("You must supply a name when creating a logger.");
                            var n = _[i];
                            return n || (n = _[i] = new I(i, l.getLevel(), l.methodFactory)), n;
                          };
                          var g = typeof window !== d ? window.log : void 0;
                          return l.noConflict = function() {
                            return typeof window !== d && window.log === l && (window.log = g), l;
                          }, l.getLoggers = function() {
                            return _;
                          }, l.default = l, l;
                        });
                      }, function(j, R, F) {
                        "use strict";
                        function O(oe) {
                          return oe && oe.__esModule ? oe : { default: oe };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = function() {
                          function oe(se, ve) {
                            var _e = [], Re = true, De = false, ke = void 0;
                            try {
                              for (var Ne, Fe = se[Symbol.iterator](); !(Re = (Ne = Fe.next()).done) && (_e.push(Ne.value), !ve || _e.length !== ve); Re = true)
                                ;
                            } catch (xe) {
                              De = true, ke = xe;
                            } finally {
                              try {
                                !Re && Fe.return && Fe.return();
                              } finally {
                                if (De)
                                  throw ke;
                              }
                            }
                            return _e;
                          }
                          return function(se, ve) {
                            if (Array.isArray(se))
                              return se;
                            if (Symbol.iterator in Object(se))
                              return oe(se, ve);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance");
                          };
                        }(), k = F(4), m2 = O(k), E = F(1), L = O(E), M = F(6), y = F(5), I = F(0), S = O(I), d = F(13), v = O(d), f = F(3), l = O(f), _ = F(23), g = F(24), i = F(25), n = O(i), o = F(26), h = O(o), b = F(27), a = O(b), c = F(28), s = O(c), p = F(29), D = O(p), A = F(30), w = O(A), B = F(31), U = O(B), K = F(32), W = O(K), H = F(33), V = O(H), z = F(34), Q = O(z), q = F(35), ee = O(q), ae = F(36), ne = O(ae), ue = F(37), ye = O(ue), be = F(38), me = O(be), Se = F(39), Te = O(Se), fe = F(57), ie = O(fe), de = ["viewstart", "ended", "loadstart", "pause", "play", "playing", "ratechange", "waiting", "adplay", "adpause", "adended", "aderror", "adplaying", "adrequest", "adresponse", "adbreakstart", "adbreakend", "adfirstquartile", "admidpoint", "adthirdquartile", "rebufferstart", "rebufferend", "seeked", "error", "hb", "requestcompleted", "requestfailed", "requestcanceled", "renditionchange"], he = function(oe, se, ve) {
                          var _e = this;
                          this.DOM_CONTENT_LOADED_EVENT_END = v.default.domContentLoadedEventEnd(), this.NAVIGATION_START = v.default.navigationStart();
                          var Re = { debug: false, minimumRebufferDuration: 250, sustainedRebufferThreshold: 1e3, playbackHeartbeatTime: 25, beaconDomain: "litix.io", sampleRate: 1, disableCookies: false, respectDoNotTrack: false, disableRebufferTracking: false, disablePlayheadRebufferTracking: false, errorTranslator: function(xe) {
                            return xe;
                          } };
                          this.mux = oe, this.id = se, ve = (0, L.default)(Re, ve), ve.data = ve.data || {}, ve.data.property_key && (ve.data.env_key = ve.data.property_key, delete ve.data.property_key), m2.default.setLevel(ve.debug ? "debug" : "warn"), this.getPlayheadTime = ve.getPlayheadTime, this.getStateData = ve.getStateData || function() {
                          }, this.getAdData = ve.getAdData || function() {
                          }, this.minimumRebufferDuration = ve.minimumRebufferDuration, this.sustainedRebufferThreshold = ve.sustainedRebufferThreshold, this.playbackHeartbeatTime = ve.playbackHeartbeatTime, this.disableRebufferTracking = ve.disableRebufferTracking, this.disableRebufferTracking && this.mux.log.warn("Disabling rebuffer tracking. This should only be used in specific circumstances as a last resort when your player is known to unreliably track rebuffering."), this.errorTranslator = ve.errorTranslator, this.playbackEventDispatcher = new Te.default(oe, ve.data.env_key, ve), this.data = { player_instance_id: (0, M.generateUUID)(), mux_sample_rate: ve.sampleRate, beacon_domain: ve.beaconCollectionDomain ? ve.beaconCollectionDomain : ve.beaconDomain }, this.data.view_sequence_number = 1, this.data.player_sequence_number = 1, this.oldEmit = this.emit, this.emit = function(xe, Ue) {
                            Ue = (0, L.default)({ viewer_time: this.mux.utils.now() }, Ue), this.oldEmit(xe, Ue);
                          };
                          var De = function() {
                            this.data.view_start === void 0 && (this.data.view_start = this.mux.utils.now(), this.emit("viewstart"));
                          }.bind(this);
                          this.on("viewinit", function(xe, Ue) {
                            this._resetVideoData(), this._resetViewData(), this._resetErrorData(), this._updateStateData(), (0, L.default)(this.data, Ue), this._initializeViewData(), this.one("play", De), this.one("adbreakstart", De);
                          });
                          var ke = function(xe) {
                            this.emit("viewend"), this.send("viewend"), this.emit("viewinit", xe);
                          }.bind(this);
                          if (this.on("videochange", function(xe, Ue) {
                            ke(Ue);
                          }), this.on("programchange", function(xe, Ue) {
                            this.data.player_is_paused && this.mux.log.warn("The `programchange` event is intended to be used when the content changes mid playback without the video source changing, however the video is not currently playing. If the video source is changing please use the videochange event otherwise you will lose startup time information."), ke((0, L.default)(Ue, { view_program_changed: true })), De(), this.emit("play"), this.emit("playing");
                          }), this.on("fragmentchange", function(xe, Ue) {
                            this.currentFragmentPDT = Ue.currentFragmentPDT, this.currentFragmentStart = Ue.currentFragmentStart;
                          }), this.on("destroy", this.destroy), S.default !== void 0 && typeof S.default.addEventListener == "function" && typeof S.default.removeEventListener == "function") {
                            var Ne = function(xe) {
                              xe.persisted || _e.destroy();
                            };
                            S.default.addEventListener("pagehide", Ne, false), this.on("destroy", function() {
                              S.default.removeEventListener("pagehide", Ne);
                            });
                          }
                          this.on("playerready", function(xe, Ue) {
                            (0, L.default)(this.data, Ue);
                          }), de.forEach(function(xe) {
                            _e.on(xe, function(Ue, qe) {
                              xe.indexOf("ad") !== 0 && this._updateStateData(), (0, L.default)(this.data, qe), this._sanitizeData();
                            }), _e.on("after" + xe, function() {
                              (xe !== "error" || this.viewErrored) && this.send(xe);
                            });
                          }), this.on("viewend", function(xe, Ue) {
                            (0, L.default)(_e.data, Ue);
                          });
                          var Fe = function(xe) {
                            var Ue = this.mux.utils.now();
                            this.data.player_init_time && (this.data.player_startup_time = Ue - this.data.player_init_time), !this.mux.PLAYER_TRACKED && this.NAVIGATION_START && (this.mux.PLAYER_TRACKED = true, (this.data.player_init_time || this.DOM_CONTENT_LOADED_EVENT_END) && (this.data.page_load_time = Math.min(this.data.player_init_time || 1 / 0, this.DOM_CONTENT_LOADED_EVENT_END || 1 / 0) - this.NAVIGATION_START)), this.send("playerready"), delete this.data.player_startup_time, delete this.data.page_load_time;
                          };
                          this.one("playerready", Fe), a.default.apply(this), me.default.apply(this), ee.default.apply(this), w.default.apply(this), h.default.apply(this), Q.default.apply(this), s.default.apply(this), D.default.apply(this), ne.default.apply(this), U.default.apply(this), W.default.apply(this), V.default.apply(this), ye.default.apply(this), ie.default.apply(this), ve.hlsjs && this.addHLSJS(ve), ve.dashjs && this.addDashJS(ve), this.emit("viewinit", ve.data);
                        };
                        (0, L.default)(he.prototype, n.default.prototype), (0, L.default)(he.prototype, w.default.prototype), (0, L.default)(he.prototype, ee.default.prototype), (0, L.default)(he.prototype, h.default.prototype), (0, L.default)(he.prototype, s.default.prototype), (0, L.default)(he.prototype, D.default.prototype), (0, L.default)(he.prototype, ne.default.prototype), (0, L.default)(he.prototype, W.default.prototype), (0, L.default)(he.prototype, V.default.prototype), he.prototype.destroy = function() {
                          this._destroyed || (this._destroyed = true, this.data.view_start !== void 0 && (this.emit("viewend"), this.send("viewend")), this.playbackEventDispatcher.destroy(), this.removeHLSJS(), this.removeDashJS(), S.default.clearTimeout(this._heartBeatTimeout));
                        }, he.prototype.send = function(oe) {
                          var se = (0, L.default)({}, this.data), ve = ["player_program_time", "player_manifest_newest_program_time", "player_live_edge_program_time", "player_program_time", "video_holdback", "video_part_holdback", "video_target_duration", "video_part_target_duration"];
                          if (se.video_source_is_live === void 0 && (se.player_source_duration === 1 / 0 || se.video_source_duration === 1 / 0 ? se.video_source_is_live = true : (se.player_source_duration > 0 || se.video_source_duration > 0) && (se.video_source_is_live = false)), se.video_source_is_live || ve.forEach(function(Ne) {
                            se[Ne] = void 0;
                          }), se.video_source_url = se.video_source_url || se.player_source_url, se.video_source_url) {
                            var _e = (0, y.extractHostnameAndDomain)(se.video_source_url), Re = x(_e, 2), De = Re[0], ke = Re[1];
                            se.video_source_domain = ke, se.video_source_hostname = De;
                          }
                          delete se.ad_request_id, this.playbackEventDispatcher.send(oe, se), this.data.view_sequence_number++, this.data.player_sequence_number++, this._restartHeartBeat();
                        }, he.prototype._updateStateData = function() {
                          (0, L.default)(this.data, this.getStateData()), this._updatePlayheadTime(), this._sanitizeData();
                        }, he.prototype._sanitizeData = function() {
                          var oe = this;
                          ["player_width", "player_height", "video_source_width", "video_source_height", "player_playhead_time", "video_source_bitrate"].forEach(function(se) {
                            var ve = parseInt(oe.data[se], 10);
                            oe.data[se] = isNaN(ve) ? void 0 : ve;
                          }), ["player_source_url", "video_source_url"].forEach(function(se) {
                            if (oe.data[se]) {
                              var ve = oe.data[se].toLowerCase();
                              ve.indexOf("data:") !== 0 && ve.indexOf("blob:") !== 0 || (oe.data[se] = "MSE style URL");
                            }
                          });
                        }, he.prototype._resetVideoData = function(oe, se) {
                          var ve = this;
                          Object.keys(this.data).forEach(function(_e) {
                            _e.indexOf("video_") === 0 && delete ve.data[_e];
                          });
                        }, he.prototype._resetViewData = function() {
                          var oe = this;
                          Object.keys(this.data).forEach(function(se) {
                            se.indexOf("view_") === 0 && delete oe.data[se];
                          }), this.data.view_sequence_number = 1;
                        }, he.prototype._resetErrorData = function(oe, se) {
                          delete this.data.player_error_code, delete this.data.player_error_message;
                        }, he.prototype._initializeViewData = function() {
                          var oe = this, se = this.data.view_id = (0, M.generateUUID)(), ve = function() {
                            se === oe.data.view_id && (0, l.default)(oe.data, "player_view_count", 1);
                          };
                          this.data.player_is_paused ? this.one("play", ve) : ve();
                        }, he.prototype._restartHeartBeat = function() {
                          var oe = this;
                          S.default.clearTimeout(this._heartBeatTimeout), this.viewErrored || (this._heartBeatTimeout = S.default.setTimeout(function() {
                            oe.data.player_is_paused || oe.emit("hb");
                          }, 1e4));
                        }, he.prototype.addHLSJS = function(oe) {
                          return oe.hlsjs ? this.hlsjs ? void this.mux.log.warn("An instance of HLS.js is already being monitored for this player.") : (this.hlsjs = oe.hlsjs, void (0, _.monitorHlsJs)(this.mux, this.id, oe.hlsjs, {}, oe.Hls || S.default.Hls)) : void this.mux.log.warn("You must pass a valid hlsjs instance in order to track it.");
                        }, he.prototype.removeHLSJS = function() {
                          this.hlsjs && ((0, _.stopMonitoringHlsJs)(this.hlsjs), this.hlsjs = void 0);
                        }, he.prototype.addDashJS = function(oe) {
                          return oe.dashjs ? this.dashjs ? void this.mux.log.warn("An instance of Dash.js is already being monitored for this player.") : (this.dashjs = oe.dashjs, void (0, g.monitorDashJS)(this.mux, this.id, oe.dashjs)) : void this.mux.log.warn("You must pass a valid dashjs instance in order to track it.");
                        }, he.prototype.removeDashJS = function() {
                          this.dashjs && ((0, g.stopMonitoringDashJS)(this.dashjs), this.dashjs = void 0);
                        }, R.default = he;
                      }, function(j, R, F) {
                        "use strict";
                        function O(f) {
                          return f && f.__esModule ? f : { default: f };
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.stopMonitoringHlsJs = R.monitorHlsJs = void 0;
                        var x = F(7), k = O(x), m2 = F(13), E = O(m2), L = F(5), M = F(14), y = O(M), I = function(f) {
                          if (!f)
                            return {};
                          var l = E.default.navigationStart(), _ = f.loading, g = _ ? _.start : f.trequest, i = _ ? _.first : f.tfirst, n = _ ? _.end : f.tload;
                          return { bytesLoaded: f.total, requestStart: Math.round(l + g), responseStart: Math.round(l + i), responseEnd: Math.round(l + n) };
                        }, S = function(f) {
                          if (f && typeof f.getAllResponseHeaders == "function")
                            return (0, k.default)(f.getAllResponseHeaders());
                        }, d = function(f, l, _) {
                          var g = (arguments.length > 3 && arguments[3] !== void 0 && arguments[3], arguments[4]), i = f.log, n = f.utils.secondsToMs, o = function(B) {
                            var U = parseInt(g.version), K = void 0;
                            return U === 1 && B.programDateTime !== null && (K = B.programDateTime), U === 0 && B.pdt !== null && (K = B.pdt), K;
                          };
                          if (!E.default.exists())
                            return void i.warn("performance timing not supported. Not tracking HLS.js.");
                          var h = function(B, U) {
                            return f.emit(l, B, U);
                          }, b = function(B, U) {
                            var K = U.levels, W = U.audioTracks, H = U.url, V = U.stats, z = U.networkDetails, Q = U.sessionData, q = {}, ee = {}, ae = {};
                            ae = (0, y.default)(Q), K.forEach(function(Se, Te) {
                              q[Te] = { width: Se.width, height: Se.height, bitrate: Se.bitrate, attrs: Se.attrs };
                            }), W.forEach(function(Se, Te) {
                              ee[Te] = { name: Se.name, language: Se.lang, bitrate: Se.bitrate };
                            });
                            var ne = I(V), ue = ne.bytesLoaded, ye = ne.requestStart, be = ne.responseStart, me = ne.responseEnd;
                            ae.request_event_type = B, ae.request_bytes_loaded = ue, ae.request_start = ye, ae.request_response_start = be, ae.request_response_end = me, ae.request_type = "manifest", ae.request_hostname = (0, L.extractHostname)(H), ae.request_response_headers = S(z), ae.request_rendition_lists = { media: q, audio: ee, video: {} }, h("requestcompleted", ae);
                          };
                          _.on(g.Events.MANIFEST_LOADED, b);
                          var a = function(B, U) {
                            var K = U.details, W = U.level, H = U.networkDetails, V = U.stats, z = I(V), Q = z.bytesLoaded, q = z.requestStart, ee = z.responseStart, ae = z.responseEnd, ne = K.fragments[K.fragments.length - 1], ue = o(ne) + n(ne.duration);
                            h("requestcompleted", { request_event_type: B, request_bytes_loaded: Q, request_start: q, request_response_start: ee, request_response_end: ae, request_current_level: W, request_type: "manifest", request_hostname: (0, L.extractHostname)(K.url), request_response_headers: S(H), video_holdback: K.holdBack && n(K.holdBack), video_part_holdback: K.partHoldBack && n(K.partHoldBack), video_part_target_duration: K.partTarget && n(K.partTarget), video_target_duration: K.targetduration && n(K.targetduration), video_source_is_live: K.live, player_manifest_newest_program_time: isNaN(ue) ? void 0 : ue });
                          };
                          _.on(g.Events.LEVEL_LOADED, a);
                          var c = function(B, U) {
                            var K = U.details, W = U.networkDetails, H = U.stats, V = I(H), z = V.bytesLoaded, Q = V.requestStart, q = V.responseStart, ee = V.responseEnd;
                            h("requestcompleted", { request_event_type: B, request_bytes_loaded: z, request_start: Q, request_response_start: q, request_response_end: ee, request_type: "manifest", request_hostname: (0, L.extractHostname)(K.url), request_response_headers: S(W) });
                          };
                          _.on(g.Events.AUDIO_TRACK_LOADED, c);
                          var s = function(B, U) {
                            var K = U.stats, W = U.networkDetails, H = U.frag, V = I(K), z = V.bytesLoaded, Q = V.requestStart, q = V.responseStart, ee = V.responseEnd, ae = { request_event_type: B, request_bytes_loaded: z, request_start: Q, request_response_start: q, request_response_end: ee, request_hostname: W ? (0, L.extractHostname)(W.responseURL) : void 0, request_response_headers: S(W), request_media_duration: H.duration };
                            H.type === "main" ? (ae.request_type = "media", ae.request_current_level = H.level, ae.request_video_width = (_.levels[H.level] || {}).width, ae.request_video_height = (_.levels[H.level] || {}).height) : ae.request_type = H.type, h("requestcompleted", ae);
                          };
                          _.on(g.Events.FRAG_LOADED, s);
                          var p = function(B, U) {
                            var K = U.frag, W = K.start, H = o(K), V = { currentFragmentPDT: H, currentFragmentStart: n(W) };
                            h("fragmentchange", V);
                          };
                          _.on(g.Events.FRAG_CHANGED, p);
                          var D = function(B, U) {
                            var K = U.type, W = U.details, H = U.response, V = U.fatal, z = U.context, Q = U.frag;
                            if (W === g.ErrorDetails.MANIFEST_LOAD_ERROR || W === g.ErrorDetails.MANIFEST_LOAD_TIMEOUT || W === g.ErrorDetails.FRAG_LOAD_ERROR || W === g.ErrorDetails.FRAG_LOAD_TIMEOUT || W === g.ErrorDetails.LEVEL_LOAD_ERROR || W === g.ErrorDetails.LEVEL_LOAD_TIMEOUT) {
                              var q = Q && Q.url || z && z.url || "";
                              h("requestfailed", { request_error: W, request_url: q, request_hostname: (0, L.extractHostname)(q), request_type: W === g.ErrorDetails.FRAG_LOAD_ERROR || W === g.ErrorDetails.FRAG_LOAD_TIMEOUT ? "media" : "manifest", request_error_code: H && H.code, request_error_text: H && H.text });
                            }
                            V && h("error", { player_error_code: K, player_error_message: W });
                          };
                          _.on(g.Events.ERROR, D);
                          var A = function(B, U) {
                            var K = U.frag, W = K && K._url || "";
                            h("requestcanceled", { request_cancel: B, request_url: W, request_type: "media", request_hostname: (0, L.extractHostname)(W) });
                          };
                          _.on(g.Events.FRAG_LOAD_EMERGENCY_ABORTED, A);
                          var w = function(B, U) {
                            var K = U.level, W = _.levels[K];
                            if (W && W.attrs && W.attrs.BANDWIDTH) {
                              var H = W.attrs.BANDWIDTH;
                              H ? h("renditionchange", { video_source_bitrate: H, video_source_width: W.width, video_source_height: W.height }) : i.warn("missing BANDWIDTH from HLS manifest parsed by HLS.js");
                            }
                          };
                          _.on(g.Events.LEVEL_SWITCHED, w), _._stopMuxMonitor = function() {
                            _.off(g.Events.MANIFEST_LOADED, b), _.off(g.Events.LEVEL_LOADED, a), _.off(g.Events.AUDIO_TRACK_LOADED, c), _.off(g.Events.FRAG_LOADED, s), _.off(g.Events.FRAG_CHANGED, p), _.off(g.Events.ERROR, D), _.off(g.Events.FRAG_LOAD_EMERGENCY_ABORTED, A), _.off(g.Events.LEVEL_SWITCHED, w), _.off(g.Events.DESTROYING, _._stopMuxMonitor), delete _._stopMuxMonitor;
                          }, _.on(g.Events.DESTROYING, _._stopMuxMonitor);
                        }, v = function(f) {
                          f && typeof f._stopMuxMonitor == "function" && f._stopMuxMonitor();
                        };
                        R.monitorHlsJs = d, R.stopMonitoringHlsJs = v;
                      }, function(j, R, F) {
                        "use strict";
                        function O(d) {
                          return d && d.__esModule ? d : { default: d };
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.stopMonitoringDashJS = R.monitorDashJS = void 0;
                        var x = F(0), k = O(x), m2 = F(7), E = O(m2), L = F(5), M = function(d, v) {
                          if (!d || typeof d.getRequests != "function")
                            return {};
                          var f = d.getRequests({ state: "executed" });
                          if (f.length === 0)
                            return {};
                          var l = f[f.length - 1], _ = (0, L.extractHostname)(l.url), g = l.bytesLoaded, i = new Date(l.requestStartDate).getTime(), n = new Date(l.firstByteDate).getTime(), o = new Date(l.requestEndDate).getTime(), h = isNaN(l.duration) ? 0 : l.duration, b = typeof v.getMetricsFor == "function" ? v.getMetricsFor(l.mediaType).HttpList : v.getDashMetrics().getHttpRequests(l.mediaType), a = void 0;
                          return b.length > 0 && (a = (0, E.default)(b[b.length - 1]._responseHeaders || "")), { requestStart: i, requestResponseStart: n, requestResponseEnd: o, requestBytesLoaded: g, requestResponseHeaders: a, requestMediaDuration: h, requestHostname: _ };
                        }, y = function(d, v) {
                          var f = v.getQualityFor(d), l = v.getCurrentTrackFor(d), _ = l.bitrateList;
                          return _ ? { currentLevel: f, renditionWidth: _[f].width || null, renditionHeight: _[f].height || null, renditionBitrate: _[f].bandwidth } : {};
                        }, I = function(d, v, f) {
                          var l = (arguments.length > 3 && arguments[3] !== void 0 && arguments[3], d.log);
                          if (!f || !f.on)
                            return void l.warn("Invalid dash.js player reference. Monitoring blocked.");
                          var _ = function(s, p) {
                            return d.emit(v, s, p);
                          }, g = function(s) {
                            var p = s.type, D = s.data, A = D || {}, w = A.url;
                            _("requestcompleted", { request_event_type: p, request_start: 0, request_response_start: 0, request_response_end: 0, request_bytes_loaded: -1, request_type: "manifest", request_hostname: (0, L.extractHostname)(w) });
                          };
                          f.on("manifestLoaded", g);
                          var i = {}, n = function(s) {
                            var p = s.type, D = s.fragmentModel, A = s.chunk, w = A || {}, B = w.mediaInfo, U = B || {}, K = U.type, W = U.bitrateList;
                            W = W || [];
                            var H = {};
                            W.forEach(function(ue, ye) {
                              H[ye] = {}, H[ye].width = ue.width, H[ye].height = ue.height, H[ye].bitrate = ue.bandwidth, H[ye].attrs = {};
                            }), K === "video" ? i.video = H : K === "audio" ? i.audio = H : i.media = H;
                            var V = M(D, f), z = V.requestStart, Q = V.requestResponseStart, q = V.requestResponseEnd, ee = V.requestResponseHeaders, ae = V.requestMediaDuration, ne = V.requestHostname;
                            _("requestcompleted", { request_event_type: p, request_start: z, request_response_start: Q, request_response_end: q, request_bytes_loaded: -1, request_type: K + "_init", request_response_headers: ee, request_hostname: ne, request_media_duration: ae, request_rendition_lists: i });
                          };
                          f.on("initFragmentLoaded", n);
                          var o = function(s) {
                            var p = s.type, D = s.fragmentModel, A = s.chunk, w = A || {}, B = w.mediaInfo, U = w.start, K = B || {}, W = K.type, H = M(D, f), V = H.requestStart, z = H.requestResponseStart, Q = H.requestResponseEnd, q = H.requestBytesLoaded, ee = H.requestResponseHeaders, ae = H.requestMediaDuration, ne = H.requestHostname, ue = y(W, f), ye = ue.currentLevel, be = ue.renditionWidth, me = ue.renditionHeight, Se = ue.renditionBitrate;
                            _("requestcompleted", { request_event_type: p, request_start: V, request_response_start: z, request_response_end: Q, request_bytes_loaded: q, request_type: W, request_response_headers: ee, request_hostname: ne, request_media_start_time: U, request_media_duration: ae, request_current_level: ye, request_labeled_bitrate: Se, request_video_width: be, request_video_height: me });
                          };
                          f.on("mediaFragmentLoaded", o);
                          var h = { video: void 0, audio: void 0, totalBitrate: void 0 }, b = function() {
                            if (h.video && typeof h.video.bitrate == "number") {
                              if (!h.video.width || !h.video.height)
                                return void l.warn("have bitrate info for video but missing width/height");
                              var s = h.video.bitrate;
                              return h.audio && typeof h.audio.bitrate == "number" && (s += h.audio.bitrate), s !== h.totalBitrate ? (h.totalBitrate = s, { video_source_bitrate: s, video_source_height: h.video.height, video_source_width: h.video.width }) : void 0;
                            }
                          }, a = function(s, p, D) {
                            if (typeof s.newQuality != "number")
                              return void l.warn("missing evt.newQuality in qualityChangeRendered event", s);
                            var A = s.mediaType;
                            if (A === "audio" || A === "video") {
                              var w = f.getBitrateInfoListFor(A).find(function(U) {
                                return U.qualityIndex === s.newQuality;
                              });
                              if (!w || typeof w.bitrate != "number")
                                return void l.warn("missing bitrate info for " + A);
                              h[A] = w;
                              var B = b();
                              B && _("renditionchange", B);
                            }
                          };
                          f.on("qualityChangeRendered", a);
                          var c = function(s) {
                            var p = s.error, D = s.event;
                            D = D || {};
                            var A = D.request || {}, w = k.default.event && k.default.event.currentTarget || {};
                            _("requestfailed", { request_error: p + "_" + D.id + "_" + A.type, request_url: D.url, request_hostname: (0, L.extractHostname)(D.url), request_type: A.mediaType, request_error_code: w.status, request_error_type: w.statusText });
                          };
                          f.on("error", c), f._stopMuxMonitor = function() {
                            f.off("manifestLoaded", g), f.off("initFragmentLoaded", n), f.off("mediaFragmentLoaded", o), f.off("qualityChangeRendered", a), f.off("error", c), delete f._stopMuxMonitor;
                          };
                        }, S = function(d) {
                          d && typeof d._stopMuxMonitor == "function" && d._stopMuxMonitor();
                        };
                        R.monitorDashJS = I, R.stopMonitoringDashJS = S;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = function() {
                        }, x = 0;
                        O.prototype.on = function(k, m2, E) {
                          return m2._eventEmitterGuid = m2._eventEmitterGuid || ++x, this._listeners = this._listeners || {}, this._listeners[k] = this._listeners[k] || [], E && (m2 = m2.bind(E)), this._listeners[k].push(m2), m2;
                        }, O.prototype.off = function(k, m2) {
                          var E = this._listeners && this._listeners[k];
                          E && E.forEach(function(L, M) {
                            L._eventEmitterGuid === m2._eventEmitterGuid && E.splice(M, 1);
                          });
                        }, O.prototype.one = function(k, m2, E) {
                          var L = this;
                          m2._eventEmitterGuid = m2._eventEmitterGuid || ++x;
                          var M = function y() {
                            L.off(k, y), m2.apply(E || this, arguments);
                          };
                          M._eventEmitterGuid = m2._eventEmitterGuid, this.on(k, M);
                        }, O.prototype.emit = function(k, m2) {
                          var E = this;
                          if (this._listeners) {
                            m2 = m2 || {};
                            var L = this._listeners["before*"] || [], M = this._listeners[k] || [], y = this._listeners["after" + k] || [], I = function(S, d) {
                              S = S.slice(), S.forEach(function(v) {
                                v.call(E, { type: k }, d);
                              });
                            };
                            I(L, m2), I(M, m2), I(y, m2);
                          }
                        }, R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(0), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = function() {
                          this._playbackHeartbeatInterval = null, this._playheadShouldBeProgressing = false, this.on("playing", function() {
                            this._playheadShouldBeProgressing = true;
                          }), this.on("play", this._startPlaybackHeartbeatInterval), this.on("playing", this._startPlaybackHeartbeatInterval), this.on("adbreakstart", this._startPlaybackHeartbeatInterval), this.on("adplay", this._startPlaybackHeartbeatInterval), this.on("adplaying", this._startPlaybackHeartbeatInterval), this.on("seeking", this._startPlaybackHeartbeatInterval), this.on("devicewake", this._startPlaybackHeartbeatInterval), this.on("viewstart", this._startPlaybackHeartbeatInterval), this.on("rebufferstart", this._startPlaybackHeartbeatInterval), this.on("pause", this._stopPlaybackHeartbeatInterval), this.on("ended", this._stopPlaybackHeartbeatInterval), this.on("viewend", this._stopPlaybackHeartbeatInterval), this.on("error", this._stopPlaybackHeartbeatInterval), this.on("aderror", this._stopPlaybackHeartbeatInterval), this.on("adpause", this._stopPlaybackHeartbeatInterval), this.on("adended", this._stopPlaybackHeartbeatInterval), this.on("adbreakend", this._stopPlaybackHeartbeatInterval), this.on("seeked", function() {
                            this.data.player_is_paused ? this._stopPlaybackHeartbeatInterval() : this._startPlaybackHeartbeatInterval();
                          }), this.on("timeupdate", function() {
                            this._playbackHeartbeatInterval !== null && this.emit("playbackheartbeat");
                          }), this.on("devicesleep", function(m2, E) {
                            this._playbackHeartbeatInterval !== null && (x.default.clearInterval(this._playbackHeartbeatInterval), this.emit("playbackheartbeatend", { viewer_time: E.viewer_time }), this._playbackHeartbeatInterval = null);
                          });
                        };
                        k.prototype._startPlaybackHeartbeatInterval = function() {
                          var m2 = this;
                          this._playbackHeartbeatInterval === null && (this.emit("playbackheartbeat"), this._playbackHeartbeatInterval = x.default.setInterval(function() {
                            m2.emit("playbackheartbeat");
                          }, this.playbackHeartbeatTime));
                        }, k.prototype._stopPlaybackHeartbeatInterval = function() {
                          this._playheadShouldBeProgressing = false, this._playbackHeartbeatInterval !== null && (x.default.clearInterval(this._playbackHeartbeatInterval), this.emit("playbackheartbeatend"), this._playbackHeartbeatInterval = null);
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        function O() {
                          var x = this;
                          this.on("viewinit", function() {
                            x.viewErrored = false;
                          }), this.on("error", function() {
                            try {
                              var k = x.errorTranslator({ player_error_code: x.data.player_error_code, player_error_message: x.data.player_error_message });
                              k ? (x.data.player_error_code = k.player_error_code, x.data.player_error_message = k.player_error_message, x.viewErrored = true) : (delete x.data.player_error_code, delete x.data.player_error_message);
                            } catch (m2) {
                              x.mux.log.warn("Exception in error translator callback.", m2), x.viewErrored = true;
                            }
                          });
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(3), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = function() {
                          this._watchTimeTrackerLastCheckedTime = null, this.on("playbackheartbeat", this._updateWatchTime), this.on("playbackheartbeatend", this._clearWatchTimeState);
                        };
                        k.prototype._updateWatchTime = function(m2, E) {
                          var L = E.viewer_time;
                          this._watchTimeTrackerLastCheckedTime === null && (this._watchTimeTrackerLastCheckedTime = L), (0, x.default)(this.data, "view_watch_time", L - this._watchTimeTrackerLastCheckedTime), this._watchTimeTrackerLastCheckedTime = L;
                        }, k.prototype._clearWatchTimeState = function(m2, E) {
                          this._updateWatchTime(m2, E), this._watchTimeTrackerLastCheckedTime = null;
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(3), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = function() {
                          this._playbackTimeTrackerLastPlayheadPosition = -1, this.on("playbackheartbeat", this._updatePlaybackTime), this.on("playbackheartbeatend", this._clearPlaybackTimeState), this.on("seeking", this._clearPlaybackTimeState);
                        };
                        k.prototype._updatePlaybackTime = function() {
                          var m2 = this.data.player_playhead_time;
                          if (this._playbackTimeTrackerLastPlayheadPosition >= 0 && m2 > this._playbackTimeTrackerLastPlayheadPosition) {
                            var E = m2 - this._playbackTimeTrackerLastPlayheadPosition;
                            E <= 1e3 && (0, x.default)(this.data, "view_content_playback_time", E);
                          }
                          this._playbackTimeTrackerLastPlayheadPosition = m2;
                        }, k.prototype._clearPlaybackTimeState = function() {
                          this._updatePlaybackTime(), this._playbackTimeTrackerLastPlayheadPosition = -1;
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = function() {
                          this.on("playbackheartbeat", this._updatePlayheadTime), this.on("playbackheartbeatend", this._updatePlayheadTime), this.on("timeupdate", this._updatePlayheadTime), this.on("destroy", function() {
                            this.off("timeupdate", this._updatePlayheadTime);
                          });
                        };
                        O.prototype._updateMaxPlayheadPosition = function() {
                          this.data.view_max_playhead_position = this.data.view_max_playhead_position === void 0 ? this.data.player_playhead_time : Math.max(this.data.view_max_playhead_position, this.data.player_playhead_time);
                        }, O.prototype._updatePlayheadTime = function(x, k) {
                          var m2 = this, E = function() {
                            m2.currentFragmentPDT && m2.currentFragmentStart && (m2.data.player_program_time = m2.currentFragmentPDT + m2.data.player_playhead_time - m2.currentFragmentStart);
                          };
                          if (k && k.player_playhead_time)
                            this.data.player_playhead_time = k.player_playhead_time, E(), this._updateMaxPlayheadPosition();
                          else if (this.getPlayheadTime) {
                            var L = this.getPlayheadTime();
                            L !== void 0 && (this.data.player_playhead_time = L, E(), this._updateMaxPlayheadPosition());
                          }
                        }, R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        function O() {
                          var m2 = this;
                          if (!this.disableRebufferTracking) {
                            var E = void 0, L = function() {
                              if (E) {
                                var M = m2.data.viewer_time - E;
                                (0, k.default)(m2.data, "view_rebuffer_duration", M), E = m2.data.viewer_time;
                              }
                              m2.data.view_watch_time >= 0 && m2.data.view_rebuffer_count > 0 && (m2.data.view_rebuffer_frequency = m2.data.view_rebuffer_count / m2.data.view_watch_time, m2.data.view_rebuffer_percentage = m2.data.view_rebuffer_duration / m2.data.view_watch_time);
                            };
                            this.on("playbackheartbeat", function() {
                              return L();
                            }), this.on("rebufferstart", function() {
                              E || ((0, k.default)(m2.data, "view_rebuffer_count", 1), E = m2.data.viewer_time, m2.one("rebufferend", function() {
                                L(), E = void 0;
                              }));
                            });
                          }
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = F(3), k = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(x);
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(2), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = function() {
                          this.disableRebufferTracking || this.disablePlayheadRebufferTracking || (this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null, this.on("playbackheartbeat", this._checkIfRebuffering), this.on("playbackheartbeatend", this._cleanupRebufferTracker), this.on("seeking", function() {
                            this._cleanupRebufferTracker(null, { viewer_time: x.default.now() });
                          }));
                        };
                        k.prototype._checkIfRebuffering = function(m2, E) {
                          return this.isSeeking || this.isAdBreak || !this._playheadShouldBeProgressing ? void this._cleanupRebufferTracker(m2, E) : this._lastCheckedTime === null ? void this._prepareRebufferTrackerState(E.viewer_time) : this._lastPlayheadTime !== this.data.player_playhead_time ? void this._cleanupRebufferTracker(m2, E, true) : (E.viewer_time - this._lastPlayheadTimeUpdatedTime >= this.sustainedRebufferThreshold && (this._rebuffering || (this._rebuffering = true, this.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }))), void (this._lastCheckedTime = E.viewer_time));
                        }, k.prototype._clearRebufferTrackerState = function() {
                          this._lastCheckedTime = null, this._lastPlayheadTime = null, this._lastPlayheadTimeUpdatedTime = null;
                        }, k.prototype._prepareRebufferTrackerState = function(m2) {
                          this._lastCheckedTime = m2, this._lastPlayheadTime = this.data.player_playhead_time, this._lastPlayheadTimeUpdatedTime = m2;
                        }, k.prototype._cleanupRebufferTracker = function(m2, E) {
                          var L = arguments.length > 2 && arguments[2] !== void 0 && arguments[2];
                          if (this._rebuffering)
                            this._rebuffering = false, this.emit("rebufferend", { viewer_time: E.viewer_time });
                          else {
                            if (this._lastCheckedTime === null)
                              return;
                            var M = this.data.player_playhead_time - this._lastPlayheadTime, y = E.viewer_time - this._lastPlayheadTimeUpdatedTime;
                            M > 0 && y - M > this.minimumRebufferDuration && (this.emit("rebufferstart", { viewer_time: this._lastPlayheadTimeUpdatedTime }), this.emit("rebufferend", { viewer_time: this._lastPlayheadTimeUpdatedTime + y - M }));
                          }
                          L ? this._prepareRebufferTrackerState(E.viewer_time) : this._clearRebufferTrackerState();
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(2), x = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(O), k = function() {
                          this.on("viewinit", function() {
                            var m2 = this.data, E = m2.view_id;
                            if (!m2.view_program_changed) {
                              var L = function(M, y) {
                                var I = y.viewer_time;
                                M.type === "playing" && this.data.view_time_to_first_frame === void 0 ? this.calculateTimeToFirstFrame(I || x.default.now(), E) : M.type !== "adplaying" || this.data.view_time_to_first_frame !== void 0 && !this.inPrerollPosition() || this.calculateTimeToFirstFrame(I || x.default.now(), E);
                              };
                              this.one("playing", L), this.one("adplaying", L), this.one("viewend", function() {
                                this.off("playing", L), this.off("adplaying", L);
                              });
                            }
                          });
                        };
                        k.prototype.calculateTimeToFirstFrame = function(m2, E) {
                          E === this.data.view_id && (this._updateWatchTime(null, { viewer_time: m2 }), this.data.view_time_to_first_frame = this.data.view_watch_time, (this.data.player_autoplay_on || this.data.video_is_autoplay) && this.NAVIGATION_START && (this.data.view_aggregate_startup_time = this.data.view_start + this.data.view_watch_time - this.NAVIGATION_START));
                        }, R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        function O() {
                          var m2 = this;
                          this.on("viewinit", function() {
                            this._lastPlayheadPosition = -1;
                          });
                          var E = ["pause", "rebufferstart", "seeking", "error", "adbreakstart", "hb"], L = ["playing", "hb"];
                          E.forEach(function(M) {
                            m2.on(M, function() {
                              if (this._lastPlayheadPosition >= 0 && this.data.player_playhead_time >= 0 && this._lastPlayerWidth >= 0 && this._lastSourceWidth > 0 && this._lastPlayerHeight >= 0 && this._lastSourceHeight > 0) {
                                var y = this.data.player_playhead_time - this._lastPlayheadPosition;
                                if (y < 0)
                                  return void (this._lastPlayheadPosition = -1);
                                var I = Math.min(this._lastPlayerWidth / this._lastSourceWidth, this._lastPlayerHeight / this._lastSourceHeight), S = Math.max(0, I - 1), d = Math.max(0, 1 - I);
                                this.data.view_max_upscale_percentage = Math.max(this.data.view_max_upscale_percentage || 0, S), this.data.view_max_downscale_percentage = Math.max(this.data.view_max_downscale_percentage || 0, d), (0, k.default)(this.data, "view_total_content_playback_time", y), (0, k.default)(this.data, "view_total_upscaling", S * y), (0, k.default)(this.data, "view_total_downscaling", d * y);
                              }
                              this._lastPlayheadPosition = -1;
                            });
                          }), L.forEach(function(M) {
                            m2.on(M, function() {
                              this._lastPlayheadPosition = this.data.player_playhead_time, this._lastPlayerWidth = this.data.player_width, this._lastPlayerHeight = this.data.player_height, this._lastSourceWidth = this.data.video_source_width, this._lastSourceHeight = this.data.video_source_height;
                            });
                          });
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = F(3), k = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(x);
                      }, function(j, R, F) {
                        "use strict";
                        function O(I) {
                          return I && I.__esModule ? I : { default: I };
                        }
                        function x() {
                          this.isSeeking = false, this.on("seeking", function(I, S) {
                            (0, y.default)(this.data, S), this._lastSeekingTime = m2.default.now(), this.isSeeking === false && (this.isSeeking = true, this.send("seeking"));
                          }), this.on("seeked", function() {
                            this.isSeeking = false;
                            var I = this._lastSeekingTime || m2.default.now(), S = m2.default.now() - I;
                            (0, L.default)(this.data, "view_seek_count", 1), (0, L.default)(this.data, "view_seek_duration", S);
                            var d = this.data.view_max_seek_time || 0;
                            this.data.view_max_seek_time = Math.max(d, S);
                          }), this.on("viewend", function() {
                            this.isSeeking = false;
                          });
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = x;
                        var k = F(2), m2 = O(k), E = F(3), L = O(E), M = F(1), y = O(M);
                      }, function(j, R, F) {
                        "use strict";
                        function O(d) {
                          return d && d.__esModule ? d : { default: d };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = function() {
                          function d(v, f) {
                            var l = [], _ = true, g = false, i = void 0;
                            try {
                              for (var n, o = v[Symbol.iterator](); !(_ = (n = o.next()).done) && (l.push(n.value), !f || l.length !== f); _ = true)
                                ;
                            } catch (h) {
                              g = true, i = h;
                            } finally {
                              try {
                                !_ && o.return && o.return();
                              } finally {
                                if (g)
                                  throw i;
                              }
                            }
                            return l;
                          }
                          return function(v, f) {
                            if (Array.isArray(v))
                              return v;
                            if (Symbol.iterator in Object(v))
                              return d(v, f);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance");
                          };
                        }(), k = F(3), m2 = O(k), E = F(5), L = F(1), M = O(L), y = function(d, v) {
                          d.push(v), d.sort(function(f, l) {
                            return f.viewer_time - l.viewer_time;
                          });
                        }, I = ["adbreakstart", "adrequest", "adresponse", "adplay", "adplaying", "adpause", "adended", "adbreakend", "aderror"], S = function() {
                          var d = this;
                          this.on("viewinit", function() {
                            this.isAdBreak = false, this._currentAdRequestNumber = 0, this._currentAdResponseNumber = 0, this._adRequests = [], this._adResponses = [], this._adHasPlayed = false, this._wouldBeNewAdPlay = true, this._prerollPlayTime = void 0;
                          }), I.forEach(function(f) {
                            return d.on(f, d._updateAdData);
                          });
                          var v = function() {
                            d.isAdBreak = false;
                          };
                          this.on("adbreakstart", function() {
                            this.isAdBreak = true;
                          }), this.on("play", v), this.on("playing", v), this.on("viewend", v), this.on("adrequest", function(f, l) {
                            l = (0, M.default)({ ad_request_id: "generatedAdRequestId" + this._currentAdRequestNumber++ }, l), y(this._adRequests, l), (0, m2.default)(this.data, "view_ad_request_count"), this.inPrerollPosition() && (this.data.view_preroll_requested = true, this._adHasPlayed || (0, m2.default)(this.data, "view_preroll_request_count"));
                          }), this.on("adresponse", function(f, l) {
                            l = (0, M.default)({ ad_request_id: "generatedAdRequestId" + this._currentAdResponseNumber++ }, l), y(this._adResponses, l);
                            var _ = this.findAdRequest(l.ad_request_id);
                            _ && (0, m2.default)(this.data, "view_ad_request_time", Math.max(0, l.viewer_time - _.viewer_time));
                          }), this.on("adplay", function(f, l) {
                            this._adHasPlayed = true, this._wouldBeNewAdPlay && (this._wouldBeNewAdPlay = false, (0, m2.default)(this.data, "view_ad_played_count")), this.inPrerollPosition() && !this.data.view_preroll_played && (this.data.view_preroll_played = true, this._adRequests.length > 0 && (this.data.view_preroll_request_time = Math.max(0, l.viewer_time - this._adRequests[0].viewer_time)), this.data.view_start && (this.data.view_startup_preroll_request_time = Math.max(0, l.viewer_time - this.data.view_start)), this._prerollPlayTime = l.viewer_time);
                          }), this.on("adplaying", function(f, l) {
                            this.inPrerollPosition() && this.data.view_preroll_load_time === void 0 && this._prerollPlayTime !== void 0 && (this.data.view_preroll_load_time = l.viewer_time - this._prerollPlayTime, this.data.view_startup_preroll_load_time = l.viewer_time - this._prerollPlayTime);
                          }), this.on("adended", function() {
                            this._wouldBeNewAdPlay = true;
                          }), this.on("aderror", function() {
                            this._wouldBeNewAdPlay = true;
                          });
                        };
                        S.prototype.inPrerollPosition = function() {
                          return this.data.view_content_playback_time === void 0 || this.data.view_content_playback_time <= 1e3;
                        }, S.prototype.findAdRequest = function(d) {
                          for (var v = 0; v < this._adRequests.length; v++)
                            if (this._adRequests[v].ad_request_id === d)
                              return this._adRequests[v];
                        }, S.prototype._updateAdData = function(d, v) {
                          if (this.inPrerollPosition()) {
                            if (!this.data.view_preroll_ad_tag_hostname && v.ad_tag_url) {
                              var f = (0, E.extractHostnameAndDomain)(v.ad_tag_url), l = x(f, 2), _ = l[0], g = l[1];
                              this.data.view_preroll_ad_tag_domain = g, this.data.view_preroll_ad_tag_hostname = _;
                            }
                            if (!this.data.view_preroll_ad_asset_hostname && v.ad_asset_url) {
                              var i = (0, E.extractHostnameAndDomain)(v.ad_asset_url), n = x(i, 2), o = n[0], h = n[1];
                              this.data.view_preroll_ad_asset_domain = h, this.data.view_preroll_ad_asset_hostname = o;
                            }
                          }
                        }, R.default = S;
                      }, function(j, R, F) {
                        "use strict";
                        function O(M) {
                          return M && M.__esModule ? M : { default: M };
                        }
                        function x() {
                          var M = this, y = void 0, I = void 0, S = function() {
                            M.disableRebufferTracking || ((0, L.default)(M.data, "view_waiting_rebuffer_count", 1), y = m2.default.now(), I = window.setInterval(function() {
                              if (y) {
                                var _ = m2.default.now();
                                (0, L.default)(M.data, "view_waiting_rebuffer_duration", _ - y), y = _;
                              }
                            }, 250));
                          }, d = function() {
                            M.disableRebufferTracking || y && ((0, L.default)(M.data, "view_waiting_rebuffer_duration", m2.default.now() - y), y = false, window.clearInterval(I));
                          }, v = false, f = function() {
                            v = true;
                          }, l = function() {
                            v = false, d();
                          };
                          this.on("waiting", function() {
                            v && S();
                          }), this.on("playing", function() {
                            d(), f();
                          }), this.on("pause", l), this.on("seeking", l);
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = x;
                        var k = F(2), m2 = O(k), E = F(3), L = O(E);
                      }, function(j, R, F) {
                        "use strict";
                        function O(I) {
                          return I && I.__esModule ? I : { default: I };
                        }
                        function x() {
                          var I = this;
                          this.one("playbackheartbeat", M), this.on("playbackheartbeatend", function() {
                            I.off("before*", y), I.one("playbackheartbeat", M);
                          });
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = x;
                        var k = F(1), m2 = O(k), E = F(2), L = O(E), M = function() {
                          this.lastWallClockTime = L.default.now(), this.on("before*", y);
                        }, y = function(I) {
                          var S = L.default.now(), d = this.lastWallClockTime;
                          this.lastWallClockTime = S, S - d > 3e4 && (this.emit("devicesleep", { viewer_time: d }), (0, m2.default)(this.data, { viewer_time: d }), this.send("devicesleep"), this.emit("devicewake", { viewer_time: S }), (0, m2.default)(this.data, { viewer_time: S }), this.send("devicewake"));
                        };
                      }, function(j, R, F) {
                        "use strict";
                        function O(p) {
                          return p && p.__esModule ? p : { default: p };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(p) {
                          return typeof p;
                        } : function(p) {
                          return p && typeof Symbol == "function" && p.constructor === Symbol && p !== Symbol.prototype ? "symbol" : typeof p;
                        }, k = F(0), m2 = O(k), E = F(40), L = F(4), M = O(L), y = F(53), I = O(y), S = F(12), d = O(S), v = F(54), f = O(v), l = F(17), _ = O(l), g = F(55), i = O(g), n = F(1), o = O(n), h = ["env_key", "view_id", "view_sequence_number", "player_sequence_number", "beacon_domain", "player_playhead_time", "viewer_time", "mux_api_version", "event", "video_id", "player_instance_id"], b = ["viewstart", "error", "ended", "viewend"], a = function(p, D) {
                          var A = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                          this.mux = p, this.envKey = D, this.eventQueue = new i.default((0, I.default)(D, A)), this.previousBeaconData = null, this.lastEventTime = null, this.sampleRate = A.sampleRate, this.disableCookies = A.disableCookies, this.respectDoNotTrack = A.respectDoNotTrack;
                          var w = A.platform || {};
                          this.pageLevelData = { mux_api_version: this.mux.API_VERSION, mux_embed: this.mux.NAME, mux_embed_version: this.mux.VERSION, viewer_application_name: w.name, viewer_application_version: w.version, viewer_application_engine: w.layout, viewer_device_name: w.product, viewer_device_category: "", viewer_device_manufacturer: w.manufacturer, viewer_os_family: w.os && w.os.family, viewer_os_architecture: w.os && w.os.architecture, viewer_os_version: w.os && w.os.version };
                          var B = (0, f.default)();
                          B && (this.pageLevelData = (0, o.default)(this.pageLevelData, { viewer_connection_type: B })), m2.default !== void 0 && m2.default.location && m2.default.location.href && (this.pageLevelData.page_url = m2.default.location.href), this.viewerData = this.disableCookies ? {} : (0, E.getAndUpdateViewerData)();
                        };
                        a.prototype.send = function(p, D) {
                          if (p) {
                            if (this.respectDoNotTrack && (0, d.default)())
                              return M.default.info("Not sending `" + p + "` because Do Not Track is enabled");
                            if (!D || (D === void 0 ? "undefined" : x(D)) !== "object")
                              return M.default.error("A data object was expected in send() but was not provided");
                            var A = this.disableCookies ? {} : (0, E.getAndUpdateSessionData)(), w = {};
                            (0, o.default)(w, this.pageLevelData), (0, o.default)(w, D), (0, o.default)(w, A), (0, o.default)(w, this.viewerData), w.event = p, w.env_key = this.envKey, w.user_id && (w.viewer_user_id = w.user_id, delete w.user_id);
                            var B = w.mux_sample_number >= this.sampleRate, U = this._deduplicateBeaconData(p, w), K = (0, _.default)(U);
                            if (this.lastEventTime = this.mux.utils.now(), B)
                              return M.default.info("Not sending event due to sample rate restriction", p, w, K);
                            if (this.envKey || M.default.info("Missing environment key (envKey) - beacons will be dropped if the video source is not a valid mux video URL", p, w, K), !this.rateLimited) {
                              if (M.default.info("Sending event", p, w, K), this.rateLimited = !this.eventQueue.queueEvent(p, K), this.mux.WINDOW_UNLOADING && p === "viewend")
                                this.eventQueue.destroy(true);
                              else if ((b.indexOf(p) >= 0 || this.mux.WINDOW_VISIBLE === false && p === "hb") && this.eventQueue.flushEvents(), this.rateLimited)
                                return w.event = "eventrateexceeded", K = (0, _.default)(w), this.eventQueue.queueEvent(w.event, K), M.default.error("Beaconing disabled due to rate limit.");
                            }
                          }
                        }, a.prototype.destroy = function() {
                          this.eventQueue.destroy(false);
                        };
                        var c = function(p, D, A, w) {
                          return !(!p || D.indexOf("request_") !== 0 || D !== "request_response_headers" && (A === void 0 ? "undefined" : x(A)) === "object" && (w === void 0 ? "undefined" : x(w)) === "object" && Object.keys(A || {}).length === Object.keys(w || {}).length);
                        }, s = function(p, D) {
                          return p === "renditionchange" && D.indexOf("video_source_") === 0;
                        };
                        a.prototype._deduplicateBeaconData = function(p, D) {
                          var A = this, w = {}, B = D.view_id;
                          if (!B || p === "viewstart" || p === "viewend" || !this.previousBeaconData || this.mux.utils.now() - this.lastEventTime >= 6e5)
                            w = (0, o.default)({}, D), B && (this.previousBeaconData = w), B && p === "viewend" && (this.previousBeaconData = null);
                          else {
                            var U = p.indexOf("request") === 0;
                            Object.keys(D).forEach(function(K) {
                              var W = D[K];
                              (W !== A.previousBeaconData[K] || h.indexOf(K) > -1 || c(U, K, W, A.previousBeaconData[K]) || s(p, K)) && (w[K] = W, A.previousBeaconData[K] = W);
                            });
                          }
                          return w;
                        }, R.default = a;
                      }, function(j, R, F) {
                        "use strict";
                        function O(f) {
                          return f && f.__esModule ? f : { default: f };
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.getAndUpdateSessionData = R.getAndUpdateViewerData = void 0;
                        var x = F(15), k = O(x), m2 = F(52), E = O(m2), L = F(6), M = F(2), y = O(M), I = function() {
                          var f = void 0;
                          try {
                            f = k.default.parse(E.default.get("muxData") || "");
                          } catch (l) {
                            f = {};
                          }
                          return f;
                        }, S = function(f) {
                          try {
                            E.default.set("muxData", k.default.stringify(f), { expires: 7300 });
                          } catch (l) {
                          }
                        }, d = function() {
                          var f = I();
                          return f.mux_viewer_id = f.mux_viewer_id || (0, L.generateUUID)(), f.msn = f.msn || Math.random(), S(f), { mux_viewer_id: f.mux_viewer_id, mux_sample_number: f.msn };
                        }, v = function() {
                          var f = I(), l = y.default.now();
                          return f.session_start && (f.sst = f.session_start, delete f.session_start), f.session_id && (f.sid = f.session_id, delete f.session_id), f.session_expires && (f.sex = f.session_expires, delete f.session_expires), (!f.sex || f.sex < l) && (f.sid = (0, L.generateUUID)(), f.sst = l), f.sex = l + 15e5, S(f), { session_id: f.sid, session_start: f.sst, session_expires: f.sex };
                        };
                        R.getAndUpdateViewerData = d, R.getAndUpdateSessionData = v;
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(42), x = F(16), k = F(10), m2 = Object.prototype.hasOwnProperty, E = { brackets: function(i) {
                          return i + "[]";
                        }, comma: "comma", indices: function(i, n) {
                          return i + "[" + n + "]";
                        }, repeat: function(i) {
                          return i;
                        } }, L = Array.isArray, M = String.prototype.split, y = Array.prototype.push, I = function(i, n) {
                          y.apply(i, L(n) ? n : [n]);
                        }, S = Date.prototype.toISOString, d = k.default, v = { addQueryPrefix: false, allowDots: false, charset: "utf-8", charsetSentinel: false, delimiter: "&", encode: true, encoder: x.encode, encodeValuesOnly: false, format: d, formatter: k.formatters[d], indices: false, serializeDate: function(i) {
                          return S.call(i);
                        }, skipNulls: false, strictNullHandling: false }, f = function(i) {
                          return typeof i == "string" || typeof i == "number" || typeof i == "boolean" || typeof i == "symbol" || typeof i == "bigint";
                        }, l = {}, _ = function i(n, o, h, b, a, c, s, p, D, A, w, B, U, K, W) {
                          for (var H = n, V = W, z = 0, Q = false; (V = V.get(l)) !== void 0 && !Q; ) {
                            var q = V.get(n);
                            if (z += 1, q !== void 0) {
                              if (q === z)
                                throw new RangeError("Cyclic object value");
                              Q = true;
                            }
                            V.get(l) === void 0 && (z = 0);
                          }
                          if (typeof s == "function" ? H = s(o, H) : H instanceof Date ? H = A(H) : h === "comma" && L(H) && (H = x.maybeMap(H, function(he) {
                            return he instanceof Date ? A(he) : he;
                          })), H === null) {
                            if (b)
                              return c && !U ? c(o, v.encoder, K, "key", w) : o;
                            H = "";
                          }
                          if (f(H) || x.isBuffer(H)) {
                            if (c) {
                              var ee = U ? o : c(o, v.encoder, K, "key", w);
                              if (h === "comma" && U) {
                                for (var ae = M.call(String(H), ","), ne = "", ue = 0; ue < ae.length; ++ue)
                                  ne += (ue === 0 ? "" : ",") + B(c(ae[ue], v.encoder, K, "value", w));
                                return [B(ee) + "=" + ne];
                              }
                              return [B(ee) + "=" + B(c(H, v.encoder, K, "value", w))];
                            }
                            return [B(o) + "=" + B(String(H))];
                          }
                          var ye = [];
                          if (H === void 0)
                            return ye;
                          var be;
                          if (h === "comma" && L(H))
                            be = [{ value: H.length > 0 ? H.join(",") || null : void 0 }];
                          else if (L(s))
                            be = s;
                          else {
                            var me = Object.keys(H);
                            be = p ? me.sort(p) : me;
                          }
                          for (var Se = 0; Se < be.length; ++Se) {
                            var Te = be[Se], fe = typeof Te == "object" && Te.value !== void 0 ? Te.value : H[Te];
                            if (!a || fe !== null) {
                              var ie = L(H) ? typeof h == "function" ? h(o, Te) : o : o + (D ? "." + Te : "[" + Te + "]");
                              W.set(n, z);
                              var de = O();
                              de.set(l, W), I(ye, i(fe, ie, h, b, a, c, s, p, D, A, w, B, U, K, de));
                            }
                          }
                          return ye;
                        }, g = function(i) {
                          if (!i)
                            return v;
                          if (i.encoder !== null && i.encoder !== void 0 && typeof i.encoder != "function")
                            throw new TypeError("Encoder has to be a function.");
                          var n = i.charset || v.charset;
                          if (i.charset !== void 0 && i.charset !== "utf-8" && i.charset !== "iso-8859-1")
                            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
                          var o = k.default;
                          if (i.format !== void 0) {
                            if (!m2.call(k.formatters, i.format))
                              throw new TypeError("Unknown format option provided.");
                            o = i.format;
                          }
                          var h = k.formatters[o], b = v.filter;
                          return (typeof i.filter == "function" || L(i.filter)) && (b = i.filter), { addQueryPrefix: typeof i.addQueryPrefix == "boolean" ? i.addQueryPrefix : v.addQueryPrefix, allowDots: i.allowDots === void 0 ? v.allowDots : !!i.allowDots, charset: n, charsetSentinel: typeof i.charsetSentinel == "boolean" ? i.charsetSentinel : v.charsetSentinel, delimiter: i.delimiter === void 0 ? v.delimiter : i.delimiter, encode: typeof i.encode == "boolean" ? i.encode : v.encode, encoder: typeof i.encoder == "function" ? i.encoder : v.encoder, encodeValuesOnly: typeof i.encodeValuesOnly == "boolean" ? i.encodeValuesOnly : v.encodeValuesOnly, filter: b, format: o, formatter: h, serializeDate: typeof i.serializeDate == "function" ? i.serializeDate : v.serializeDate, skipNulls: typeof i.skipNulls == "boolean" ? i.skipNulls : v.skipNulls, sort: typeof i.sort == "function" ? i.sort : null, strictNullHandling: typeof i.strictNullHandling == "boolean" ? i.strictNullHandling : v.strictNullHandling };
                        };
                        j.exports = function(i, n) {
                          var o, h, b = i, a = g(n);
                          typeof a.filter == "function" ? (h = a.filter, b = h("", b)) : L(a.filter) && (h = a.filter, o = h);
                          var c = [];
                          if (typeof b != "object" || b === null)
                            return "";
                          var s;
                          s = n && n.arrayFormat in E ? n.arrayFormat : n && "indices" in n ? n.indices ? "indices" : "repeat" : "indices";
                          var p = E[s];
                          o || (o = Object.keys(b)), a.sort && o.sort(a.sort);
                          for (var D = O(), A = 0; A < o.length; ++A) {
                            var w = o[A];
                            a.skipNulls && b[w] === null || I(c, _(b[w], w, p, a.strictNullHandling, a.skipNulls, a.encode ? a.encoder : null, a.filter, a.sort, a.allowDots, a.serializeDate, a.format, a.formatter, a.encodeValuesOnly, a.charset, D));
                          }
                          var B = c.join(a.delimiter), U = a.addQueryPrefix === true ? "?" : "";
                          return a.charsetSentinel && (a.charset === "iso-8859-1" ? U += "utf8=%26%2310003%3B&" : U += "utf8=%E2%9C%93&"), B.length > 0 ? U + B : "";
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(8), x = F(47), k = F(49), m2 = O("%TypeError%"), E = O("%WeakMap%", true), L = O("%Map%", true), M = x("WeakMap.prototype.get", true), y = x("WeakMap.prototype.set", true), I = x("WeakMap.prototype.has", true), S = x("Map.prototype.get", true), d = x("Map.prototype.set", true), v = x("Map.prototype.has", true), f = function(i, n) {
                          for (var o, h = i; (o = h.next) !== null; h = o)
                            if (o.key === n)
                              return h.next = o.next, o.next = i.next, i.next = o, o;
                        }, l = function(i, n) {
                          var o = f(i, n);
                          return o && o.value;
                        }, _ = function(i, n, o) {
                          var h = f(i, n);
                          h ? h.value = o : i.next = { key: n, next: i.next, value: o };
                        }, g = function(i, n) {
                          return !!f(i, n);
                        };
                        j.exports = function() {
                          var i, n, o, h = { assert: function(b) {
                            if (!h.has(b))
                              throw new m2("Side channel does not contain " + k(b));
                          }, get: function(b) {
                            if (E && b && (typeof b == "object" || typeof b == "function")) {
                              if (i)
                                return M(i, b);
                            } else if (L) {
                              if (n)
                                return S(n, b);
                            } else if (o)
                              return l(o, b);
                          }, has: function(b) {
                            if (E && b && (typeof b == "object" || typeof b == "function")) {
                              if (i)
                                return I(i, b);
                            } else if (L) {
                              if (n)
                                return v(n, b);
                            } else if (o)
                              return g(o, b);
                            return false;
                          }, set: function(b, a) {
                            E && b && (typeof b == "object" || typeof b == "function") ? (i || (i = new E()), y(i, b, a)) : L ? (n || (n = new L()), d(n, b, a)) : (o || (o = { key: {}, next: null }), _(o, b, a));
                          } };
                          return h;
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = typeof Symbol != "undefined" && Symbol, x = F(44);
                        j.exports = function() {
                          return typeof O == "function" && typeof Symbol == "function" && typeof O("foo") == "symbol" && typeof Symbol("bar") == "symbol" && x();
                        };
                      }, function(j, R, F) {
                        "use strict";
                        j.exports = function() {
                          if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
                            return false;
                          if (typeof Symbol.iterator == "symbol")
                            return true;
                          var O = {}, x = Symbol("test"), k = Object(x);
                          if (typeof x == "string" || Object.prototype.toString.call(x) !== "[object Symbol]" || Object.prototype.toString.call(k) !== "[object Symbol]")
                            return false;
                          O[x] = 42;
                          for (x in O)
                            return false;
                          if (typeof Object.keys == "function" && Object.keys(O).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(O).length !== 0)
                            return false;
                          var m2 = Object.getOwnPropertySymbols(O);
                          if (m2.length !== 1 || m2[0] !== x || !Object.prototype.propertyIsEnumerable.call(O, x))
                            return false;
                          if (typeof Object.getOwnPropertyDescriptor == "function") {
                            var E = Object.getOwnPropertyDescriptor(O, x);
                            if (E.value !== 42 || E.enumerable !== true)
                              return false;
                          }
                          return true;
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = Array.prototype.slice, x = Object.prototype.toString;
                        j.exports = function(k) {
                          var m2 = this;
                          if (typeof m2 != "function" || x.call(m2) !== "[object Function]")
                            throw new TypeError("Function.prototype.bind called on incompatible " + m2);
                          for (var E, L = O.call(arguments, 1), M = function() {
                            if (this instanceof E) {
                              var v = m2.apply(this, L.concat(O.call(arguments)));
                              return Object(v) === v ? v : this;
                            }
                            return m2.apply(k, L.concat(O.call(arguments)));
                          }, y = Math.max(0, m2.length - L.length), I = [], S = 0; S < y; S++)
                            I.push("$" + S);
                          if (E = Function("binder", "return function (" + I.join(",") + "){ return binder.apply(this,arguments); }")(M), m2.prototype) {
                            var d = function() {
                            };
                            d.prototype = m2.prototype, E.prototype = new d(), d.prototype = null;
                          }
                          return E;
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(9);
                        j.exports = O.call(Function.call, Object.prototype.hasOwnProperty);
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(8), x = F(48), k = x(O("String.prototype.indexOf"));
                        j.exports = function(m2, E) {
                          var L = O(m2, !!E);
                          return typeof L == "function" && k(m2, ".prototype.") > -1 ? x(L) : L;
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(9), x = F(8), k = x("%Function.prototype.apply%"), m2 = x("%Function.prototype.call%"), E = x("%Reflect.apply%", true) || O.call(m2, k), L = x("%Object.getOwnPropertyDescriptor%", true), M = x("%Object.defineProperty%", true), y = x("%Math.max%");
                        if (M)
                          try {
                            M({}, "a", { value: 1 });
                          } catch (S) {
                            M = null;
                          }
                        j.exports = function(S) {
                          var d = E(O, m2, arguments);
                          return L && M && L(d, "length").configurable && M(d, "length", { value: 1 + y(0, S.length - (arguments.length - 1)) }), d;
                        };
                        var I = function() {
                          return E(O, k, arguments);
                        };
                        M ? M(j.exports, "apply", { value: I }) : j.exports.apply = I;
                      }, function(j, R, F) {
                        function O(re, ce) {
                          if (re === 1 / 0 || re === -1 / 0 || re !== re || re && re > -1e3 && re < 1e3 || _e.call(/e/, ce))
                            return ce;
                          var we = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
                          if (typeof re == "number") {
                            var Ke = re < 0 ? -Ne(-re) : Ne(re);
                            if (Ke !== re) {
                              var He = String(Ke), Ge = he.call(ce, He.length + 1);
                              return oe.call(He, we, "$&_") + "." + oe.call(oe.call(Ge, /([0-9]{3})/g, "$&_"), /_$/, "");
                            }
                          }
                          return oe.call(ce, we, "$&_");
                        }
                        function x(re, ce, we) {
                          var Ke = (we.quoteStyle || ce) === "double" ? '"' : "'";
                          return Ke + re + Ke;
                        }
                        function k(re) {
                          return oe.call(String(re), /"/g, "&quot;");
                        }
                        function m2(re) {
                          return !(l(re) !== "[object Array]" || We && typeof re == "object" && We in re);
                        }
                        function E(re) {
                          return !(l(re) !== "[object Date]" || We && typeof re == "object" && We in re);
                        }
                        function L(re) {
                          return !(l(re) !== "[object RegExp]" || We && typeof re == "object" && We in re);
                        }
                        function M(re) {
                          return !(l(re) !== "[object Error]" || We && typeof re == "object" && We in re);
                        }
                        function y(re) {
                          return !(l(re) !== "[object String]" || We && typeof re == "object" && We in re);
                        }
                        function I(re) {
                          return !(l(re) !== "[object Number]" || We && typeof re == "object" && We in re);
                        }
                        function S(re) {
                          return !(l(re) !== "[object Boolean]" || We && typeof re == "object" && We in re);
                        }
                        function d(re) {
                          if (qe)
                            return re && typeof re == "object" && re instanceof Symbol;
                          if (typeof re == "symbol")
                            return true;
                          if (!re || typeof re != "object" || !Ue)
                            return false;
                          try {
                            return Ue.call(re), true;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function v(re) {
                          if (!re || typeof re != "object" || !Fe)
                            return false;
                          try {
                            return Fe.call(re), true;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function f(re, ce) {
                          return st.call(re, ce);
                        }
                        function l(re) {
                          return fe.call(re);
                        }
                        function _(re) {
                          if (re.name)
                            return re.name;
                          var ce = de.call(ie.call(re), /^function\s*([\w$]+)/);
                          return ce ? ce[1] : null;
                        }
                        function g(re, ce) {
                          if (re.indexOf)
                            return re.indexOf(ce);
                          for (var we = 0, Ke = re.length; we < Ke; we++)
                            if (re[we] === ce)
                              return we;
                          return -1;
                        }
                        function i(re) {
                          if (!V || !re || typeof re != "object")
                            return false;
                          try {
                            V.call(re);
                            try {
                              ee.call(re);
                            } catch (ce) {
                              return true;
                            }
                            return re instanceof Map;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function n(re) {
                          if (!ue || !re || typeof re != "object")
                            return false;
                          try {
                            ue.call(re, ue);
                            try {
                              be.call(re, be);
                            } catch (ce) {
                              return true;
                            }
                            return re instanceof WeakMap;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function o(re) {
                          if (!Se || !re || typeof re != "object")
                            return false;
                          try {
                            return Se.call(re), true;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function h(re) {
                          if (!ee || !re || typeof re != "object")
                            return false;
                          try {
                            ee.call(re);
                            try {
                              V.call(re);
                            } catch (ce) {
                              return true;
                            }
                            return re instanceof Set;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function b(re) {
                          if (!be || !re || typeof re != "object")
                            return false;
                          try {
                            be.call(re, be);
                            try {
                              ue.call(re, ue);
                            } catch (ce) {
                              return true;
                            }
                            return re instanceof WeakSet;
                          } catch (ce) {
                          }
                          return false;
                        }
                        function a(re) {
                          return !(!re || typeof re != "object") && (typeof HTMLElement != "undefined" && re instanceof HTMLElement || typeof re.nodeName == "string" && typeof re.getAttribute == "function");
                        }
                        function c(re, ce) {
                          if (re.length > ce.maxStringLength) {
                            var we = re.length - ce.maxStringLength, Ke = "... " + we + " more character" + (we > 1 ? "s" : "");
                            return c(he.call(re, 0, ce.maxStringLength), ce) + Ke;
                          }
                          return x(oe.call(oe.call(re, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, s), "single", ce);
                        }
                        function s(re) {
                          var ce = re.charCodeAt(0), we = { 8: "b", 9: "t", 10: "n", 12: "f", 13: "r" }[ce];
                          return we ? "\\" + we : "\\x" + (ce < 16 ? "0" : "") + se.call(ce.toString(16));
                        }
                        function p(re) {
                          return "Object(" + re + ")";
                        }
                        function D(re) {
                          return re + " { ? }";
                        }
                        function A(re, ce, we, Ke) {
                          return re + " (" + ce + ") {" + (Ke ? U(we, Ke) : De.call(we, ", ")) + "}";
                        }
                        function w(re) {
                          for (var ce = 0; ce < re.length; ce++)
                            if (g(re[ce], `
`) >= 0)
                              return false;
                          return true;
                        }
                        function B(re, ce) {
                          var we;
                          if (re.indent === "	")
                            we = "	";
                          else {
                            if (!(typeof re.indent == "number" && re.indent > 0))
                              return null;
                            we = De.call(Array(re.indent + 1), " ");
                          }
                          return { base: we, prev: De.call(Array(ce + 1), we) };
                        }
                        function U(re, ce) {
                          if (re.length === 0)
                            return "";
                          var we = `
` + ce.prev + ce.base;
                          return we + De.call(re, "," + we) + `
` + ce.prev;
                        }
                        function K(re, ce) {
                          var we = m2(re), Ke = [];
                          if (we) {
                            Ke.length = re.length;
                            for (var He = 0; He < re.length; He++)
                              Ke[He] = f(re, He) ? ce(re[He], re) : "";
                          }
                          var Ge, Be = typeof xe == "function" ? xe(re) : [];
                          if (qe) {
                            Ge = {};
                            for (var it = 0; it < Be.length; it++)
                              Ge["$" + Be[it]] = Be[it];
                          }
                          for (var Xe in re)
                            f(re, Xe) && (we && String(Number(Xe)) === Xe && Xe < re.length || qe && Ge["$" + Xe] instanceof Symbol || (_e.call(/[^\w$]/, Xe) ? Ke.push(ce(Xe, re) + ": " + ce(re[Xe], re)) : Ke.push(Xe + ": " + ce(re[Xe], re))));
                          if (typeof xe == "function")
                            for (var ot = 0; ot < Be.length; ot++)
                              tt.call(re, Be[ot]) && Ke.push("[" + ce(Be[ot]) + "]: " + ce(re[Be[ot]], re));
                          return Ke;
                        }
                        var W = typeof Map == "function" && Map.prototype, H = Object.getOwnPropertyDescriptor && W ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null, V = W && H && typeof H.get == "function" ? H.get : null, z = W && Map.prototype.forEach, Q = typeof Set == "function" && Set.prototype, q = Object.getOwnPropertyDescriptor && Q ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null, ee = Q && q && typeof q.get == "function" ? q.get : null, ae = Q && Set.prototype.forEach, ne = typeof WeakMap == "function" && WeakMap.prototype, ue = ne ? WeakMap.prototype.has : null, ye = typeof WeakSet == "function" && WeakSet.prototype, be = ye ? WeakSet.prototype.has : null, me = typeof WeakRef == "function" && WeakRef.prototype, Se = me ? WeakRef.prototype.deref : null, Te = Boolean.prototype.valueOf, fe = Object.prototype.toString, ie = Function.prototype.toString, de = String.prototype.match, he = String.prototype.slice, oe = String.prototype.replace, se = String.prototype.toUpperCase, ve = String.prototype.toLowerCase, _e = RegExp.prototype.test, Re = Array.prototype.concat, De = Array.prototype.join, ke = Array.prototype.slice, Ne = Math.floor, Fe = typeof BigInt == "function" ? BigInt.prototype.valueOf : null, xe = Object.getOwnPropertySymbols, Ue = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol.prototype.toString : null, qe = typeof Symbol == "function" && typeof Symbol.iterator == "object", We = typeof Symbol == "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === qe ? "object" : "symbol") ? Symbol.toStringTag : null, tt = Object.prototype.propertyIsEnumerable, Ye = (typeof Reflect == "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(re) {
                          return re.__proto__;
                        } : null), ze = F(50).custom, Ze = ze && d(ze) ? ze : null;
                        j.exports = function re(ce, we, Ke, He) {
                          function Ge(Pt, Nt, vr) {
                            if (Nt && (He = ke.call(He), He.push(Nt)), vr) {
                              var sr = { depth: Be.depth };
                              return f(Be, "quoteStyle") && (sr.quoteStyle = Be.quoteStyle), re(Pt, sr, Ke + 1, He);
                            }
                            return re(Pt, Be, Ke + 1, He);
                          }
                          var Be = we || {};
                          if (f(Be, "quoteStyle") && Be.quoteStyle !== "single" && Be.quoteStyle !== "double")
                            throw new TypeError('option "quoteStyle" must be "single" or "double"');
                          if (f(Be, "maxStringLength") && (typeof Be.maxStringLength == "number" ? Be.maxStringLength < 0 && Be.maxStringLength !== 1 / 0 : Be.maxStringLength !== null))
                            throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
                          var it = !f(Be, "customInspect") || Be.customInspect;
                          if (typeof it != "boolean" && it !== "symbol")
                            throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
                          if (f(Be, "indent") && Be.indent !== null && Be.indent !== "	" && !(parseInt(Be.indent, 10) === Be.indent && Be.indent > 0))
                            throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
                          if (f(Be, "numericSeparator") && typeof Be.numericSeparator != "boolean")
                            throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
                          var Xe = Be.numericSeparator;
                          if (ce === void 0)
                            return "undefined";
                          if (ce === null)
                            return "null";
                          if (typeof ce == "boolean")
                            return ce ? "true" : "false";
                          if (typeof ce == "string")
                            return c(ce, Be);
                          if (typeof ce == "number") {
                            if (ce === 0)
                              return 1 / 0 / ce > 0 ? "0" : "-0";
                            var ot = String(ce);
                            return Xe ? O(ce, ot) : ot;
                          }
                          if (typeof ce == "bigint") {
                            var yt = String(ce) + "n";
                            return Xe ? O(ce, yt) : yt;
                          }
                          var Ct = Be.depth === void 0 ? 5 : Be.depth;
                          if (Ke === void 0 && (Ke = 0), Ke >= Ct && Ct > 0 && typeof ce == "object")
                            return m2(ce) ? "[Array]" : "[Object]";
                          var ht = B(Be, Ke);
                          if (He === void 0)
                            He = [];
                          else if (g(He, ce) >= 0)
                            return "[Circular]";
                          if (typeof ce == "function") {
                            var nt = _(ce), pt = K(ce, Ge);
                            return "[Function" + (nt ? ": " + nt : " (anonymous)") + "]" + (pt.length > 0 ? " { " + De.call(pt, ", ") + " }" : "");
                          }
                          if (d(ce)) {
                            var _t = qe ? oe.call(String(ce), /^(Symbol\(.*\))_[^)]*$/, "$1") : Ue.call(ce);
                            return typeof ce != "object" || qe ? _t : p(_t);
                          }
                          if (a(ce)) {
                            for (var Et = "<" + ve.call(String(ce.nodeName)), xt = ce.attributes || [], At = 0; At < xt.length; At++)
                              Et += " " + xt[At].name + "=" + x(k(xt[At].value), "double", Be);
                            return Et += ">", ce.childNodes && ce.childNodes.length && (Et += "..."), Et += "</" + ve.call(String(ce.nodeName)) + ">";
                          }
                          if (m2(ce)) {
                            if (ce.length === 0)
                              return "[]";
                            var Ft = K(ce, Ge);
                            return ht && !w(Ft) ? "[" + U(Ft, ht) + "]" : "[ " + De.call(Ft, ", ") + " ]";
                          }
                          if (M(ce)) {
                            var Ot = K(ce, Ge);
                            return "cause" in ce && !tt.call(ce, "cause") ? "{ [" + String(ce) + "] " + De.call(Re.call("[cause]: " + Ge(ce.cause), Ot), ", ") + " }" : Ot.length === 0 ? "[" + String(ce) + "]" : "{ [" + String(ce) + "] " + De.call(Ot, ", ") + " }";
                          }
                          if (typeof ce == "object" && it) {
                            if (Ze && typeof ce[Ze] == "function")
                              return ce[Ze]();
                            if (it !== "symbol" && typeof ce.inspect == "function")
                              return ce.inspect();
                          }
                          if (i(ce)) {
                            var Rt = [];
                            return z.call(ce, function(Pt, Nt) {
                              Rt.push(Ge(Nt, ce, true) + " => " + Ge(Pt, ce));
                            }), A("Map", V.call(ce), Rt, ht);
                          }
                          if (h(ce)) {
                            var Tt = [];
                            return ae.call(ce, function(Pt) {
                              Tt.push(Ge(Pt, ce));
                            }), A("Set", ee.call(ce), Tt, ht);
                          }
                          if (n(ce))
                            return D("WeakMap");
                          if (b(ce))
                            return D("WeakSet");
                          if (o(ce))
                            return D("WeakRef");
                          if (I(ce))
                            return p(Ge(Number(ce)));
                          if (v(ce))
                            return p(Ge(Fe.call(ce)));
                          if (S(ce))
                            return p(Te.call(ce));
                          if (y(ce))
                            return p(Ge(String(ce)));
                          if (!E(ce) && !L(ce)) {
                            var ft = K(ce, Ge), Bt = Ye ? Ye(ce) === Object.prototype : ce instanceof Object || ce.constructor === Object, Vt = ce instanceof Object ? "" : "null prototype", ir = !Bt && We && Object(ce) === ce && We in ce ? he.call(l(ce), 8, -1) : Vt ? "Object" : "", nr = Bt || typeof ce.constructor != "function" ? "" : ce.constructor.name ? ce.constructor.name + " " : "", ar = nr + (ir || Vt ? "[" + De.call(Re.call([], ir || [], Vt || []), ": ") + "] " : "");
                            return ft.length === 0 ? ar + "{}" : ht ? ar + "{" + U(ft, ht) + "}" : ar + "{ " + De.call(ft, ", ") + " }";
                          }
                          return String(ce);
                        };
                        var st = Object.prototype.hasOwnProperty || function(re) {
                          return re in this;
                        };
                      }, function(j, R) {
                      }, function(j, R, F) {
                        "use strict";
                        var O = F(16), x = Object.prototype.hasOwnProperty, k = Array.isArray, m2 = { allowDots: false, allowPrototypes: false, allowSparse: false, arrayLimit: 20, charset: "utf-8", charsetSentinel: false, comma: false, decoder: O.decode, delimiter: "&", depth: 5, ignoreQueryPrefix: false, interpretNumericEntities: false, parameterLimit: 1e3, parseArrays: true, plainObjects: false, strictNullHandling: false }, E = function(d) {
                          return d.replace(/&#(\d+);/g, function(v, f) {
                            return String.fromCharCode(parseInt(f, 10));
                          });
                        }, L = function(d, v) {
                          return d && typeof d == "string" && v.comma && d.indexOf(",") > -1 ? d.split(",") : d;
                        }, M = function(d, v) {
                          var f, l = {}, _ = v.ignoreQueryPrefix ? d.replace(/^\?/, "") : d, g = v.parameterLimit === 1 / 0 ? void 0 : v.parameterLimit, i = _.split(v.delimiter, g), n = -1, o = v.charset;
                          if (v.charsetSentinel)
                            for (f = 0; f < i.length; ++f)
                              i[f].indexOf("utf8=") === 0 && (i[f] === "utf8=%E2%9C%93" ? o = "utf-8" : i[f] === "utf8=%26%2310003%3B" && (o = "iso-8859-1"), n = f, f = i.length);
                          for (f = 0; f < i.length; ++f)
                            if (f !== n) {
                              var h, b, a = i[f], c = a.indexOf("]="), s = c === -1 ? a.indexOf("=") : c + 1;
                              s === -1 ? (h = v.decoder(a, m2.decoder, o, "key"), b = v.strictNullHandling ? null : "") : (h = v.decoder(a.slice(0, s), m2.decoder, o, "key"), b = O.maybeMap(L(a.slice(s + 1), v), function(p) {
                                return v.decoder(p, m2.decoder, o, "value");
                              })), b && v.interpretNumericEntities && o === "iso-8859-1" && (b = E(b)), a.indexOf("[]=") > -1 && (b = k(b) ? [b] : b), x.call(l, h) ? l[h] = O.combine(l[h], b) : l[h] = b;
                            }
                          return l;
                        }, y = function(d, v, f, l) {
                          for (var _ = l ? v : L(v, f), g = d.length - 1; g >= 0; --g) {
                            var i, n = d[g];
                            if (n === "[]" && f.parseArrays)
                              i = [].concat(_);
                            else {
                              i = f.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
                              var o = n.charAt(0) === "[" && n.charAt(n.length - 1) === "]" ? n.slice(1, -1) : n, h = parseInt(o, 10);
                              f.parseArrays || o !== "" ? !isNaN(h) && n !== o && String(h) === o && h >= 0 && f.parseArrays && h <= f.arrayLimit ? (i = [], i[h] = _) : o !== "__proto__" && (i[o] = _) : i = { 0: _ };
                            }
                            _ = i;
                          }
                          return _;
                        }, I = function(d, v, f, l) {
                          if (d) {
                            var _ = f.allowDots ? d.replace(/\.([^.[]+)/g, "[$1]") : d, g = /(\[[^[\]]*])/, i = /(\[[^[\]]*])/g, n = f.depth > 0 && g.exec(_), o = n ? _.slice(0, n.index) : _, h = [];
                            if (o) {
                              if (!f.plainObjects && x.call(Object.prototype, o) && !f.allowPrototypes)
                                return;
                              h.push(o);
                            }
                            for (var b = 0; f.depth > 0 && (n = i.exec(_)) !== null && b < f.depth; ) {
                              if (b += 1, !f.plainObjects && x.call(Object.prototype, n[1].slice(1, -1)) && !f.allowPrototypes)
                                return;
                              h.push(n[1]);
                            }
                            return n && h.push("[" + _.slice(n.index) + "]"), y(h, v, f, l);
                          }
                        }, S = function(d) {
                          if (!d)
                            return m2;
                          if (d.decoder !== null && d.decoder !== void 0 && typeof d.decoder != "function")
                            throw new TypeError("Decoder has to be a function.");
                          if (d.charset !== void 0 && d.charset !== "utf-8" && d.charset !== "iso-8859-1")
                            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
                          var v = d.charset === void 0 ? m2.charset : d.charset;
                          return { allowDots: d.allowDots === void 0 ? m2.allowDots : !!d.allowDots, allowPrototypes: typeof d.allowPrototypes == "boolean" ? d.allowPrototypes : m2.allowPrototypes, allowSparse: typeof d.allowSparse == "boolean" ? d.allowSparse : m2.allowSparse, arrayLimit: typeof d.arrayLimit == "number" ? d.arrayLimit : m2.arrayLimit, charset: v, charsetSentinel: typeof d.charsetSentinel == "boolean" ? d.charsetSentinel : m2.charsetSentinel, comma: typeof d.comma == "boolean" ? d.comma : m2.comma, decoder: typeof d.decoder == "function" ? d.decoder : m2.decoder, delimiter: typeof d.delimiter == "string" || O.isRegExp(d.delimiter) ? d.delimiter : m2.delimiter, depth: typeof d.depth == "number" || d.depth === false ? +d.depth : m2.depth, ignoreQueryPrefix: d.ignoreQueryPrefix === true, interpretNumericEntities: typeof d.interpretNumericEntities == "boolean" ? d.interpretNumericEntities : m2.interpretNumericEntities, parameterLimit: typeof d.parameterLimit == "number" ? d.parameterLimit : m2.parameterLimit, parseArrays: d.parseArrays !== false, plainObjects: typeof d.plainObjects == "boolean" ? d.plainObjects : m2.plainObjects, strictNullHandling: typeof d.strictNullHandling == "boolean" ? d.strictNullHandling : m2.strictNullHandling };
                        };
                        j.exports = function(d, v) {
                          var f = S(v);
                          if (d === "" || d === null || d === void 0)
                            return f.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
                          for (var l = typeof d == "string" ? M(d, f) : d, _ = f.plainObjects ? /* @__PURE__ */ Object.create(null) : {}, g = Object.keys(l), i = 0; i < g.length; ++i) {
                            var n = g[i], o = I(n, l[n], f, typeof d == "string");
                            _ = O.merge(_, o, f);
                          }
                          return f.allowSparse === true ? _ : O.compact(_);
                        };
                      }, function(j, R, F) {
                        "use strict";
                        var O, x, k = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m2) {
                          return typeof m2;
                        } : function(m2) {
                          return m2 && typeof Symbol == "function" && m2.constructor === Symbol && m2 !== Symbol.prototype ? "symbol" : typeof m2;
                        };
                        (function(m2) {
                          var E = false;
                          if (O = m2, (x = typeof O == "function" ? O.call(R, F, R, j) : O) !== void 0 && (j.exports = x), E = true, k(R) === "object" && (j.exports = m2(), E = true), !E) {
                            var L = window.Cookies, M = window.Cookies = m2();
                            M.noConflict = function() {
                              return window.Cookies = L, M;
                            };
                          }
                        })(function() {
                          function m2(L) {
                            function M(y, I, S) {
                              var d;
                              if (typeof document != "undefined") {
                                if (arguments.length > 1) {
                                  if (S = E({ path: "/" }, M.defaults, S), typeof S.expires == "number") {
                                    var v = /* @__PURE__ */ new Date();
                                    v.setMilliseconds(v.getMilliseconds() + 864e5 * S.expires), S.expires = v;
                                  }
                                  try {
                                    d = JSON.stringify(I), /^[\{\[]/.test(d) && (I = d);
                                  } catch (o) {
                                  }
                                  return I = L.write ? L.write(I, y) : encodeURIComponent(String(I)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), y = encodeURIComponent(String(y)), y = y.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent), y = y.replace(/[\(\)]/g, escape), document.cookie = [y, "=", I, S.expires ? "; expires=" + S.expires.toUTCString() : "", S.path ? "; path=" + S.path : "", S.domain ? "; domain=" + S.domain : "", S.secure ? "; secure" : ""].join("");
                                }
                                y || (d = {});
                                for (var f = document.cookie ? document.cookie.split("; ") : [], l = /(%[0-9A-Z]{2})+/g, _ = 0; _ < f.length; _++) {
                                  var g = f[_].split("="), i = g.slice(1).join("=");
                                  i.charAt(0) === '"' && (i = i.slice(1, -1));
                                  try {
                                    var n = g[0].replace(l, decodeURIComponent);
                                    if (i = L.read ? L.read(i, n) : L(i, n) || i.replace(l, decodeURIComponent), this.json)
                                      try {
                                        i = JSON.parse(i);
                                      } catch (o) {
                                      }
                                    if (y === n) {
                                      d = i;
                                      break;
                                    }
                                    y || (d[n] = i);
                                  } catch (o) {
                                  }
                                }
                                return d;
                              }
                            }
                            return M.set = M, M.get = function(y) {
                              return M.call(M, y);
                            }, M.getJSON = function() {
                              return M.apply({ json: true }, [].slice.call(arguments));
                            }, M.defaults = {}, M.remove = function(y, I) {
                              M(y, "", E(I, { expires: -1 }));
                            }, M.withConverter = m2, M;
                          }
                          var E = function() {
                            for (var L = 0, M = {}; L < arguments.length; L++) {
                              var y = arguments[L];
                              for (var I in y)
                                M[I] = y[I];
                            }
                            return M;
                          };
                          return m2(function() {
                          });
                        });
                      }, function(j, R, F) {
                        "use strict";
                        function O(x, k) {
                          var m2 = k.beaconCollectionDomain, E = k.beaconDomain;
                          if (m2)
                            return "https://" + m2;
                          x = x || "inferred";
                          var L = E || "litix.io";
                          return x.match(/^[a-z0-9]+$/) ? "https://" + x + "." + L : "https://img.litix.io/a.gif";
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = F(0), x = function(E) {
                          return E && E.__esModule ? E : { default: E };
                        }(O), k = function() {
                          var E = void 0;
                          switch (m2()) {
                            case "cellular":
                              E = "cellular";
                              break;
                            case "ethernet":
                              E = "wired";
                              break;
                            case "wifi":
                              E = "wifi";
                              break;
                            case void 0:
                              break;
                            default:
                              E = "other";
                          }
                          return E;
                        }, m2 = function() {
                          var E = x.default.navigator, L = E && (E.connection || E.mozConnection || E.webkitConnection);
                          return L && L.type;
                        };
                        R.default = k;
                      }, function(j, R, F) {
                        "use strict";
                        function O(n) {
                          return n && n.__esModule ? n : { default: n };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = F(0), k = O(x), m2 = F(4), E = O(m2), L = F(56), M = O(L), y = F(1), I = O(y), S = F(17), d = O(S), v = F(2), f = O(v), l = !!k.default.XMLHttpRequest && "withCredentials" in new k.default.XMLHttpRequest(), _ = { maxBeaconSize: 300, maxQueueLength: 3600, baseTimeBetweenBeacons: 1e4, maxPayloadKBSize: 500 }, g = ["hb", "requestcompleted", "requestfailed", "requestcanceled"], i = function(n, o) {
                          this._beaconUrl = n || "https://img.litix.io", this._eventQueue = [], this._postInFlight = false, this._failureCount = 0, this._sendTimeout = false, this._options = (0, I.default)({}, _, o);
                        };
                        i.prototype.queueEvent = function(n, o) {
                          var h = (0, I.default)({}, o);
                          return l ? (this._eventQueue.length <= this._options.maxQueueLength || n === "eventrateexceeded") && (this._eventQueue.push(h), this._sendTimeout || this._startBeaconSending(), this._eventQueue.length <= this._options.maxQueueLength) : (M.default.send(this._beaconUrl, h), true);
                        }, i.prototype.flushEvents = function() {
                          l && (this._eventQueue.length && this._sendBeaconQueue(), this._startBeaconSending());
                        }, i.prototype.destroy = function() {
                          var n = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
                          this.destroyed = true, n ? this._clearBeaconQueue() : this.flushEvents(), k.default.clearTimeout(this._sendTimeout);
                        }, i.prototype._clearBeaconQueue = function() {
                          var n = k.default.navigator, o = this._eventQueue.length > this._options.maxBeaconSize ? this._eventQueue.length - this._options.maxBeaconSize : 0, h = this._eventQueue.slice(o);
                          o > 0 && (0, I.default)(h[h.length - 1], (0, d.default)({ mux_view_message: "event queue truncated" }));
                          var b = this._createPayload(h);
                          if (n.sendBeacon)
                            n.sendBeacon(this._beaconUrl, b);
                          else if (k.default.XMLHttpRequest) {
                            var a = new k.default.XMLHttpRequest();
                            a.open("POST", this._beaconUrl), a.setRequestHeader("Content-Type", "application/json"), a.send(b);
                          } else
                            M.default.send(this._beaconUrl, h[h.length - 1]);
                        }, i.prototype._sendBeaconQueue = function() {
                          var n = this;
                          if (k.default.XMLHttpRequest && !this._postInFlight) {
                            var o = new k.default.XMLHttpRequest(), h = this._eventQueue.slice(0, this._options.maxBeaconSize);
                            this._eventQueue = this._eventQueue.slice(this._options.maxBeaconSize), this._postInFlight = true, o.onreadystatechange = function() {
                              o.readyState === 4 && (o.status !== 200 ? (n._eventQueue = h.concat(n._eventQueue), n._failureCount += 1, E.default.info("Error sending beacon: " + o.status), E.default.info(o.responseText)) : n._failureCount = 0, n._roundTripTime = f.default.now() - a, n._postInFlight = false);
                            }, o.open("POST", this._beaconUrl), o.setRequestHeader("Content-Type", "application/json");
                            var b = this._createPayload(h), a = f.default.now();
                            o.send(b);
                          }
                        }, i.prototype._getNextBeaconTime = function() {
                          if (!this._failureCount)
                            return this._options.baseTimeBetweenBeacons;
                          var n = Math.pow(2, this._failureCount - 1);
                          return (1 + (n *= Math.random())) * this._options.baseTimeBetweenBeacons;
                        }, i.prototype._startBeaconSending = function() {
                          var n = this;
                          k.default.clearTimeout(this._sendTimeout), this.destroyed || (this._sendTimeout = k.default.setTimeout(function() {
                            n._eventQueue.length && n._sendBeaconQueue(), n._startBeaconSending();
                          }, this._getNextBeaconTime()));
                        }, i.prototype._createPayload = function(n) {
                          var o = this, h = { transmission_timestamp: Math.round(f.default.now()) };
                          this._roundTripTime && (h.rtt_ms = Math.round(this._roundTripTime));
                          var b = void 0, a = void 0, c = void 0, s = function() {
                            b = JSON.stringify({ metadata: h, events: a || n }), c = b.length / 1024;
                          }, p = function() {
                            return c <= o._options.maxPayloadKBSize;
                          };
                          return s(), p() || (E.default.info("Payload size is too big (" + c + " kb). Removing unnecessary events."), a = n.filter(function(D) {
                            return g.indexOf(D.e) === -1;
                          }), s()), p() || (E.default.info("Payload size still too big (" + c + " kb). Cropping fields.."), a.forEach(function(D) {
                            for (var A in D) {
                              var w = D[A];
                              typeof w == "string" && w.length > 51200 && (D[A] = w.substring(0, 51200));
                            }
                          }), s()), b;
                        }, R.default = i;
                      }, function(j, R, F) {
                        "use strict";
                        function O(M) {
                          return M && M.__esModule ? M : { default: M };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = F(15), k = O(x), m2 = F(0), E = O(m2), L = {};
                        L.send = function(M, y) {
                          function I() {
                            S.src = v + (d ? "&rc=" + d : "");
                          }
                          var S = new Image(), d = 0, v = M + "?" + k.default.stringify(y);
                          return S.addEventListener("error", function() {
                            d > 3 || E.default.setTimeout(function() {
                              d++, I();
                            }, 5e3 * d);
                          }), I(), S;
                        }, R.default = L;
                      }, function(j, R, F) {
                        "use strict";
                        function O() {
                          function x(v, f) {
                            var l = f.request_start, _ = f.request_response_start, g = f.request_response_end, i = f.request_bytes_loaded;
                            y++;
                            var n = void 0, o = void 0;
                            if (_ ? (n = _ - l, o = g - _) : o = g - l, o > 0 && i > 0) {
                              var h = i / o * 8e3;
                              I++, L += i, M += o, this.data.view_min_request_throughput = Math.min(this.data.view_min_request_throughput || 1 / 0, h), this.data.view_average_request_throughput = L / M * 8e3, this.data.view_request_count = y, n > 0 && (E += n, this.data.view_max_request_latency = Math.max(this.data.view_max_request_latency || 0, n), this.data.view_average_request_latency = E / I);
                            }
                          }
                          function k(v, f) {
                            y++, S++, this.data.view_request_count = y, this.data.view_request_failed_count = S;
                          }
                          function m2(v, f) {
                            y++, d++, this.data.view_request_count = y, this.data.view_request_canceled_count = d;
                          }
                          var E = 0, L = 0, M = 0, y = 0, I = 0, S = 0, d = 0;
                          this.on("requestcompleted", x), this.on("requestfailed", k), this.on("requestcanceled", m2);
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        function O(I, S, d) {
                          var v = (0, L.findMediaElement)(S), f = k(v, 3), l = f[0], _ = f[1], g = f[2], i = I.log, n = I.utils.getComputedStyle, o = I.utils.secondsToMs, h = { automaticErrorTracking: true };
                          if (!l)
                            return i.error("No element was found with the `" + _ + "` query selector.");
                          if (g !== "video" && g !== "audio")
                            return i.error("The element of `" + _ + "` was not a media element.");
                          d = (0, E.default)(h, d), d.data = (0, E.default)({ player_software: "HTML5 Video Element", player_mux_plugin_name: "VideoElementMonitor", player_mux_plugin_version: "4.9.1" }, d.data), d.getPlayheadTime = function() {
                            return o(l.currentTime);
                          }, d.getStateData = function() {
                            var a = this.hlsjs && this.hlsjs.url, c = this.dashjs && x(this.dashjs.getSource === "function") && this.dashjs.getSource(), s = { player_is_paused: l.paused, player_playhead_time: o(l.currentTime), player_width: parseInt(n(l, "width")), player_height: parseInt(n(l, "height")), player_autoplay_on: l.autoplay, player_preload_on: l.preload, video_poster_url: l.poster, video_source_url: a || c || l.currentSrc, video_source_duration: o(l.duration), video_source_height: l.videoHeight, video_source_width: l.videoWidth }, p = d.getPlayheadTime();
                            if (l.getStartDate && p > 0) {
                              var D = l.getStartDate();
                              if (D && typeof D.getTime == "function" && D.getTime()) {
                                var A = D.getTime();
                                if (s.player_program_time = A + p, l.seekable.length > 0) {
                                  var w = A + l.seekable.end(l.seekable.length - 1);
                                  s.player_live_edge_program_time = w;
                                }
                              }
                            }
                            return s;
                          }, l.mux = l.mux || {}, l.mux.deleted = false, l.mux.emit = function(a, c) {
                            I.emit(_, a, c);
                          };
                          var b = function() {
                            i.error("The monitor for this video element has already been destroyed.");
                          };
                          l.mux.destroy = function() {
                            Object.keys(l.mux.listeners).forEach(function(a) {
                              l.removeEventListener(a, l.mux.listeners[a], false);
                            }), delete l.mux.listeners, l.mux.destroy = b, l.mux.swapElement = b, l.mux.emit = b, l.mux.addHLSJS = b, l.mux.addDashJS = b, l.mux.removeHLSJS = b, l.mux.removeDashJS = b, l.mux.deleted = true, I.emit(_, "destroy");
                          }, l.mux.swapElement = function(a) {
                            var c = (0, L.findMediaElement)(a), s = k(c, 3), p = s[0], D = s[1], A = s[2];
                            return p ? A !== "video" && A !== "audio" ? I.log.error("The element of `" + D + "` was not a media element.") : (p.muxId = l.muxId, delete l.muxId, p.mux = p.mux || {}, p.mux.listeners = (0, E.default)({}, l.mux.listeners), delete l.mux.listeners, Object.keys(p.mux.listeners).forEach(function(w) {
                              l.removeEventListener(w, p.mux.listeners[w], false), p.addEventListener(w, p.mux.listeners[w], false);
                            }), p.mux.swapElement = l.mux.swapElement, p.mux.destroy = l.mux.destroy, delete l.mux, void (l = p)) : I.log.error("No element was found with the `" + D + "` query selector.");
                          }, l.mux.addHLSJS = function(a) {
                            I.addHLSJS(_, a);
                          }, l.mux.addDashJS = function(a) {
                            I.addDashJS(_, a);
                          }, l.mux.removeHLSJS = function() {
                            I.removeHLSJS(_);
                          }, l.mux.removeDashJS = function() {
                            I.removeDashJS(_);
                          }, I.init(_, d), I.emit(_, "playerready"), l.paused || (I.emit(_, "play"), l.readyState > 2 && I.emit(_, "playing")), l.mux.listeners = {}, M.forEach(function(a) {
                            (a !== "error" || d.automaticErrorTracking) && (l.mux.listeners[a] = function() {
                              var c = {};
                              if (a === "error") {
                                if (!l.error || l.error.code === 1)
                                  return;
                                c.player_error_code = l.error.code, c.player_error_message = y[l.error.code] || l.error.message;
                              }
                              I.emit(_, a, c);
                            }, l.addEventListener(a, l.mux.listeners[a], false));
                          });
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(I) {
                          return typeof I;
                        } : function(I) {
                          return I && typeof Symbol == "function" && I.constructor === Symbol && I !== Symbol.prototype ? "symbol" : typeof I;
                        }, k = function() {
                          function I(S, d) {
                            var v = [], f = true, l = false, _ = void 0;
                            try {
                              for (var g, i = S[Symbol.iterator](); !(f = (g = i.next()).done) && (v.push(g.value), !d || v.length !== d); f = true)
                                ;
                            } catch (n) {
                              l = true, _ = n;
                            } finally {
                              try {
                                !f && i.return && i.return();
                              } finally {
                                if (l)
                                  throw _;
                              }
                            }
                            return v;
                          }
                          return function(S, d) {
                            if (Array.isArray(S))
                              return S;
                            if (Symbol.iterator in Object(S))
                              return I(S, d);
                            throw new TypeError("Invalid attempt to destructure non-iterable instance");
                          };
                        }();
                        R.default = O;
                        var m2 = F(1), E = function(I) {
                          return I && I.__esModule ? I : { default: I };
                        }(m2), L = F(11), M = ["loadstart", "pause", "play", "playing", "seeking", "seeked", "timeupdate", "ratechange", "stalled", "waiting", "error", "ended"], y = { 1: "MEDIA_ERR_ABORTED", 2: "MEDIA_ERR_NETWORK", 3: "MEDIA_ERR_DECODE", 4: "MEDIA_ERR_SRC_NOT_SUPPORTED" };
                      }, function(j, R, F) {
                        "use strict";
                        function O(h) {
                          return h && h.__esModule ? h : { default: h };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = F(60), k = O(x), m2 = F(3), E = O(m2), L = F(61), M = O(L), y = F(62), I = O(y), S = F(1), d = O(S), v = F(7), f = O(v), l = F(5), _ = F(2), g = O(_), i = F(63), n = O(i), o = {};
                        o.safeCall = k.default, o.safeIncrement = E.default, o.getComputedStyle = M.default, o.secondsToMs = I.default, o.assign = d.default, o.headersStringToObject = f.default, o.extractHostnameAndDomain = l.extractHostnameAndDomain, o.extractHostname = l.extractHostname, o.now = g.default.now, o.manifestParser = n.default, R.default = o;
                      }, function(j, R, F) {
                        "use strict";
                        function O(m2, E, L, M) {
                          var y = M;
                          if (m2 && typeof m2[E] == "function")
                            try {
                              y = m2[E].apply(m2, L);
                            } catch (I) {
                              k.default.info("safeCall error", I);
                            }
                          return y;
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = F(4), k = function(m2) {
                          return m2 && m2.__esModule ? m2 : { default: m2 };
                        }(x);
                      }, function(j, R, F) {
                        "use strict";
                        function O(E, L) {
                          if (E && L && k.default && typeof k.default.getComputedStyle == "function") {
                            var M = void 0;
                            return m2 && m2.has(E) && (M = m2.get(E)), M || (M = k.default.getComputedStyle(E, null), m2 && m2.set(E, M)), M.getPropertyValue(L);
                          }
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                        var x = F(0), k = function(E) {
                          return E && E.__esModule ? E : { default: E };
                        }(x), m2 = void 0;
                        k.default && k.default.WeakMap && (m2 = /* @__PURE__ */ new WeakMap());
                      }, function(j, R, F) {
                        "use strict";
                        function O(x) {
                          return Math.floor(1e3 * x);
                        }
                        Object.defineProperty(R, "__esModule", { value: true }), R.default = O;
                      }, function(j, R, F) {
                        "use strict";
                        function O(g) {
                          return g && g.__esModule ? g : { default: g };
                        }
                        Object.defineProperty(R, "__esModule", { value: true });
                        var x = F(1), k = O(x), m2 = F(14), E = O(m2), L = { TARGET_DURATION: "#EXT-X-TARGETDURATION", PART_INF: "#EXT-X-PART-INF", SERVER_CONTROL: "#EXT-X-SERVER-CONTROL", INF: "#EXTINF", PROGRAM_DATE_TIME: "#EXT-X-PROGRAM-DATE-TIME", VERSION: "#EXT-X-VERSION", SESSION_DATA: "#EXT-X-SESSION-DATA" }, M = function(g) {
                          return this.buffer = "", this.manifest = { segments: [], serverControl: {}, sessionData: {} }, this.currentUri = {}, this.process(g), this.manifest;
                        };
                        M.prototype.process = function(g) {
                          var i = void 0;
                          for (this.buffer += g, i = this.buffer.indexOf(`
`); i > -1; i = this.buffer.indexOf(`
`))
                            this.processLine(this.buffer.substring(0, i)), this.buffer = this.buffer.substring(i + 1);
                        }, M.prototype.processLine = function(g) {
                          var i = g.indexOf(":"), n = l(g, i), o = n[0], h = n.length === 2 ? S(n[1]) : void 0;
                          if (o[0] !== "#")
                            this.currentUri.uri = o, this.manifest.segments.push(this.currentUri), !this.manifest.targetDuration || "duration" in this.currentUri || (this.currentUri.duration = this.manifest.targetDuration), this.currentUri = {};
                          else
                            switch (o) {
                              case L.TARGET_DURATION:
                                if (!isFinite(h) || h < 0)
                                  return;
                                this.manifest.targetDuration = h, this.setHoldBack();
                                break;
                              case L.PART_INF:
                                y(this.manifest, n), this.manifest.partInf.partTarget && (this.manifest.partTargetDuration = this.manifest.partInf.partTarget), this.setHoldBack();
                                break;
                              case L.SERVER_CONTROL:
                                y(this.manifest, n), this.setHoldBack();
                                break;
                              case L.INF:
                                h === 0 ? this.currentUri.duration = 0.01 : h > 0 && (this.currentUri.duration = h);
                                break;
                              case L.PROGRAM_DATE_TIME:
                                var b = h, a = new Date(b);
                                this.manifest.dateTimeString || (this.manifest.dateTimeString = b, this.manifest.dateTimeObject = a), this.currentUri.dateTimeString = b, this.currentUri.dateTimeObject = a;
                                break;
                              case L.VERSION:
                                y(this.manifest, n);
                                break;
                              case L.SESSION_DATA:
                                var c = _(n[1]), s = (0, E.default)(c);
                                (0, k.default)(this.manifest.sessionData, s);
                            }
                        }, M.prototype.setHoldBack = function() {
                          var g = this.manifest, i = g.serverControl, n = g.targetDuration, o = g.partTargetDuration;
                          if (i) {
                            var h = "holdBack", b = "partHoldBack", a = n && 3 * n, c = o && 2 * o;
                            n && !i.hasOwnProperty(h) && (i[h] = a), a && i[h] < a && (i[h] = a), o && !i.hasOwnProperty(b) && (i[b] = 3 * o), o && i[b] < c && (i[b] = c);
                          }
                        };
                        var y = function(g, i) {
                          var n = I(i[0].replace("#EXT-X-", "")), o = void 0;
                          f(i[1]) ? (o = {}, o = (0, k.default)(v(i[1]), o)) : o = S(i[1]), g[n] = o;
                        }, I = function(g) {
                          return g.toLowerCase().replace(/-(\w)/g, function(i) {
                            return i[1].toUpperCase();
                          });
                        }, S = function(g) {
                          if (g.toLowerCase() === "yes" || g.toLowerCase() === "no")
                            return g.toLowerCase() === "yes";
                          var i = g.indexOf(":") !== -1 ? g : parseFloat(g);
                          return isNaN(i) ? g : i;
                        }, d = function(g) {
                          var i = {}, n = g.split("=");
                          return n.length > 1 && (i[I(n[0])] = S(n[1])), i;
                        }, v = function(g) {
                          for (var i = g.split(","), n = {}, o = 0; i.length > o; o++) {
                            var h = i[o], b = d(h);
                            n = (0, k.default)(b, n);
                          }
                          return n;
                        }, f = function(g) {
                          return g.indexOf("=") > -1;
                        }, l = function(g, i) {
                          return i === -1 ? [g] : [g.substring(0, i), g.substring(i + 1)];
                        }, _ = function(g) {
                          var i = {};
                          if (g) {
                            var n = g.search(",");
                            return [g.slice(0, n), g.slice(n + 1)].forEach(function(o, h) {
                              for (var b = o.replace(/['"]+/g, "").split("="), a = 0; a < b.length; a++)
                                b[a] === "DATA-ID" && (i["DATA-ID"] = b[1 - a]), b[a] === "VALUE" && (i.VALUE = b[1 - a]);
                            }), { data: i };
                          }
                        };
                        R.default = M;
                      }, function(j, R, F) {
                        "use strict";
                        Object.defineProperty(R, "__esModule", { value: true });
                        var O = { PLAYER_READY: "playerready", VIEW_INIT: "viewinit", VIDEO_CHANGE: "videochange", PLAY: "play", PAUSE: "pause", PLAYING: "playing", TIME_UPDATE: "timeupdate", SEEKING: "seeking", SEEKED: "seeked", REBUFFER_START: "rebufferstart", REBUFFER_END: "rebufferend", ERROR: "error", ENDED: "ended", RENDITION_CHANGE: "renditionchange", ORIENTATION_CHANGE: "orientationchange", AD_REQUEST: "adrequest", AD_RESPONSE: "adresponse", AD_BREAK_START: "adbreakstart", AD_PLAY: "adplay", AD_PLAYING: "adplaying", AD_PAUSE: "adpause", AD_FIRST_QUARTILE: "adfirstquartile", AD_MID_POINT: "admidpoint", AD_THIRD_QUARTILE: "adthirdquartile", AD_ENDED: "adended", AD_BREAK_END: "adbreakend", AD_ERROR: "aderror", REQUEST_COMPLETED: "requestcompleted", REQUEST_FAILED: "requestfailed", REQUEST_CANCELLED: "requestcanceled" };
                        R.default = O;
                      }]);
                    });
                  })();
                }, function(Z, Y, N) {
                  "use strict";
                  function j(x, k) {
                    var m2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], E = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [], L = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
                      return {};
                    }, M = false;
                    x.on("adstart", function() {
                      M = true;
                    }), x.on("adend", function() {
                      M = false;
                    }), x.on("adserror", function() {
                      M = false;
                    });
                    var y = function() {
                      var I = O(k.currentTime()), S = function v() {
                        var f = F.default.utils.now(), l = O(k.currentTime());
                        if (M) {
                          if (l > I) {
                            var _ = L();
                            _.viewer_time = f - Math.max(0, l - I), k.off("timeupdate", v), x.mux.emit("adplaying", _);
                          }
                        } else
                          k.off("timeupdate", v);
                      };
                      k.on("timeupdate", S);
                      var d = function v() {
                        k.off("timeupdate", S), m2.forEach(function(f) {
                          k.off(f, v);
                        });
                      };
                      m2.forEach(function(v) {
                        k.on(v, d);
                      });
                    };
                    E.forEach(function(I) {
                      k.on(I, y);
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.default = j;
                  var R = N(0), F = function(x) {
                    return x && x.__esModule ? x : { default: x };
                  }(R), O = F.default.utils.secondsToMs;
                }, function(Z, Y, N) {
                  "use strict";
                  function j(c) {
                    return c && c.__esModule ? c : { default: c };
                  }
                  function R(c) {
                    var s = c;
                    return function(p) {
                      if (s.IS_IE8)
                        return false;
                      var D = this, A = D.id();
                      p = n({ automaticErrorTracking: true }, p), p.data = n({ player_software_name: "Video.js", player_software_version: s.VERSION || "< 4.11", player_mux_plugin_name: "videojs-mux", player_mux_plugin_version: "4.6.6" }, p.data), p.getPlayheadTime = function() {
                        return b(D.currentTime());
                      }, p.getStateData = function() {
                        var W = o(D, "videoHeight"), H = o(D, "videoWidth");
                        if (H === void 0 || W === void 0) {
                          var V = D.el().firstChild;
                          V && V.nodeName.toUpperCase() === "VIDEO" && (W = V.videoHeight, H = V.videoWidth);
                        }
                        return { player_is_paused: o(D, "paused"), player_is_fullscreen: o(D, "isFullscreen"), player_autoplay_on: !!o(D, "autoplay"), player_preload_on: o(D, "preload"), player_width: h(D.el(), "width"), player_height: h(D.el(), "height"), player_language_code: o(D, "language"), video_poster_url: o(D, "poster"), video_source_url: o(D, "currentSrc"), video_source_mime_type: o(D, "currentType") && o(D, "currentType").toLowerCase(), video_source_duration: b(o(D, "duration") || 0), video_source_is_live: D.duration() === 1 / 0, video_source_height: W, video_source_width: H };
                      }, D.mux = function() {
                        i.error("[videojs-mux] The plugin was initialized more than once.");
                      }, D.mux.emit = function(W, H) {
                        m2.default.emit(A, W, H);
                      }, D.mux.addHLSJS = function(W) {
                        m2.default.addHLSJS(A, W);
                      }, D.mux.log = i, D.mux.utils = m2.default.utils, m2.default.init(A, p);
                      var w = false, B = function() {
                        w || D.mux.emit("playerready"), w = true;
                      };
                      D.ready(function() {
                        D.addClass("vjs-mux"), L.default.setTimeout(B, 0);
                      });
                      var U = false;
                      D.one("play", B), a.forEach(function(W) {
                        (W !== "error" || p.automaticErrorTracking) && D.on(W, function() {
                          if (!U) {
                            var H = {};
                            if (W === "error") {
                              var V = o(D, "error");
                              if (V && V.code === 1)
                                return;
                              H.player_error_code = V && V.code, H.player_error_message = V && V.message;
                            }
                            D.mux.emit(W, H);
                          }
                        });
                      });
                      var K = false;
                      D.on("play", function() {
                        K = true;
                      }), D.on("pause", function() {
                        K = false;
                      }), D.on("adstart", function() {
                        U = true, K && D.mux.emit("pause"), D.mux.emit("adbreakstart");
                      }), D.on("adend", function() {
                        D.mux.emit("adbreakend"), U = false, o(D, "paused") || (D.mux.emit("play"), K = true, D.onceux && D.mux.emit("playing"));
                      }), D.ima && (0, y.default)(D), D.onceux && (0, l.default)(D), D.ima3 && typeof D.ima3.ready == "function" && (0, S.default)(D), D.FreeWheelPlugin && D.FreeWheelPlugin.VERSION && (0, v.default)(D), D.on("dispose", function() {
                        D.mux.emit("destroy");
                      });
                    };
                  }
                  function F(c) {
                    (c.registerPlugin || c.plugin || function() {
                      m2.default.log.error("No valid method to register videojs plugin available.");
                    })("mux", R(c)), (0, g.default)(c);
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.register = F;
                  var O = N(3), x = j(O), k = N(0), m2 = j(k), E = N(4), L = j(E), M = N(6), y = j(M), I = N(7), S = j(I), d = N(8), v = j(d), f = N(9), l = j(f), _ = N(10), g = j(_), i = m2.default.log, n = m2.default.utils.assign, o = m2.default.utils.safeCall, h = m2.default.utils.getComputedStyle, b = m2.default.utils.secondsToMs, a = ["loadstart", "pause", "play", "playing", "seeking", "seeked", "timeupdate", "ratechange", "stalled", "waiting", "error", "ended"];
                  F(x.default);
                }, function(Z, Y) {
                  Z.exports = Pe;
                }, function(Z, Y, N) {
                  (function(j) {
                    var R;
                    R = typeof window != "undefined" ? window : j !== void 0 ? j : typeof self != "undefined" ? self : {}, Z.exports = R;
                  }).call(Y, N(5));
                }, function(Z, Y) {
                  var N;
                  N = function() {
                    return this;
                  }();
                  try {
                    N = N || Function("return this")() || (0, eval)("this");
                  } catch (j) {
                    typeof window == "object" && (N = window);
                  }
                  Z.exports = N;
                }, function(Z, Y, N) {
                  "use strict";
                  function j(R) {
                    var F = function(I) {
                      I = I || {};
                      var S = typeof I.getAdData == "function" ? I.getAdData() : {}, d = typeof I.getAd == "function" ? I.getAd() : {}, v = typeof d.getMediaUrl == "function" ? d.getMediaUrl() : S.mediaUrl, f = R.ima.settings || {}, l = {};
                      return v && (l.ad_asset_url = v), f.adTagUrl && (l.ad_tag_url = f.adTagUrl), l;
                    }, O = void 0, x = void 0, k = void 0, m2 = void 0, E = void 0, L = void 0;
                    try {
                      var M = window.google.ima.AdEvent.Type;
                      O = M.LOADED, x = M.STARTED, k = M.COMPLETE, m2 = M.PAUSED, E = M.RESUMED, L = M.SKIPPED;
                    } catch (I) {
                      O = "loaded", x = "start", k = "complete", m2 = "pause", E = "resume", L = "skip";
                    }
                    var y = 0;
                    R.mux.triggerAdRequest = function() {
                      y++, R.mux.emit("adrequest", F());
                    }, R.on("adsready", function() {
                      var I = R.ima.addEventListener || function() {
                      };
                      I(O, function(S) {
                        var d = F(S);
                        y > 0 && (y--, R.mux.emit("adresponse", d)), R.mux.emit("adplay", d);
                      }), I(x, function(S) {
                        var d = F(S);
                        R.mux.emit("adplaying", d);
                      }), I(E, function(S) {
                        var d = F(S);
                        R.mux.emit("adplay", d), R.mux.emit("adplaying", d);
                      }), I(m2, function(S) {
                        var d = F(S);
                        R.mux.emit("adpause", d);
                      }), I(k, function(S) {
                        var d = F(S);
                        R.mux.emit("adended", d);
                      }), I(L, function(S) {
                        var d = F(S);
                        R.mux.emit("adended", d);
                      }), R.on("adserror", function() {
                        y > 0 && (y--, R.mux.emit("adresponse")), R.mux.emit("aderror");
                      });
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.default = j;
                }, function(Z, Y, N) {
                  "use strict";
                  function j(x) {
                    if (typeof x != "string")
                      return false;
                    var k = x.split(".").map(function(L) {
                      return parseInt(L);
                    }), m2 = k[0], E = k[1];
                    return m2 > 2 || m2 === 2 && E >= 3;
                  }
                  function R(x) {
                    var k = function() {
                      var L = x.ima3.currentAd, M = x.ima3.settings, y = {};
                      return L && (y.ad_asset_url = L.mediaUrl), M && (y.ad_tag_url = M.serverUrl), y;
                    };
                    if (j(x.ima3.version)) {
                      var m2 = 0, E = function() {
                        m2 > 0 && (m2--, x.mux.emit("adresponse", k()));
                      };
                      x.on("ads-request", function() {
                        m2++, x.mux.emit("adrequest", k());
                      }), x.on("ads-load", function() {
                        E(), x.mux.emit("adplay", k());
                      }), x.on("adserror", function() {
                        E(), x.mux.emit("aderror");
                      }), x.on("ads-play", function() {
                        x.mux.emit("adplay", k());
                      }), x.on("ads-pause", function() {
                        x.mux.emit("adpause", k());
                      }), x.on("ads-ad-ended", function() {
                        x.mux.emit("adended", k());
                      });
                    }
                    x.ima3.ready(function() {
                      if (x.ima3.adPlayer) {
                        j(x.ima3.version) || (x.ima3.adPlayer.on("play", function() {
                          x.mux.emit("adplay");
                        }), x.ima3.adPlayer.on("pause", function() {
                          x.mux.emit("adpause");
                        }), x.ima3.adPlayer.on("ended", function() {
                          x.mux.emit("adended");
                        }));
                        var L = ["pause", "ended", "adserror"], M = ["play"];
                        (0, O.default)(x, x.ima3.adPlayer, L, M, k);
                      } else
                        x.mux.log("Legacy IMA3 plugin found, ad events may not track correctly."), x.on("ads-ad-started", function() {
                          x.mux.emit("adplaying", k());
                        }), x.on("ads-play", function() {
                          x.mux.emit("adplaying", k());
                        });
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.brightcoveImaAdsEventsSupported = j, Y.default = R;
                  var F = N(1), O = function(x) {
                    return x && x.__esModule ? x : { default: x };
                  }(F);
                }, function(Z, Y, N) {
                  "use strict";
                  function j(R) {
                    var F = function(O) {
                      var x = R.FreeWheelPlugin, k = {};
                      switch (O) {
                        case "adplay":
                        case "adplaying":
                        case "adpause":
                          k.ad_asset_url = R.currentSrc();
                      }
                      return x && (k.ad_tag_url = x.tech.toLowerCase() === "html5" ? x.settings.Html5.serverUrl : x.settings.Flash.serverUrl), k;
                    };
                    R.on("ads-request", function() {
                      R.mux.emit("adrequest", F("adrequest"));
                    }), R.on("ads-load", function() {
                      R.mux.emit("adresponse", F("adresponse"));
                    }), R.on("adserror", function() {
                      R.mux.emit("aderror");
                    }), R.on("ads-ad-started", function() {
                      R.mux.emit("adplay", F("adplay")), R.mux.emit("adplaying", F("adplaying"));
                    }), R.on("ads-play", function() {
                      R.mux.emit("adplay", F("adplay")), R.mux.emit("adplaying", F("adplaying"));
                    }), R.on("ads-pause", function() {
                      R.mux.emit("adpause", F("adpause"));
                    }), R.on("ads-ad-ended", function() {
                      R.mux.emit("adended", F("adended"));
                    }), R.on("adend", function() {
                      R.mux.emit("play");
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.default = j;
                }, function(Z, Y, N) {
                  "use strict";
                  function j(O) {
                    var x = ["onceux-linearad-pause", "onceux-linearad-skipped", "onceux-linearad-complete", "adserror"], k = ["adstart", "onceux-linearad-resume"];
                    (0, F.default)(O, O, x, k), O.on("adstart", function() {
                      O.mux.emit("adplay");
                    }), O.on("onceux-linearad-start", function(m2) {
                      m2.linearAd && m2.linearAd.index > 0 && (O.mux.emit("adplay"), O.mux.emit("adplaying"));
                    }), O.on("onceux-linearad-resume", function() {
                      O.mux.emit("adplay");
                    }), O.on("onceux-linearad-pause", function() {
                      O.mux.emit("adpause");
                    }), O.on("onceux-linearad-complete", function() {
                      O.mux.emit("adended");
                    }), O.on("onceux-linearad-skipped", function() {
                      O.mux.emit("adended");
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.default = j;
                  var R = N(1), F = function(O) {
                    return O && O.__esModule ? O : { default: O };
                  }(R);
                }, function(Z, Y, N) {
                  "use strict";
                  function j(m2) {
                    if (!k.get(m2) && (k.set(m2, "video.js " + m2.VERSION + " initialized"), typeof m2.getTech == "function"))
                      for (var E = m2.getTech("Html5") || {}, L = E.sourceHandlers, M = 0; M < L.length; M++)
                        (function(y) {
                          var I = L[y], S = I.handleSource;
                          I.handleSource = function(d, v) {
                            var f = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, l = S(d, v, f);
                            if (l && typeof l.xhr == "function")
                              try {
                                var _ = m2.VERSION.split("."), g = R(_, 2), i = g[0], n = g[1];
                                i = parseInt(i), n = parseInt(n);
                                var o = i >= 7 && n >= 4 ? l.player().id() : l.player_.el_.parentNode.id;
                                (0, O.default)(m2(o), l.xhr), (0, x.trackRenditionChanges)(m2(o));
                              } catch (h) {
                              }
                            return l;
                          };
                        })(M);
                  }
                  Object.defineProperty(Y, "__esModule", { value: true });
                  var R = function() {
                    function m2(E, L) {
                      var M = [], y = true, I = false, S = void 0;
                      try {
                        for (var d, v = E[Symbol.iterator](); !(y = (d = v.next()).done) && (M.push(d.value), !L || M.length !== L); y = true)
                          ;
                      } catch (f) {
                        I = true, S = f;
                      } finally {
                        try {
                          !y && v.return && v.return();
                        } finally {
                          if (I)
                            throw S;
                        }
                      }
                      return M;
                    }
                    return function(E, L) {
                      if (Array.isArray(E))
                        return E;
                      if (Symbol.iterator in Object(E))
                        return m2(E, L);
                      throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    };
                  }();
                  Y.default = j;
                  var F = N(11), O = function(m2) {
                    return m2 && m2.__esModule ? m2 : { default: m2 };
                  }(F), x = N(13), k = /* @__PURE__ */ new Map();
                }, function(Z, Y, N) {
                  "use strict";
                  function j(m2) {
                    return m2 && m2.__esModule ? m2 : { default: m2 };
                  }
                  function R(m2, E) {
                    var L = function(y, I, S) {
                      var d = (0, O.default)(m2, y, I);
                      return function() {
                        try {
                          d();
                        } catch (v) {
                        }
                        try {
                          S();
                        } catch (v) {
                        }
                      };
                    }, M = function(y) {
                      return function(I) {
                        var S = k.default.utils.now();
                        try {
                          y(I);
                        } catch (d) {
                        }
                        try {
                          I.onreadystatechange = L(I, S, I.onreadystatechange || function() {
                          });
                        } catch (d) {
                        }
                      };
                    };
                    E.beforeRequest = function(y) {
                      return function(I) {
                        var S = y(I);
                        return S.beforeSend = M(S.beforeSend || function() {
                        }), S;
                      };
                    }(E.beforeRequest || function(y) {
                      return y;
                    });
                  }
                  Object.defineProperty(Y, "__esModule", { value: true }), Y.default = R;
                  var F = N(12), O = j(F), x = N(0), k = j(x);
                }, function(Z, Y, N) {
                  "use strict";
                  function j(x, k, m2) {
                    var E = x.mux.utils.extractHostnameAndDomain, L = x.mux.utils.headersStringToObject, M = function(I) {
                      var S = I["content-type"];
                      return S ? S.match(/^audio\/mpegurl/i) ? "manifest" : S.match(/^audio.*/i) ? "audio" : S.match(/^video.*/) ? "video" : S.match(/^application\/x-mpegurl/i) || S.match(/^application\/vnd.apple.mpegurl/i) || S.match(/^application\/dash+xml/i) ? "manifest" : "unknown" : "unknown";
                    }, y = 0;
                    return function() {
                      var I = k.readyState;
                      if (I >= 2) {
                        if (y = y || O.default.utils.now(), I !== 4)
                          return;
                        if (k.status >= 200 && k.status < 300) {
                          var S = O.default.utils.now(), d = k.responseType === "arraybuffer" ? k.response.byteLength : k.responseText.length, v = E(k.responseURL), f = R(v, 1), l = f[0], _ = L(k.getAllResponseHeaders ? k.getAllResponseHeaders() : ""), g = M(_), i = { request_start: m2, request_response_start: y, request_response_end: S, request_bytes_loaded: d, request_hostname: l, request_response_headers: _, request_type: g };
                          x.mux.emit("requestcompleted", i);
                        } else
                          x.mux.emit("requestfailed");
                      }
                    };
                  }
                  Object.defineProperty(Y, "__esModule", { value: true });
                  var R = function() {
                    function x(k, m2) {
                      var E = [], L = true, M = false, y = void 0;
                      try {
                        for (var I, S = k[Symbol.iterator](); !(L = (I = S.next()).done) && (E.push(I.value), !m2 || E.length !== m2); L = true)
                          ;
                      } catch (d) {
                        M = true, y = d;
                      } finally {
                        try {
                          !L && S.return && S.return();
                        } finally {
                          if (M)
                            throw y;
                        }
                      }
                      return E;
                    }
                    return function(k, m2) {
                      if (Array.isArray(k))
                        return k;
                      if (Symbol.iterator in Object(k))
                        return x(k, m2);
                      throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    };
                  }();
                  Y.default = j;
                  var F = N(0), O = function(x) {
                    return x && x.__esModule ? x : { default: x };
                  }(F);
                }, function(Z, Y, N) {
                  "use strict";
                  Object.defineProperty(Y, "__esModule", { value: true });
                  var j = function(F) {
                    for (var O = F.textTracks(), x = void 0, k = 0; k < O.length; k++)
                      O[k].label === "segment-metadata" && (x = O[k]);
                    return x;
                  }, R = function(F) {
                    var O = j(F), x = void 0;
                    O && O.on && O.on("cuechange", function() {
                      try {
                        var k = F.tech({ IWillNotUseThisInPlugins: true }), m2 = k.vhs || k.hls, E = m2.playlists.media().attributes.BANDWIDTH;
                        x !== E && F.mux.emit("renditionchange", { video_source_bitrate: E }), x = E;
                      } catch (L) {
                        F.mux && F.mux.log && F.mux.log.warn && F.mux.log.warn("Cannot retrieve BANDWIDTH information from player: " + L);
                      }
                    });
                  };
                  Y.getSegmentMetadataTrack = j, Y.trackRenditionChanges = R;
                }]);
              });
            })();
          }, 497: (Ee, Me, Ce) => {
            var Ae = Ce(697), Pe = Ee.exports = { WebVTT: Ce(13), VTTCue: Ce(190), VTTRegion: Ce(146) };
            Ae.vttjs = Pe, Ae.WebVTT = Pe.WebVTT;
            var Z = Pe.VTTCue, Y = Pe.VTTRegion, N = Ae.VTTCue, j = Ae.VTTRegion;
            Pe.shim = function() {
              Ae.VTTCue = Z, Ae.VTTRegion = Y;
            }, Pe.restore = function() {
              Ae.VTTCue = N, Ae.VTTRegion = j;
            }, Ae.VTTCue || Pe.shim();
          }, 13: (Ee, Me, Ce) => {
            var Ae = Ce(675), Pe = Object.create || function() {
              function n() {
              }
              return function(o) {
                if (arguments.length !== 1)
                  throw new Error("Object.create shim only accepts one parameter.");
                return n.prototype = o, new n();
              };
            }();
            function Z(n, o) {
              this.name = "ParsingError", this.code = n.code, this.message = o || n.message;
            }
            Z.prototype = Pe(Error.prototype), Z.prototype.constructor = Z, Z.Errors = { BadSignature: { code: 0, message: "Malformed WebVTT signature." }, BadTimeStamp: { code: 1, message: "Malformed time stamp." } };
            function Y(n) {
              function o(b, a, c, s) {
                return (b | 0) * 3600 + (a | 0) * 60 + (c | 0) + (s | 0) / 1e3;
              }
              var h = n.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
              return h ? h[3] ? o(h[1], h[2], h[3].replace(":", ""), h[4]) : h[1] > 59 ? o(h[1], h[2], 0, h[4]) : o(0, h[1], h[2], h[4]) : null;
            }
            function N() {
              this.values = Pe(null);
            }
            N.prototype = { set: function(n, o) {
              !this.get(n) && o !== "" && (this.values[n] = o);
            }, get: function(n, o, h) {
              return h ? this.has(n) ? this.values[n] : o[h] : this.has(n) ? this.values[n] : o;
            }, has: function(n) {
              return n in this.values;
            }, alt: function(n, o, h) {
              for (var b = 0; b < h.length; ++b)
                if (o === h[b]) {
                  this.set(n, o);
                  break;
                }
            }, integer: function(n, o) {
              /^-?\d+$/.test(o) && this.set(n, parseInt(o, 10));
            }, percent: function(n, o) {
              var h;
              return (h = o.match(/^([\d]{1,3})(\.[\d]*)?%$/)) && (o = parseFloat(o), o >= 0 && o <= 100) ? (this.set(n, o), true) : false;
            } };
            function j(n, o, h, b) {
              var a = b ? n.split(b) : [n];
              for (var c in a)
                if (typeof a[c] == "string") {
                  var s = a[c].split(h);
                  if (s.length === 2) {
                    var p = s[0].trim(), D = s[1].trim();
                    o(p, D);
                  }
                }
            }
            function R(n, o, h) {
              var b = n;
              function a() {
                var p = Y(n);
                if (p === null)
                  throw new Z(Z.Errors.BadTimeStamp, "Malformed timestamp: " + b);
                return n = n.replace(/^[^\sa-zA-Z-]+/, ""), p;
              }
              function c(p, D) {
                var A = new N();
                j(p, function(w, B) {
                  switch (w) {
                    case "region":
                      for (var U = h.length - 1; U >= 0; U--)
                        if (h[U].id === B) {
                          A.set(w, h[U].region);
                          break;
                        }
                      break;
                    case "vertical":
                      A.alt(w, B, ["rl", "lr"]);
                      break;
                    case "line":
                      var K = B.split(","), W = K[0];
                      A.integer(w, W), A.percent(w, W) && A.set("snapToLines", false), A.alt(w, W, ["auto"]), K.length === 2 && A.alt("lineAlign", K[1], ["start", "center", "end"]);
                      break;
                    case "position":
                      K = B.split(","), A.percent(w, K[0]), K.length === 2 && A.alt("positionAlign", K[1], ["start", "center", "end"]);
                      break;
                    case "size":
                      A.percent(w, B);
                      break;
                    case "align":
                      A.alt(w, B, ["start", "center", "end", "left", "right"]);
                      break;
                  }
                }, /:/, /\s/), D.region = A.get("region", null), D.vertical = A.get("vertical", "");
                try {
                  D.line = A.get("line", "auto");
                } catch (w) {
                }
                D.lineAlign = A.get("lineAlign", "start"), D.snapToLines = A.get("snapToLines", true), D.size = A.get("size", 100);
                try {
                  D.align = A.get("align", "center");
                } catch (w) {
                  D.align = A.get("align", "middle");
                }
                try {
                  D.position = A.get("position", "auto");
                } catch (w) {
                  D.position = A.get("position", { start: 0, left: 0, center: 50, middle: 50, end: 100, right: 100 }, D.align);
                }
                D.positionAlign = A.get("positionAlign", { start: "start", left: "start", center: "center", middle: "center", end: "end", right: "end" }, D.align);
              }
              function s() {
                n = n.replace(/^\s+/, "");
              }
              if (s(), o.startTime = a(), s(), n.substr(0, 3) !== "-->")
                throw new Z(Z.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '-->'): " + b);
              n = n.substr(3), s(), o.endTime = a(), s(), c(n, o);
            }
            var F = Ae.createElement && Ae.createElement("textarea"), O = { c: "span", i: "i", b: "b", u: "u", ruby: "ruby", rt: "rt", v: "span", lang: "span" }, x = { white: "rgba(255,255,255,1)", lime: "rgba(0,255,0,1)", cyan: "rgba(0,255,255,1)", red: "rgba(255,0,0,1)", yellow: "rgba(255,255,0,1)", magenta: "rgba(255,0,255,1)", blue: "rgba(0,0,255,1)", black: "rgba(0,0,0,1)" }, k = { v: "title", lang: "lang" }, m2 = { rt: "ruby" };
            function E(n, o) {
              function h() {
                if (!o)
                  return null;
                function W(V) {
                  return o = o.substr(V.length), V;
                }
                var H = o.match(/^([^<]*)(<[^>]*>?)?/);
                return W(H[1] ? H[1] : H[2]);
              }
              function b(W) {
                return F.innerHTML = W, W = F.textContent, F.textContent = "", W;
              }
              function a(W, H) {
                return !m2[H.localName] || m2[H.localName] === W.localName;
              }
              function c(W, H) {
                var V = O[W];
                if (!V)
                  return null;
                var z = n.document.createElement(V), Q = k[W];
                return Q && H && (z[Q] = H.trim()), z;
              }
              for (var s = n.document.createElement("div"), p = s, D, A = []; (D = h()) !== null; ) {
                if (D[0] === "<") {
                  if (D[1] === "/") {
                    A.length && A[A.length - 1] === D.substr(2).replace(">", "") && (A.pop(), p = p.parentNode);
                    continue;
                  }
                  var w = Y(D.substr(1, D.length - 2)), B;
                  if (w) {
                    B = n.document.createProcessingInstruction("timestamp", w), p.appendChild(B);
                    continue;
                  }
                  var U = D.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                  if (!U || (B = c(U[1], U[3]), !B) || !a(p, B))
                    continue;
                  if (U[2]) {
                    var K = U[2].split(".");
                    K.forEach(function(W) {
                      var H = /^bg_/.test(W), V = H ? W.slice(3) : W;
                      if (x.hasOwnProperty(V)) {
                        var z = H ? "background-color" : "color", Q = x[V];
                        B.style[z] = Q;
                      }
                    }), B.className = K.join(" ");
                  }
                  A.push(U[1]), p.appendChild(B), p = B;
                  continue;
                }
                p.appendChild(n.document.createTextNode(b(D)));
              }
              return s;
            }
            var L = [[1470, 1470], [1472, 1472], [1475, 1475], [1478, 1478], [1488, 1514], [1520, 1524], [1544, 1544], [1547, 1547], [1549, 1549], [1563, 1563], [1566, 1610], [1645, 1647], [1649, 1749], [1765, 1766], [1774, 1775], [1786, 1805], [1807, 1808], [1810, 1839], [1869, 1957], [1969, 1969], [1984, 2026], [2036, 2037], [2042, 2042], [2048, 2069], [2074, 2074], [2084, 2084], [2088, 2088], [2096, 2110], [2112, 2136], [2142, 2142], [2208, 2208], [2210, 2220], [8207, 8207], [64285, 64285], [64287, 64296], [64298, 64310], [64312, 64316], [64318, 64318], [64320, 64321], [64323, 64324], [64326, 64449], [64467, 64829], [64848, 64911], [64914, 64967], [65008, 65020], [65136, 65140], [65142, 65276], [67584, 67589], [67592, 67592], [67594, 67637], [67639, 67640], [67644, 67644], [67647, 67669], [67671, 67679], [67840, 67867], [67872, 67897], [67903, 67903], [67968, 68023], [68030, 68031], [68096, 68096], [68112, 68115], [68117, 68119], [68121, 68147], [68160, 68167], [68176, 68184], [68192, 68223], [68352, 68405], [68416, 68437], [68440, 68466], [68472, 68479], [68608, 68680], [126464, 126467], [126469, 126495], [126497, 126498], [126500, 126500], [126503, 126503], [126505, 126514], [126516, 126519], [126521, 126521], [126523, 126523], [126530, 126530], [126535, 126535], [126537, 126537], [126539, 126539], [126541, 126543], [126545, 126546], [126548, 126548], [126551, 126551], [126553, 126553], [126555, 126555], [126557, 126557], [126559, 126559], [126561, 126562], [126564, 126564], [126567, 126570], [126572, 126578], [126580, 126583], [126585, 126588], [126590, 126590], [126592, 126601], [126603, 126619], [126625, 126627], [126629, 126633], [126635, 126651], [1114109, 1114109]];
            function M(n) {
              for (var o = 0; o < L.length; o++) {
                var h = L[o];
                if (n >= h[0] && n <= h[1])
                  return true;
              }
              return false;
            }
            function y(n) {
              var o = [], h = "", b;
              if (!n || !n.childNodes)
                return "ltr";
              function a(p, D) {
                for (var A = D.childNodes.length - 1; A >= 0; A--)
                  p.push(D.childNodes[A]);
              }
              function c(p) {
                if (!p || !p.length)
                  return null;
                var D = p.pop(), A = D.textContent || D.innerText;
                if (A) {
                  var w = A.match(/^.*(\n|\r)/);
                  return w ? (p.length = 0, w[0]) : A;
                }
                if (D.tagName === "ruby")
                  return c(p);
                if (D.childNodes)
                  return a(p, D), c(p);
              }
              for (a(o, n); h = c(o); )
                for (var s = 0; s < h.length; s++)
                  if (b = h.charCodeAt(s), M(b))
                    return "rtl";
              return "ltr";
            }
            function I(n) {
              if (typeof n.line == "number" && (n.snapToLines || n.line >= 0 && n.line <= 100))
                return n.line;
              if (!n.track || !n.track.textTrackList || !n.track.textTrackList.mediaElement)
                return -1;
              for (var o = n.track, h = o.textTrackList, b = 0, a = 0; a < h.length && h[a] !== o; a++)
                h[a].mode === "showing" && b++;
              return ++b * -1;
            }
            function S() {
            }
            S.prototype.applyStyles = function(n, o) {
              o = o || this.div;
              for (var h in n)
                n.hasOwnProperty(h) && (o.style[h] = n[h]);
            }, S.prototype.formatStyle = function(n, o) {
              return n === 0 ? 0 : n + o;
            };
            function d(n, o, h) {
              S.call(this), this.cue = o, this.cueDiv = E(n, o.text);
              var b = { color: "rgba(255, 255, 255, 1)", backgroundColor: "rgba(0, 0, 0, 0.8)", position: "relative", left: 0, right: 0, top: 0, bottom: 0, display: "inline", writingMode: o.vertical === "" ? "horizontal-tb" : o.vertical === "lr" ? "vertical-lr" : "vertical-rl", unicodeBidi: "plaintext" };
              this.applyStyles(b, this.cueDiv), this.div = n.document.createElement("div"), b = { direction: y(this.cueDiv), writingMode: o.vertical === "" ? "horizontal-tb" : o.vertical === "lr" ? "vertical-lr" : "vertical-rl", unicodeBidi: "plaintext", textAlign: o.align === "middle" ? "center" : o.align, font: h.font, whiteSpace: "pre-line", position: "absolute" }, this.applyStyles(b), this.div.appendChild(this.cueDiv);
              var a = 0;
              switch (o.positionAlign) {
                case "start":
                  a = o.position;
                  break;
                case "center":
                  a = o.position - o.size / 2;
                  break;
                case "end":
                  a = o.position - o.size;
                  break;
              }
              o.vertical === "" ? this.applyStyles({ left: this.formatStyle(a, "%"), width: this.formatStyle(o.size, "%") }) : this.applyStyles({ top: this.formatStyle(a, "%"), height: this.formatStyle(o.size, "%") }), this.move = function(c) {
                this.applyStyles({ top: this.formatStyle(c.top, "px"), bottom: this.formatStyle(c.bottom, "px"), left: this.formatStyle(c.left, "px"), right: this.formatStyle(c.right, "px"), height: this.formatStyle(c.height, "px"), width: this.formatStyle(c.width, "px") });
              };
            }
            d.prototype = Pe(S.prototype), d.prototype.constructor = d;
            function v(n) {
              var o, h, b, a;
              if (n.div) {
                h = n.div.offsetHeight, b = n.div.offsetWidth, a = n.div.offsetTop;
                var c = (c = n.div.childNodes) && (c = c[0]) && c.getClientRects && c.getClientRects();
                n = n.div.getBoundingClientRect(), o = c ? Math.max(c[0] && c[0].height || 0, n.height / c.length) : 0;
              }
              this.left = n.left, this.right = n.right, this.top = n.top || a, this.height = n.height || h, this.bottom = n.bottom || a + (n.height || h), this.width = n.width || b, this.lineHeight = o !== void 0 ? o : n.lineHeight;
            }
            v.prototype.move = function(n, o) {
              switch (o = o !== void 0 ? o : this.lineHeight, n) {
                case "+x":
                  this.left += o, this.right += o;
                  break;
                case "-x":
                  this.left -= o, this.right -= o;
                  break;
                case "+y":
                  this.top += o, this.bottom += o;
                  break;
                case "-y":
                  this.top -= o, this.bottom -= o;
                  break;
              }
            }, v.prototype.overlaps = function(n) {
              return this.left < n.right && this.right > n.left && this.top < n.bottom && this.bottom > n.top;
            }, v.prototype.overlapsAny = function(n) {
              for (var o = 0; o < n.length; o++)
                if (this.overlaps(n[o]))
                  return true;
              return false;
            }, v.prototype.within = function(n) {
              return this.top >= n.top && this.bottom <= n.bottom && this.left >= n.left && this.right <= n.right;
            }, v.prototype.overlapsOppositeAxis = function(n, o) {
              switch (o) {
                case "+x":
                  return this.left < n.left;
                case "-x":
                  return this.right > n.right;
                case "+y":
                  return this.top < n.top;
                case "-y":
                  return this.bottom > n.bottom;
              }
            }, v.prototype.intersectPercentage = function(n) {
              var o = Math.max(0, Math.min(this.right, n.right) - Math.max(this.left, n.left)), h = Math.max(0, Math.min(this.bottom, n.bottom) - Math.max(this.top, n.top)), b = o * h;
              return b / (this.height * this.width);
            }, v.prototype.toCSSCompatValues = function(n) {
              return { top: this.top - n.top, bottom: n.bottom - this.bottom, left: this.left - n.left, right: n.right - this.right, height: this.height, width: this.width };
            }, v.getSimpleBoxPosition = function(n) {
              var o = n.div ? n.div.offsetHeight : n.tagName ? n.offsetHeight : 0, h = n.div ? n.div.offsetWidth : n.tagName ? n.offsetWidth : 0, b = n.div ? n.div.offsetTop : n.tagName ? n.offsetTop : 0;
              n = n.div ? n.div.getBoundingClientRect() : n.tagName ? n.getBoundingClientRect() : n;
              var a = { left: n.left, right: n.right, top: n.top || b, height: n.height || o, bottom: n.bottom || b + (n.height || o), width: n.width || h };
              return a;
            };
            function f(n, o, h, b) {
              function a(V, z) {
                for (var Q, q = new v(V), ee = 1, ae = 0; ae < z.length; ae++) {
                  for (; V.overlapsOppositeAxis(h, z[ae]) || V.within(h) && V.overlapsAny(b); )
                    V.move(z[ae]);
                  if (V.within(h))
                    return V;
                  var ne = V.intersectPercentage(h);
                  ee > ne && (Q = new v(V), ee = ne), V = new v(q);
                }
                return Q || q;
              }
              var c = new v(o), s = o.cue, p = I(s), D = [];
              if (s.snapToLines) {
                var A;
                switch (s.vertical) {
                  case "":
                    D = ["+y", "-y"], A = "height";
                    break;
                  case "rl":
                    D = ["+x", "-x"], A = "width";
                    break;
                  case "lr":
                    D = ["-x", "+x"], A = "width";
                    break;
                }
                var w = c.lineHeight, B = w * Math.round(p), U = h[A] + w, K = D[0];
                Math.abs(B) > U && (B = B < 0 ? -1 : 1, B *= Math.ceil(U / w) * w), p < 0 && (B += s.vertical === "" ? h.height : h.width, D = D.reverse()), c.move(K, B);
              } else {
                var W = c.lineHeight / h.height * 100;
                switch (s.lineAlign) {
                  case "center":
                    p -= W / 2;
                    break;
                  case "end":
                    p -= W;
                    break;
                }
                switch (s.vertical) {
                  case "":
                    o.applyStyles({ top: o.formatStyle(p, "%") });
                    break;
                  case "rl":
                    o.applyStyles({ left: o.formatStyle(p, "%") });
                    break;
                  case "lr":
                    o.applyStyles({ right: o.formatStyle(p, "%") });
                    break;
                }
                D = ["+y", "-x", "+x", "-y"], c = new v(o);
              }
              var H = a(c, D);
              o.move(H.toCSSCompatValues(h));
            }
            function l() {
            }
            l.StringDecoder = function() {
              return { decode: function(n) {
                if (!n)
                  return "";
                if (typeof n != "string")
                  throw new Error("Error - expected string data.");
                return decodeURIComponent(encodeURIComponent(n));
              } };
            }, l.convertCueToDOMTree = function(n, o) {
              return !n || !o ? null : E(n, o);
            };
            var _ = 0.05, g = "sans-serif", i = "1.5%";
            l.processCues = function(n, o, h) {
              if (!n || !o || !h)
                return null;
              for (; h.firstChild; )
                h.removeChild(h.firstChild);
              var b = n.document.createElement("div");
              b.style.position = "absolute", b.style.left = "0", b.style.right = "0", b.style.top = "0", b.style.bottom = "0", b.style.margin = i, h.appendChild(b);
              function a(w) {
                for (var B = 0; B < w.length; B++)
                  if (w[B].hasBeenReset || !w[B].displayState)
                    return true;
                return false;
              }
              if (!a(o)) {
                for (var c = 0; c < o.length; c++)
                  b.appendChild(o[c].displayState);
                return;
              }
              var s = [], p = v.getSimpleBoxPosition(b), D = Math.round(p.height * _ * 100) / 100, A = { font: D + "px " + g };
              (function() {
                for (var w, B, U = 0; U < o.length; U++)
                  B = o[U], w = new d(n, B, A), b.appendChild(w.div), f(n, w, p, s), B.displayState = w.div, s.push(v.getSimpleBoxPosition(w));
              })();
            }, l.Parser = function(n, o, h) {
              h || (h = o, o = {}), o || (o = {}), this.window = n, this.vttjs = o, this.state = "INITIAL", this.buffer = "", this.decoder = h || new TextDecoder("utf8"), this.regionList = [];
            }, l.Parser.prototype = { reportOrThrowError: function(n) {
              if (n instanceof Z)
                this.onparsingerror && this.onparsingerror(n);
              else
                throw n;
            }, parse: function(n) {
              var o = this;
              n && (o.buffer += o.decoder.decode(n, { stream: true }));
              function h() {
                for (var w = o.buffer, B = 0; B < w.length && w[B] !== "\r" && w[B] !== `
`; )
                  ++B;
                var U = w.substr(0, B);
                return w[B] === "\r" && ++B, w[B] === `
` && ++B, o.buffer = w.substr(B), U;
              }
              function b(w) {
                var B = new N();
                if (j(w, function(K, W) {
                  switch (K) {
                    case "id":
                      B.set(K, W);
                      break;
                    case "width":
                      B.percent(K, W);
                      break;
                    case "lines":
                      B.integer(K, W);
                      break;
                    case "regionanchor":
                    case "viewportanchor":
                      var H = W.split(",");
                      if (H.length !== 2)
                        break;
                      var V = new N();
                      if (V.percent("x", H[0]), V.percent("y", H[1]), !V.has("x") || !V.has("y"))
                        break;
                      B.set(K + "X", V.get("x")), B.set(K + "Y", V.get("y"));
                      break;
                    case "scroll":
                      B.alt(K, W, ["up"]);
                      break;
                  }
                }, /=/, /\s/), B.has("id")) {
                  var U = new (o.vttjs.VTTRegion || o.window.VTTRegion)();
                  U.width = B.get("width", 100), U.lines = B.get("lines", 3), U.regionAnchorX = B.get("regionanchorX", 0), U.regionAnchorY = B.get("regionanchorY", 100), U.viewportAnchorX = B.get("viewportanchorX", 0), U.viewportAnchorY = B.get("viewportanchorY", 100), U.scroll = B.get("scroll", ""), o.onregion && o.onregion(U), o.regionList.push({ id: B.get("id"), region: U });
                }
              }
              function a(w) {
                var B = new N();
                j(w, function(U, K) {
                  switch (U) {
                    case "MPEGT":
                      B.integer(U + "S", K);
                      break;
                    case "LOCA":
                      B.set(U + "L", Y(K));
                      break;
                  }
                }, /[^\d]:/, /,/), o.ontimestampmap && o.ontimestampmap({ MPEGTS: B.get("MPEGTS"), LOCAL: B.get("LOCAL") });
              }
              function c(w) {
                w.match(/X-TIMESTAMP-MAP/) ? j(w, function(B, U) {
                  switch (B) {
                    case "X-TIMESTAMP-MAP":
                      a(U);
                      break;
                  }
                }, /=/) : j(w, function(B, U) {
                  switch (B) {
                    case "Region":
                      b(U);
                      break;
                  }
                }, /:/);
              }
              try {
                var s;
                if (o.state === "INITIAL") {
                  if (!/\r\n|\n/.test(o.buffer))
                    return this;
                  s = h();
                  var p = s.match(/^WEBVTT([ \t].*)?$/);
                  if (!p || !p[0])
                    throw new Z(Z.Errors.BadSignature);
                  o.state = "HEADER";
                }
                for (var D = false; o.buffer; ) {
                  if (!/\r\n|\n/.test(o.buffer))
                    return this;
                  switch (D ? D = false : s = h(), o.state) {
                    case "HEADER":
                      /:/.test(s) ? c(s) : s || (o.state = "ID");
                      continue;
                    case "NOTE":
                      s || (o.state = "ID");
                      continue;
                    case "ID":
                      if (/^NOTE($|[ \t])/.test(s)) {
                        o.state = "NOTE";
                        break;
                      }
                      if (!s)
                        continue;
                      o.cue = new (o.vttjs.VTTCue || o.window.VTTCue)(0, 0, "");
                      try {
                        o.cue.align = "center";
                      } catch (w) {
                        o.cue.align = "middle";
                      }
                      if (o.state = "CUE", s.indexOf("-->") === -1) {
                        o.cue.id = s;
                        continue;
                      }
                    case "CUE":
                      try {
                        R(s, o.cue, o.regionList);
                      } catch (w) {
                        o.reportOrThrowError(w), o.cue = null, o.state = "BADCUE";
                        continue;
                      }
                      o.state = "CUETEXT";
                      continue;
                    case "CUETEXT":
                      var A = s.indexOf("-->") !== -1;
                      if (!s || A && (D = true)) {
                        o.oncue && o.oncue(o.cue), o.cue = null, o.state = "ID";
                        continue;
                      }
                      o.cue.text && (o.cue.text += `
`), o.cue.text += s.replace(/\u2028/g, `
`).replace(/u2029/g, `
`);
                      continue;
                    case "BADCUE":
                      s || (o.state = "ID");
                      continue;
                  }
                }
              } catch (w) {
                o.reportOrThrowError(w), o.state === "CUETEXT" && o.cue && o.oncue && o.oncue(o.cue), o.cue = null, o.state = o.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
              }
              return this;
            }, flush: function() {
              var n = this;
              try {
                if (n.buffer += n.decoder.decode(), (n.cue || n.state === "HEADER") && (n.buffer += `

`, n.parse()), n.state === "INITIAL")
                  throw new Z(Z.Errors.BadSignature);
              } catch (o) {
                n.reportOrThrowError(o);
              }
              return n.onflush && n.onflush(), this;
            } }, Ee.exports = l;
          }, 190: (Ee) => {
            var Me = "auto", Ce = { "": 1, lr: 1, rl: 1 }, Ae = { start: 1, center: 1, end: 1, left: 1, right: 1, auto: 1, "line-left": 1, "line-right": 1 };
            function Pe(N) {
              if (typeof N != "string")
                return false;
              var j = Ce[N.toLowerCase()];
              return j ? N.toLowerCase() : false;
            }
            function Z(N) {
              if (typeof N != "string")
                return false;
              var j = Ae[N.toLowerCase()];
              return j ? N.toLowerCase() : false;
            }
            function Y(N, j, R) {
              this.hasBeenReset = false;
              var F = "", O = false, x = N, k = j, m2 = R, E = null, L = "", M = true, y = "auto", I = "start", S = "auto", d = "auto", v = 100, f = "center";
              Object.defineProperties(this, { id: { enumerable: true, get: function() {
                return F;
              }, set: function(l) {
                F = "" + l;
              } }, pauseOnExit: { enumerable: true, get: function() {
                return O;
              }, set: function(l) {
                O = !!l;
              } }, startTime: { enumerable: true, get: function() {
                return x;
              }, set: function(l) {
                if (typeof l != "number")
                  throw new TypeError("Start time must be set to a number.");
                x = l, this.hasBeenReset = true;
              } }, endTime: { enumerable: true, get: function() {
                return k;
              }, set: function(l) {
                if (typeof l != "number")
                  throw new TypeError("End time must be set to a number.");
                k = l, this.hasBeenReset = true;
              } }, text: { enumerable: true, get: function() {
                return m2;
              }, set: function(l) {
                m2 = "" + l, this.hasBeenReset = true;
              } }, region: { enumerable: true, get: function() {
                return E;
              }, set: function(l) {
                E = l, this.hasBeenReset = true;
              } }, vertical: { enumerable: true, get: function() {
                return L;
              }, set: function(l) {
                var _ = Pe(l);
                if (_ === false)
                  throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");
                L = _, this.hasBeenReset = true;
              } }, snapToLines: { enumerable: true, get: function() {
                return M;
              }, set: function(l) {
                M = !!l, this.hasBeenReset = true;
              } }, line: { enumerable: true, get: function() {
                return y;
              }, set: function(l) {
                if (typeof l != "number" && l !== Me)
                  throw new SyntaxError("Line: an invalid number or illegal string was specified.");
                y = l, this.hasBeenReset = true;
              } }, lineAlign: { enumerable: true, get: function() {
                return I;
              }, set: function(l) {
                var _ = Z(l);
                _ ? (I = _, this.hasBeenReset = true) : console.warn("lineAlign: an invalid or illegal string was specified.");
              } }, position: { enumerable: true, get: function() {
                return S;
              }, set: function(l) {
                if (l < 0 || l > 100)
                  throw new Error("Position must be between 0 and 100.");
                S = l, this.hasBeenReset = true;
              } }, positionAlign: { enumerable: true, get: function() {
                return d;
              }, set: function(l) {
                var _ = Z(l);
                _ ? (d = _, this.hasBeenReset = true) : console.warn("positionAlign: an invalid or illegal string was specified.");
              } }, size: { enumerable: true, get: function() {
                return v;
              }, set: function(l) {
                if (l < 0 || l > 100)
                  throw new Error("Size must be between 0 and 100.");
                v = l, this.hasBeenReset = true;
              } }, align: { enumerable: true, get: function() {
                return f;
              }, set: function(l) {
                var _ = Z(l);
                if (!_)
                  throw new SyntaxError("align: an invalid or illegal alignment string was specified.");
                f = _, this.hasBeenReset = true;
              } } }), this.displayState = void 0;
            }
            Y.prototype.getCueAsHTML = function() {
              return WebVTT.convertCueToDOMTree(window, this.text);
            }, Ee.exports = Y;
          }, 146: (Ee) => {
            var Me = { "": true, up: true };
            function Ce(Z) {
              if (typeof Z != "string")
                return false;
              var Y = Me[Z.toLowerCase()];
              return Y ? Z.toLowerCase() : false;
            }
            function Ae(Z) {
              return typeof Z == "number" && Z >= 0 && Z <= 100;
            }
            function Pe() {
              var Z = 100, Y = 3, N = 0, j = 100, R = 0, F = 100, O = "";
              Object.defineProperties(this, { width: { enumerable: true, get: function() {
                return Z;
              }, set: function(x) {
                if (!Ae(x))
                  throw new Error("Width must be between 0 and 100.");
                Z = x;
              } }, lines: { enumerable: true, get: function() {
                return Y;
              }, set: function(x) {
                if (typeof x != "number")
                  throw new TypeError("Lines must be set to a number.");
                Y = x;
              } }, regionAnchorY: { enumerable: true, get: function() {
                return j;
              }, set: function(x) {
                if (!Ae(x))
                  throw new Error("RegionAnchorX must be between 0 and 100.");
                j = x;
              } }, regionAnchorX: { enumerable: true, get: function() {
                return N;
              }, set: function(x) {
                if (!Ae(x))
                  throw new Error("RegionAnchorY must be between 0 and 100.");
                N = x;
              } }, viewportAnchorY: { enumerable: true, get: function() {
                return F;
              }, set: function(x) {
                if (!Ae(x))
                  throw new Error("ViewportAnchorY must be between 0 and 100.");
                F = x;
              } }, viewportAnchorX: { enumerable: true, get: function() {
                return R;
              }, set: function(x) {
                if (!Ae(x))
                  throw new Error("ViewportAnchorX must be between 0 and 100.");
                R = x;
              } }, scroll: { enumerable: true, get: function() {
                return O;
              }, set: function(x) {
                var k = Ce(x);
                k === false ? console.warn("Scroll: an invalid or illegal string was specified.") : O = k;
              } } });
            }
            Ee.exports = Pe;
          }, 18: (Ee, Me, Ce) => {
            Ee.exports = Ce(393).default;
          }, 393: (Ee, Me, Ce) => {
            "use strict";
            Ce.d(Me, { default: () => Te });
            var Ae = Ce(207), Pe = Ce.n(Ae), Z = Ce(675), Y = Ce.n(Z);
            function N(fe, ie) {
              fe.prototype = Object.create(ie.prototype), fe.prototype.constructor = fe, fe.__proto__ = ie;
            }
            function j(fe) {
              if (fe === void 0)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return fe;
            }
            var R = function fe(ie) {
              var de = this;
              if (Pe().browser.IS_IE8) {
                de = Y().createElement("custom");
                for (var he in fe.prototype)
                  he !== "constructor" && (de[he] = fe.prototype[he]);
              }
              return de.id = ie.id, de.label = de.id, de.width = ie.width, de.height = ie.height, de.bitrate = ie.bandwidth, de.enabled_ = ie.enabled, Object.defineProperty(de, "enabled", { get: function() {
                return de.enabled_();
              }, set: function(se) {
                de.enabled_(se);
              } }), de;
            }, F = function(fe) {
              N(ie, fe);
              function ie() {
                var he;
                he = fe.call(this) || this;
                var oe = j(j(he));
                if (Pe().browser.IS_IE8) {
                  oe = Y().createElement("custom");
                  for (var se in ie.prototype)
                    se !== "constructor" && (oe[se] = ie.prototype[se]);
                }
                return oe.levels_ = [], oe.selectedIndex_ = -1, Object.defineProperty(oe, "selectedIndex", { get: function() {
                  return oe.selectedIndex_;
                } }), Object.defineProperty(oe, "length", { get: function() {
                  return oe.levels_.length;
                } }), oe || j(he);
              }
              var de = ie.prototype;
              return de.addQualityLevel = function(oe) {
                var se = this.getQualityLevelById(oe.id);
                if (se)
                  return se;
                var ve = this.levels_.length;
                return se = new R(oe), "" + ve in this || Object.defineProperty(this, ve, { get: function() {
                  return this.levels_[ve];
                } }), this.levels_.push(se), this.trigger({ qualityLevel: se, type: "addqualitylevel" }), se;
              }, de.removeQualityLevel = function(oe) {
                for (var se = null, ve = 0, _e = this.length; ve < _e; ve++)
                  if (this[ve] === oe) {
                    se = this.levels_.splice(ve, 1)[0], this.selectedIndex_ === ve ? this.selectedIndex_ = -1 : this.selectedIndex_ > ve && this.selectedIndex_--;
                    break;
                  }
                return se && this.trigger({ qualityLevel: oe, type: "removequalitylevel" }), se;
              }, de.getQualityLevelById = function(oe) {
                for (var se = 0, ve = this.length; se < ve; se++) {
                  var _e = this[se];
                  if (_e.id === oe)
                    return _e;
                }
                return null;
              }, de.dispose = function() {
                this.selectedIndex_ = -1, this.levels_.length = 0;
              }, ie;
            }(Pe().EventTarget);
            F.prototype.allowedEvents_ = { change: "change", addqualitylevel: "addqualitylevel", removequalitylevel: "removequalitylevel" };
            for (var O in F.prototype.allowedEvents_)
              F.prototype["on" + O] = null;
            var x = "2.1.0", k = Pe().registerPlugin || Pe().plugin, m2 = function(ie, de) {
              var he = ie.qualityLevels, oe = new F(), se = function ve() {
                oe.dispose(), ie.qualityLevels = he, ie.off("dispose", ve);
              };
              return ie.on("dispose", se), ie.qualityLevels = function() {
                return oe;
              }, ie.qualityLevels.VERSION = x, oe;
            }, E = function(ie) {
              return m2(this, Pe().mergeOptions({}, ie));
            };
            k("qualityLevels", E), E.VERSION = x;
            const L = null;
            var M = "1.1.6";
            function y(fe, ie) {
              fe.prototype = Object.create(ie.prototype), fe.prototype.constructor = fe, fe.__proto__ = ie;
            }
            function I(fe) {
              if (fe === void 0)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return fe;
            }
            var S = Pe().getComponent("MenuItem"), d = Pe().getComponent("Component"), v = function(fe) {
              y(ie, fe);
              function ie(he, oe) {
                return oe.selectable = true, oe.multiSelectable = false, fe.call(this, he, oe) || this;
              }
              var de = ie.prototype;
              return de.handleClick = function() {
                var oe = this.options_;
                console.log("Changing quality to:", oe.label), fe.prototype.handleClick.call(this);
                for (var se = this.player().qualityLevels(), ve = 0; ve < se.length; ve++)
                  oe.index == se.length || oe.index == ve ? se[ve].enabled = true : se[ve].enabled = false;
              }, de.update = function() {
                var oe = this.player().qualityLevels().selectedIndex;
                this.selected(this.options_.index == oe);
              }, ie;
            }(S);
            d.registerComponent("SourceMenuItem", v);
            var f = Pe().getComponent("MenuButton"), l = function(fe) {
              y(ie, fe);
              function ie(he, oe) {
                var se;
                se = fe.call(this, he, oe) || this, f.apply(I(se), arguments);
                var ve = se.player().qualityLevels();
                if (oe && oe.default) {
                  if (oe.default == "low")
                    for (var _e = 0; _e < ve.length; _e++)
                      ve[_e].enabled = _e == 0;
                  else if (oe.default = "high")
                    for (var _e = 0; _e < ve.length; _e++)
                      ve[_e].enabled = _e == ve.length - 1;
                }
                return se.player().qualityLevels().on(["change", "addqualitylevel"], Pe().bind(I(se), se.update)), se;
              }
              var de = ie.prototype;
              return de.createEl = function() {
                return Pe().dom.createEl("div", { className: "vjs-http-source-selector vjs-menu-button vjs-menu-button-popup vjs-control vjs-button" });
              }, de.buildCSSClass = function() {
                return f.prototype.buildCSSClass.call(this) + " vjs-icon-cog";
              }, de.update = function() {
                return f.prototype.update.call(this);
              }, de.createItems = function() {
                for (var oe = [], se = this.player().qualityLevels(), ve = [], _e = 0; _e < se.length; _e++) {
                  var Re = se.length - (_e + 1), De = Re === se.selectedIndex, ke = "" + Re, Ne = Re;
                  se[Re].height ? (ke = se[Re].height + "p", Ne = parseInt(se[Re].height, 10)) : se[Re].bitrate && (ke = Math.floor(se[Re].bitrate / 1e3) + " kbps", Ne = parseInt(se[Re].bitrate, 10)), !(ve.indexOf(ke) >= 0) && (ve.push(ke), oe.push(new v(this.player_, { label: ke, index: Re, selected: De, sortVal: Ne })));
                }
                return se.length > 1 && oe.push(new v(this.player_, { label: "Auto", index: se.length, selected: false, sortVal: 99999 })), oe.sort(function(Fe, xe) {
                  return Fe.options_.sortVal < xe.options_.sortVal ? 1 : Fe.options_.sortVal > xe.options_.sortVal ? -1 : 0;
                }), oe;
              }, ie;
            }(f), _ = {}, g = Pe().registerPlugin || Pe().plugin, i = function(ie, de) {
              if (ie.addClass("vjs-http-source-selector"), console.log("videojs-http-source-selector initialized!"), console.log("player.techName_:" + ie.techName_), ie.techName_ != "Html5")
                return false;
              ie.on(["loadedmetadata"], function(he) {
                var oe = ie.qualityLevels();
                if (Pe().log("loadmetadata event"), ie.videojs_http_source_selector_initialized == "undefined" || ie.videojs_http_source_selector_initialized == true)
                  console.log("player.videojs_http_source_selector_initialized == true");
                else {
                  console.log("player.videojs_http_source_selector_initialized == false"), ie.videojs_http_source_selector_initialized = true;
                  var se = ie.controlBar, ve = se.getChild("fullscreenToggle").el();
                  se.el().insertBefore(se.addChild("SourceMenuButton").el(), ve);
                }
              });
            }, n = function(ie) {
              var de = this;
              this.ready(function() {
                i(de, Pe().mergeOptions(_, ie));
              }), Pe().registerComponent("SourceMenuButton", l), Pe().registerComponent("SourceMenuItem", v);
            };
            g("httpSourceSelector", n), n.VERSION = M;
            const o = null;
            var h = Ce(199), b = Ce.n(h), a = Object.defineProperty, c = Object.getOwnPropertySymbols, s = Object.prototype.hasOwnProperty, p = Object.prototype.propertyIsEnumerable, D = (fe, ie, de) => ie in fe ? a(fe, ie, { enumerable: true, configurable: true, writable: true, value: de }) : fe[ie] = de, A = (fe, ie) => {
              for (var de in ie || (ie = {}))
                s.call(ie, de) && D(fe, de, ie[de]);
              if (c)
                for (var de of c(ie))
                  p.call(ie, de) && D(fe, de, ie[de]);
              return fe;
            }, w = (fe, ie, de) => (D(fe, typeof ie != "symbol" ? ie + "" : ie, de), de);
            class B {
              constructor(ie, de, he = {}) {
                const oe = Pe().getTech("Tech").prototype.error;
                this.source = ie, this.tech = de, this.player = Pe().getPlayer(this.tech.options().playerId), this._html5TechError = this.tech.error, this.tech.error = oe, this.el = de.el(), this.hls = new (b())(A({ backBufferLength: 30, liveDurationInfinity: true }, he.hls)), this.tech.hlsjs = this.hls, this.player.qualityLevels && this.setupQualityLevels(), this.setupEventHandlers(), this.setupHls(), this.mediaElErrorHandler_ = () => this.tech.error(this.el.error);
              }
              dispose() {
                this.el.removeEventListener("error", this.mediaElErrorHandler_), this.tech.error = this._html5TechError, this.hls.destroy(), delete this.tech.hlsjs;
              }
              setupEventHandlers() {
                const ie = { MEDIA_ERR_CUSTOM: 0, MEDIA_ERR_ABORTED: 1, MEDIA_ERR_NETWORK: 2, MEDIA_ERR_DECODE: 3, MEDIA_ERR_SRC_NOT_SUPPORTED: 4, MEDIA_ERR_ENCRYPTED: 5 }, de = { [b().ErrorTypes.NETWORK_ERROR]: ie.MEDIA_ERR_NETWORK, [b().ErrorTypes.MEDIA_ERROR]: ie.MEDIA_ERR_DECODE, [b().ErrorTypes.MUX_ERROR]: ie.MEDIA_ERR_DECODE, [b().ErrorTypes.KEY_SYSTEM_ERROR]: ie.MEDIA_ERR_ENCRYPTED, DEFAULT: ie.MEDIA_ERR_CUSTOM };
                Object.values(b().Events).forEach((he) => {
                  if (he === b().Events.ERROR) {
                    this.hls.on(he, (oe, se) => {
                      var ve;
                      const { type: _e, fatal: Re } = se;
                      if (!Re)
                        return;
                      const De = (ve = de[_e]) != null ? ve : de.DEFAULT;
                      this.tech.error({ code: De, hlsError: se });
                    });
                    return;
                  }
                  this.hls.on(he, (oe, se) => {
                    this.tech.trigger(he, se);
                  });
                }), this.el.addEventListener("error", this.mediaElErrorHandler_);
              }
              setupHls() {
                b().isSupported() ? (this.hls.attachMedia(this.el), this.hls.loadSource(this.source.src)) : this.el.canPlayType("application/vnd.apple.mpegurl") ? this.el.src = this.source.src : console.log("[videojs-mux-kit] Error: browser does not support MSE nor Hls natively");
              }
              setupQualityLevels() {
                const ie = this.player.qualityLevels();
                let de;
                const he = () => {
                  let _e;
                  for (_e = de.length - 1; _e > 0 && !de[_e]; _e--)
                    ;
                  return _e;
                }, oe = () => he() === this.hls.levels.length - 1, se = (_e, Re) => {
                  const De = he();
                  oe() ? this.hls.autoLevelCapping = -1 : this.hls.autoLevelCapping = De, !!Re && this.hls.currentLevel !== _e && (this.hls.currentLevel = _e, ve());
                }, ve = (_e, Re) => {
                  let De = this.hls.currentLevel;
                  ie.selectedIndex_ = De, ie.trigger({ type: "change", selectedIndex: De });
                };
                this.tech.on(b().Events.MANIFEST_LOADED, (_e, Re) => {
                  if (de = new Array(this.hls.levels.length).fill(true), this.hls.autoLevelCapping !== -1)
                    for (let De = this.hls.maxAutoLevel; De < this.hls.levels.length; De++)
                      de[De] = false;
                  this.hls.levels.forEach((De, ke) => {
                    ie.addQualityLevel({ id: ke, width: De.width, height: De.height, bitrate: De.bitrate, enabled: (Ne) => {
                      de[ke] = Ne, se(ke, Ne);
                    } });
                  }), ie.selectedIndex_ = this.hls.currentLevel, ie.trigger({ type: "change", selectedIndex: this.hls.currentLevel });
                }), this.tech.on(b().Events.LEVEL_SWITCHED, ve);
              }
            }
            w(B, "hlsTypeRE", /^application\/(x-mpegURL|vnd\.apple\.mpegURL)$/i), w(B, "hlsExtRE", /\.m3u8/i);
            const U = { canHandleSource(fe) {
              return fe.skipHlsJs ? "" : B.hlsTypeRE.test(fe.type) ? "probably" : B.hlsExtRE.test(fe.src) ? "maybe" : "";
            }, handleSource(fe, ie, de = {}) {
              return new B(fe, ie, de);
            }, canPlayType(fe) {
              return B.hlsTypeRE.test(fe) ? "probably" : "";
            } };
            Pe().getTech("Html5").registerSourceHandler(U, 0);
            const K = null, W = { i8: "0.12.0" };
            var H = Ce(288);
            function V(fe) {
              var ie, de;
              if ((de = (ie = fe.tech_) == null ? void 0 : ie.sourceHandler_) == null ? void 0 : de.hls) {
                const he = fe.tech_.sourceHandler_.hls;
                fe.mux.addHLSJS({ hlsjs: he, Hls: b() });
              }
            }
            function z(fe, ie) {
              var de, he, oe, se, ve;
              if ((de = fe == null ? void 0 : fe.dataset) == null ? void 0 : de.setup) {
                let _e = fe.dataset.setup;
                _e = JSON.parse(_e), _e && ((oe = (he = _e == null ? void 0 : _e.plugins) == null ? void 0 : he.mux) == null ? void 0 : oe.data) && (_e = Q(_e), _e = JSON.stringify(_e), fe.dataset.setup = _e);
              }
              return ((ve = (se = ie == null ? void 0 : ie.plugins) == null ? void 0 : se.mux) == null ? void 0 : ve.data) && (ie = Q(ie)), ie;
            }
            function Q(fe) {
              var ie;
              return fe.plugins.mux.data.player_software_name = "vjs-mux-kit-" + ((ie = Pe()) == null ? void 0 : ie.VERSION.split(".")[0]) + (typeof b() == "function" ? "-hlsjs" : "-vhs"), fe.plugins.mux.data.player_software_version = W.i8, fe;
            }
            function q(fe) {
              var ie, de;
              (de = (ie = fe.tech_) == null ? void 0 : ie.sourceHandler_) == null || de.hls.on(b().Events.MANIFEST_LOADED, function(he, oe) {
                if (oe.subtitles) {
                  let se;
                  for (se = 0; se < oe.subtitles.length; se++)
                    fe.addRemoteTextTrack({ kind: oe.subtitles[se].type, label: oe.subtitles[se].name, srclang: oe.subtitles[se].lang, default: oe.subtitles[se].default }, false);
                }
              }), fe.remoteTextTracks().addEventListener("change", (he) => {
                let oe = fe.remoteTextTracks(), se, ve = false;
                for (se = 0; se < oe.length; se++)
                  oe[se].mode === "showing" && (fe.tech_.sourceHandler_.hls.subtitleTrack = se, ve = true);
                ve !== true && (fe.tech_.sourceHandler_.hls.subtitleTrack = -1);
              });
            }
            const ee = {}, ae = {}, ne = Pe().registerPlugin || Pe().plugin, ue = (fe, ie) => {
              fe.addClass("vjs-vtt-thumbnails"), fe.vttThumbnails = new be(fe, ie);
            }, ye = function(fe) {
              this.ready(() => {
                ue(this, Pe().mergeOptions(ee, fe));
              });
            };
            class be {
              constructor(ie, de) {
                return this.player = ie, this.options = de, this.listenForDurationChange(), this.initializeThumbnails(), this.registeredEvents = {}, this;
              }
              src(ie) {
                this.resetPlugin(), this.options.src = ie, this.initializeThumbnails();
              }
              detach() {
                this.resetPlugin();
              }
              resetPlugin() {
                this.thumbnailHolder && this.thumbnailHolder.parentNode.removeChild(this.thumbnailHolder), this.progressBar && (this.progressBar.removeEventListener("mouseenter", this.registeredEvents.progressBarMouseEnter), this.progressBar.removeEventListener("mouseleave", this.registeredEvents.progressBarMouseLeave), this.progressBar.removeEventListener("mousemove", this.registeredEvents.progressBarMouseMove)), delete this.registeredEvents.progressBarMouseEnter, delete this.registeredEvents.progressBarMouseLeave, delete this.registeredEvents.progressBarMouseMove, delete this.progressBar, delete this.vttData, delete this.thumbnailHolder, delete this.lastStyle;
              }
              listenForDurationChange() {
                this.player.on("durationchange", () => {
                });
              }
              initializeThumbnails() {
                if (!this.options.src)
                  return;
                const ie = this.getBaseUrl(), de = this.getFullyQualifiedUrl(this.options.src, ie);
                this.getVttFile(de).then((he) => {
                  this.vttData = this.processVtt(he), this.setupThumbnailElement();
                });
              }
              getBaseUrl() {
                return [window.location.protocol, "//", window.location.hostname, window.location.port ? ":" + window.location.port : "", window.location.pathname].join("").split(/([^\/]*)$/gi).shift();
              }
              getVttFile(ie) {
                return new Promise((de, he) => {
                  const oe = new XMLHttpRequest();
                  oe.data = { resolve: de }, oe.addEventListener("load", this.vttFileLoaded), oe.open("GET", ie), oe.overrideMimeType("text/plain; charset=utf-8"), oe.send();
                });
              }
              vttFileLoaded() {
                this.data.resolve(this.responseText);
              }
              setupThumbnailElement(ie) {
                let de = null;
                this.options.showTimestamp || (de = this.player.$(".vjs-mouse-display"));
                const he = document.createElement("div");
                he.setAttribute("class", "vjs-vtt-thumbnail-display"), this.progressBar = this.player.$(".vjs-progress-control"), this.progressBar.appendChild(he), this.thumbnailHolder = he, de && !this.options.showTimestamp && de.classList.add("vjs-hidden"), this.registeredEvents.progressBarMouseEnter = () => this.onBarMouseenter(), this.registeredEvents.progressBarMouseLeave = () => this.onBarMouseleave(), this.progressBar.addEventListener("mouseenter", this.registeredEvents.progressBarMouseEnter), this.progressBar.addEventListener("mouseleave", this.registeredEvents.progressBarMouseLeave);
              }
              onBarMouseenter() {
                this.mouseMoveCallback = (ie) => {
                  this.onBarMousemove(ie);
                }, this.registeredEvents.progressBarMouseMove = this.mouseMoveCallback, this.progressBar.addEventListener("mousemove", this.registeredEvents.progressBarMouseMove), this.showThumbnailHolder();
              }
              onBarMouseleave() {
                this.registeredEvents.progressBarMouseMove && this.progressBar.removeEventListener("mousemove", this.registeredEvents.progressBarMouseMove), this.hideThumbnailHolder();
              }
              getXCoord(ie, de) {
                const he = ie.getBoundingClientRect(), oe = document.documentElement;
                return de - (he.left + (window.pageXOffset || oe.scrollLeft || 0));
              }
              onBarMousemove(ie) {
                this.updateThumbnailStyle(Pe().dom.getPointerPosition(this.progressBar, ie).x, this.progressBar.offsetWidth);
              }
              getStyleForTime(ie) {
                for (let de = 0; de < this.vttData.length; ++de) {
                  const he = this.vttData[de];
                  if (ie >= he.start && ie < he.end) {
                    if (he.css.url && !ae[he.css.url]) {
                      const oe = new Image();
                      oe.src = he.css.url, ae[he.css.url] = oe;
                    }
                    return he.css;
                  }
                }
              }
              showThumbnailHolder() {
                this.thumbnailHolder.style.opacity = "1";
              }
              hideThumbnailHolder() {
                this.thumbnailHolder.style.opacity = "0";
              }
              updateThumbnailStyle(ie, de) {
                const he = this.player.duration(), oe = ie * he, se = this.getStyleForTime(oe);
                if (!se)
                  return this.hideThumbnailHolder();
                const ve = ie * de, _e = parseInt(se.width, 10), Re = _e >> 1, De = de - (ve + Re), ke = ve - Re;
                if (ke > 0 && De > 0 ? this.thumbnailHolder.style.transform = "translateX(" + (ve - Re) + "px)" : ke <= 0 ? this.thumbnailHolder.style.transform = "translateX(0px)" : De <= 0 && (this.thumbnailHolder.style.transform = "translateX(" + (de - _e) + "px)"), !(this.lastStyle && this.lastStyle === se)) {
                  this.lastStyle = se;
                  for (const Ne in se)
                    se.hasOwnProperty(Ne) && (this.thumbnailHolder.style[Ne] = se[Ne]);
                }
              }
              processVtt(ie) {
                const de = [];
                return ie.split(/[\r\n][\r\n]/i).forEach((oe) => {
                  if (oe.match(/([0-9]{2}:)?([0-9]{2}:)?[0-9]{2}(.[0-9]{3})?( ?--> ?)([0-9]{2}:)?([0-9]{2}:)?[0-9]{2}(.[0-9]{3})?[\r\n]{1}.*/gi)) {
                    const se = oe.split(/[\r\n]/i), _e = se[0].split(/ ?--> ?/i), Re = _e[0], De = _e[1], ke = se[1], Ne = this.getVttCss(ke);
                    de.push({ start: this.getSecondsFromTimestamp(Re), end: this.getSecondsFromTimestamp(De), css: Ne });
                  }
                }), de;
              }
              getFullyQualifiedUrl(ie, de) {
                return ie.indexOf("//") >= 0 ? ie : de.indexOf("//") === 0 ? [de.replace(/\/$/gi, ""), this.trim(ie, "/")].join("/") : de.indexOf("//") > 0 ? [this.trim(de, "/"), this.trim(ie, "/")].join("/") : ie;
              }
              getPropsFromDef(ie) {
                const de = ie.split(/#xywh=/i), he = de[0], se = de[1].match(/[0-9]+/gi);
                return { x: se[0], y: se[1], w: se[2], h: se[3], image: he };
              }
              getVttCss(ie) {
                const de = {};
                let he;
                if (this.options.src.indexOf("//") >= 0 ? he = this.options.src.split(/([^\/]*)$/gi).shift() : he = this.getBaseUrl() + this.options.src.split(/([^\/]*)$/gi).shift(), ie = this.getFullyQualifiedUrl(ie, he), !ie.match(/#xywh=/i))
                  return de.background = 'url("' + ie + '")', de;
                const oe = this.getPropsFromDef(ie);
                return de.background = 'url("' + oe.image + '") no-repeat -' + oe.x + "px -" + oe.y + "px", de.width = oe.w + "px", de.height = oe.h + "px", de.url = oe.image, de;
              }
              deconstructTimestamp(ie) {
                const de = ie.split("."), oe = de[0].split(":");
                return { milliseconds: parseInt(de[1], 10) || 0, seconds: parseInt(oe.pop(), 10) || 0, minutes: parseInt(oe.pop(), 10) || 0, hours: parseInt(oe.pop(), 10) || 0 };
              }
              getSecondsFromTimestamp(ie) {
                const de = this.deconstructTimestamp(ie);
                return parseInt(de.hours * (60 * 60) + de.minutes * 60 + de.seconds + de.milliseconds / 1e3, 10);
              }
              trim(ie, de) {
                let he = [" ", `
`, "\r", "	", "\f", "\v", "\xA0", "\u2000", "\u2001", "\u2002", "\u2003", "\u2004", "\u2005", "\u2006", "\u2007", "\u2008", "\u2009", "\u200A", "\u200B", "\u2028", "\u2029", "\u3000"].join(""), oe = 0, se = 0;
                for (ie += "", de && (he = (de + "").replace(/([[\]().?/*{}+$^:])/g, "$1")), oe = ie.length, se = 0; se < oe; se++)
                  if (he.indexOf(ie.charAt(se)) === -1) {
                    ie = ie.substring(se);
                    break;
                  }
                for (oe = ie.length, se = oe - 1; se >= 0; se--)
                  if (he.indexOf(ie.charAt(se)) === -1) {
                    ie = ie.substring(0, se + 1);
                    break;
                  }
                return he.indexOf(ie.charAt(0)) === -1 ? ie : "";
              }
            }
            ne("vttThumbnails", ye);
            const me = null;
            function Se(fe) {
              fe.timelineHoverPreviews = function(ie) {
                let de = (ie == null ? void 0 : ie.enabled) || false, he = (ie == null ? void 0 : ie.src) || null;
                if (!de && typeof fe.vttThumbnails.detach == "function") {
                  fe.vttThumbnails.detach(), fe.options().timelineHoverPreviewsUrl = null;
                  return;
                } else if (typeof fe.vttThumbnails == "function" && he !== null) {
                  fe.vttThumbnails({ src: he }), fe.options().timelineHoverPreviewsUrl = he;
                  return;
                } else if (typeof fe.vttThumbnails.src == "function" && he !== null) {
                  fe.vttThumbnails.src(he), fe.options().timelineHoverPreviewsUrl = he;
                  return;
                }
              };
            }
            Pe().hook("beforesetup", function(fe, ie) {
              return ie = z(fe, ie), ie;
            }), Pe().hook("setup", function(fe) {
              Se(fe), fe.options().timelineHoverPreviewsUrl && fe.timelineHoverPreviews({ enabled: true, src: fe.options().timelineHoverPreviewsUrl });
            }), Pe().use("video/mux", (fe) => ({ setSource({ src: ie }, de) {
              const { customDomain: he = "mux.com", timelineHoverPreviews: oe } = fe.options();
              if (oe) {
                let se = ie.split("?", 1), ve = `https://image.${he}/${se[0]}/storyboard.vtt`;
                fe.timelineHoverPreviews({ enabled: true, src: ve });
              }
              de(null, { src: `https://stream.${he}/${ie}`, type: "application/x-mpegurl" }), fe.mux && fe.mux.addHLSJS && V(fe), typeof q != "undefined" && q(fe);
            } }));
            const Te = Pe();
          }, 893: () => {
          }, 104: (Ee) => {
            function Me(Ce) {
              if (Ce === void 0)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return Ce;
            }
            Ee.exports = Me, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 271: (Ee, Me, Ce) => {
            var Ae = Ce(985), Pe = Ce(651);
            function Z(Y, N, j) {
              return Pe() ? (Ee.exports = Z = Reflect.construct.bind(), Ee.exports.__esModule = true, Ee.exports.default = Ee.exports) : (Ee.exports = Z = function(F, O, x) {
                var k = [null];
                k.push.apply(k, O);
                var m2 = Function.bind.apply(F, k), E = new m2();
                return x && Ae(E, x.prototype), E;
              }, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports), Z.apply(null, arguments);
            }
            Ee.exports = Z, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 110: (Ee) => {
            function Me() {
              return Ee.exports = Me = Object.assign ? Object.assign.bind() : function(Ce) {
                for (var Ae = 1; Ae < arguments.length; Ae++) {
                  var Pe = arguments[Ae];
                  for (var Z in Pe)
                    Object.prototype.hasOwnProperty.call(Pe, Z) && (Ce[Z] = Pe[Z]);
                }
                return Ce;
              }, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports, Me.apply(this, arguments);
            }
            Ee.exports = Me, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 169: (Ee, Me, Ce) => {
            var Ae = Ce(985);
            function Pe(Z, Y) {
              if (typeof Y != "function" && Y !== null)
                throw new TypeError("Super expression must either be null or a function");
              Z.prototype = Object.create(Y && Y.prototype, { constructor: { value: Z, writable: true, configurable: true } }), Object.defineProperty(Z, "prototype", { writable: false }), Y && Ae(Z, Y);
            }
            Ee.exports = Pe, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 721: (Ee, Me, Ce) => {
            var Ae = Ce(985);
            function Pe(Z, Y) {
              Z.prototype = Object.create(Y.prototype), Z.prototype.constructor = Z, Ae(Z, Y);
            }
            Ee.exports = Pe, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 651: (Ee) => {
            function Me() {
              if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
                return false;
              if (typeof Proxy == "function")
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (Ce) {
                return false;
              }
            }
            Ee.exports = Me, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          }, 985: (Ee) => {
            function Me(Ce, Ae) {
              return Ee.exports = Me = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(Z, Y) {
                return Z.__proto__ = Y, Z;
              }, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports, Me(Ce, Ae);
            }
            Ee.exports = Me, Ee.exports.__esModule = true, Ee.exports.default = Ee.exports;
          } }, hr = {};
          function dt(Ee) {
            var Me = hr[Ee];
            if (Me !== void 0)
              return Me.exports;
            var Ce = hr[Ee] = { exports: {} };
            return Ai[Ee].call(Ce.exports, Ce, Ce.exports, dt), Ce.exports;
          }
          (() => {
            dt.n = (Ee) => {
              var Me = Ee && Ee.__esModule ? () => Ee.default : () => Ee;
              return dt.d(Me, { a: Me }), Me;
            };
          })(), (() => {
            dt.d = (Ee, Me) => {
              for (var Ce in Me)
                dt.o(Me, Ce) && !dt.o(Ee, Ce) && Object.defineProperty(Ee, Ce, { enumerable: true, get: Me[Ce] });
            };
          })(), (() => {
            dt.g = function() {
              if (typeof globalThis == "object")
                return globalThis;
              try {
                return this || new Function("return this")();
              } catch (Ee) {
                if (typeof window == "object")
                  return window;
              }
            }();
          })(), (() => {
            dt.o = (Ee, Me) => Object.prototype.hasOwnProperty.call(Ee, Me);
          })();
          var xn = dt(18);
          return xn;
        })();
      });
    }
  });

  // ../../../node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "../../../node_modules/lodash/_baseIsNaN.js"(exports2, module2) {
      function baseIsNaN(value) {
        return value !== value;
      }
      module2.exports = baseIsNaN;
    }
  });

  // ../../../node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "../../../node_modules/lodash/_strictIndexOf.js"(exports2, module2) {
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      module2.exports = strictIndexOf;
    }
  });

  // ../../../node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "../../../node_modules/lodash/_baseIndexOf.js"(exports2, module2) {
      var baseFindIndex = require_baseFindIndex();
      var baseIsNaN = require_baseIsNaN();
      var strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      module2.exports = baseIndexOf;
    }
  });

  // ../../../node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "../../../node_modules/lodash/_arrayIncludes.js"(exports2, module2) {
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      module2.exports = arrayIncludes;
    }
  });

  // ../../../node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "../../../node_modules/lodash/_arrayIncludesWith.js"(exports2, module2) {
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arrayIncludesWith;
    }
  });

  // ../../../node_modules/lodash/noop.js
  var require_noop = __commonJS({
    "../../../node_modules/lodash/noop.js"(exports2, module2) {
      function noop() {
      }
      module2.exports = noop;
    }
  });

  // ../../../node_modules/lodash/_createSet.js
  var require_createSet = __commonJS({
    "../../../node_modules/lodash/_createSet.js"(exports2, module2) {
      var Set2 = require_Set();
      var noop = require_noop();
      var setToArray = require_setToArray();
      var INFINITY = 1 / 0;
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
        return new Set2(values);
      };
      module2.exports = createSet;
    }
  });

  // ../../../node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS({
    "../../../node_modules/lodash/_baseUniq.js"(exports2, module2) {
      var SetCache = require_SetCache();
      var arrayIncludes = require_arrayIncludes();
      var arrayIncludesWith = require_arrayIncludesWith();
      var cacheHas = require_cacheHas();
      var createSet = require_createSet();
      var setToArray = require_setToArray();
      var LARGE_ARRAY_SIZE = 200;
      function baseUniq(array, iteratee, comparator) {
        var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseUniq;
    }
  });

  // ../../../node_modules/lodash/uniq.js
  var require_uniq = __commonJS({
    "../../../node_modules/lodash/uniq.js"(exports2, module2) {
      var baseUniq = require_baseUniq();
      function uniq2(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      module2.exports = uniq2;
    }
  });

  // ../../../node_modules/alpine-turbo-drive-adapter/dist/alpine-turbo-drive-adapter.esm.js
  function isValidVersion(required, current) {
    var requiredArray = required.split(".");
    var currentArray = current.split(".");
    for (var i = 0; i < requiredArray.length; i++) {
      if (currentArray[i] && currentArray[i] > requiredArray[i]) {
        return true;
      }
    }
    return currentArray[requiredArray.length - 1] === requiredArray[requiredArray.length - 1];
  }
  function dispatch(el2, name) {
    var detail = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    el2.dispatchEvent(new CustomEvent(name, {
      detail,
      bubbles: true,
      composed: true,
      cancelable: true
    }));
  }
  var Bridge = class {
    init() {
      if (!window.Alpine.version || !isValidVersion("3.0.0", window.Alpine.version)) {
        throw new Error("Invalid Alpine version. Please use Alpine 3.0.0 or above");
      }
      window.Alpine.mutateDom(() => {
        document.body.querySelectorAll("[x-cloak]").forEach((el2) => {
          var _el$getAttribute;
          el2.setAttribute("data-alpine-was-cloaked", (_el$getAttribute = el2.getAttribute("x-cloak")) !== null && _el$getAttribute !== void 0 ? _el$getAttribute : "");
        });
      });
      this.configureEventHandlers();
    }
    configureEventHandlers() {
      var renderCallback = (event) => {
        if (document.documentElement.hasAttribute("data-turbo-preview")) {
          return;
        }
        dispatch(document, "alpine:init");
        dispatch(document, "alpine:initializing");
        window.Alpine.flushAndStopDeferringMutations();
        dispatch(document, "alpine:initialised");
        window.Alpine.mutateDom(() => {
          document.querySelectorAll("[data-alpine-ignored]").forEach((el2) => {
            el2.removeAttribute("x-ignore");
            el2.removeAttribute("data-alpine-ignored");
          });
        });
      };
      var beforeRenderCallback = (event) => {
        window.Alpine.mutateDom(() => {
          if (document.documentElement.hasAttribute("data-turbo-preview")) {
            return;
          }
          event.detail.newBody.querySelectorAll("[data-alpine-generated-me],[x-cloak]").forEach((el2) => {
            if (el2.hasAttribute("x-cloak")) {
              var _el$getAttribute2;
              el2.setAttribute("data-alpine-was-cloaked", (_el$getAttribute2 = el2.getAttribute("x-cloak")) !== null && _el$getAttribute2 !== void 0 ? _el$getAttribute2 : "");
            }
            if (el2.hasAttribute("data-alpine-generated-me")) {
              el2.removeAttribute("data-alpine-generated-me");
              el2.remove();
            }
          });
        });
        window.Alpine.deferMutations();
      };
      var beforeCacheCallback = (event) => {
        window.Alpine.mutateDom(() => {
          document.body.querySelectorAll("[x-for],[x-if],[x-teleport],[data-alpine-was-cloaked]").forEach((el2) => {
            if (el2.hasAttribute("data-alpine-was-cloaked")) {
              var _el$getAttribute3;
              el2.setAttribute("x-cloak", (_el$getAttribute3 = el2.getAttribute("data-alpine-was-cloaked")) !== null && _el$getAttribute3 !== void 0 ? _el$getAttribute3 : "");
              el2.removeAttribute("data-alpine-was-cloaked");
            }
            if (el2.hasAttribute("x-for") && el2._x_lookup) {
              Object.values(el2._x_lookup).forEach((el3) => el3.setAttribute("data-alpine-generated-me", true));
            }
            if (el2.hasAttribute("x-if") && el2._x_currentIfEl) {
              el2._x_currentIfEl.setAttribute("data-alpine-generated-me", true);
            }
            if (el2.hasAttribute("x-teleport") && el2._x_teleport) {
              el2._x_teleport.setAttribute("data-alpine-generated-me", true);
            }
          });
        });
        document.querySelectorAll("[data-turbo-permanent]").forEach((el2) => {
          window.Alpine.mutateDom(() => {
            if (!el2.hasAttribute("x-ignore")) {
              el2.setAttribute("x-ignore", true);
              el2.setAttribute("data-alpine-ignored", true);
            }
            el2.querySelectorAll("[data-alpine-generated-me]").forEach((sub) => {
              sub.removeAttribute("data-alpine-generated-me");
            });
          });
        });
      };
      document.addEventListener("turbo:render", renderCallback);
      document.addEventListener("turbo:before-render", beforeRenderCallback);
      document.addEventListener("turbo:before-cache", beforeCacheCallback);
    }
  };
  if (window.Alpine) {
    console.error("Alpine-turbo-drive-adapter must be included before AlpineJs");
  }
  if (!Object.getOwnPropertyDescriptor(NodeList.prototype, "forEach")) {
    Object.defineProperty(NodeList.prototype, "forEach", Object.getOwnPropertyDescriptor(Array.prototype, "forEach"));
  }
  document.addEventListener("alpine:init", () => {
    var bridge = new Bridge();
    bridge.init();
  }, {
    once: true
  });

  // ../../../node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class _FrameElement extends HTMLElement {
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new _FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left2, right2) {
    return expandURL(left2).href == expandURL(right2).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce2 = getMetaContent("csp-nonce");
      if (cspNonce2) {
        createdScriptElement.nonce = cspNonce2;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch2(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      composed: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i) => {
      const value = values[i] == void 0 ? "" : values[i];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_, i) => {
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        return "-";
      } else if (i == 14) {
        return "4";
      } else if (i == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
      return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector);
    }
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method2) {
    switch (method2.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate2, method2, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate2;
      this.method = method2;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    perform() {
      return __async(this, null, function* () {
        const { fetchOptions } = this;
        this.delegate.prepareRequest(this);
        yield this.allowRequestToBeIntercepted(fetchOptions);
        try {
          this.delegate.requestStarted(this);
          const response = yield fetch(this.url.href, fetchOptions);
          return yield this.receive(response);
        } catch (error2) {
          if (error2.name !== "AbortError") {
            if (this.willDelegateErrorHandling(error2)) {
              this.delegate.requestErrored(this, error2);
            }
            throw error2;
          }
        } finally {
          this.delegate.requestFinished(this);
        }
      });
    }
    receive(response) {
      return __async(this, null, function* () {
        const fetchResponse = new FetchResponse(response);
        const event = dispatch2("turbo:before-fetch-response", {
          cancelable: true,
          detail: { fetchResponse },
          target: this.target
        });
        if (event.defaultPrevented) {
          this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
        } else if (fetchResponse.succeeded) {
          this.delegate.requestSucceededWithResponse(this, fetchResponse);
        } else {
          this.delegate.requestFailedWithResponse(this, fetchResponse);
        }
        return fetchResponse;
      });
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isSafe ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isSafe() {
      return this.method === FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    allowRequestToBeIntercepted(fetchOptions) {
      return __async(this, null, function* () {
        const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
        const event = dispatch2("turbo:before-fetch-request", {
          cancelable: true,
          detail: {
            fetchOptions,
            url: this.url,
            resume: this.resolveRequestPromise
          },
          target: this.target
        });
        if (event.defaultPrevented)
          yield requestInterception;
      });
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch2("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate2, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate2;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class _FormSubmission {
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    constructor(delegate2, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate2;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    get method() {
      var _a;
      const method2 = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method2.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
      return this.fetchRequest.isSafe;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    start() {
      return __async(this, null, function* () {
        const { initialized, requesting } = FormSubmissionState;
        const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
        if (typeof confirmationMessage === "string") {
          const answer = yield _FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
          if (!answer) {
            return;
          }
        }
        if (this.state == initialized) {
          this.state = requesting;
          return this.fetchRequest.perform();
        }
      });
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareRequest(request) {
      if (!request.isSafe) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          request.headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      this.setSubmitsWith();
      dispatch2("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      this.resetSubmitterText();
      dispatch2("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
      if (!this.submitter || !this.submitsWith)
        return;
      if (this.submitter.matches("button")) {
        this.originalSubmitText = this.submitter.innerHTML;
        this.submitter.innerHTML = this.submitsWith;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        this.originalSubmitText = input.value;
        input.value = this.submitsWith;
      }
    }
    resetSubmitterText() {
      if (!this.submitter || !this.originalSubmitText)
        return;
      if (this.submitter.matches("button")) {
        this.submitter.innerHTML = this.originalSubmitText;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        input.value = this.originalSubmitText;
      }
    }
    requestMustRedirect(request) {
      return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
      var _a;
      return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate2, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate2;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method2 = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method2 != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
      const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
      for (const element of document.getElementsByName(target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var View = class {
    constructor(delegate2, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate2;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x, y }) {
      this.scrollRoot.scrollTo(x, y);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    render(renderer) {
      return __async(this, null, function* () {
        const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
        if (shouldRender) {
          try {
            this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
            this.renderer = renderer;
            yield this.prepareToRenderSnapshot(renderer);
            const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
            const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
            const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
            if (!immediateRender)
              yield renderInterception;
            yield this.renderSnapshot(renderer);
            this.delegate.viewRenderedSnapshot(snapshot, isPreview);
            this.delegate.preloadOnLoadLinksForView(this.element);
            this.finishRenderingSnapshot(renderer);
          } finally {
            delete this.renderer;
            this.resolveRenderPromise(void 0);
            delete this.renderPromise;
          }
        } else {
          this.invalidate(renderer.reloadReason);
        }
      });
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    prepareToRenderSnapshot(renderer) {
      return __async(this, null, function* () {
        this.markAsPreview(renderer.isPreview);
        yield renderer.prepareToRender();
      });
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    renderSnapshot(renderer) {
      return __async(this, null, function* () {
        yield renderer.render();
      });
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    missing() {
      this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate2, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate2;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
      const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate2, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate2;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
      for (const element of document.getElementsByName(anchor.target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var FormLinkClickObserver = class {
    constructor(delegate2, element) {
      this.delegate = delegate2;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const form = document.createElement("form");
      const type = "hidden";
      for (const [name, value] of location2.searchParams) {
        form.append(Object.assign(document.createElement("input"), { type, name, value }));
      }
      const action = Object.assign(location2, { search: "" });
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action.href);
      form.setAttribute("hidden", "");
      const method2 = link.getAttribute("data-turbo-method");
      if (method2)
        form.setAttribute("method", method2);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = getVisitAction(link);
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    static preservingPermanentElements(delegate2, permanentElementMap, callback) {
      return __async(this, null, function* () {
        const bardo = new this(delegate2, permanentElementMap);
        bardo.enter();
        yield callback();
        bardo.leave();
      });
    }
    constructor(delegate2, permanentElementMap) {
      this.delegate = delegate2;
      this.permanentElementMap = permanentElementMap;
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    preservingPermanentElements(callback) {
      return __async(this, null, function* () {
        yield Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
      });
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    constructor(delegate2, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate2;
    }
    get shouldRender() {
      return true;
    }
    render() {
      return __async(this, null, function* () {
        yield nextAnimationFrame();
        this.preservingPermanentElements(() => {
          this.loadFrameElement();
        });
        this.scrollFrameIntoView();
        yield nextAnimationFrame();
        this.focusFirstAutofocusableElement();
        yield nextAnimationFrame();
        this.activateScriptElements();
      });
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class _ProgressBar {
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${_ProgressBar.animationDuration}ms ease-out,
          opacity ${_ProgressBar.animationDuration / 2}ms ${_ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, _ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, _ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = _ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class _PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new _PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate2, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate2;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method2 = getHistoryMethodForAction(actionForHistory);
        this.history.update(method2, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(() => __async(this, null, function* () {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            yield this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            yield this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            yield this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        }));
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(() => __async(this, null, function* () {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              yield this.view.renderPromise;
            yield this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        }));
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response,
          shouldCacheSnapshot: false,
          willRender: false
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(() => __async(this, null, function* () {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        }));
      }
    }
    prepareRequest(request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    requestSucceededWithResponse(request, response) {
      return __async(this, null, function* () {
        const responseHTML = yield response.responseHTML;
        const { redirected, statusCode } = response;
        if (responseHTML == void 0) {
          this.recordResponse({
            statusCode: SystemStatusCode.contentTypeMismatch,
            redirected
          });
        } else {
          this.redirectedToLocation = response.redirected ? response.location : void 0;
          this.recordResponse({ statusCode, responseHTML, redirected });
        }
      });
    }
    requestFailedWithResponse(request, response) {
      return __async(this, null, function* () {
        const responseHTML = yield response.responseHTML;
        const { redirected, statusCode } = response;
        if (responseHTML == void 0) {
          this.recordResponse({
            statusCode: SystemStatusCode.contentTypeMismatch,
            redirected
          });
        } else {
          this.recordResponse({ statusCode, responseHTML, redirected });
        }
      });
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = (/* @__PURE__ */ new Date()).getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    render(callback) {
      return __async(this, null, function* () {
        this.cancelRender();
        yield new Promise((resolve) => {
          this.frame = requestAnimationFrame(() => resolve());
        });
        yield callback();
        delete this.frame;
      });
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch2("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.selector = "[data-turbo-temporary]";
      this.deprecatedSelector = "[data-turbo-cache=false]";
      this.started = false;
      this.removeTemporaryElements = (_event) => {
        for (const element of this.temporaryElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    get temporaryElements() {
      return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
      const elements = document.querySelectorAll(this.deprecatedSelector);
      if (elements.length) {
        console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
      }
      return [...elements];
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate2) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = (_event) => __async(this, null, function* () {
        yield nextMicrotask();
        this.pageLoaded = true;
      });
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method2, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method2.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate2) {
      this.delegate = delegate2;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      return __async(this, null, function* () {
        if (formSubmission == this.formSubmission) {
          const responseHTML = yield fetchResponse.responseHTML;
          if (responseHTML) {
            const shouldCacheSnapshot = formSubmission.isSafe;
            if (!shouldCacheSnapshot) {
              this.view.clearSnapshotCache();
            }
            const { statusCode, redirected } = fetchResponse;
            const action = this.getActionForFormSubmission(formSubmission);
            const visitOptions = {
              action,
              shouldCacheSnapshot,
              response: { statusCode, responseHTML, redirected }
            };
            this.proposeVisit(fetchResponse.location, visitOptions);
          }
        }
      });
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      return __async(this, null, function* () {
        const responseHTML = yield fetchResponse.responseHTML;
        if (responseHTML) {
          const snapshot = PageSnapshot.fromHTMLString(responseHTML);
          if (fetchResponse.serverError) {
            yield this.view.renderError(snapshot, this.currentVisit);
          } else {
            yield this.view.renderPage(snapshot, false, true, this.currentVisit);
          }
          this.view.scrollToTop();
          this.view.clearSnapshotCache();
        }
      });
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
      return getVisitAction(submitter, formElement) || "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate2) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate2) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate2) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate2;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    receiveMessageResponse(response) {
      return __async(this, null, function* () {
        const html = yield response.responseHTML;
        if (html) {
          this.receiveMessageHTML(html);
        }
      });
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    render() {
      return __async(this, null, function* () {
        this.replaceHeadAndBody();
        this.activateScriptElements();
      });
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    prepareToRender() {
      return __async(this, null, function* () {
        yield this.mergeHead();
      });
    }
    render() {
      return __async(this, null, function* () {
        if (this.willRender) {
          yield this.replaceBody();
        }
      });
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    mergeHead() {
      return __async(this, null, function* () {
        const mergedHeadElements = this.mergeProvisionalElements();
        const newStylesheetElements = this.copyNewHeadStylesheetElements();
        this.copyNewHeadScriptElements();
        yield mergedHeadElements;
        yield newStylesheetElements;
      });
    }
    replaceBody() {
      return __async(this, null, function* () {
        yield this.preservingPermanentElements(() => __async(this, null, function* () {
          this.activateNewBody();
          yield this.assignNewBody();
        }));
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    copyNewHeadStylesheetElements() {
      return __async(this, null, function* () {
        const loadingElements = [];
        for (const element of this.newHeadStylesheetElements) {
          loadingElements.push(waitForLoad(element));
          document.head.appendChild(element);
        }
        yield Promise.all(loadingElements);
      });
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    mergeProvisionalElements() {
      return __async(this, null, function* () {
        const newHeadElements = [...this.newHeadProvisionalElements];
        for (const element of this.currentHeadProvisionalElements) {
          if (!this.isCurrentElementInElementList(element, newHeadElements)) {
            document.head.removeChild(element);
          }
        }
        for (const element of newHeadElements) {
          document.head.appendChild(element);
        }
      });
    }
    isCurrentElementInElementList(element, elementList) {
      for (const [index, newElement] of elementList.entries()) {
        if (element.tagName == "TITLE") {
          if (newElement.tagName != "TITLE") {
            continue;
          }
          if (element.innerHTML == newElement.innerHTML) {
            elementList.splice(index, 1);
            return true;
          }
        }
        if (newElement.isEqualNode(element)) {
          elementList.splice(index, 1);
          return true;
        }
      }
      return false;
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    assignNewBody() {
      return __async(this, null, function* () {
        yield this.renderElement(this.currentElement, this.newElement);
      });
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index = this.keys.indexOf(key);
      if (index > -1)
        this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    cacheSnapshot() {
      return __async(this, arguments, function* (snapshot = this.snapshot) {
        if (snapshot.isCacheable) {
          this.delegate.viewWillCacheSnapshot();
          const { lastRenderedLocation: location2 } = this;
          yield nextEventLoopTick();
          const cachedSnapshot = snapshot.clone();
          this.snapshotCache.put(location2, cachedSnapshot);
          return cachedSnapshot;
        }
      });
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate2) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate2;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    preloadURL(link) {
      return __async(this, null, function* () {
        const location2 = new URL(link.href);
        if (this.snapshotCache.has(location2)) {
          return;
        }
        try {
          const response = yield fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
          const responseText = yield response.text();
          const snapshot = PageSnapshot.fromHTMLString(responseText);
          this.snapshotCache.put(location2, snapshot);
        } catch (_) {
        }
      });
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch2("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch2("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch2("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch2("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch2("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch2("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch2("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch2("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch2("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = findClosestRecursively(element, "[data-turbo]");
      const withinFrame = findClosestRecursively(element, "turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      return getVisitAction(link) || "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e) => e.remove());
    },
    replace() {
      this.targetElements.forEach((e) => e.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((targetElement) => {
        targetElement.innerHTML = "";
        targetElement.append(this.templateContent);
      });
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var TurboFrameMissingError = class extends Error {
  };
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    loadSourceURL() {
      return __async(this, null, function* () {
        if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
          this.element.loaded = this.visit(expandURL(this.sourceURL));
          this.appearanceObserver.stop();
          yield this.element.loaded;
          this.hasBeenLoaded = true;
        }
      });
    }
    loadResponse(fetchResponse) {
      return __async(this, null, function* () {
        if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
          this.sourceURL = fetchResponse.response.url;
        }
        try {
          const html = yield fetchResponse.responseHTML;
          if (html) {
            const document2 = parseHTMLDocument(html);
            const pageSnapshot = PageSnapshot.fromDocument(document2);
            if (pageSnapshot.isVisitable) {
              yield this.loadFrameResponse(fetchResponse, document2);
            } else {
              yield this.handleUnvisitableFrameResponse(fetchResponse);
            }
          }
        } finally {
          this.fetchResponseLoaded = () => {
          };
        }
      });
    }
    elementAppearedInViewport(element) {
      this.proposeVisitIfNavigatedWithAction(element, element);
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareRequest(fetchRequest);
      this.formSubmission.start();
    }
    prepareRequest(request) {
      var _a;
      request.headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    requestSucceededWithResponse(request, response) {
      return __async(this, null, function* () {
        yield this.loadResponse(response);
        this.resolveVisitPromise();
      });
    }
    requestFailedWithResponse(request, response) {
      return __async(this, null, function* () {
        yield this.loadResponse(response);
        this.resolveVisitPromise();
      });
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
      if (!formSubmission.isSafe) {
        session.clearCache();
      }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
      session.clearCache();
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch2("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    loadFrameResponse(fetchResponse, document2) {
      return __async(this, null, function* () {
        const newFrameElement = yield this.extractForeignFrameElement(document2.body);
        if (newFrameElement) {
          const snapshot = new Snapshot(newFrameElement);
          const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
          if (this.view.renderPromise)
            yield this.view.renderPromise;
          this.changeHistory();
          yield this.view.render(renderer);
          this.complete = true;
          session.frameRendered(fetchResponse, this.element);
          session.frameLoaded(this.element);
          this.fetchResponseLoaded(fetchResponse);
        } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
          this.handleFrameMissingFromResponse(fetchResponse);
        }
      });
    }
    visit(url) {
      return __async(this, null, function* () {
        var _a;
        const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
        (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
        this.currentFetchRequest = request;
        return new Promise((resolve) => {
          this.resolveVisitPromise = () => {
            this.resolveVisitPromise = () => {
            };
            this.currentFetchRequest = null;
            resolve();
          };
          request.perform();
        });
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (this.action) {
        const pageSnapshot = PageSnapshot.fromElement(frame).clone();
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method2 = getHistoryMethodForAction(this.action);
        session.history.update(method2, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    handleUnvisitableFrameResponse(fetchResponse) {
      return __async(this, null, function* () {
        console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
        yield this.visitResponse(fetchResponse.response);
      });
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = (_0, ..._1) => __async(this, [_0, ..._1], function* (url, options = {}) {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options);
        }
      });
      const event = dispatch2("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
      this.view.missing();
      this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
      const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
      throw new TurboFrameMissingError(message);
    }
    visitResponse(response) {
      return __async(this, null, function* () {
        const wrapped = new FetchResponse(response);
        const responseHTML = yield wrapped.responseHTML;
        const { location: location2, redirected, statusCode } = wrapped;
        return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
      });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    extractForeignFrameElement(container) {
      return __async(this, null, function* () {
        let element;
        const id = CSS.escape(this.id);
        try {
          element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
          if (element) {
            return element;
          }
          element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
          if (element) {
            yield element.loaded;
            return yield this.extractForeignFrameElement(element);
          }
        } catch (error2) {
          console.error(error2);
          return new FrameElement();
        }
        return null;
      });
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class _StreamElement extends HTMLElement {
    static renderElement(newElement) {
      return __async(this, null, function* () {
        yield newElement.performAction();
      });
    }
    connectedCallback() {
      return __async(this, null, function* () {
        try {
          yield this.render();
        } catch (error2) {
          console.error(error2);
        } finally {
          this.disconnect();
        }
      });
    }
    render() {
      return __async(this, null, function* () {
        var _a;
        return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (() => __async(this, null, function* () {
          const event = this.beforeRenderEvent;
          if (this.dispatchEvent(event)) {
            yield nextAnimationFrame();
            yield event.detail.render(this);
          }
        }))();
      });
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c) => c.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e) => [...e.children]).filter((c) => !!c.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c) => !!c.id).map((c) => c.id);
      return existingChildren.filter((c) => newChildrenIds.includes(c.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: _StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo2;
  start();

  // ../../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  function getConsumer() {
    return __async(this, null, function* () {
      return consumer || setConsumer(createConsumer2().then(setConsumer));
    });
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  function createConsumer2() {
    return __async(this, null, function* () {
      const { createConsumer: createConsumer3 } = yield Promise.resolve().then(() => (init_src(), src_exports));
      return createConsumer3();
    });
  }
  function subscribeTo(channel, mixin) {
    return __async(this, null, function* () {
      const { subscriptions } = yield getConsumer();
      return subscriptions.create(channel, mixin);
    });
  }

  // ../../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m2, x) {
        return "_" + x.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // ../../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    connectedCallback() {
      return __async(this, null, function* () {
        connectStreamSource(this);
        this.subscription = yield subscribeTo(this.channel, {
          received: this.dispatchMessageEvent.bind(this),
          connected: this.subscriptionConnected.bind(this),
          disconnected: this.subscriptionDisconnected.bind(this)
        });
      });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    subscriptionConnected() {
      this.setAttribute("connected", "");
    }
    subscriptionDisconnected() {
      this.removeAttribute("connected");
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return __spreadValues({ channel, signed_stream_name }, walk(__spreadValues({}, this.dataset)));
    }
  };
  if (customElements.get("turbo-cable-stream-source") === void 0) {
    customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);
  }

  // ../../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const body = isBodyInit(fetchOptions.body) ? fetchOptions.body : new URLSearchParams();
        const method2 = determineFetchMethod(submitter, body, form);
        if (!/get/i.test(method2)) {
          if (/post/i.test(method2)) {
            body.delete("_method");
          } else {
            body.set("_method", method2);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }
  function determineFetchMethod(submitter, body, form) {
    const formMethod = determineFormMethod(submitter);
    const overrideMethod = body.get("_method");
    const method2 = form.getAttribute("method") || "get";
    if (typeof formMethod == "string") {
      return formMethod;
    } else if (typeof overrideMethod == "string") {
      return overrideMethod;
    } else {
      return method2;
    }
  }
  function determineFormMethod(submitter) {
    if (submitter instanceof HTMLButtonElement || submitter instanceof HTMLInputElement) {
      if (submitter.hasAttribute("formmethod")) {
        return submitter.formMethod;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
  function isBodyInit(body) {
    return body instanceof FormData || body instanceof URLSearchParams;
  }

  // ../../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // turbo/actions.js
  function redirectTo() {
    const url = this.getAttribute("url") || "/";
    const turboAction = this.getAttribute("turbo-action") || "advance";
    const turboFrame = this.getAttribute("turbo-frame");
    const turbo = this.getAttribute("turbo") !== "false";
    const options = {
      action: turboAction
    };
    if (turboFrame) {
      options.frame = turboFrame;
    }
    if (turbo && Turbo) {
      Turbo.visit(url, options);
    } else {
      location.assign(url);
    }
  }
  function morph() {
    const targets = this.targetElements;
    const childNodesCount = this.templateContent.childElementCount;
    const morphTo = this.templateElement.innerHTML;
    if (childNodesCount === 1) {
      if (targets.length && morphTo) {
        targets.forEach((target) => Alpine.morph(target, morphTo));
      }
    } else {
      console.error(
        "[turbo_stream.morph]",
        `Result HTML must expose a single root DOM node. ${childNodesCount} found.

${morphTo}`
      );
    }
  }

  // turbo/setup.js
  Turbo.session.drive = false;
  StreamActions.redirect_to = redirectTo;
  StreamActions.morph = morph;
  addEventListener("turbo:before-frame-render", (event) => {
    event.detail.render = Alpine.morph;
  });
  addEventListener("turbo:before-render", (event) => {
    event.detail.render = Alpine.morph;
  });

  // ../../../node_modules/@rails/ujs/app/assets/javascripts/rails-ujs.esm.js
  var linkClickSelector = "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]";
  var buttonClickSelector = {
    selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
    exclude: "form button"
  };
  var inputChangeSelector = "select[data-remote], input[data-remote], textarea[data-remote]";
  var formSubmitSelector = "form:not([data-turbo=true])";
  var formInputClickSelector = "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])";
  var formDisableSelector = "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled";
  var formEnableSelector = "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled";
  var fileInputSelector = "input[name][type=file]:not([disabled])";
  var linkDisableSelector = "a[data-disable-with], a[data-disable]";
  var buttonDisableSelector = "button[data-remote][data-disable-with], button[data-remote][data-disable]";
  var nonce = null;
  var loadCSPNonce = () => {
    const metaTag = document.querySelector("meta[name=csp-nonce]");
    return nonce = metaTag && metaTag.content;
  };
  var cspNonce = () => nonce || loadCSPNonce();
  var m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
  var matches = function(element, selector) {
    if (selector.exclude) {
      return m.call(element, selector.selector) && !m.call(element, selector.exclude);
    } else {
      return m.call(element, selector);
    }
  };
  var EXPANDO = "_ujsData";
  var getData = (element, key) => element[EXPANDO] ? element[EXPANDO][key] : void 0;
  var setData = function(element, key, value) {
    if (!element[EXPANDO]) {
      element[EXPANDO] = {};
    }
    return element[EXPANDO][key] = value;
  };
  var $ = (selector) => Array.prototype.slice.call(document.querySelectorAll(selector));
  var isContentEditable = function(element) {
    var isEditable = false;
    do {
      if (element.isContentEditable) {
        isEditable = true;
        break;
      }
      element = element.parentElement;
    } while (element);
    return isEditable;
  };
  var csrfToken = () => {
    const meta = document.querySelector("meta[name=csrf-token]");
    return meta && meta.content;
  };
  var csrfParam = () => {
    const meta = document.querySelector("meta[name=csrf-param]");
    return meta && meta.content;
  };
  var CSRFProtection = (xhr) => {
    const token = csrfToken();
    if (token) {
      return xhr.setRequestHeader("X-CSRF-Token", token);
    }
  };
  var refreshCSRFTokens = () => {
    const token = csrfToken();
    const param = csrfParam();
    if (token && param) {
      return $('form input[name="' + param + '"]').forEach((input) => input.value = token);
    }
  };
  var AcceptHeaders = {
    "*": "*/*",
    text: "text/plain",
    html: "text/html",
    xml: "application/xml, text/xml",
    json: "application/json, text/javascript",
    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
  };
  var ajax = (options) => {
    options = prepareOptions(options);
    var xhr = createXHR(options, function() {
      const response = processResponse(xhr.response != null ? xhr.response : xhr.responseText, xhr.getResponseHeader("Content-Type"));
      if (Math.floor(xhr.status / 100) === 2) {
        if (typeof options.success === "function") {
          options.success(response, xhr.statusText, xhr);
        }
      } else {
        if (typeof options.error === "function") {
          options.error(response, xhr.statusText, xhr);
        }
      }
      return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
    });
    if (options.beforeSend && !options.beforeSend(xhr, options)) {
      return false;
    }
    if (xhr.readyState === XMLHttpRequest.OPENED) {
      return xhr.send(options.data);
    }
  };
  var prepareOptions = function(options) {
    options.url = options.url || location.href;
    options.type = options.type.toUpperCase();
    if (options.type === "GET" && options.data) {
      if (options.url.indexOf("?") < 0) {
        options.url += "?" + options.data;
      } else {
        options.url += "&" + options.data;
      }
    }
    if (!(options.dataType in AcceptHeaders)) {
      options.dataType = "*";
    }
    options.accept = AcceptHeaders[options.dataType];
    if (options.dataType !== "*") {
      options.accept += ", */*; q=0.01";
    }
    return options;
  };
  var createXHR = function(options, done) {
    const xhr = new XMLHttpRequest();
    xhr.open(options.type, options.url, true);
    xhr.setRequestHeader("Accept", options.accept);
    if (typeof options.data === "string") {
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
    }
    if (!options.crossDomain) {
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      CSRFProtection(xhr);
    }
    xhr.withCredentials = !!options.withCredentials;
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        return done(xhr);
      }
    };
    return xhr;
  };
  var processResponse = function(response, type) {
    if (typeof response === "string" && typeof type === "string") {
      if (type.match(/\bjson\b/)) {
        try {
          response = JSON.parse(response);
        } catch (error2) {
        }
      } else if (type.match(/\b(?:java|ecma)script\b/)) {
        const script = document.createElement("script");
        script.setAttribute("nonce", cspNonce());
        script.text = response;
        document.head.appendChild(script).parentNode.removeChild(script);
      } else if (type.match(/\b(xml|html|svg)\b/)) {
        const parser = new DOMParser();
        type = type.replace(/;.+/, "");
        try {
          response = parser.parseFromString(response, type);
        } catch (error1) {
        }
      }
    }
    return response;
  };
  var href = (element) => element.href;
  var isCrossDomain = function(url) {
    const originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    const urlAnchor = document.createElement("a");
    try {
      urlAnchor.href = url;
      return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
    } catch (e) {
      return true;
    }
  };
  var preventDefault;
  var { CustomEvent: CustomEvent2 } = window;
  if (typeof CustomEvent2 !== "function") {
    CustomEvent2 = function(event, params) {
      const evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    };
    CustomEvent2.prototype = window.Event.prototype;
    ({ preventDefault } = CustomEvent2.prototype);
    CustomEvent2.prototype.preventDefault = function() {
      const result = preventDefault.call(this);
      if (this.cancelable && !this.defaultPrevented) {
        Object.defineProperty(this, "defaultPrevented", {
          get() {
            return true;
          }
        });
      }
      return result;
    };
  }
  var fire = (obj, name, data) => {
    const event = new CustomEvent2(name, {
      bubbles: true,
      cancelable: true,
      detail: data
    });
    obj.dispatchEvent(event);
    return !event.defaultPrevented;
  };
  var stopEverything = (e) => {
    fire(e.target, "ujs:everythingStopped");
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
  };
  var delegate = (element, selector, eventType, handler) => element.addEventListener(eventType, function(e) {
    let { target } = e;
    while (!!(target instanceof Element) && !matches(target, selector)) {
      target = target.parentNode;
    }
    if (target instanceof Element && handler.call(target, e) === false) {
      e.preventDefault();
      e.stopPropagation();
    }
  });
  var toArray = (e) => Array.prototype.slice.call(e);
  var serializeElement = (element, additionalParam) => {
    let inputs = [element];
    if (matches(element, "form")) {
      inputs = toArray(element.elements);
    }
    const params = [];
    inputs.forEach(function(input) {
      if (!input.name || input.disabled) {
        return;
      }
      if (matches(input, "fieldset[disabled] *")) {
        return;
      }
      if (matches(input, "select")) {
        toArray(input.options).forEach(function(option) {
          if (option.selected) {
            params.push({
              name: input.name,
              value: option.value
            });
          }
        });
      } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
        params.push({
          name: input.name,
          value: input.value
        });
      }
    });
    if (additionalParam) {
      params.push(additionalParam);
    }
    return params.map(function(param) {
      if (param.name) {
        return `${encodeURIComponent(param.name)}=${encodeURIComponent(param.value)}`;
      } else {
        return param;
      }
    }).join("&");
  };
  var formElements = (form, selector) => {
    if (matches(form, "form")) {
      return toArray(form.elements).filter((el2) => matches(el2, selector));
    } else {
      return toArray(form.querySelectorAll(selector));
    }
  };
  var handleConfirmWithRails = (rails) => function(e) {
    if (!allowAction(this, rails)) {
      stopEverything(e);
    }
  };
  var confirm2 = (message, element) => window.confirm(message);
  var allowAction = function(element, rails) {
    let callback;
    const message = element.getAttribute("data-confirm");
    if (!message) {
      return true;
    }
    let answer = false;
    if (fire(element, "confirm")) {
      try {
        answer = rails.confirm(message, element);
      } catch (error2) {
      }
      callback = fire(element, "confirm:complete", [answer]);
    }
    return answer && callback;
  };
  var handleDisabledElement = function(e) {
    const element = this;
    if (element.disabled) {
      stopEverything(e);
    }
  };
  var enableElement = (e) => {
    let element;
    if (e instanceof Event) {
      if (isXhrRedirect(e)) {
        return;
      }
      element = e.target;
    } else {
      element = e;
    }
    if (isContentEditable(element)) {
      return;
    }
    if (matches(element, linkDisableSelector)) {
      return enableLinkElement(element);
    } else if (matches(element, buttonDisableSelector) || matches(element, formEnableSelector)) {
      return enableFormElement(element);
    } else if (matches(element, formSubmitSelector)) {
      return enableFormElements(element);
    }
  };
  var disableElement = (e) => {
    const element = e instanceof Event ? e.target : e;
    if (isContentEditable(element)) {
      return;
    }
    if (matches(element, linkDisableSelector)) {
      return disableLinkElement(element);
    } else if (matches(element, buttonDisableSelector) || matches(element, formDisableSelector)) {
      return disableFormElement(element);
    } else if (matches(element, formSubmitSelector)) {
      return disableFormElements(element);
    }
  };
  var disableLinkElement = function(element) {
    if (getData(element, "ujs:disabled")) {
      return;
    }
    const replacement = element.getAttribute("data-disable-with");
    if (replacement != null) {
      setData(element, "ujs:enable-with", element.innerHTML);
      element.innerHTML = replacement;
    }
    element.addEventListener("click", stopEverything);
    return setData(element, "ujs:disabled", true);
  };
  var enableLinkElement = function(element) {
    const originalText = getData(element, "ujs:enable-with");
    if (originalText != null) {
      element.innerHTML = originalText;
      setData(element, "ujs:enable-with", null);
    }
    element.removeEventListener("click", stopEverything);
    return setData(element, "ujs:disabled", null);
  };
  var disableFormElements = (form) => formElements(form, formDisableSelector).forEach(disableFormElement);
  var disableFormElement = function(element) {
    if (getData(element, "ujs:disabled")) {
      return;
    }
    const replacement = element.getAttribute("data-disable-with");
    if (replacement != null) {
      if (matches(element, "button")) {
        setData(element, "ujs:enable-with", element.innerHTML);
        element.innerHTML = replacement;
      } else {
        setData(element, "ujs:enable-with", element.value);
        element.value = replacement;
      }
    }
    element.disabled = true;
    return setData(element, "ujs:disabled", true);
  };
  var enableFormElements = (form) => formElements(form, formEnableSelector).forEach((element) => enableFormElement(element));
  var enableFormElement = function(element) {
    const originalText = getData(element, "ujs:enable-with");
    if (originalText != null) {
      if (matches(element, "button")) {
        element.innerHTML = originalText;
      } else {
        element.value = originalText;
      }
      setData(element, "ujs:enable-with", null);
    }
    element.disabled = false;
    return setData(element, "ujs:disabled", null);
  };
  var isXhrRedirect = function(event) {
    const xhr = event.detail ? event.detail[0] : void 0;
    return xhr && xhr.getResponseHeader("X-Xhr-Redirect");
  };
  var handleMethodWithRails = (rails) => function(e) {
    const link = this;
    const method2 = link.getAttribute("data-method");
    if (!method2) {
      return;
    }
    if (isContentEditable(this)) {
      return;
    }
    const href2 = rails.href(link);
    const csrfToken$1 = csrfToken();
    const csrfParam$1 = csrfParam();
    const form = document.createElement("form");
    let formContent = `<input name='_method' value='${method2}' type='hidden' />`;
    if (csrfParam$1 && csrfToken$1 && !isCrossDomain(href2)) {
      formContent += `<input name='${csrfParam$1}' value='${csrfToken$1}' type='hidden' />`;
    }
    formContent += '<input type="submit" />';
    form.method = "post";
    form.action = href2;
    form.target = link.target;
    form.innerHTML = formContent;
    form.style.display = "none";
    document.body.appendChild(form);
    form.querySelector('[type="submit"]').click();
    stopEverything(e);
  };
  var isRemote = function(element) {
    const value = element.getAttribute("data-remote");
    return value != null && value !== "false";
  };
  var handleRemoteWithRails = (rails) => function(e) {
    let data, method2, url;
    const element = this;
    if (!isRemote(element)) {
      return true;
    }
    if (!fire(element, "ajax:before")) {
      fire(element, "ajax:stopped");
      return false;
    }
    if (isContentEditable(element)) {
      fire(element, "ajax:stopped");
      return false;
    }
    const withCredentials = element.getAttribute("data-with-credentials");
    const dataType = element.getAttribute("data-type") || "script";
    if (matches(element, formSubmitSelector)) {
      const button = getData(element, "ujs:submit-button");
      method2 = getData(element, "ujs:submit-button-formmethod") || element.getAttribute("method") || "get";
      url = getData(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
      if (method2.toUpperCase() === "GET") {
        url = url.replace(/\?.*$/, "");
      }
      if (element.enctype === "multipart/form-data") {
        data = new FormData(element);
        if (button != null) {
          data.append(button.name, button.value);
        }
      } else {
        data = serializeElement(element, button);
      }
      setData(element, "ujs:submit-button", null);
      setData(element, "ujs:submit-button-formmethod", null);
      setData(element, "ujs:submit-button-formaction", null);
    } else if (matches(element, buttonClickSelector) || matches(element, inputChangeSelector)) {
      method2 = element.getAttribute("data-method");
      url = element.getAttribute("data-url");
      data = serializeElement(element, element.getAttribute("data-params"));
    } else {
      method2 = element.getAttribute("data-method");
      url = rails.href(element);
      data = element.getAttribute("data-params");
    }
    ajax({
      type: method2 || "GET",
      url,
      data,
      dataType,
      beforeSend(xhr, options) {
        if (fire(element, "ajax:beforeSend", [xhr, options])) {
          return fire(element, "ajax:send", [xhr]);
        } else {
          fire(element, "ajax:stopped");
          return false;
        }
      },
      success(...args) {
        return fire(element, "ajax:success", args);
      },
      error(...args) {
        return fire(element, "ajax:error", args);
      },
      complete(...args) {
        return fire(element, "ajax:complete", args);
      },
      crossDomain: isCrossDomain(url),
      withCredentials: withCredentials != null && withCredentials !== "false"
    });
    stopEverything(e);
  };
  var formSubmitButtonClick = function(e) {
    const button = this;
    const { form } = button;
    if (!form) {
      return;
    }
    if (button.name) {
      setData(form, "ujs:submit-button", {
        name: button.name,
        value: button.value
      });
    }
    setData(form, "ujs:formnovalidate-button", button.formNoValidate);
    setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
    return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
  };
  var preventInsignificantClick = function(e) {
    const link = this;
    const method2 = (link.getAttribute("data-method") || "GET").toUpperCase();
    const data = link.getAttribute("data-params");
    const metaClick = e.metaKey || e.ctrlKey;
    const insignificantMetaClick = metaClick && method2 === "GET" && !data;
    const nonPrimaryMouseClick = e.button != null && e.button !== 0;
    if (nonPrimaryMouseClick || insignificantMetaClick) {
      e.stopImmediatePropagation();
    }
  };
  var Rails = {
    $,
    ajax,
    buttonClickSelector,
    buttonDisableSelector,
    confirm: confirm2,
    cspNonce,
    csrfToken,
    csrfParam,
    CSRFProtection,
    delegate,
    disableElement,
    enableElement,
    fileInputSelector,
    fire,
    formElements,
    formEnableSelector,
    formDisableSelector,
    formInputClickSelector,
    formSubmitButtonClick,
    formSubmitSelector,
    getData,
    handleDisabledElement,
    href,
    inputChangeSelector,
    isCrossDomain,
    linkClickSelector,
    linkDisableSelector,
    loadCSPNonce,
    matches,
    preventInsignificantClick,
    refreshCSRFTokens,
    serializeElement,
    setData,
    stopEverything
  };
  var handleConfirm = handleConfirmWithRails(Rails);
  Rails.handleConfirm = handleConfirm;
  var handleMethod = handleMethodWithRails(Rails);
  Rails.handleMethod = handleMethod;
  var handleRemote = handleRemoteWithRails(Rails);
  Rails.handleRemote = handleRemote;
  var start2 = function() {
    if (window._rails_loaded) {
      throw new Error("rails-ujs has already been loaded!");
    }
    window.addEventListener("pageshow", function() {
      $(formEnableSelector).forEach(function(el2) {
        if (getData(el2, "ujs:disabled")) {
          enableElement(el2);
        }
      });
      $(linkDisableSelector).forEach(function(el2) {
        if (getData(el2, "ujs:disabled")) {
          enableElement(el2);
        }
      });
    });
    delegate(document, linkDisableSelector, "ajax:complete", enableElement);
    delegate(document, linkDisableSelector, "ajax:stopped", enableElement);
    delegate(document, buttonDisableSelector, "ajax:complete", enableElement);
    delegate(document, buttonDisableSelector, "ajax:stopped", enableElement);
    delegate(document, linkClickSelector, "click", preventInsignificantClick);
    delegate(document, linkClickSelector, "click", handleDisabledElement);
    delegate(document, linkClickSelector, "click", handleConfirm);
    delegate(document, linkClickSelector, "click", disableElement);
    delegate(document, linkClickSelector, "click", handleRemote);
    delegate(document, linkClickSelector, "click", handleMethod);
    delegate(document, buttonClickSelector, "click", preventInsignificantClick);
    delegate(document, buttonClickSelector, "click", handleDisabledElement);
    delegate(document, buttonClickSelector, "click", handleConfirm);
    delegate(document, buttonClickSelector, "click", disableElement);
    delegate(document, buttonClickSelector, "click", handleRemote);
    delegate(document, inputChangeSelector, "change", handleDisabledElement);
    delegate(document, inputChangeSelector, "change", handleConfirm);
    delegate(document, inputChangeSelector, "change", handleRemote);
    delegate(document, formSubmitSelector, "submit", handleDisabledElement);
    delegate(document, formSubmitSelector, "submit", handleConfirm);
    delegate(document, formSubmitSelector, "submit", handleRemote);
    delegate(document, formSubmitSelector, "submit", (e) => setTimeout(() => disableElement(e), 13));
    delegate(document, formSubmitSelector, "ajax:send", disableElement);
    delegate(document, formSubmitSelector, "ajax:complete", enableElement);
    delegate(document, formInputClickSelector, "click", preventInsignificantClick);
    delegate(document, formInputClickSelector, "click", handleDisabledElement);
    delegate(document, formInputClickSelector, "click", handleConfirm);
    delegate(document, formInputClickSelector, "click", formSubmitButtonClick);
    document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
    document.addEventListener("DOMContentLoaded", loadCSPNonce);
    return window._rails_loaded = true;
  };
  Rails.start = start2;
  if (typeof jQuery !== "undefined" && jQuery && jQuery.ajax) {
    if (jQuery.rails) {
      throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
    }
    jQuery.rails = Rails;
    jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
      if (!options.crossDomain) {
        return CSRFProtection(xhr);
      }
    });
  }
  if (typeof exports !== "object" && typeof module === "undefined") {
    window.Rails = Rails;
    if (fire(document, "rails:attachBindings")) {
      start2();
    }
  }

  // ../../../node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent2 = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent2.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent2);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left2, right2) => {
        const leftIndex = left2.index, rightIndex = right2.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches2 = source.match(descriptorPattern) || [];
    let eventName = matches2[2];
    let keyFilter = matches2[3];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches2[4]),
      eventName,
      eventOptions: matches2[7] ? parseEventOptions(matches2[7]) : {},
      identifier: matches2[5],
      methodName: matches2[6],
      keyFilter: matches2[1] || keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  function isSomething(object) {
    return object !== null && object !== void 0;
  }
  function hasProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  var allModifiers = ["meta", "ctrl", "alt", "shift"];
  var Action = class {
    constructor(element, index, descriptor, schema) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    shouldIgnoreKeyboardEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = this.keyFilter.split("+");
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!hasProperty(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    shouldIgnoreMouseEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = [this.keyFilter];
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      return false;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
    keyFilterDissatisfied(event, filters) {
      const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));
      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e) => e.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      const actionEvent = this.prepareActionEvent(event);
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {
        this.invokeWithEvent(actionEvent);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method2 = this.controller[this.methodName];
      if (typeof method2 == "function") {
        return method2;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      const { controller } = this.context;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter2 = actionDescriptorFilters[name];
          passes = passes && filter2({ name, value, event, element, controller });
        } else {
          continue;
        }
      }
      return passes;
    }
    prepareActionEvent(event) {
      return Object.assign(event, { params: this.action.params });
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        this.method.call(this.controller, event);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {
        return false;
      }
      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate2) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate2;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches2 = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches2.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches2)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(element, attributeName) {
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate2) {
      this.attributeName = attributeName;
      this.delegate = delegate2;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches2 = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches2);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set) => values.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values]) => values.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate2, details) {
      this._selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate2;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    get selector() {
      return this._selector;
    }
    set selector(selector) {
      this._selector = selector;
      this.refresh();
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const { selector } = this;
      if (selector) {
        const matches2 = element.matches(selector);
        if (this.delegate.selectorMatchElement) {
          return matches2 && this.delegate.selectorMatchElement(element, this.details);
        }
        return matches2;
      } else {
        return false;
      }
    }
    matchElementsInTree(tree) {
      const { selector } = this;
      if (selector) {
        const match = this.matchElement(tree) ? [tree] : [];
        const matches2 = Array.from(tree.querySelectorAll(selector)).filter((match2) => this.matchElement(match2));
        return match.concat(matches2);
      } else {
        return [];
      }
    }
    elementMatched(element) {
      const { selector } = this;
      if (selector) {
        this.selectorMatched(element, selector);
      }
    }
    elementUnmatched(element) {
      const selectors = this.matchesByElement.getKeysForValue(element);
      for (const selector of selectors) {
        this.selectorUnmatched(element, selector);
      }
    }
    elementAttributeChanged(element, _attributeName) {
      const { selector } = this;
      if (selector) {
        const matches2 = this.matchElement(element);
        const matchedBefore = this.matchesByElement.has(selector, element);
        if (matches2 && !matchedBefore) {
          this.selectorMatched(element, selector);
        } else if (!matches2 && matchedBefore) {
          this.selectorUnmatched(element, selector);
        }
      }
    }
    selectorMatched(element, selector) {
      this.delegate.selectorMatched(element, selector, this.details);
      this.matchesByElement.add(selector, element);
    }
    selectorUnmatched(element, selector) {
      this.delegate.selectorUnmatched(element, selector, this.details);
      this.matchesByElement.delete(selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate2) {
      this.element = element;
      this.delegate = delegate2;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate2) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate2;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left2, right2) {
    const length = Math.max(left2.length, right2.length);
    return Array.from({ length }, (_, index) => [left2[index], right2[index]]);
  }
  function tokensAreEqual(left2, right2) {
    return left2 && right2 && left2.index == right2.index && left2.content == right2.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate2) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate2;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate2) {
      this.context = context;
      this.delegate = delegate2;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate2) {
      this.context = context;
      this.delegate = delegate2;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate2) {
      this.started = false;
      this.context = context;
      this.delegate = delegate2;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
      this.attributeObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.started) {
        this.outletDefinitions.forEach((outletName) => {
          this.setupSelectorObserverForOutlet(outletName);
          this.setupAttributeObserverForOutlet(outletName);
        });
        this.started = true;
        this.dependentContexts.forEach((context) => context.refresh());
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
      this.attributeObserverMap.forEach((observer) => observer.refresh());
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.disconnectAllOutlets();
        this.stopSelectorObservers();
        this.stopAttributeObservers();
      }
    }
    stopSelectorObservers() {
      if (this.selectorObserverMap.size > 0) {
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    stopAttributeObservers() {
      if (this.attributeObserverMap.size > 0) {
        this.attributeObserverMap.forEach((observer) => observer.stop());
        this.attributeObserverMap.clear();
      }
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      const selector = this.selector(outletName);
      const hasOutlet = this.hasOutlet(element, outletName);
      const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);
      if (selector) {
        return hasOutlet && hasOutletController && element.matches(selector);
      } else {
        return false;
      }
    }
    elementMatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementAttributeValueChanged(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementUnmatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    updateSelectorObserverForOutlet(outletName) {
      const observer = this.selectorObserverMap.get(outletName);
      if (observer) {
        observer.selector = this.selector(outletName);
      }
    }
    setupSelectorObserverForOutlet(outletName) {
      const selector = this.selector(outletName);
      const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });
      this.selectorObserverMap.set(outletName, selectorObserver);
      selectorObserver.start();
    }
    setupAttributeObserverForOutlet(outletName) {
      const attributeName = this.attributeNameForOutletName(outletName);
      const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);
      this.attributeObserverMap.set(outletName, attributeObserver);
      attributeObserver.start();
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    attributeNameForOutletName(outletName) {
      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);
    }
    getOutletNameFromOutletAttributeName(attributeName) {
      return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module2) => {
        const constructor = module2.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module2.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get schema() {
      return this.context.schema;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module2, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module2;
      this.scope = scope;
      this.controller = new module2.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend2(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend2 = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a = function() {
        this.a.call(this);
      };
      const b = extendWithReflect(a);
      b.prototype.a = function() {
      };
      return new b();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class _Scope {
    constructor(schema, element, identifier, logger) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new _Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate2) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate2;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      return this.parseValueForElementAndIdentifier(element, identifier);
    }
    parseValueForElementAndIdentifier(element, identifier) {
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module2) => contexts.concat(module2.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module2 = new Module(this.application, definition);
      this.connectModule(module2);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module2 = this.modulesByIdentifier.get(identifier);
      if (module2) {
        this.disconnectModule(module2);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module2 = this.modulesByIdentifier.get(identifier);
      if (module2) {
        return module2.contexts.find((context) => context.element == element);
      }
    }
    proposeToConnectScopeForElementAndIdentifier(element, identifier) {
      const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);
      if (scope) {
        this.scopeObserver.elementMatchedValue(scope.element, scope);
      } else {
        console.error(`Couldn't find or create scope for identifier: "${identifier}" and element:`, element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module2 = this.modulesByIdentifier.get(scope.identifier);
      if (module2) {
        module2.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module2 = this.modulesByIdentifier.get(scope.identifier);
      if (module2) {
        module2.disconnectContextForScope(scope);
      }
    }
    connectModule(module2) {
      this.modulesByIdentifier.set(module2.identifier, module2);
      const scopes = this.scopesByIdentifier.getValuesForKey(module2.identifier);
      scopes.forEach((scope) => module2.connectContextForScope(scope));
    }
    disconnectModule(module2) {
      this.modulesByIdentifier.delete(module2.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module2.identifier);
      scopes.forEach((scope) => module2.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End", page_up: "PageUp", page_down: "PageDown" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c) => [c, c]))), objectFromEntries("0123456789".split("").map((n) => [n, n])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo, [k, v]) => Object.assign(Object.assign({}, memo), { [k]: v }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    start() {
      return __async(this, null, function* () {
        yield domReady();
        this.logDebugActivity("application", "starting");
        this.dispatcher.start();
        this.router.start();
        this.logDebugActivity("application", "start");
      });
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter2) {
      this.actionDescriptorFilters[name] = filter2;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function getOutletController(controller, element, identifier) {
    return controller.application.getControllerForElementAndIdentifier(element, identifier);
  }
  function getControllerAndEnsureConnectedScope(controller, element, outletName) {
    let outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);
    outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
            if (outletController)
              return outletController;
            throw new Error(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`);
          }
          throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outletElement) => {
              const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
              if (outletController)
                return outletController;
              console.warn(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`, outletElement);
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            return outletElement;
          } else {
            throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read2, writer: write2 } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read2(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write2(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const { controller, token, typeObject } = payload;
    const hasType = isSomething(typeObject.type);
    const hasDefault = isSomething(typeObject.default);
    const fullObject = hasType && hasDefault;
    const onlyType = hasType && !hasDefault;
    const onlyDefault = !hasType && hasDefault;
    const typeFromObject = parseValueTypeConstant(typeObject.type);
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);
    if (onlyType)
      return typeFromObject;
    if (onlyDefault)
      return typeFromDefaultValue;
    if (typeFromObject !== typeFromDefaultValue) {
      const propertyPath = controller ? `${controller}.${token}` : token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${typeObject.default}" is of type "${typeFromDefaultValue}".`);
    }
    if (fullObject)
      return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const { controller, token, typeDefinition } = payload;
    const typeObject = { controller, token, typeObject: typeDefinition };
    const typeFromObject = parseValueTypeObject(typeObject);
    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);
    const typeFromConstant = parseValueTypeConstant(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;
    throw new Error(`Unknown value type "${propertyPath}" for "${token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const hasDefault = hasProperty(typeDefinition, "default");
    const hasType = hasProperty(typeDefinition, "type");
    const typeObject = typeDefinition;
    if (hasDefault)
      return typeObject.default;
    if (hasType) {
      const { type } = typeObject;
      const constantFromType = parseValueTypeConstant(type);
      if (constantFromType)
        return defaultValuesByType[constantFromType];
    }
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const { token, typeDefinition } = payload;
    const key = `${dasherize(token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value.replace(/_/g, ""));
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // controllers/application_controller.js
  var import_camelCase = __toESM(require_camelCase());
  var import_upperFirst = __toESM(require_upperFirst());

  // helpers/dom.js
  function dispatchEvent2(element, evtType, evtData) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: true,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, true, false, evtData);
    }
    element.dispatchEvent(evt);
    return evt;
  }
  function getAttributes(element, filter2) {
    const attrs = [];
    Array.from(element.attributes).forEach((attr) => {
      if (typeof filter2 === "function") {
        if (!filter2(attr.name, attr.value)) {
          return;
        }
      }
      attrs.push(attr);
    });
    return attrs;
  }
  function walk2(el2, callback) {
    if (callback(el2) === false)
      return;
    let node = el2.firstElementChild;
    while (node) {
      walk2(node, callback);
      node = node.nextElementSibling;
    }
  }
  function walkAndSkip(rootEl, callback, shouldSkip = () => false) {
    walk2(rootEl, (el2) => {
      if (!rootEl.isSameNode(el2) && shouldSkip(el2)) {
        return false;
      }
      return callback(el2);
    });
  }
  var disableBodyScroll = function() {
    var _selector = false, _element = false, _clientY;
    if (!Element.prototype.matches)
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    if (!Element.prototype.closest)
      Element.prototype.closest = function(s) {
        var ancestor = this;
        if (!document.documentElement.contains(el))
          return null;
        do {
          if (ancestor.matches(s))
            return ancestor;
          ancestor = ancestor.parentElement;
        } while (ancestor !== null);
        return el;
      };
    var preventBodyScroll = function(event) {
      if (false === _element || !event.target.closest(_selector)) {
        event.preventDefault();
      }
    };
    var captureClientY = function(event) {
      if (event.targetTouches.length === 1) {
        _clientY = event.targetTouches[0].clientY;
      }
    };
    var preventOverscroll = function(event) {
      if (event.targetTouches.length !== 1) {
        return;
      }
      var clientY = event.targetTouches[0].clientY - _clientY;
      if (_element.scrollTop === 0 && clientY > 0) {
        event.preventDefault();
      }
      if (_element.scrollHeight - _element.scrollTop <= _element.clientHeight && clientY < 0) {
        event.preventDefault();
      }
    };
    return function(allow, selector) {
      if (typeof selector !== "undefined") {
        _selector = selector;
        _element = document.querySelector(selector);
      }
      if (true === allow) {
        if (false !== _element) {
          _element.addEventListener("touchstart", captureClientY, false);
          _element.addEventListener("touchmove", preventOverscroll, false);
        }
        document.body.addEventListener("touchmove", preventBodyScroll, false);
      } else {
        if (false !== _element) {
          _element.removeEventListener("touchstart", captureClientY, false);
          _element.removeEventListener("touchmove", preventOverscroll, false);
        }
        document.body.removeEventListener("touchmove", preventBodyScroll, false);
      }
    };
  }();

  // helpers/string.js
  function splitWhitespace(str) {
    if (str.trim() === "") {
      return [];
    }
    return str.split(/\s+/);
  }
  function saferEval(expression, data = {}, helperVars = {}) {
    return new Function(
      ["$data", ...Object.keys(helperVars)],
      `var __eval_result; with($data) { __eval_result = ${expression} }; return __eval_result`
    )(data, ...Object.values(helperVars));
  }
  function saferEvalNoReturn(expression, dataContext, helperVars = {}) {
    if (typeof expression === "function") {
      return expression.call(dataContext, helperVars.$event);
    }
    let hasProp = false;
    try {
      hasProp = dataContext[expression];
    } catch (err) {
      hasProp = false;
    }
    if (hasProp) {
      let methodReference = new Function(
        ["dataContext", ...Object.keys(helperVars)],
        `with(dataContext) { return ${expression} }`
      )(dataContext, ...Object.values(helperVars));
      if (typeof methodReference === "function") {
        return methodReference.call(dataContext, helperVars.$event);
      }
      return null;
    }
    return new Function(
      ["dataContext", ...Object.keys(helperVars)],
      `with(dataContext) { ${expression} }`
    )(dataContext, ...Object.values(helperVars));
  }

  // helpers/stimulus.js
  var import_find = __toESM(require_find());
  function getController(el2, identifier, bubble = false) {
    let target = el2;
    if (!target.controllers && bubble) {
      target = target.closest(
        `[data-controller~="${typeof identifier === "string" ? identifier : identifier.identifier}"]`
      );
    }
    if (!target || !target.controllers) {
      return void 0;
    }
    return (0, import_find.default)(target.controllers, (controller, name) => {
      if (typeof identifier === "string") {
        return name === identifier;
      }
      return controller instanceof identifier;
    });
  }
  function addController(el2, controller) {
    el2.controllers = el2.controllers || {};
    el2.controllers[controller.identifier] = controller;
  }

  // controllers/application_controller.js
  var application_controller_default = class extends Controller {
    /*
     * Root el classlist shortcut
     */
    get classList() {
      return this.element.classList;
    }
    /*
     * Gives access to DOM element's controllers via
     * the `controllers[identifier]` property on the DOM element.
     *
     * Child classes must call `super.initialize()` if they provide
     * a subclassed `initialize()` method.
     */
    initialize() {
      addController(this.element, this);
    }
    /*
     * Dispatches a `connected` event each time
     * the DOM element is connected. Parent elements can listen for
     * these events.
     *
     * Child classes must call `super.connect()` if they provide
     * a subclassed `connect()` method.
     */
    connect() {
      this.dispatch(`connected`, { target: this });
    }
    /*
     * Utility method for dispatching custom events on the
     * controller root element.
     */
    dispatch(evtType, evtData) {
      return dispatchEvent2(this.element, evtType, evtData);
    }
    /*
     * Add event listener(s) to root element
     */
    on(events, ...args) {
      splitWhitespace(events).forEach((event) => this.element.addEventListener(event, ...args));
    }
    /*
     * Remove event listener(s) from root element
     */
    off(events, ...args) {
      splitWhitespace(events).forEach((event) => this.element.removeEventListener(event, ...args));
    }
  };

  // controllers/clipboard_controller.js
  var clipboard_controller_default = class extends Controller {
    copy() {
      this.sourceTarget.select();
      document.execCommand("copy");
      this.flashMessage();
    }
    flashMessage() {
      const flash = this.flashTarget;
      const originalText = flash.innerHTML;
      flash.innerHTML = "copied!";
      setTimeout(function() {
        flash.innerHTML = originalText;
      }, 1e3);
    }
  };
  __publicField(clipboard_controller_default, "targets", ["source", "flash"]);

  // ../../../node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start3 = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start3, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start3, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // ../../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // ../../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // ../../../node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth;
      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }
      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }
    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // ../../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // ../../../node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // ../../../node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // ../../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // ../../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // ../../../node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../../node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // ../../../node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // ../../../node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // ../../../node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // ../../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // ../../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // ../../../node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start3:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // ../../../node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // ../../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // ../../../node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start3;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../../node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // ../../../node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // ../../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // ../../../node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // ../../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start3 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start3 ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // ../../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // ../../../node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // ../../../node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn3) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn3());
          });
        });
      }
      return pending;
    };
  }

  // ../../../node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  // ../../../node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
              return '"' + s + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // ../../../node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn3) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn3(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  // ../../../node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // ../../../node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m2) {
            return m2.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn3 === "function") {
              state = fn3({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect5 = _ref3.effect;
          if (typeof effect5 === "function") {
            var cleanupFn = effect5({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn3) {
          return fn3();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // ../../../node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // ../../../node_modules/tippy.js/dist/tippy.esm.js
  var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO2() {
    return document.body;
  };
  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }
  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }
    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === "function" ? value.apply(void 0, args) : value;
  }
  function debounce2(fn3, ms) {
    if (ms === 0) {
      return fn3;
    }
    var timeout;
    return function(arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        fn3(arg);
      }, ms);
    };
  }
  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function(key) {
      delete clone[key];
    });
    return clone;
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique(arr) {
    return arr.filter(function(item, index) {
      return arr.indexOf(item) === index;
    });
  }
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function(acc, key) {
      if (obj[key] !== void 0) {
        acc[key] = obj[key];
      }
      return acc;
    }, {});
  }
  function div() {
    return document.createElement("div");
  }
  function isElement2(value) {
    return ["Element", "Fragment"].some(function(type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, "NodeList");
  }
  function isMouseEvent(value) {
    return isType(value, "MouseEvent");
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement2(value)) {
      return [value];
    }
    if (isNodeList(value)) {
      return arrayFrom(value);
    }
    if (Array.isArray(value)) {
      return value;
    }
    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function(el2) {
      if (el2) {
        el2.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function(el2) {
      if (el2) {
        el2.setAttribute("data-state", state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;
    var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0];
    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX, clientY = event.clientY;
    return popperTreeData.every(function(_ref) {
      var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement2(popperState.placement);
      var offsetData = popperState.modifiersData.offset;
      if (!offsetData) {
        return true;
      }
      var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === "top" ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
      var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method2 = action + "EventListener";
    ["transitionend", "webkitTransitionEnd"].forEach(function(event) {
      box[method2](event, listener);
    });
  }
  function actualContains(parent, child) {
    var target = child;
    while (target) {
      var _target$getRootNode;
      if (parent.contains(target)) {
        return true;
      }
      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }
    return false;
  }
  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }
    currentInput.isTouch = true;
    if (window.performance) {
      document.addEventListener("mousemove", onDocumentMouseMove);
    }
  }
  function onDocumentMouseMove() {
    var now2 = performance.now();
    if (now2 - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener("mousemove", onDocumentMouseMove);
    }
    lastMouseMoveTime = now2;
  }
  function onWindowBlur() {
    var activeElement = document.activeElement;
    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;
      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener("touchstart", onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener("blur", onWindowBlur);
  }
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var isIE11 = isBrowser ? (
    // @ts-ignore
    !!window.msCrypto
  ) : false;
  function createMemoryLeakWarning(method2) {
    var txt = method2 === "destroy" ? "n already-" : " ";
    return [method2 + "() was called on a" + txt + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
  }
  function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
  }
  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\u{1F477}\u200D This is a development-only message. It will be removed in production.\n  ");
  }
  function getFormattedMessage(message) {
    return [
      getDevMessage(message),
      // title
      "color: #00C584; font-size: 1.3em; font-weight: bold;",
      // message
      "line-height: 1.5",
      // footer
      "color: #a6a095;"
    ];
  }
  var visitedMessages;
  if (true) {
    resetVisitedMessages();
  }
  function resetVisitedMessages() {
    visitedMessages = /* @__PURE__ */ new Set();
  }
  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;
      visitedMessages.add(message);
      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }
  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;
      visitedMessages.add(message);
      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }
  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === "[object Object]" && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ["tippy() was passed", "`" + String(targets) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" "));
    errorWhen(didPassPlainObject, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
  }
  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: "fade",
    arrow: true,
    content: "",
    inertia: false,
    maxWidth: 350,
    role: "tooltip",
    theme: "",
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: "auto",
      expanded: "auto"
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: "",
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {
    },
    onBeforeUpdate: function onBeforeUpdate() {
    },
    onCreate: function onCreate() {
    },
    onDestroy: function onDestroy() {
    },
    onHidden: function onHidden() {
    },
    onHide: function onHide() {
    },
    onMount: function onMount() {
    },
    onShow: function onShow() {
    },
    onShown: function onShown() {
    },
    onTrigger: function onTrigger() {
    },
    onUntrigger: function onUntrigger() {
    },
    onClickOutside: function onClickOutside() {
    },
    placement: "top",
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: "mouseenter focus",
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps2(partialProps) {
    if (true) {
      validateProps(partialProps, []);
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps2 = plugins.reduce(function(acc, plugin) {
      var name = plugin.name, defaultValue = plugin.defaultValue;
      if (name) {
        var _name;
        acc[name] = passedProps[name] !== void 0 ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }
      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps2);
  }
  function getDataAttributeProps(reference2, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function(acc, key) {
      var valueAsString = (reference2.getAttribute("data-tippy-" + key) || "").trim();
      if (!valueAsString) {
        return acc;
      }
      if (key === "content") {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }
      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference2, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference2])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference2, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === "auto" ? props.interactive : out.aria.expanded,
      content: out.aria.content === "auto" ? props.interactive ? null : "describedby" : out.aria.content
    };
    return out;
  }
  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }
    if (plugins === void 0) {
      plugins = [];
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop);
      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function(plugin) {
          return plugin.name === prop;
        }).length === 0;
      }
      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", "\n\n", "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n", "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
    });
  }
  var innerHTML = function innerHTML2() {
    return "innerHTML";
  };
  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }
  function createArrowElement(value) {
    var arrow2 = div();
    if (value === true) {
      arrow2.className = ARROW_CLASS;
    } else {
      arrow2.className = SVG_ARROW_CLASS;
      if (isElement2(value)) {
        arrow2.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow2, value);
      }
    }
    return arrow2;
  }
  function setContent(content, props) {
    if (isElement2(props.content)) {
      dangerouslySetInnerHTML(content, "");
      content.appendChild(props.content);
    } else if (typeof props.content !== "function") {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper2) {
    var box = popper2.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box,
      content: boxChildren.find(function(node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function(node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function(node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render(instance) {
    var popper2 = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute("data-state", "hidden");
    box.setAttribute("tabindex", "-1");
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute("data-state", "hidden");
    setContent(content, instance.props);
    popper2.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);
    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper2), box2 = _getChildren.box, content2 = _getChildren.content, arrow2 = _getChildren.arrow;
      if (nextProps.theme) {
        box2.setAttribute("data-theme", nextProps.theme);
      } else {
        box2.removeAttribute("data-theme");
      }
      if (typeof nextProps.animation === "string") {
        box2.setAttribute("data-animation", nextProps.animation);
      } else {
        box2.removeAttribute("data-animation");
      }
      if (nextProps.inertia) {
        box2.setAttribute("data-inertia", "");
      } else {
        box2.removeAttribute("data-inertia");
      }
      box2.style.maxWidth = typeof nextProps.maxWidth === "number" ? nextProps.maxWidth + "px" : nextProps.maxWidth;
      if (nextProps.role) {
        box2.setAttribute("role", nextProps.role);
      } else {
        box2.removeAttribute("role");
      }
      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content2, instance.props);
      }
      if (nextProps.arrow) {
        if (!arrow2) {
          box2.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box2.removeChild(arrow2);
          box2.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow2) {
        box2.removeChild(arrow2);
      }
    }
    return {
      popper: popper2,
      onUpdate
    };
  }
  render.$$tippy = true;
  var idCounter = 1;
  var mouseMoveListeners = [];
  var mountedInstances = [];
  function createTippy(reference2, passedProps) {
    var props = evaluateProps(reference2, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps))));
    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce2(onMouseMove, props.interactiveDebounce);
    var currentTarget;
    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id,
      reference: reference2,
      popper: div(),
      popperInstance,
      props,
      state,
      plugins,
      // methods
      clearDelayTimeouts,
      setProps,
      setContent: setContent2,
      show,
      hide: hide2,
      hideWithInteractivity,
      enable,
      disable,
      unmount,
      destroy
    };
    if (!props.render) {
      if (true) {
        errorWhen(true, "render() function has not been supplied.");
      }
      return instance;
    }
    var _props$render = props.render(instance), popper2 = _props$render.popper, onUpdate = _props$render.onUpdate;
    popper2.setAttribute("data-tippy-root", "");
    popper2.id = "tippy-" + instance.id;
    instance.popper = popper2;
    reference2._tippy = instance;
    popper2._tippy = instance;
    var pluginsHooks = plugins.map(function(plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference2.hasAttribute("aria-expanded");
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook("onCreate", [instance]);
    if (props.showOnCreate) {
      scheduleShow();
    }
    popper2.addEventListener("mouseenter", function() {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper2.addEventListener("mouseleave", function() {
      if (instance.props.interactive && instance.props.trigger.indexOf("mouseenter") >= 0) {
        getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      }
    });
    return instance;
    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }
    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === "hold";
    }
    function getIsDefaultRenderFn() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }
    function getCurrentTarget() {
      return currentTarget || reference2;
    }
    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }
    function getDefaultTemplateChildren() {
      return getChildren(popper2);
    }
    function getDelay(isShow) {
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === "focus") {
        return 0;
      }
      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }
    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }
      popper2.style.pointerEvents = instance.props.interactive && !fromHide ? "" : "none";
      popper2.style.zIndex = "" + instance.props.zIndex;
    }
    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }
      pluginsHooks.forEach(function(pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });
      if (shouldInvokePropsHook) {
        var _instance$props;
        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }
    function handleAriaContentAttribute() {
      var aria = instance.props.aria;
      if (!aria.content) {
        return;
      }
      var attr = "aria-" + aria.content;
      var id2 = popper2.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        var currentValue = node.getAttribute(attr);
        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id2 : id2);
        } else {
          var nextValue = currentValue && currentValue.replace(id2, "").trim();
          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }
    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        if (instance.props.interactive) {
          node.setAttribute("aria-expanded", instance.state.isVisible && node === getCurrentTarget() ? "true" : "false");
        } else {
          node.removeAttribute("aria-expanded");
        }
      });
    }
    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener("mousemove", debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
        return listener !== debouncedOnMouseMove;
      });
    }
    function onDocumentPress(event) {
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === "mousedown") {
          return;
        }
      }
      var actualTarget = event.composedPath && event.composedPath()[0] || event.target;
      if (instance.props.interactive && actualContains(popper2, actualTarget)) {
        return;
      }
      if (normalizeToArray(instance.props.triggerTarget || reference2).some(function(el2) {
        return actualContains(el2, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }
        if (instance.state.isVisible && instance.props.trigger.indexOf("click") >= 0) {
          return;
        }
      } else {
        invokeHook("onClickOutside", [instance, event]);
      }
      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide();
        didHideDueToDocumentMouseDown = true;
        setTimeout(function() {
          didHideDueToDocumentMouseDown = false;
        });
        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }
    function onTouchMove() {
      didTouchMove = true;
    }
    function onTouchStart() {
      didTouchMove = false;
    }
    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener("mousedown", onDocumentPress, true);
      doc.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener("mousedown", onDocumentPress, true);
      doc.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function() {
        if (!instance.state.isVisible && popper2.parentNode && popper2.parentNode.contains(popper2)) {
          callback();
        }
      });
    }
    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }
    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;
      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, "remove", listener);
          callback();
        }
      }
      if (duration === 0) {
        return callback();
      }
      updateTransitionEndListener(box, "remove", currentTransitionEndListener);
      updateTransitionEndListener(box, "add", listener);
      currentTransitionEndListener = listener;
    }
    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node,
          eventType,
          handler,
          options
        });
      });
    }
    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on("touchstart", onTrigger2, {
          passive: true
        });
        on("touchend", onMouseLeave, {
          passive: true
        });
      }
      splitBySpaces(instance.props.trigger).forEach(function(eventType) {
        if (eventType === "manual") {
          return;
        }
        on(eventType, onTrigger2);
        switch (eventType) {
          case "mouseenter":
            on("mouseleave", onMouseLeave);
            break;
          case "focus":
            on(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
            break;
          case "focusin":
            on("focusout", onBlurOrFocusOut);
            break;
        }
      });
    }
    function removeListeners() {
      listeners.forEach(function(_ref) {
        var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }
    function onTrigger2(event) {
      var _lastTriggerEvent;
      var shouldScheduleClickHide = false;
      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }
      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === "focus";
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();
      if (!instance.state.isVisible && isMouseEvent(event)) {
        mouseMoveListeners.forEach(function(listener) {
          return listener(event);
        });
      }
      if (event.type === "click" && (instance.props.trigger.indexOf("mouseenter") < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }
      if (event.type === "click") {
        isVisibleFromClick = !shouldScheduleClickHide;
      }
      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }
    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper2.contains(target);
      if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
        return;
      }
      var popperTreeData = getNestedPopperTree().concat(popper2).map(function(popper3) {
        var _instance$popperInsta;
        var instance2 = popper3._tippy;
        var state2 = (_instance$popperInsta = instance2.popperInstance) == null ? void 0 : _instance$popperInsta.state;
        if (state2) {
          return {
            popperRect: popper3.getBoundingClientRect(),
            popperState: state2,
            props
          };
        }
        return null;
      }).filter(Boolean);
      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }
    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf("click") >= 0 && isVisibleFromClick;
      if (shouldBail) {
        return;
      }
      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }
      scheduleHide(event);
    }
    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf("focusin") < 0 && event.target !== getCurrentTarget()) {
        return;
      }
      if (instance.props.interactive && event.relatedTarget && popper2.contains(event.relatedTarget)) {
        return;
      }
      scheduleHide(event);
    }
    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0 : false;
    }
    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset2 = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
      var arrow2 = getIsDefaultRenderFn() ? getChildren(popper2).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference2;
      var tippyModifier = {
        name: "$$tippy",
        enabled: true,
        phase: "beforeWrite",
        requires: ["computeStyles"],
        fn: function fn3(_ref2) {
          var state2 = _ref2.state;
          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
            ["placement", "reference-hidden", "escaped"].forEach(function(attr) {
              if (attr === "placement") {
                box.setAttribute("data-placement", state2.placement);
              } else {
                if (state2.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, "");
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state2.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: "offset",
        options: {
          offset: offset2
        }
      }, {
        name: "preventOverflow",
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: "flip",
        options: {
          padding: 5
        }
      }, {
        name: "computeStyles",
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];
      if (getIsDefaultRenderFn() && arrow2) {
        modifiers.push({
          name: "arrow",
          options: {
            element: arrow2,
            padding: 3
          }
        });
      }
      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = createPopper(computedReference, popper2, Object.assign({}, popperOptions, {
        placement,
        onFirstUpdate,
        modifiers
      }));
    }
    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }
    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode;
      var node = getCurrentTarget();
      if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === "parent") {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      }
      if (!parentNode.contains(popper2)) {
        parentNode.appendChild(popper2);
      }
      instance.state.isMounted = true;
      createPopperInstance();
      if (true) {
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper2, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", "\n\n", "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", "\n\n", "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", "\n\n", "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
      }
    }
    function getNestedPopperTree() {
      return arrayFrom(popper2.querySelectorAll("[data-tippy-root]"));
    }
    function scheduleShow(event) {
      instance.clearDelayTimeouts();
      if (event) {
        invokeHook("onTrigger", [instance, event]);
      }
      addDocumentPress();
      var delay = getDelay(true);
      var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
      if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
        delay = touchDelay;
      }
      if (delay) {
        showTimeout = setTimeout(function() {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }
    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook("onUntrigger", [instance, event]);
      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      }
      if (instance.props.trigger.indexOf("mouseenter") >= 0 && instance.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }
      var delay = getDelay(false);
      if (delay) {
        hideTimeout = setTimeout(function() {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        scheduleHideAnimationFrame = requestAnimationFrame(function() {
          instance.hide();
        });
      }
    }
    function enable() {
      instance.state.isEnabled = true;
    }
    function disable() {
      instance.hide();
      instance.state.isEnabled = false;
    }
    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }
    function setProps(partialProps) {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("setProps"));
      }
      if (instance.state.isDestroyed) {
        return;
      }
      invokeHook("onBeforeUpdate", [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference2, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();
      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce2(onMouseMove, nextProps.interactiveDebounce);
      }
      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function(node) {
          node.removeAttribute("aria-expanded");
        });
      } else if (nextProps.triggerTarget) {
        reference2.removeAttribute("aria-expanded");
      }
      handleAriaExpandedAttribute();
      handleStyles();
      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }
      if (instance.popperInstance) {
        createPopperInstance();
        getNestedPopperTree().forEach(function(nestedPopper) {
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }
      invokeHook("onAfterUpdate", [instance, partialProps]);
    }
    function setContent2(content) {
      instance.setProps({
        content
      });
    }
    function show() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("show"));
      }
      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      }
      if (getCurrentTarget().hasAttribute("disabled")) {
        return;
      }
      invokeHook("onShow", [instance], false);
      if (instance.props.onShow(instance) === false) {
        return;
      }
      instance.state.isVisible = true;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "visible";
      }
      handleStyles();
      addDocumentPress();
      if (!instance.state.isMounted) {
        popper2.style.transition = "none";
      }
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;
        setTransitionDuration([box, content], 0);
      }
      onFirstUpdate = function onFirstUpdate2() {
        var _instance$popperInsta2;
        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }
        ignoreOnFirstUpdate = true;
        void popper2.offsetHeight;
        popper2.style.transition = instance.props.moveTransition;
        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], "visible");
        }
        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance);
        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook("onMount", [instance]);
        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function() {
            instance.state.isShown = true;
            invokeHook("onShown", [instance]);
          });
        }
      };
      mount();
    }
    function hide2() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hide"));
      }
      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }
      invokeHook("onHide", [instance], false);
      if (instance.props.onHide(instance) === false) {
        return;
      }
      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "hidden";
      }
      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;
        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], "hidden");
        }
      }
      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }
    function hideWithInteractivity(event) {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hideWithInteractivity"));
      }
      getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }
    function unmount() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("unmount"));
      }
      if (instance.state.isVisible) {
        instance.hide();
      }
      if (!instance.state.isMounted) {
        return;
      }
      destroyPopperInstance();
      getNestedPopperTree().forEach(function(nestedPopper) {
        nestedPopper._tippy.unmount();
      });
      if (popper2.parentNode) {
        popper2.parentNode.removeChild(popper2);
      }
      mountedInstances = mountedInstances.filter(function(i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook("onHidden", [instance]);
    }
    function destroy() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("destroy"));
      }
      if (instance.state.isDestroyed) {
        return;
      }
      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference2._tippy;
      instance.state.isDestroyed = true;
      invokeHook("onDestroy", [instance]);
    }
  }
  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }
    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    if (true) {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins
    });
    var elements = getArrayOfElements(targets);
    if (true) {
      var isSingleContentElement = isElement2(passedProps.content);
      var isMoreThanOneReferenceElement = elements.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", "\n\n", "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", "\n\n", "1) content: element.innerHTML\n", "2) content: () => element.cloneNode(true)"].join(" "));
    }
    var instances = elements.reduce(function(acc, reference2) {
      var instance = reference2 && createTippy(reference2, passedProps);
      if (instance) {
        acc.push(instance);
      }
      return acc;
    }, []);
    return isElement2(targets) ? instances[0] : instances;
  }
  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;
  var hideAll = function hideAll2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, excludedReferenceOrInstance = _ref.exclude, duration = _ref.duration;
    mountedInstances.forEach(function(instance) {
      var isExcluded = false;
      if (excludedReferenceOrInstance) {
        isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
      }
      if (!isExcluded) {
        var originalDuration = instance.props.duration;
        instance.setProps({
          duration
        });
        instance.hide();
        if (!instance.state.isDestroyed) {
          instance.setProps({
            duration: originalDuration
          });
        }
      }
    });
  };
  var applyStylesModifier = Object.assign({}, applyStyles_default, {
    effect: function effect4(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
    }
  });
  var mouseCoords = {
    clientX: 0,
    clientY: 0
  };
  var activeInstances = [];
  function storeMouseCoords(_ref) {
    var clientX = _ref.clientX, clientY = _ref.clientY;
    mouseCoords = {
      clientX,
      clientY
    };
  }
  function addMouseCoordsListener(doc) {
    doc.addEventListener("mousemove", storeMouseCoords);
  }
  function removeMouseCoordsListener(doc) {
    doc.removeEventListener("mousemove", storeMouseCoords);
  }
  var followCursor = {
    name: "followCursor",
    defaultValue: false,
    fn: function fn2(instance) {
      var reference2 = instance.reference;
      var doc = getOwnerDocument(instance.props.triggerTarget || reference2);
      var isInternalUpdate = false;
      var wasFocusEvent = false;
      var isUnmounted = true;
      var prevProps = instance.props;
      function getIsInitialBehavior() {
        return instance.props.followCursor === "initial" && instance.state.isVisible;
      }
      function addListener() {
        doc.addEventListener("mousemove", onMouseMove);
      }
      function removeListener() {
        doc.removeEventListener("mousemove", onMouseMove);
      }
      function unsetGetReferenceClientRect() {
        isInternalUpdate = true;
        instance.setProps({
          getReferenceClientRect: null
        });
        isInternalUpdate = false;
      }
      function onMouseMove(event) {
        var isCursorOverReference = event.target ? reference2.contains(event.target) : true;
        var followCursor2 = instance.props.followCursor;
        var clientX = event.clientX, clientY = event.clientY;
        var rect = reference2.getBoundingClientRect();
        var relativeX = clientX - rect.left;
        var relativeY = clientY - rect.top;
        if (isCursorOverReference || !instance.props.interactive) {
          instance.setProps({
            // @ts-ignore - unneeded DOMRect properties
            getReferenceClientRect: function getReferenceClientRect() {
              var rect2 = reference2.getBoundingClientRect();
              var x = clientX;
              var y = clientY;
              if (followCursor2 === "initial") {
                x = rect2.left + relativeX;
                y = rect2.top + relativeY;
              }
              var top2 = followCursor2 === "horizontal" ? rect2.top : y;
              var right2 = followCursor2 === "vertical" ? rect2.right : x;
              var bottom2 = followCursor2 === "horizontal" ? rect2.bottom : y;
              var left2 = followCursor2 === "vertical" ? rect2.left : x;
              return {
                width: right2 - left2,
                height: bottom2 - top2,
                top: top2,
                right: right2,
                bottom: bottom2,
                left: left2
              };
            }
          });
        }
      }
      function create2() {
        if (instance.props.followCursor) {
          activeInstances.push({
            instance,
            doc
          });
          addMouseCoordsListener(doc);
        }
      }
      function destroy() {
        activeInstances = activeInstances.filter(function(data) {
          return data.instance !== instance;
        });
        if (activeInstances.filter(function(data) {
          return data.doc === doc;
        }).length === 0) {
          removeMouseCoordsListener(doc);
        }
      }
      return {
        onCreate: create2,
        onDestroy: destroy,
        onBeforeUpdate: function onBeforeUpdate2() {
          prevProps = instance.props;
        },
        onAfterUpdate: function onAfterUpdate2(_, _ref2) {
          var followCursor2 = _ref2.followCursor;
          if (isInternalUpdate) {
            return;
          }
          if (followCursor2 !== void 0 && prevProps.followCursor !== followCursor2) {
            destroy();
            if (followCursor2) {
              create2();
              if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {
                addListener();
              }
            } else {
              removeListener();
              unsetGetReferenceClientRect();
            }
          }
        },
        onMount: function onMount2() {
          if (instance.props.followCursor && !wasFocusEvent) {
            if (isUnmounted) {
              onMouseMove(mouseCoords);
              isUnmounted = false;
            }
            if (!getIsInitialBehavior()) {
              addListener();
            }
          }
        },
        onTrigger: function onTrigger2(_, event) {
          if (isMouseEvent(event)) {
            mouseCoords = {
              clientX: event.clientX,
              clientY: event.clientY
            };
          }
          wasFocusEvent = event.type === "focus";
        },
        onHidden: function onHidden2() {
          if (instance.props.followCursor) {
            unsetGetReferenceClientRect();
            removeListener();
            isUnmounted = true;
          }
        }
      };
    }
  };
  tippy.setDefaultProps({
    render
  });
  var tippy_esm_default = tippy;

  // libs/tippy.js
  tippy_esm_default.setDefaultProps({
    arrow: ROUND_ARROW,
    interactive: true,
    allowHTML: true,
    theme: "custom-light-border",
    plugins: [followCursor]
  });
  var tippy_default = tippy_esm_default;

  // controllers/tooltip_controller.js
  var tooltip_controller_default = class extends application_controller_default {
    initialize() {
      this.tippy = tippy_default(this.element, {
        theme: this.element.getAttribute("data-tooltip-theme") || "dark",
        placement: "top",
        duration: [0, 0],
        maxWidth: "160px",
        content: (ref) => ref.getAttribute("data-tooltip-text")
      });
      this.observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.attributeName === "data-tooltip-text") {
            this.tippy.setContent(this.data.get("text"));
          }
        });
      });
    }
    connect() {
      super.connect();
      this.observer.observe(this.element, { attributes: true });
    }
    disconnect() {
      this.observer.disconnect();
      super.disconnect();
    }
  };

  // ../../../node_modules/@github/hotkey/dist/index.js
  var Leaf = class {
    constructor(trie) {
      this.children = [];
      this.parent = trie;
    }
    delete(value) {
      const index = this.children.indexOf(value);
      if (index === -1)
        return false;
      this.children = this.children.slice(0, index).concat(this.children.slice(index + 1));
      if (this.children.length === 0) {
        this.parent.delete(this);
      }
      return true;
    }
    add(value) {
      this.children.push(value);
      return this;
    }
  };
  var RadixTrie = class _RadixTrie {
    constructor(trie) {
      this.parent = null;
      this.children = {};
      this.parent = trie || null;
    }
    get(edge) {
      return this.children[edge];
    }
    insert(edges) {
      let currentNode = this;
      for (let i = 0; i < edges.length; i += 1) {
        const edge = edges[i];
        let nextNode = currentNode.get(edge);
        if (i === edges.length - 1) {
          if (nextNode instanceof _RadixTrie) {
            currentNode.delete(nextNode);
            nextNode = null;
          }
          if (!nextNode) {
            nextNode = new Leaf(currentNode);
            currentNode.children[edge] = nextNode;
          }
          return nextNode;
        } else {
          if (nextNode instanceof Leaf)
            nextNode = null;
          if (!nextNode) {
            nextNode = new _RadixTrie(currentNode);
            currentNode.children[edge] = nextNode;
          }
        }
        currentNode = nextNode;
      }
      return currentNode;
    }
    delete(node) {
      for (const edge in this.children) {
        const currentNode = this.children[edge];
        if (currentNode === node) {
          const success = delete this.children[edge];
          if (Object.keys(this.children).length === 0 && this.parent) {
            this.parent.delete(this);
          }
          return success;
        }
      }
      return false;
    }
  };
  function eventToHotkeyString(event) {
    const { ctrlKey, altKey, metaKey, key } = event;
    const hotkeyString = [];
    const modifiers = [ctrlKey, altKey, metaKey, showShift(event)];
    for (const [i, mod] of modifiers.entries()) {
      if (mod)
        hotkeyString.push(modifierKeyNames[i]);
    }
    if (!modifierKeyNames.includes(key)) {
      hotkeyString.push(key);
    }
    return hotkeyString.join("+");
  }
  var modifierKeyNames = ["Control", "Alt", "Meta", "Shift"];
  function showShift(event) {
    const { shiftKey, code: code3, key } = event;
    return shiftKey && !(code3.startsWith("Key") && key.toUpperCase() === key);
  }
  function normalizeHotkey(hotkey, platform) {
    let result;
    result = localizeMod(hotkey, platform);
    result = sortModifiers(result);
    return result;
  }
  var matchApplePlatform = /Mac|iPod|iPhone|iPad/i;
  function localizeMod(hotkey, platform = navigator.platform) {
    const localModifier = matchApplePlatform.test(platform) ? "Meta" : "Control";
    return hotkey.replace("Mod", localModifier);
  }
  function sortModifiers(hotkey) {
    const key = hotkey.split("+").pop();
    const modifiers = [];
    for (const modifier of ["Control", "Alt", "Meta", "Shift"]) {
      if (hotkey.includes(modifier)) {
        modifiers.push(modifier);
      }
    }
    modifiers.push(key);
    return modifiers.join("+");
  }
  var SEQUENCE_DELIMITER = " ";
  var SequenceTracker = class _SequenceTracker {
    constructor({ onReset } = {}) {
      this._path = [];
      this.timer = null;
      this.onReset = onReset;
    }
    get path() {
      return this._path;
    }
    get sequence() {
      return this._path.join(SEQUENCE_DELIMITER);
    }
    registerKeypress(event) {
      this._path = [...this._path, eventToHotkeyString(event)];
      this.startTimer();
    }
    reset() {
      var _a;
      this.killTimer();
      this._path = [];
      (_a = this.onReset) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    killTimer() {
      if (this.timer != null) {
        window.clearTimeout(this.timer);
      }
      this.timer = null;
    }
    startTimer() {
      this.killTimer();
      this.timer = window.setTimeout(() => this.reset(), _SequenceTracker.CHORD_TIMEOUT);
    }
  };
  SequenceTracker.CHORD_TIMEOUT = 1500;
  function isFormField(element) {
    if (!(element instanceof HTMLElement)) {
      return false;
    }
    const name = element.nodeName.toLowerCase();
    const type = (element.getAttribute("type") || "").toLowerCase();
    return name === "select" || name === "textarea" || name === "input" && type !== "submit" && type !== "reset" && type !== "checkbox" && type !== "radio" && type !== "file" || element.isContentEditable;
  }
  function fireDeterminedAction(el2, path) {
    const delegateEvent = new CustomEvent("hotkey-fire", { cancelable: true, detail: { path } });
    const cancelled = !el2.dispatchEvent(delegateEvent);
    if (cancelled)
      return;
    if (isFormField(el2)) {
      el2.focus();
    } else {
      el2.click();
    }
  }
  function expandHotkeyToEdges(hotkey) {
    const output = [];
    let acc = [""];
    let commaIsSeparator = false;
    for (let i = 0; i < hotkey.length; i++) {
      if (commaIsSeparator && hotkey[i] === ",") {
        output.push(acc);
        acc = [""];
        commaIsSeparator = false;
        continue;
      }
      if (hotkey[i] === SEQUENCE_DELIMITER) {
        acc.push("");
        commaIsSeparator = false;
        continue;
      } else if (hotkey[i] === "+") {
        commaIsSeparator = false;
      } else {
        commaIsSeparator = true;
      }
      acc[acc.length - 1] += hotkey[i];
    }
    output.push(acc);
    return output.map((h) => h.map((k) => normalizeHotkey(k)).filter((k) => k !== "")).filter((h) => h.length > 0);
  }
  var hotkeyRadixTrie = new RadixTrie();
  var elementsLeaves = /* @__PURE__ */ new WeakMap();
  var currentTriePosition = hotkeyRadixTrie;
  var sequenceTracker = new SequenceTracker({
    onReset() {
      currentTriePosition = hotkeyRadixTrie;
    }
  });
  function keyDownHandler(event) {
    if (event.defaultPrevented)
      return;
    if (!(event.target instanceof Node))
      return;
    if (isFormField(event.target)) {
      const target = event.target;
      if (!target.id)
        return;
      if (!target.ownerDocument.querySelector(`[data-hotkey-scope="${target.id}"]`))
        return;
    }
    const newTriePosition = currentTriePosition.get(eventToHotkeyString(event));
    if (!newTriePosition) {
      sequenceTracker.reset();
      return;
    }
    sequenceTracker.registerKeypress(event);
    currentTriePosition = newTriePosition;
    if (newTriePosition instanceof Leaf) {
      const target = event.target;
      let shouldFire = false;
      let elementToFire;
      const formField = isFormField(target);
      for (let i = newTriePosition.children.length - 1; i >= 0; i -= 1) {
        elementToFire = newTriePosition.children[i];
        const scope = elementToFire.getAttribute("data-hotkey-scope");
        if (!formField && !scope || formField && target.id === scope) {
          shouldFire = true;
          break;
        }
      }
      if (elementToFire && shouldFire) {
        fireDeterminedAction(elementToFire, sequenceTracker.path);
        event.preventDefault();
      }
      sequenceTracker.reset();
    }
  }
  function install(element, hotkey) {
    if (Object.keys(hotkeyRadixTrie.children).length === 0) {
      document.addEventListener("keydown", keyDownHandler);
    }
    const hotkeys2 = expandHotkeyToEdges(hotkey || element.getAttribute("data-hotkey") || "");
    const leaves = hotkeys2.map((h) => hotkeyRadixTrie.insert(h).add(element));
    elementsLeaves.set(element, leaves);
  }
  function uninstall(element) {
    const leaves = elementsLeaves.get(element);
    if (leaves && leaves.length) {
      for (const leaf of leaves) {
        leaf && leaf.delete(element);
      }
    }
    if (Object.keys(hotkeyRadixTrie.children).length === 0) {
      document.removeEventListener("keydown", keyDownHandler);
    }
  }

  // controllers/hotkey_controller.js
  var hotkey_controller_default = class extends application_controller_default {
    initialize() {
      if (this.hasShortcutTarget) {
        this.shortcutTarget.innerHTML = this.shortcutTarget.textContent.replace("Control+", "^");
      }
    }
    connect() {
      if (this.disabled)
        return;
      install(this.element);
    }
    disconnect() {
      uninstall(this.element);
    }
    get disabled() {
      return document.body.hasAttribute("data-hotkeys-disabled");
    }
  };
  __publicField(hotkey_controller_default, "targets", ["shortcut"]);

  // controllers/trigger_controller.js
  var trigger_controller_default = class extends application_controller_default {
    initialize() {
      this.trigger = this.trigger.bind(this);
      this.target = this.data.get("target");
      if (!this.target) {
        console.error("Missing `data-trigger-target` attribute from trigger element");
      }
      this.event = this.data.get("event") || "show";
      super.initialize();
    }
    get(propName) {
      return this.data.get(propName);
    }
    connect() {
      this.element.addEventListener("click", this.trigger);
      super.connect();
    }
    disconnect() {
      super.disconnect();
      this.element.removeEventListener("click", this.trigger);
    }
    trigger(e) {
      if (e.target.dataset.trigger !== "false") {
        e.preventDefault();
        setTimeout(() => {
          const target = document.querySelector(this.target);
          if (target) {
            dispatchEvent2(target, "show", { trigger: this });
          } else {
            this.dispatch("trigger:error");
          }
        }, 0);
      }
    }
  };

  // helpers/timing.js
  function nextTick(fn3) {
    return Promise.resolve().then(fn3);
  }

  // ../../components/dropdown/component_controller.js
  var component_controller_default = class extends application_controller_default {
    initialize() {
      this.reset = this.reset.bind(this);
      this.instance = tippy_default(this.triggerTarget, {
        content: this.menuTarget.outerHTML
      });
    }
    connect() {
      super.connect();
      this.on("ajax:complete", this.reset);
    }
    disconnect() {
      this.off("ajax:complete", this.reset);
      super.disconnect();
    }
    updateContent() {
      this.instance.setContent(this.menuTarget.outerHTML);
    }
    reset() {
      this.instance.destroy();
      nextTick(() => {
        this.instance = tippy_default(this.triggerTarget, {
          content: this.menuTarget.outerHTML
        });
      });
    }
    hide() {
      if (this.instance.state.isShown) {
        this.instance.hide();
      }
    }
    stopProp(event) {
      event.stopPropagation();
      event.preventDefault();
    }
  };
  __publicField(component_controller_default, "targets", ["trigger", "menu"]);

  // helpers/rails.js
  function getCSRFToken() {
    return document.querySelector("meta[name=csrf-token]").content;
  }

  // helpers/request.js
  function fetchHTML(url, selector = null, method2 = "get") {
    return fetch(url, {
      method: method2,
      headers: {
        "X-CSRF-Token": getCSRFToken()
      },
      credentials: "same-origin"
    }).then((response) => {
      if (response.ok) {
        return response.text();
      }
      throw new Error("Error fetching HTML");
    }).then((text) => {
      const el2 = document.createElement("template");
      el2.innerHTML = text;
      return el2.content;
    }).then((html) => {
      if (!selector)
        return html;
      const node = html.querySelector(selector);
      if (node) {
        return node;
      }
      throw new Error(
        `No content found for selector ${selector} on page ${url}`
      );
    });
  }

  // ../../components/modal/component_controller.js
  var LOADING_CLASS = "modal-loading";
  var SIZE_CLASSES = ["modal-sm", "modal-md", "modal-lg", "modal-xl"];
  var modals = [];
  var component_controller_default2 = class extends application_controller_default {
    initialize() {
      super.initialize();
      this.show = this.show.bind(this);
      this.hide = this.hide.bind(this);
      this.group = [];
      this.currentGroupIndex = null;
      this.shouldReset = false;
      this.handleClick = this.handleClick.bind(this);
      this.originalContent = this.hasContentTarget ? this.contentTarget.innerHTML : null;
      this.originalTitle = this.hasTitleTarget ? this.titleTarget.innerHTML : null;
      this.visible = this.data.get("show") === "true";
      modals.push(this);
    }
    connect() {
      super.connect();
      this.on("show", this.show);
      this.on("hide", this.hide);
      this.on("click", this.handleClick);
    }
    disconnect() {
      super.disconnect();
      this.off("show", this.show);
      this.off("hide", this.hide);
      this.off("click", this.handleClick);
    }
    show(event) {
      return __async(this, null, function* () {
        hideAll();
        if (event && event.detail && event.detail.trigger) {
          const { trigger: trigger2 } = event.detail;
          const props = getTriggerProps(trigger2);
          yield this.loadContent(props);
          if (props.hideOthers) {
            modals.forEach((modal) => {
              if (modal !== this) {
                modal.hide();
              }
            });
          }
          this.setSize(props.size);
          this.setGroup(props.group, trigger2);
          this.dispatch("modal:trigger", { trigger: trigger2, modal: this });
        }
        if (!this.visible) {
          this.toggle(event);
        }
        disableBodyScroll(true, "[data-modal-target=content]");
      });
    }
    handleClick(event) {
      if (event.target.getAttribute("data-dismiss") === "modal") {
        this.hide(event);
      }
    }
    hide(event) {
      if (this.visible) {
        this.toggle(event);
        this.dispatch("modal:hidden", { modal: this });
      }
      this.resetContent();
      disableBodyScroll(false, "[data-modal-target=content]");
    }
    toggle(event) {
      if (event) {
        event.preventDefault();
      }
      this.classList.toggle("fixed");
      this.classList.toggle("hidden");
      this.visible = !this.visible;
      this.data.set("show", this.visible);
    }
    focus() {
      const input = this.contentTarget.querySelector(
        "input:not([type=hidden]), textarea, select"
      );
      if (input) {
        window.setTimeout(() => {
          input.focus();
        }, 0);
      }
    }
    clearContent() {
      if (this.hasTitleTarget) {
        while (this.titleTarget.lastChild) {
          this.titleTarget.removeChild(this.titleTarget.lastChild);
        }
      }
      if (this.hasContentTarget) {
        while (this.contentTarget.lastChild) {
          this.contentTarget.removeChild(this.contentTarget.lastChild);
        }
      }
    }
    setContent(content, title, dispatch4 = true) {
      this.clearContent();
      if (title && this.hasTitleTarget) {
        if (typeof title === "string") {
          this.titleTarget.innerHTML = title;
        } else {
          this.titleTarget.appendChild(title);
        }
      }
      if (content) {
        if (typeof content === "string") {
          this.contentTarget.innerHTML = content;
        } else {
          this.contentTarget.appendChild(content);
        }
      }
      this.focus();
      if (dispatch4) {
        dispatchEvent2(this.contentTarget, "modal:content-loaded", {
          content,
          title,
          modal: this
        });
      }
    }
    loadContent({ url, selector, title, method: method2 }) {
      this.shouldReset = false;
      if (url === null) {
        return;
      }
      this.classList.add(LOADING_CLASS);
      if (url === "#" || url === window.location.pathname) {
        return Promise.resolve().then(() => {
          const content = document.querySelector(selector);
          if (content) {
            this.shouldReset = true;
            const modalTitle = title || content.getAttribute("data-modal-title");
            this.classList.remove(LOADING_CLASS);
            return this.setContent(content.outerHTML, modalTitle);
          }
        });
      } else {
        this.shouldReset = true;
        url = appendModalQueryParam(url);
        return fetchHTML(url, selector, method2).then((content) => {
          const modalTitle = title || content.getAttribute("data-modal-title");
          this.classList.remove(LOADING_CLASS);
          return this.setContent(content, modalTitle);
        }).catch((err) => {
          this.classList.remove(LOADING_CLASS);
          console.error(err);
        });
      }
    }
    resetContent() {
      if (this.shouldReset) {
        this.setContent(this.originalContent, this.originalTitle);
      }
      if (this.hasNextTarget) {
        this.nextTarget.classList.add("hidden");
      }
      if (this.hasPrevTarget) {
        this.prevTarget.classList.add("hidden");
      }
    }
    setSize(size) {
      const targetSize = size || this.data.get("size");
      SIZE_CLASSES.forEach((cls) => this.element.classList.remove(cls));
      if (targetSize) {
        this.element.classList.add(`modal-${targetSize}`);
      }
    }
    setGroup(group, trigger2) {
      if (!group) {
        return;
      }
      const groupTriggers = Array.from(
        document.querySelectorAll(`[data-trigger-group="${group}"]`)
      );
      if (groupTriggers.length < 2) {
        return;
      }
      this.group = groupTriggers;
      this.currentGroupIndex = groupTriggers.indexOf(trigger2) + 1;
      if (this.hasNextTarget) {
        this.nextTarget.classList.remove("hidden");
      }
      if (this.hasPrevTarget) {
        this.prevTarget.classList.remove("hidden");
      }
    }
    prev(event) {
      event.preventDefault();
      let prev = this.currentGroupIndex - 1;
      prev = prev < 0 ? this.group.length - 1 : prev;
      this.loadContent(getTriggerProps(this.group[prev]));
      this.currentGroupIndex = prev;
    }
    next(event) {
      event.preventDefault();
      let next = this.currentGroupIndex + 1;
      next = next >= this.group.length ? 0 : next;
      this.loadContent(getTriggerProps(this.group[next]));
      this.currentGroupIndex = next;
    }
    handleEscape(event) {
      if (event.keyCode === 27 && this.visible) {
        this.hide(event);
      }
    }
  };
  __publicField(component_controller_default2, "targets", ["close", "content", "title", "prev", "next"]);
  function appendModalQueryParam(url) {
    return url + (url.indexOf("?") > -1 ? "&" : "?") + "modal-fetch=true";
  }
  function getTriggerProps(trigger2) {
    trigger2 = trigger2 instanceof trigger_controller_default ? trigger2 : getController(trigger2, trigger_controller_default);
    return {
      selector: trigger2.get("selector"),
      title: trigger2.get("title"),
      size: trigger2.get("size"),
      group: trigger2.get("group"),
      hideOthers: trigger2.get("hide-others") === "true",
      url: trigger2.get("url") ? trigger2.get("url") : trigger2.element.getAttribute("href"),
      method: trigger2.get("method") || "get"
    };
  }

  // ../../components/video_player/component_controller.js
  var import_videojs_kit = __toESM(require_dist());
  var component_controller_default3 = class extends application_controller_default {
    connect() {
      super.connect();
      (0, import_videojs_kit.default)(this.playerTarget);
    }
  };
  __publicField(component_controller_default3, "targets", ["player"]);

  // ../../components/embed_facebook/component_controller.js
  (function(d, s, id) {
    let js;
    const fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) {
      return;
    }
    js = d.createElement(s);
    js.id = id;
    js.src = "https://connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  })(document, "script", "facebook-jssdk");
  if (!window.fbAsyncInit) {
    window.fbAsyncInit = () => {
      window.FB.init({
        appId: "1203575449674135",
        autoLogAppEvents: true,
        xfbml: true,
        version: "v8.0"
      });
    };
  }
  var component_controller_default4 = class extends application_controller_default {
    connect() {
      if (window.FB) {
        window.FB.XFBML.parse(this.element);
      }
    }
  };

  // ../../components/embed_instagram/component_controller.js
  var component_controller_default5 = class extends application_controller_default {
    initialize() {
      super.initialize();
      this.processPost();
    }
    processPost() {
      if (typeof window.instgrm === "undefined") {
        setTimeout(this.processPost, 100);
      } else {
        window.instgrm.Embeds.process();
      }
    }
  };

  // ../../components/embed_twitter/component_controller.js
  var twitterLoaded = false;
  var component_controller_default6 = class extends application_controller_default {
    initialize() {
      super.initialize();
      if (this.hasTweetTarget) {
        loadTwitterJs();
        window.twttr.ready((twttr) => {
          this.createTweet(twttr);
        });
      }
    }
    createTweet(twttr) {
      const tweetId = this.data.get("id");
      twttr.widgets.createTweet(tweetId, this.tweetTarget, {
        conversation: "none",
        cards: "visible",
        dnt: "true"
      });
    }
  };
  __publicField(component_controller_default6, "targets", ["tweet"]);
  function loadTwitterJs() {
    if (twitterLoaded)
      return;
    window.twttr = ((d, s, id) => {
      const fjs = d.getElementsByTagName(s)[0];
      const t = window.twttr || {};
      if (d.getElementById(id))
        return t;
      const js = d.createElement(s);
      js.id = id;
      js.src = "https://platform.twitter.com/widgets.js";
      fjs.parentNode.insertBefore(js, fjs);
      t._e = [];
      t.ready = (f) => t._e.push(f);
      return t;
    })(document, "script", "twitter-wjs");
    twitterLoaded = true;
  }

  // behaviours/use_bindings.js
  var import_uniq = __toESM(require_uniq());

  // helpers/observer.js
  function getPath(path, prop) {
    if (path.length !== 0)
      return path + "." + prop;
    else
      return prop;
  }
  function _create(target, validator, path, lastInPath) {
    var proxies = {};
    var proxyHandler = {
      get: function get(target2, prop) {
        if (prop === "__target")
          return target2;
        if (prop === "__isProxy")
          return true;
        var value = target2[prop];
        if (typeof value === "function") {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (validator({
              path,
              property: lastInPath,
              target: target2,
              type: "function-call",
              function: prop,
              arguments: args
            })) {
              return value.apply(this.__isProxy ? this.__target : this, args);
            }
          };
        } else if (typeof value === "object" && value !== null && target2.hasOwnProperty(prop)) {
          var existingProxy = proxies[prop];
          if (existingProxy && existingProxy.__target === value) {
            return existingProxy;
          } else {
            var proxy = _create(value, validator, getPath(path, prop), prop);
            proxies[prop] = proxy;
            return proxy;
          }
        } else {
          return value;
        }
      },
      set: function set(target2, prop, value) {
        if (validator({
          path: getPath(path, prop),
          target: target2,
          type: "set-prop",
          property: prop,
          newValue: value
        })) {
          target2[prop] = value;
        }
        return true;
      },
      deleteProperty: function deleteProperty(target2, prop) {
        if (validator({
          path: getPath(path, prop),
          target: target2,
          type: "delete-prop",
          property: prop,
          newValue: null
        })) {
          delete target2[prop];
        }
        return true;
      }
    };
    return new Proxy(target, proxyHandler);
  }
  var Observer = {
    create: function create(target, validator) {
      return _create(target, validator, "", "");
    }
  };
  var observer_default = Observer;

  // helpers/lang.js
  function bindAllMethods(target, ref, filter2) {
    const getAllProperties = (object) => {
      let properties = [];
      do {
        properties = properties.concat(Reflect.ownKeys(object));
      } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
      return properties;
    };
    getAllProperties(target.constructor.prototype).filter(filter2 || (() => true)).map((key) => {
      if (target[key] instanceof Function && key !== "constructor") {
        target[key] = target[key].bind(ref);
      }
    });
  }

  // behaviours/use_bindings.js
  function useBindings(controller) {
    const { element, connect, identifier } = controller;
    const controllerConnect = connect || (() => {
    });
    element.__bindings = identifier;
    Object.assign(controller, saferEval(element.getAttribute("data-bind-props") || "{}", {}));
    const watched = observer_default.create(controller, (change) => {
      if (change.property) {
        nextTick(() => updateElements(controller, watched));
      }
      return true;
    });
    Object.assign(controller, {
      connect() {
        controllerConnect.bind(watched)();
      },
      updateBindings() {
        updateElements(this, watched);
      },
      set(name, value) {
        watched[name] = value;
      },
      get(name) {
        return watched[name];
      }
    });
    bindAllMethods(controller, watched, (name) => !name.match(/^(.*)(Target|Value|Class)$/));
    nextTick(() => updateElements(controller, watched, true));
  }
  function updateElements(controller, props, initial) {
    walkAndSkip(
      controller.element,
      (el2) => {
        const attrMatcher = new RegExp(`^data-(${controller.identifier}-)?(bind-class|bind|on-.*)`);
        const attrs = getAttributes(el2, (name) => name.match(attrMatcher));
        attrs.forEach(({ name, value }) => {
          name = name.replace("data-", "").replace(`${controller.identifier}-`, "");
          if (initial && name.indexOf("on-") === 0) {
            registerListener(el2, name.replace("on-", ""), value, props, controller);
          } else if (name === "bind-class") {
            resolveClassBindings(el2, value, props);
          } else if (name !== "bind-props" && name.indexOf("bind-") === 0) {
            const type = name.replace("bind-", "");
            resolveBindings(el2, type, value, props);
          }
        });
        if (el2.hasAttribute("data-cloak")) {
          el2.removeAttribute("data-cloak");
        }
      },
      (el2) => el2.__bindings
    );
  }
  function resolveBindings(el2, type, expression, props = {}) {
    const value = saferEval(expression, props);
    if (type === "text") {
      el2.textContent = value;
    } else if (type === "html") {
      el2.innerHTML = value;
    } else if (type === "value") {
      if (el2.value !== value) {
        el2.value = value;
      }
    } else {
      el2.setAttribute(type, value);
    }
  }
  function resolveClassBindings(el2, expression, props = {}) {
    const value = saferEval(expression, props);
    if (el2.hasAttribute("class") && !el2.__original_classes) {
      el2.__original_classes = splitWhitespace(el2.getAttribute("class"));
    }
    const originalClasses = el2.__original_classes || [];
    if (Array.isArray(value)) {
      el2.setAttribute("class", (0, import_uniq.default)(originalClasses.concat(value)).join(" "));
    } else if (typeof value === "object") {
      const sortedKeys = Object.keys(value).sort((a, b) => value[a] - value[b]);
      sortedKeys.forEach((classNames) => {
        const intent = value[classNames] ? "add" : "remove";
        splitWhitespace(classNames).forEach((className) => el2.classList[intent](className));
      });
    } else {
      const newClasses = splitWhitespace(value);
      el2.setAttribute("class", (0, import_uniq.default)(originalClasses.concat(newClasses)).join(" "));
    }
  }
  function registerListener(el2, eventStr, expression, props, controller) {
    const typeMatch = eventStr.match(/([a-zA-Z0-9\-:]+)/);
    if (typeMatch) {
      const type = typeMatch[1];
      const modifierMatches = eventStr.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
      const modifiers = modifierMatches.map((i) => i.replace(".", ""));
      const options = {
        passive: modifiers.includes("passive")
      };
      const listenerTarget = modifiers.includes("window") ? window : modifiers.includes("document") ? document : el2;
      const handler = (event) => {
        if (listenerTarget === window || listenerTarget === document) {
          if (!document.body.contains(el2)) {
            listenerTarget.removeEventListener(type, handler, options);
            return;
          }
        }
        if (modifiers.includes("prevent"))
          event.preventDefault();
        if (modifiers.includes("stop"))
          event.stopPropagation();
        if (!modifiers.includes("self") || event.target === el2) {
          const returnValue = saferEvalNoReturn(expression, props, {
            $event: event,
            $dispatch: (eventName, data) => dispatchEvent2(controller.element, eventName, data)
          });
          if (returnValue === false) {
            event.preventDefault();
          } else if (modifiers.includes("once")) {
            listenerTarget.removeEventListener(type, handler, options);
          }
        }
      };
      listenerTarget.addEventListener(type, handler, options);
    }
  }

  // ../../components/public_clip_media_browser/component_controller.js
  var component_controller_default7 = class extends application_controller_default {
    initialize() {
      super.initialize();
      this.current = 0;
      useBindings(this);
    }
  };

  // controllers/untruncate_controller.js
  var untruncate_controller_default = class extends application_controller_default {
    initialize() {
      this.timeout = null;
      this.untruncate = this.untruncate.bind(this);
      this.reset = this.reset.bind(this);
      this.on("mouseover", this.untruncate);
      this.on("mouseout", this.reset);
    }
    untruncate() {
      clearTimeout(this.timeout);
      this.timeout = setTimeout(() => {
        this.expandableTarget.classList.add("!truncate-100-lines");
      }, 500);
    }
    reset() {
      clearTimeout(this.timeout);
      this.expandableTarget.classList.remove("!truncate-100-lines");
    }
  };
  __publicField(untruncate_controller_default, "targets", ["expandable"]);

  // ../../../node_modules/hotkeys-js/dist/hotkeys.esm.js
  var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
  function addEvent(object, event, method2, useCapture) {
    if (object.addEventListener) {
      object.addEventListener(event, method2, useCapture);
    } else if (object.attachEvent) {
      object.attachEvent("on".concat(event), function() {
        method2(window.event);
      });
    }
  }
  function getMods(modifier, key) {
    var mods = key.slice(0, key.length - 1);
    for (var i = 0; i < mods.length; i++) {
      mods[i] = modifier[mods[i].toLowerCase()];
    }
    return mods;
  }
  function getKeys(key) {
    if (typeof key !== "string")
      key = "";
    key = key.replace(/\s/g, "");
    var keys = key.split(",");
    var index = keys.lastIndexOf("");
    for (; index >= 0; ) {
      keys[index - 1] += ",";
      keys.splice(index, 1);
      index = keys.lastIndexOf("");
    }
    return keys;
  }
  function compareArray(a1, a2) {
    var arr1 = a1.length >= a2.length ? a1 : a2;
    var arr2 = a1.length >= a2.length ? a2 : a1;
    var isIndex = true;
    for (var i = 0; i < arr1.length; i++) {
      if (arr2.indexOf(arr1[i]) === -1)
        isIndex = false;
    }
    return isIndex;
  }
  var _keyMap = {
    backspace: 8,
    tab: 9,
    clear: 12,
    enter: 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    "\u21EA": 20,
    ",": 188,
    ".": 190,
    "/": 191,
    "`": 192,
    "-": isff ? 173 : 189,
    "=": isff ? 61 : 187,
    ";": isff ? 59 : 186,
    "'": 222,
    "[": 219,
    "]": 221,
    "\\": 220
  };
  var _modifier = {
    // shiftKey
    "\u21E7": 16,
    shift: 16,
    // altKey
    "\u2325": 18,
    alt: 18,
    option: 18,
    // ctrlKey
    "\u2303": 17,
    ctrl: 17,
    control: 17,
    // metaKey
    "\u2318": 91,
    cmd: 91,
    command: 91
  };
  var modifierMap = {
    16: "shiftKey",
    18: "altKey",
    17: "ctrlKey",
    91: "metaKey",
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
  };
  var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
  };
  var _handlers = {};
  for (k = 1; k < 20; k++) {
    _keyMap["f".concat(k)] = 111 + k;
  }
  var k;
  var _downKeys = [];
  var winListendFocus = false;
  var _scope = "all";
  var elementHasBindEvent = [];
  var code = function code2(x) {
    return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
  };
  function setScope(scope) {
    _scope = scope || "all";
  }
  function getScope() {
    return _scope || "all";
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    var flag = true;
    if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
      flag = false;
    }
    return flag;
  }
  function isPressed(keyCode) {
    if (typeof keyCode === "string") {
      keyCode = code(keyCode);
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }
  function deleteScope(scope, newScope) {
    var handlers;
    var i;
    if (!scope)
      scope = getScope();
    for (var key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i = 0; i < handlers.length; ) {
          if (handlers[i].scope === scope)
            handlers.splice(i, 1);
          else
            i++;
        }
      }
    }
    if (getScope() === scope)
      setScope(newScope || "all");
  }
  function clearModifier(event) {
    var key = event.keyCode || event.which || event.charCode;
    var i = _downKeys.indexOf(key);
    if (i >= 0) {
      _downKeys.splice(i, 1);
    }
    if (event.key && event.key.toLowerCase() === "meta") {
      _downKeys.splice(0, _downKeys.length);
    }
    if (key === 93 || key === 224)
      key = 91;
    if (key in _mods) {
      _mods[key] = false;
      for (var k in _modifier) {
        if (_modifier[k] === key)
          hotkeys[k] = false;
      }
    }
  }
  function unbind(keysInfo) {
    if (typeof keysInfo === "undefined") {
      Object.keys(_handlers).forEach(function(key) {
        return delete _handlers[key];
      });
    } else if (Array.isArray(keysInfo)) {
      keysInfo.forEach(function(info) {
        if (info.key)
          eachUnbind(info);
      });
    } else if (typeof keysInfo === "object") {
      if (keysInfo.key)
        eachUnbind(keysInfo);
    } else if (typeof keysInfo === "string") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var scope = args[0], method2 = args[1];
      if (typeof scope === "function") {
        method2 = scope;
        scope = "";
      }
      eachUnbind({
        key: keysInfo,
        scope,
        method: method2,
        splitKey: "+"
      });
    }
  }
  var eachUnbind = function eachUnbind2(_ref) {
    var key = _ref.key, scope = _ref.scope, method2 = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
    var multipleKeys = getKeys(key);
    multipleKeys.forEach(function(originKey) {
      var unbindKeys = originKey.split(splitKey);
      var len = unbindKeys.length;
      var lastKey = unbindKeys[len - 1];
      var keyCode = lastKey === "*" ? "*" : code(lastKey);
      if (!_handlers[keyCode])
        return;
      if (!scope)
        scope = getScope();
      var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
      _handlers[keyCode] = _handlers[keyCode].filter(function(record) {
        var isMatchingMethod = method2 ? record.method === method2 : true;
        return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));
      });
    });
  };
  function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
      return;
    }
    var modifiersMatch;
    if (handler.scope === scope || handler.scope === "all") {
      modifiersMatch = handler.mods.length > 0;
      for (var y in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y)) {
          if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
            modifiersMatch = false;
          }
        }
      }
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
        if (handler.method(event, handler) === false) {
          if (event.preventDefault)
            event.preventDefault();
          else
            event.returnValue = false;
          if (event.stopPropagation)
            event.stopPropagation();
          if (event.cancelBubble)
            event.cancelBubble = true;
        }
      }
    }
  }
  function dispatch3(event, element) {
    var asterisk = _handlers["*"];
    var key = event.keyCode || event.which || event.charCode;
    if (!hotkeys.filter.call(this, event))
      return;
    if (key === 93 || key === 224)
      key = 91;
    if (_downKeys.indexOf(key) === -1 && key !== 229)
      _downKeys.push(key);
    ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
      var keyNum = modifierMap[keyName];
      if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
        _downKeys.push(keyNum);
      } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
        _downKeys.splice(_downKeys.indexOf(keyNum), 1);
      } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
        if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
          _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
        }
      }
    });
    if (key in _mods) {
      _mods[key] = true;
      for (var k in _modifier) {
        if (_modifier[k] === key)
          hotkeys[k] = true;
      }
      if (!asterisk)
        return;
    }
    for (var e in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e)) {
        _mods[e] = event[modifierMap[e]];
      }
    }
    if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
      if (_downKeys.indexOf(17) === -1) {
        _downKeys.push(17);
      }
      if (_downKeys.indexOf(18) === -1) {
        _downKeys.push(18);
      }
      _mods[17] = true;
      _mods[18] = true;
    }
    var scope = getScope();
    if (asterisk) {
      for (var i = 0; i < asterisk.length; i++) {
        if (asterisk[i].scope === scope && (event.type === "keydown" && asterisk[i].keydown || event.type === "keyup" && asterisk[i].keyup)) {
          eventHandler(event, asterisk[i], scope, element);
        }
      }
    }
    if (!(key in _handlers))
      return;
    for (var _i = 0; _i < _handlers[key].length; _i++) {
      if (event.type === "keydown" && _handlers[key][_i].keydown || event.type === "keyup" && _handlers[key][_i].keyup) {
        if (_handlers[key][_i].key) {
          var record = _handlers[key][_i];
          var splitKey = record.splitKey;
          var keyShortcut = record.key.split(splitKey);
          var _downKeysCurrent = [];
          for (var a = 0; a < keyShortcut.length; a++) {
            _downKeysCurrent.push(code(keyShortcut[a]));
          }
          if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
            eventHandler(event, record, scope, element);
          }
        }
      }
    }
  }
  function isElementBind(element) {
    return elementHasBindEvent.indexOf(element) > -1;
  }
  function hotkeys(key, option, method2) {
    _downKeys = [];
    var keys = getKeys(key);
    var mods = [];
    var scope = "all";
    var element = document;
    var i = 0;
    var keyup = false;
    var keydown = true;
    var splitKey = "+";
    var capture = false;
    if (method2 === void 0 && typeof option === "function") {
      method2 = option;
    }
    if (Object.prototype.toString.call(option) === "[object Object]") {
      if (option.scope)
        scope = option.scope;
      if (option.element)
        element = option.element;
      if (option.keyup)
        keyup = option.keyup;
      if (option.keydown !== void 0)
        keydown = option.keydown;
      if (option.capture !== void 0)
        capture = option.capture;
      if (typeof option.splitKey === "string")
        splitKey = option.splitKey;
    }
    if (typeof option === "string")
      scope = option;
    for (; i < keys.length; i++) {
      key = keys[i].split(splitKey);
      mods = [];
      if (key.length > 1)
        mods = getMods(_modifier, key);
      key = key[key.length - 1];
      key = key === "*" ? "*" : code(key);
      if (!(key in _handlers))
        _handlers[key] = [];
      _handlers[key].push({
        keyup,
        keydown,
        scope,
        mods,
        shortcut: keys[i],
        method: method2,
        key: keys[i],
        splitKey,
        element
      });
    }
    if (typeof element !== "undefined" && !isElementBind(element) && window) {
      elementHasBindEvent.push(element);
      addEvent(element, "keydown", function(e) {
        dispatch3(e, element);
      }, capture);
      if (!winListendFocus) {
        winListendFocus = true;
        addEvent(window, "focus", function() {
          _downKeys = [];
        }, capture);
      }
      addEvent(element, "keyup", function(e) {
        dispatch3(e, element);
        clearModifier(e);
      }, capture);
    }
  }
  function trigger(shortcut) {
    var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
    Object.keys(_handlers).forEach(function(key) {
      var data = _handlers[key].find(function(item) {
        return item.scope === scope && item.shortcut === shortcut;
      });
      if (data && data.method) {
        data.method();
      }
    });
  }
  var _api = {
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    isPressed,
    filter,
    trigger,
    unbind,
    keyMap: _keyMap,
    modifier: _modifier,
    modifierMap
  };
  for (a in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a)) {
      hotkeys[a] = _api[a];
    }
  }
  var a;
  if (typeof window !== "undefined") {
    _hotkeys = window.hotkeys;
    hotkeys.noConflict = function(deep) {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }
  var _hotkeys;

  // ../../../node_modules/stimulus-use/dist/index.js
  var method = (controller, methodName) => {
    const method2 = controller[methodName];
    if (typeof method2 == "function") {
      return method2;
    } else {
      return (...args) => {
      };
    }
  };
  var composeEventName = (name, controller, eventPrefix) => {
    let composedName = name;
    if (eventPrefix === true) {
      composedName = `${controller.identifier}:${name}`;
    } else if (typeof eventPrefix === "string") {
      composedName = `${eventPrefix}:${name}`;
    }
    return composedName;
  };
  var extendedEvent = (type, event, detail) => {
    const { bubbles, cancelable, composed } = event || { bubbles: true, cancelable: true, composed: true };
    if (event) {
      Object.assign(detail, { originalEvent: event });
    }
    const customEvent = new CustomEvent(type, {
      bubbles,
      cancelable,
      composed,
      detail
    });
    return customEvent;
  };
  var defaultOptions$8 = {
    dispatchEvent: true,
    eventPrefix: true,
    visibleAttribute: "isVisible"
  };
  var useIntersection = (composableController, options = {}) => {
    const controller = composableController;
    const { dispatchEvent: dispatchEvent3, eventPrefix, visibleAttribute } = Object.assign({}, defaultOptions$8, options);
    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;
    if (!controller.intersectionElements)
      controller.intersectionElements = [];
    controller.intersectionElements.push(targetElement);
    const callback = (entries) => {
      const [entry] = entries;
      if (entry.isIntersecting) {
        dispatchAppear(entry);
      } else if (targetElement.hasAttribute(visibleAttribute)) {
        dispatchDisappear(entry);
      }
    };
    const dispatchAppear = (entry) => {
      targetElement.setAttribute(visibleAttribute, "true");
      method(controller, "appear").call(controller, entry);
      if (dispatchEvent3) {
        const eventName = composeEventName("appear", controller, eventPrefix);
        const appearEvent = extendedEvent(eventName, null, { controller, entry });
        targetElement.dispatchEvent(appearEvent);
      }
    };
    const dispatchDisappear = (entry) => {
      targetElement.removeAttribute(visibleAttribute);
      method(controller, "disappear").call(controller, entry);
      if (dispatchEvent3) {
        const eventName = composeEventName("disappear", controller, eventPrefix);
        const disappearEvent = extendedEvent(eventName, null, { controller, entry });
        targetElement.dispatchEvent(disappearEvent);
      }
    };
    const controllerDisconnect = controller.disconnect.bind(controller);
    const observer = new IntersectionObserver(callback, options);
    const observe = () => {
      observer.observe(targetElement);
    };
    const unobserve = () => {
      observer.unobserve(targetElement);
    };
    const noneVisible = () => {
      return controller.intersectionElements.filter((element) => element.hasAttribute(visibleAttribute)).length === 0;
    };
    const oneVisible = () => {
      return controller.intersectionElements.filter((element) => element.hasAttribute(visibleAttribute)).length === 1;
    };
    const atLeastOneVisible = () => {
      return controller.intersectionElements.some((element) => element.hasAttribute(visibleAttribute));
    };
    const allVisible = () => {
      return controller.intersectionElements.every((element) => element.hasAttribute(visibleAttribute));
    };
    const isVisible = allVisible;
    Object.assign(controller, {
      isVisible,
      noneVisible,
      oneVisible,
      atLeastOneVisible,
      allVisible,
      disconnect() {
        unobserve();
        controllerDisconnect();
      }
    });
    observe();
    return [observe, unobserve];
  };
  var DebounceController = class extends Controller {
  };
  DebounceController.debounces = [];
  var ThrottleController = class extends Controller {
  };
  ThrottleController.throttles = [];

  // controllers/lazy_load_controller.js
  var lazy_load_controller_default = class extends application_controller_default {
    connect() {
      super.connect();
      useIntersection(this);
      this.loaded = false;
    }
    appear(entry) {
      if (!this.loaded) {
        this.element.parentNode.appendChild(this.contentTarget.content);
        this.element.parentNode.removeChild(this.element);
      }
    }
  };
  __publicField(lazy_load_controller_default, "targets", ["content"]);

  // controllers/scroll_top_controller.js
  var scroll_top_controller_default = class extends application_controller_default {
    connect() {
      this.position = this.element.dataset.scrollTop;
      this.target = this.element.dataset.target ? document.querySelector(this.element.dataset.target) : this.element;
    }
    scrollToPosition() {
      this.target.scrollTop = this.position;
    }
  };

  // controllers/poll_fragment_controller.js
  var poll_fragment_controller_default = class extends application_controller_default {
    initialize() {
      this.polling = this.element.dataset.polling === "true";
      this.url = this.element.dataset.pollUrl;
      this.id = this.element.id;
    }
    connect() {
      super.connect();
      if (this.polling) {
        setTimeout(() => this.update(), 3e3);
      }
    }
    start(event) {
      event.stopPropagation();
      this.update();
    }
    update() {
      fetchHTML(this.url, `#${this.id}`).then((el2) => {
        this.element.parentElement.replaceChild(el2, this.element);
      });
    }
  };
  __publicField(poll_fragment_controller_default, "targets", []);

  // controllers/select_navigation_controller.js
  var select_navigation_controller_default = class extends application_controller_default {
    goTo(event) {
      if (event.target.value !== "") {
        window.location.href = event.target.value;
      }
    }
  };

  // book.js
  var application = Application.start();
  application.register("app", application_controller_default);
  application.register("clipboard", clipboard_controller_default);
  application.register("tooltip", tooltip_controller_default);
  application.register("hotkey", hotkey_controller_default);
  application.register("untruncate", untruncate_controller_default);
  application.register("lazy-load", lazy_load_controller_default);
  application.register("scrolltop", scroll_top_controller_default);
  application.register("trigger", trigger_controller_default);
  application.register("poll-fragment", poll_fragment_controller_default);
  application.register("select-navigation", select_navigation_controller_default);
  application.register("dropdown", component_controller_default);
  application.register("modal", component_controller_default2);
  application.register("embed-facebook", component_controller_default4);
  application.register("embed-instagram", component_controller_default5);
  application.register("embed-twitter", component_controller_default6);
  application.register("public-clip-media-browser", component_controller_default7);
  application.register("video-player", component_controller_default3);
  Rails.start();
})();
/*! Bundled license information:

@mux/videojs-kit/dist/index.js:
  (**
  * @license
  * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
  * Copyright (c) 2014 David Björklund
  * Available under the MIT license
  * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
  *)
  (*!
  * Programatically add the following
  *)
  (**
  * @license
  * Video.js 7.21.2 <http://videojs.com/>
  * Copyright Brightcove, Inc. <https://www.brightcove.com/>
  * Available under Apache License Version 2.0
  * <https://github.com/videojs/video.js/blob/main/LICENSE>
  *
  * Includes vtt.js <https://github.com/mozilla/vtt.js>
  * Available under Apache License Version 2.0
  * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
  *)
  (**
  * videojs-mux
  * @version 4.6.6
  * @copyright 2022 Mux, Inc.
  * @license
  *)
  (*! @name videojs-contrib-quality-levels @version 2.1.0 @license Apache-2.0 *)

stimulus-use/dist/index.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/;
